
Main_MCU_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017230  08000250  08000250  00010250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  08017480  08017480  00027480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017bcc  08017bcc  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  08017bcc  08017bcc  00027bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017bd4  08017bd4  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017bd4  08017bd4  00027bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017bdc  08017bdc  00027bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08017be0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000278d4  20000248  08017e28  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20027b1c  08017e28  00037b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003027e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028557  00000000  00000000  000302c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047ae  00000000  00000000  00058818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002080  00000000  00000000  0005cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001952  00000000  00000000  0005f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ae0c  00000000  00000000  0006099a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a57c  00000000  00000000  0009b7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015fe9d  00000000  00000000  000c5d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a46c  00000000  00000000  00225bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0023002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000248 	.word	0x20000248
 800026c:	00000000 	.word	0x00000000
 8000270:	08017468 	.word	0x08017468

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000024c 	.word	0x2000024c
 800028c:	08017468 	.word	0x08017468

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b982 	b.w	8000ee4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d146      	bne.n	8000c96 <__udivmoddi4+0x9e>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d95e      	bls.n	8000ccc <__udivmoddi4+0xd4>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	409c      	lsls	r4, r3
 8000c20:	fa20 f202 	lsr.w	r2, r0, r2
 8000c24:	4317      	orrs	r7, r2
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	0c22      	lsrs	r2, r4, #16
 8000c30:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	fb01 f005 	mul.w	r0, r1, r5
 8000c3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x5e>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	d202      	bcs.n	8000c54 <__udivmoddi4+0x5c>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f200 8134 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000c54:	4639      	mov	r1, r7
 8000c56:	1a12      	subs	r2, r2, r0
 8000c58:	b2a4      	uxth	r4, r4
 8000c5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c62:	fb00 f505 	mul.w	r5, r0, r5
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	42a5      	cmp	r5, r4
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x88>
 8000c6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x86>
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	f200 8119 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000c7e:	4610      	mov	r0, r2
 8000c80:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c84:	1b64      	subs	r4, r4, r5
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11e      	cbz	r6, 8000c92 <__udivmoddi4+0x9a>
 8000c8a:	40dc      	lsrs	r4, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0xb4>
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	f000 80fc 	beq.w	8000e98 <__udivmoddi4+0x2a0>
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cac:	fab3 f183 	clz	r1, r3
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d14c      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cb4:	42ab      	cmp	r3, r5
 8000cb6:	f0c0 80f2 	bcc.w	8000e9e <__udivmoddi4+0x2a6>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f240 80ef 	bls.w	8000e9e <__udivmoddi4+0x2a6>
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e5      	beq.n	8000c92 <__udivmoddi4+0x9a>
 8000cc6:	e9c6 4700 	strd	r4, r7, [r6]
 8000cca:	e7e2      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xd8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f382 	clz	r3, r2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f040 809f 	bne.w	8000e18 <__udivmoddi4+0x220>
 8000cda:	1a8a      	subs	r2, r1, r2
 8000cdc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ce0:	fa1f f78c 	uxth.w	r7, ip
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 f5fe 	udiv	r5, r2, lr
 8000cea:	fb0e 2015 	mls	r0, lr, r5, r2
 8000cee:	0c22      	lsrs	r2, r4, #16
 8000cf0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf4:	fb07 f005 	mul.w	r0, r7, r5
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d90f      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	bf2c      	ite	cs
 8000d06:	f04f 0901 	movcs.w	r9, #1
 8000d0a:	f04f 0900 	movcc.w	r9, #0
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d903      	bls.n	8000d1a <__udivmoddi4+0x122>
 8000d12:	f1b9 0f00 	cmp.w	r9, #0
 8000d16:	f000 80ce 	beq.w	8000eb6 <__udivmoddi4+0x2be>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d24:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d28:	fb00 f707 	mul.w	r7, r0, r7
 8000d2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	42a7      	cmp	r7, r4
 8000d40:	f200 80b3 	bhi.w	8000eaa <__udivmoddi4+0x2b2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	1be4      	subs	r4, r4, r7
 8000d48:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4c:	e79c      	b.n	8000c88 <__udivmoddi4+0x90>
 8000d4e:	f1c1 0420 	rsb	r4, r1, #32
 8000d52:	408b      	lsls	r3, r1
 8000d54:	fa05 fc01 	lsl.w	ip, r5, r1
 8000d58:	fa22 f704 	lsr.w	r7, r2, r4
 8000d5c:	40e5      	lsrs	r5, r4
 8000d5e:	408a      	lsls	r2, r1
 8000d60:	431f      	orrs	r7, r3
 8000d62:	fa20 f304 	lsr.w	r3, r0, r4
 8000d66:	4088      	lsls	r0, r1
 8000d68:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d78:	fbb5 fef8 	udiv	lr, r5, r8
 8000d7c:	fb08 551e 	mls	r5, r8, lr, r5
 8000d80:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a9      	cmp	r9, r5
 8000d8a:	d90e      	bls.n	8000daa <__udivmoddi4+0x1b2>
 8000d8c:	197d      	adds	r5, r7, r5
 8000d8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d92:	bf2c      	ite	cs
 8000d94:	f04f 0b01 	movcs.w	fp, #1
 8000d98:	f04f 0b00 	movcc.w	fp, #0
 8000d9c:	45a9      	cmp	r9, r5
 8000d9e:	d903      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000da0:	f1bb 0f00 	cmp.w	fp, #0
 8000da4:	f000 808d 	beq.w	8000ec2 <__udivmoddi4+0x2ca>
 8000da8:	46d6      	mov	lr, sl
 8000daa:	eba5 0509 	sub.w	r5, r5, r9
 8000dae:	fa1f f983 	uxth.w	r9, r3
 8000db2:	fbb5 f3f8 	udiv	r3, r5, r8
 8000db6:	fb08 5513 	mls	r5, r8, r3, r5
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dc2:	45ac      	cmp	ip, r5
 8000dc4:	d906      	bls.n	8000dd4 <__udivmoddi4+0x1dc>
 8000dc6:	197d      	adds	r5, r7, r5
 8000dc8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dcc:	d201      	bcs.n	8000dd2 <__udivmoddi4+0x1da>
 8000dce:	45ac      	cmp	ip, r5
 8000dd0:	d87e      	bhi.n	8000ed0 <__udivmoddi4+0x2d8>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dd8:	eba5 050c 	sub.w	r5, r5, ip
 8000ddc:	fba3 9802 	umull	r9, r8, r3, r2
 8000de0:	4545      	cmp	r5, r8
 8000de2:	46ce      	mov	lr, r9
 8000de4:	46c4      	mov	ip, r8
 8000de6:	d302      	bcc.n	8000dee <__udivmoddi4+0x1f6>
 8000de8:	d106      	bne.n	8000df8 <__udivmoddi4+0x200>
 8000dea:	4548      	cmp	r0, r9
 8000dec:	d204      	bcs.n	8000df8 <__udivmoddi4+0x200>
 8000dee:	3b01      	subs	r3, #1
 8000df0:	ebb9 0e02 	subs.w	lr, r9, r2
 8000df4:	eb68 0c07 	sbc.w	ip, r8, r7
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d06f      	beq.n	8000edc <__udivmoddi4+0x2e4>
 8000dfc:	ebb0 020e 	subs.w	r2, r0, lr
 8000e00:	eb65 050c 	sbc.w	r5, r5, ip
 8000e04:	40ca      	lsrs	r2, r1
 8000e06:	fa05 f404 	lsl.w	r4, r5, r4
 8000e0a:	40cd      	lsrs	r5, r1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	4314      	orrs	r4, r2
 8000e10:	2100      	movs	r1, #0
 8000e12:	e9c6 4500 	strd	r4, r5, [r6]
 8000e16:	e73c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000e18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e1c:	f1c3 0220 	rsb	r2, r3, #32
 8000e20:	4099      	lsls	r1, r3
 8000e22:	409c      	lsls	r4, r3
 8000e24:	40d5      	lsrs	r5, r2
 8000e26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e36:	430a      	orrs	r2, r1
 8000e38:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f507 	mul.w	r5, r0, r7
 8000e46:	428d      	cmp	r5, r1
 8000e48:	d90e      	bls.n	8000e68 <__udivmoddi4+0x270>
 8000e4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e52:	bf2c      	ite	cs
 8000e54:	f04f 0901 	movcs.w	r9, #1
 8000e58:	f04f 0900 	movcc.w	r9, #0
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d902      	bls.n	8000e66 <__udivmoddi4+0x26e>
 8000e60:	f1b9 0f00 	cmp.w	r9, #0
 8000e64:	d031      	beq.n	8000eca <__udivmoddi4+0x2d2>
 8000e66:	4640      	mov	r0, r8
 8000e68:	1b49      	subs	r1, r1, r5
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000e70:	fb0e 1115 	mls	r1, lr, r5, r1
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	fb05 f107 	mul.w	r1, r5, r7
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x298>
 8000e80:	eb1c 0202 	adds.w	r2, ip, r2
 8000e84:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e8a:	4291      	cmp	r1, r2
 8000e8c:	d823      	bhi.n	8000ed6 <__udivmoddi4+0x2de>
 8000e8e:	4645      	mov	r5, r8
 8000e90:	1a52      	subs	r2, r2, r1
 8000e92:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e96:	e726      	b.n	8000ce6 <__udivmoddi4+0xee>
 8000e98:	4631      	mov	r1, r6
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	e6f9      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000e9e:	1a84      	subs	r4, r0, r2
 8000ea0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	4617      	mov	r7, r2
 8000ea8:	e70b      	b.n	8000cc2 <__udivmoddi4+0xca>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e74a      	b.n	8000d46 <__udivmoddi4+0x14e>
 8000eb0:	4464      	add	r4, ip
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	e6e4      	b.n	8000c80 <__udivmoddi4+0x88>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	3902      	subs	r1, #2
 8000ebe:	4462      	add	r2, ip
 8000ec0:	e6c9      	b.n	8000c56 <__udivmoddi4+0x5e>
 8000ec2:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec6:	443d      	add	r5, r7
 8000ec8:	e76f      	b.n	8000daa <__udivmoddi4+0x1b2>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4461      	add	r1, ip
 8000ece:	e7cb      	b.n	8000e68 <__udivmoddi4+0x270>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	443d      	add	r5, r7
 8000ed4:	e77e      	b.n	8000dd4 <__udivmoddi4+0x1dc>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	e7d9      	b.n	8000e90 <__udivmoddi4+0x298>
 8000edc:	4618      	mov	r0, r3
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e6d7      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_ZSt3abse>:
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline _GLIBCXX_CONSTEXPR long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	ed87 0b00 	vstr	d0, [r7]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000efa:	ec43 2b17 	vmov	d7, r2, r3
 8000efe:	eeb0 0a47 	vmov.f32	s0, s14
 8000f02:	eef0 0a67 	vmov.f32	s1, s15
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_ZSt3powee>:
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline _GLIBCXX_CONSTEXPR long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f1a:	ed87 1b00 	vstr	d1, [r7]
 8000f1e:	ed97 1b00 	vldr	d1, [r7]
 8000f22:	ed97 0b02 	vldr	d0, [r7, #8]
 8000f26:	f011 fe5c 	bl	8012be2 <powl>
 8000f2a:	eeb0 7a40 	vmov.f32	s14, s0
 8000f2e:	eef0 7a60 	vmov.f32	s15, s1
 8000f32:	eeb0 0a47 	vmov.f32	s0, s14
 8000f36:	eef0 0a67 	vmov.f32	s1, s15
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f44:	f3bf 8f4f 	dsb	sy
}
 8000f48:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <__NVIC_SystemReset+0x24>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f52:	4904      	ldr	r1, [pc, #16]	; (8000f64 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_SystemReset+0x28>)
 8000f56:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f58:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5a:	f3bf 8f4f 	dsb	sy
}
 8000f5e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <__NVIC_SystemReset+0x20>
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	05fa0004 	.word	0x05fa0004
 8000f6c:	00000000 	.word	0x00000000

08000f70 <_Z7radiansd>:

extern RTC_HandleTypeDef hrtc;

extern PCD_HandleTypeDef hpcd_USB_DRD_FS;

double radians(double angle){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	ed87 0b00 	vstr	d0, [r7]
	return (angle*PI)/180;
 8000f7a:	a30e      	add	r3, pc, #56	; (adr r3, 8000fb4 <_Z7radiansd+0x44>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f84:	f7ff fb48 	bl	8000618 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <_Z7radiansd+0x40>)
 8000f96:	f7ff fc69 	bl	800086c <__aeabi_ddiv>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa6:	eef0 0a67 	vmov.f32	s1, s15
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40668000 	.word	0x40668000
 8000fb4:	54442d18 	.word	0x54442d18
 8000fb8:	400921fb 	.word	0x400921fb

08000fbc <_ZN15Lidar_functions16process_rotationEv>:
	uint8_t last_connected = 0;
	uint8_t normal_working = 0;
	uint32_t last_conversion = 0;
	uint8_t disconnected = 0;

	void process_rotation(){
 8000fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
		memcpy(lidar_points_processed_old, lidar_points_processed, points_amount);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 439e 	add.w	r3, r3, #20224	; 0x4f00
 8000fcc:	3308      	adds	r3, #8
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	f502 51e8 	add.w	r1, r2, #7424	; 0x1d00
 8000fd4:	3108      	adds	r1, #8
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8000fdc:	f8b2 2108 	ldrh.w	r2, [r2, #264]	; 0x108
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f014 fb64 	bl	80156ae <memcpy>
		points_amount_old = points_amount;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000fec:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000ff6:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
		points_amount = 0;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001000:	2200      	movs	r2, #0
 8001002:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108

		for (int i=0; i<current_point; i++){
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e125      	b.n	8001258 <_ZN15Lidar_functions16process_rotationEv+0x29c>
			if (lidar_points[i].distance > 50 && lidar_points[i].distance < 2000){
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b9b      	ldr	r3, [pc, #620]	; (8001290 <_ZN15Lidar_functions16process_rotationEv+0x2d4>)
 8001022:	f7ff fd89 	bl	8000b38 <__aeabi_dcmpgt>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 8112 	beq.w	8001252 <_ZN15Lidar_functions16process_rotationEv+0x296>
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4413      	add	r3, r2
 8001036:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800103a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b94      	ldr	r3, [pc, #592]	; (8001294 <_ZN15Lidar_functions16process_rotationEv+0x2d8>)
 8001044:	f7ff fd5a 	bl	8000afc <__aeabi_dcmplt>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8101 	beq.w	8001252 <_ZN15Lidar_functions16process_rotationEv+0x296>
				lidar_points_processed[points_amount].angle = lidar_points[i].angle;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001056:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 800105a:	461e      	mov	r6, r3
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3340      	adds	r3, #64	; 0x40
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4413      	add	r3, r2
 8001066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	0173      	lsls	r3, r6, #5
 800106e:	4413      	add	r3, r2
 8001070:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8001074:	3308      	adds	r3, #8
 8001076:	e9c3 0100 	strd	r0, r1, [r3]
				lidar_points_processed[points_amount].distance = lidar_points[i].distance;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001080:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8001084:	461e      	mov	r6, r3
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001092:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	0173      	lsls	r3, r6, #5
 800109a:	4413      	add	r3, r2
 800109c:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80010a0:	3310      	adds	r3, #16
 80010a2:	e9c3 0100 	strd	r0, r1, [r3]
				lidar_points_processed[points_amount].x = -(lidar_points_processed[points_amount].distance - 20) * cos(radians(lidar_points_processed[points_amount].angle)) * invert;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010ac:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	015b      	lsls	r3, r3, #5
 80010b4:	4413      	add	r3, r2
 80010b6:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80010ba:	3310      	adds	r3, #16
 80010bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b74      	ldr	r3, [pc, #464]	; (8001298 <_ZN15Lidar_functions16process_rotationEv+0x2dc>)
 80010c6:	f7ff f8ef 	bl	80002a8 <__aeabi_dsub>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4614      	mov	r4, r2
 80010d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010da:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	015b      	lsls	r3, r3, #5
 80010e2:	4413      	add	r3, r2
 80010e4:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80010e8:	3308      	adds	r3, #8
 80010ea:	ed93 7b00 	vldr	d7, [r3]
 80010ee:	eeb0 0a47 	vmov.f32	s0, s14
 80010f2:	eef0 0a67 	vmov.f32	s1, s15
 80010f6:	f7ff ff3b 	bl	8000f70 <_Z7radiansd>
 80010fa:	eeb0 7a40 	vmov.f32	s14, s0
 80010fe:	eef0 7a60 	vmov.f32	s15, s1
 8001102:	eeb0 0a47 	vmov.f32	s0, s14
 8001106:	eef0 0a67 	vmov.f32	s1, s15
 800110a:	f011 fddd 	bl	8012cc8 <cos>
 800110e:	ec53 2b10 	vmov	r2, r3, d0
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff fa7f 	bl	8000618 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4690      	mov	r8, r2
 8001120:	4699      	mov	r9, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001128:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa09 	bl	8000544 <__aeabi_i2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800113c:	f8b1 1108 	ldrh.w	r1, [r1, #264]	; 0x108
 8001140:	460e      	mov	r6, r1
 8001142:	4640      	mov	r0, r8
 8001144:	4649      	mov	r1, r9
 8001146:	f7ff fa67 	bl	8000618 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	0173      	lsls	r3, r6, #5
 8001156:	4413      	add	r3, r2
 8001158:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 800115c:	3318      	adds	r3, #24
 800115e:	e9c3 0100 	strd	r0, r1, [r3]
				lidar_points_processed[points_amount].y = (lidar_points_processed[points_amount].distance - 20) * sin(radians(lidar_points_processed[points_amount].angle)) * invert + y_shift;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001168:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	015b      	lsls	r3, r3, #5
 8001170:	4413      	add	r3, r2
 8001172:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8001176:	3310      	adds	r3, #16
 8001178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b45      	ldr	r3, [pc, #276]	; (8001298 <_ZN15Lidar_functions16process_rotationEv+0x2dc>)
 8001182:	f7ff f891 	bl	80002a8 <__aeabi_dsub>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4690      	mov	r8, r2
 800118c:	4699      	mov	r9, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001194:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	015b      	lsls	r3, r3, #5
 800119c:	4413      	add	r3, r2
 800119e:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80011a2:	3308      	adds	r3, #8
 80011a4:	ed93 7b00 	vldr	d7, [r3]
 80011a8:	eeb0 0a47 	vmov.f32	s0, s14
 80011ac:	eef0 0a67 	vmov.f32	s1, s15
 80011b0:	f7ff fede 	bl	8000f70 <_Z7radiansd>
 80011b4:	eeb0 7a40 	vmov.f32	s14, s0
 80011b8:	eef0 7a60 	vmov.f32	s15, s1
 80011bc:	eeb0 0a47 	vmov.f32	s0, s14
 80011c0:	eef0 0a67 	vmov.f32	s1, s15
 80011c4:	f011 fde0 	bl	8012d88 <sin>
 80011c8:	ec53 2b10 	vmov	r2, r3, d0
 80011cc:	4640      	mov	r0, r8
 80011ce:	4649      	mov	r1, r9
 80011d0:	f7ff fa22 	bl	8000618 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4690      	mov	r8, r2
 80011da:	4699      	mov	r9, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011e2:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9ac 	bl	8000544 <__aeabi_i2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4640      	mov	r0, r8
 80011f2:	4649      	mov	r1, r9
 80011f4:	f7ff fa10 	bl	8000618 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4690      	mov	r8, r2
 80011fe:	4699      	mov	r9, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001206:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f99a 	bl	8000544 <__aeabi_i2d>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800121a:	f8b1 1108 	ldrh.w	r1, [r1, #264]	; 0x108
 800121e:	460e      	mov	r6, r1
 8001220:	4640      	mov	r0, r8
 8001222:	4649      	mov	r1, r9
 8001224:	f7ff f842 	bl	80002ac <__adddf3>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f106 01e9 	add.w	r1, r6, #233	; 0xe9
 8001232:	0149      	lsls	r1, r1, #5
 8001234:	4401      	add	r1, r0
 8001236:	e9c1 2300 	strd	r2, r3, [r1]
				points_amount++;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001240:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8001244:	3301      	adds	r3, #1
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800124e:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		for (int i=0; i<current_point; i++){
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125e:	f8b3 3d00 	ldrh.w	r3, [r3, #3328]	; 0xd00
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4293      	cmp	r3, r2
 8001268:	f6ff aed0 	blt.w	800100c <_ZN15Lidar_functions16process_rotationEv+0x50>
			}
		}
		current_point = 0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001272:	2200      	movs	r2, #0
 8001274:	f8a3 2d00 	strh.w	r2, [r3, #3328]	; 0xd00
		new_rotation = 1;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04

	}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800128e:	bf00      	nop
 8001290:	40490000 	.word	0x40490000
 8001294:	409f4000 	.word	0x409f4000
 8001298:	40340000 	.word	0x40340000
 800129c:	00000000 	.word	0x00000000

080012a0 <_ZN15Lidar_functions21get_packet_from_lidarEv>:

	void get_packet_from_lidar(){
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
		last_packet_recieved = HAL_GetTick();
 80012a8:	f004 ff86 	bl	80061b8 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80012b4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		if (first_packet == 0){
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10c      	bne.n	80012dc <_ZN15Lidar_functions21get_packet_from_lidarEv+0x3c>
			memset(RxData, '\0', BUFFER_LENGTH);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3301      	adds	r3, #1
 80012c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f014 f960 	bl	8015592 <memset>
			first_packet = 1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
			return;
 80012da:	e1b1      	b.n	8001640 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x3a0>
		}


		int add=0;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
		while(RxData[(current_index + add)%BUFFER_LENGTH] != 0xAA && add <=BUFFER_LENGTH){
 80012e0:	e002      	b.n	80012e8 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x48>
			add++;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	3301      	adds	r3, #1
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
		while(RxData[(current_index + add)%BUFFER_LENGTH] != 0xAA && add <=BUFFER_LENGTH){
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 80012ee:	461a      	mov	r2, r3
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	441a      	add	r2, r3
 80012f4:	4ba0      	ldr	r3, [pc, #640]	; (8001578 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2d8>)
 80012f6:	fb83 1302 	smull	r1, r3, r3, r2
 80012fa:	1199      	asrs	r1, r3, #6
 80012fc:	17d3      	asrs	r3, r2, #31
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	785b      	ldrb	r3, [r3, #1]
 8001310:	2baa      	cmp	r3, #170	; 0xaa
 8001312:	d003      	beq.n	800131c <_ZN15Lidar_functions21get_packet_from_lidarEv+0x7c>
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800131a:	dde2      	ble.n	80012e2 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x42>
		}

		//printf("Add %d", add);

		memcpy(&header, RxData+(current_index + add +1)%BUFFER_LENGTH, sizeof(header));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f203 34ee 	addw	r4, r3, #1006	; 0x3ee
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	1c59      	adds	r1, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 800132c:	461a      	mov	r2, r3
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	4413      	add	r3, r2
 8001332:	3301      	adds	r3, #1
 8001334:	4a90      	ldr	r2, [pc, #576]	; (8001578 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2d8>)
 8001336:	fb82 0203 	smull	r0, r2, r2, r3
 800133a:	1190      	asrs	r0, r2, #6
 800133c:	17da      	asrs	r2, r3, #31
 800133e:	1a82      	subs	r2, r0, r2
 8001340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001344:	fb00 f202 	mul.w	r2, r0, r2
 8001348:	1a9a      	subs	r2, r3, r2
 800134a:	4613      	mov	r3, r2
 800134c:	440b      	add	r3, r1
 800134e:	2207      	movs	r2, #7
 8001350:	4619      	mov	r1, r3
 8001352:	4620      	mov	r0, r4
 8001354:	f014 f9ab 	bl	80156ae <memcpy>
		if (header.command == NORMAL_WORKING){
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 33f2 	ldrb.w	r3, [r3, #1010]	; 0x3f2
 800135e:	2bad      	cmp	r3, #173	; 0xad
 8001360:	f040 8114 	bne.w	800158c <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2ec>
			status = 1;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
			memcpy(&points_header, RxData+(current_index + add + 1 + sizeof(header))%BUFFER_LENGTH, sizeof(points_header));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f203 30f5 	addw	r0, r3, #1013	; 0x3f5
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	1c59      	adds	r1, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 8001380:	461a      	mov	r2, r3
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	4413      	add	r3, r2
 8001386:	f103 0208 	add.w	r2, r3, #8
 800138a:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2d8>)
 800138c:	fba3 4302 	umull	r4, r3, r3, r2
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001396:	fb04 f303 	mul.w	r3, r4, r3
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	440b      	add	r3, r1
 800139e:	2205      	movs	r2, #5
 80013a0:	4619      	mov	r1, r3
 80013a2:	f014 f984 	bl	80156ae <memcpy>

			lidar_RPS = points_header.RPM*0.05;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 33f5 	ldrb.w	r3, [r3, #1013]	; 0x3f5
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8c9 	bl	8000544 <__aeabi_i2d>
 80013b2:	a36d      	add	r3, pc, #436	; (adr r3, 8001568 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2c8>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f92e 	bl	8000618 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
 80013ca:	3310      	adds	r3, #16
 80013cc:	e9c3 0100 	strd	r0, r1, [r3]

			double start_angle = (points_header.start_angle_MSB*256 + points_header.start_angle_LSB)*0.01;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 33f8 	ldrb.w	r3, [r3, #1016]	; 0x3f8
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	f892 23f9 	ldrb.w	r2, [r2, #1017]	; 0x3f9
 80013de:	4413      	add	r3, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8af 	bl	8000544 <__aeabi_i2d>
 80013e6:	a362      	add	r3, pc, #392	; (adr r3, 8001570 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2d0>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f914 	bl	8000618 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			uint16_t points_in_message = (header.payload_length_LSB - 4)/3;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80013fe:	3b04      	subs	r3, #4
 8001400:	4a5e      	ldr	r2, [pc, #376]	; (800157c <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2dc>)
 8001402:	fb82 1203 	smull	r1, r2, r2, r3
 8001406:	17db      	asrs	r3, r3, #31
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	82fb      	strh	r3, [r7, #22]
			double current_angle = 0;
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c7 2302 	strd	r2, r3, [r7, #8]

			//printf("Ang %f", start_angle);

			for (int i=0; i < points_in_message; i++){
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	e091      	b.n	8001542 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2a2>
				memcpy(&lidar_point_message, RxData+(current_index + add + 1 + sizeof(header) + sizeof(points_header) + sizeof(lidar_point_message)*i)%BUFFER_LENGTH, sizeof(lidar_point_message));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f203 30fa 	addw	r0, r3, #1018	; 0x3fa
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	1c59      	adds	r1, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 800142e:	461a      	mov	r2, r3
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	4413      	add	r3, r2
 8001434:	461c      	mov	r4, r3
 8001436:	6a3a      	ldr	r2, [r7, #32]
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	4423      	add	r3, r4
 8001440:	f103 020d 	add.w	r2, r3, #13
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2d8>)
 8001446:	fba3 4302 	umull	r4, r3, r3, r2
 800144a:	099b      	lsrs	r3, r3, #6
 800144c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001450:	fb04 f303 	mul.w	r3, r4, r3
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	440b      	add	r3, r1
 8001458:	2203      	movs	r2, #3
 800145a:	4619      	mov	r1, r3
 800145c:	f014 f927 	bl	80156ae <memcpy>
				current_angle = start_angle + (24.0/points_in_message)*i;
 8001460:	8afb      	ldrh	r3, [r7, #22]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f86e 	bl	8000544 <__aeabi_i2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	f04f 0000 	mov.w	r0, #0
 8001470:	4943      	ldr	r1, [pc, #268]	; (8001580 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2e0>)
 8001472:	f7ff f9fb 	bl	800086c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4614      	mov	r4, r2
 800147c:	461d      	mov	r5, r3
 800147e:	6a38      	ldr	r0, [r7, #32]
 8001480:	f7ff f860 	bl	8000544 <__aeabi_i2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4620      	mov	r0, r4
 800148a:	4629      	mov	r1, r5
 800148c:	f7ff f8c4 	bl	8000618 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001498:	f7fe ff08 	bl	80002ac <__adddf3>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	e9c7 2302 	strd	r2, r3, [r7, #8]

				lidar_points[current_point%400].angle = current_angle;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014aa:	f8b3 3d00 	ldrh.w	r3, [r3, #3328]	; 0xd00
 80014ae:	4a35      	ldr	r2, [pc, #212]	; (8001584 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2e4>)
 80014b0:	fba2 1203 	umull	r1, r2, r2, r3
 80014b4:	09d2      	lsrs	r2, r2, #7
 80014b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80014ba:	fb01 f202 	mul.w	r2, r1, r2
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	3340      	adds	r3, #64	; 0x40
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	18d1      	adds	r1, r2, r3
 80014ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ce:	e9c1 2300 	strd	r2, r3, [r1]
				lidar_points[current_point%400].distance = (lidar_point_message.distance_MSB*256 + lidar_point_message.distance_LSB)*0.25;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 33fb 	ldrb.w	r3, [r3, #1019]	; 0x3fb
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	f892 23fc 	ldrb.w	r2, [r2, #1020]	; 0x3fc
 80014e0:	4413      	add	r3, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f82e 	bl	8000544 <__aeabi_i2d>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ee:	f8b3 3d00 	ldrh.w	r3, [r3, #3328]	; 0xd00
 80014f2:	4a24      	ldr	r2, [pc, #144]	; (8001584 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2e4>)
 80014f4:	fba2 4203 	umull	r4, r2, r2, r3
 80014f8:	09d2      	lsrs	r2, r2, #7
 80014fa:	f44f 74c8 	mov.w	r4, #400	; 0x190
 80014fe:	fb04 f202 	mul.w	r2, r4, r2
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	461c      	mov	r4, r3
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x2e8>)
 800150e:	f7ff f883 	bl	8000618 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	0121      	lsls	r1, r4, #4
 800151a:	4401      	add	r1, r0
 800151c:	f501 6181 	add.w	r1, r1, #1032	; 0x408
 8001520:	e9c1 2300 	strd	r2, r3, [r1]

				current_point ++;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152a:	f8b3 3d00 	ldrh.w	r3, [r3, #3328]	; 0xd00
 800152e:	3301      	adds	r3, #1
 8001530:	b29a      	uxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001538:	f8a3 2d00 	strh.w	r2, [r3, #3328]	; 0xd00
			for (int i=0; i < points_in_message; i++){
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	3301      	adds	r3, #1
 8001540:	623b      	str	r3, [r7, #32]
 8001542:	8afb      	ldrh	r3, [r7, #22]
 8001544:	6a3a      	ldr	r2, [r7, #32]
 8001546:	429a      	cmp	r2, r3
 8001548:	f6ff af69 	blt.w	800141e <_ZN15Lidar_functions21get_packet_from_lidarEv+0x17e>
			}

			packets_count ++;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001552:	f8b3 3d02 	ldrh.w	r3, [r3, #3330]	; 0xd02
 8001556:	3301      	adds	r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001560:	f8a3 2d02 	strh.w	r2, [r3, #3330]	; 0xd02
 8001564:	e043      	b.n	80015ee <_ZN15Lidar_functions21get_packet_from_lidarEv+0x34e>
 8001566:	bf00      	nop
 8001568:	9999999a 	.word	0x9999999a
 800156c:	3fa99999 	.word	0x3fa99999
 8001570:	47ae147b 	.word	0x47ae147b
 8001574:	3f847ae1 	.word	0x3f847ae1
 8001578:	10624dd3 	.word	0x10624dd3
 800157c:	55555556 	.word	0x55555556
 8001580:	40380000 	.word	0x40380000
 8001584:	51eb851f 	.word	0x51eb851f
 8001588:	3fd00000 	.word	0x3fd00000
		}
		else if(header.command == WRONG_SPEED){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 33f2 	ldrb.w	r3, [r3, #1010]	; 0x3f2
 8001592:	2bae      	cmp	r3, #174	; 0xae
 8001594:	d12b      	bne.n	80015ee <_ZN15Lidar_functions21get_packet_from_lidarEv+0x34e>
			status = 0;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
			lidar_RPS = RxData[(current_index + add + 1 + sizeof(header))%BUFFER_LENGTH]*0.05;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 80015a8:	461a      	mov	r2, r3
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	4413      	add	r3, r2
 80015ae:	f103 0208 	add.w	r2, r3, #8
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x3b0>)
 80015b4:	fba3 1302 	umull	r1, r3, r3, r2
 80015b8:	099b      	lsrs	r3, r3, #6
 80015ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffba 	bl	8000544 <__aeabi_i2d>
 80015d0:	a31d      	add	r3, pc, #116	; (adr r3, 8001648 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x3a8>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7ff f81f 	bl	8000618 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
 80015e8:	3310      	adds	r3, #16
 80015ea:	e9c3 0100 	strd	r0, r1, [r3]
		}

		current_index += add + header.length_MSB*256 + header.length_LSB;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b299      	uxth	r1, r3
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	b29b      	uxth	r3, r3
 8001604:	440b      	add	r3, r1
 8001606:	b299      	uxth	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 33ef 	ldrb.w	r3, [r3, #1007]	; 0x3ef
 800160e:	b29b      	uxth	r3, r3
 8001610:	440b      	add	r3, r1
 8001612:	b29b      	uxth	r3, r3
 8001614:	4413      	add	r3, r2
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
		current_index = current_index % BUFFER_LENGTH;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <_ZN15Lidar_functions21get_packet_from_lidarEv+0x3b0>)
 8001626:	fba2 1203 	umull	r1, r2, r2, r3
 800162a:	0992      	lsrs	r2, r2, #6
 800162c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001630:	fb01 f202 	mul.w	r2, r1, r2
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
		//printf("\n");
		return;
 800163e:	bf00      	nop
	}
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bdb0      	pop	{r4, r5, r7, pc}
 8001646:	bf00      	nop
 8001648:	9999999a 	.word	0x9999999a
 800164c:	3fa99999 	.word	0x3fa99999
 8001650:	10624dd3 	.word	0x10624dd3

08001654 <_ZN15Lidar_functions4tickEv>:

	void tick(){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
		if (packet_recieved > 0){
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8001662:	2b00      	cmp	r3, #0
			if (status == 0){
				//printf("Error %f \n", lidar_RPS);
			}
			//packet_recieved --;
		}
		if (packets_count >= 15){
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	f8b3 3d02 	ldrh.w	r3, [r3, #3330]	; 0xd02
 800166e:	2b0e      	cmp	r3, #14
 8001670:	d910      	bls.n	8001694 <_ZN15Lidar_functions4tickEv+0x40>
			//printf("%d ", current_point);
			process_rotation();
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fca2 	bl	8000fbc <_ZN15Lidar_functions16process_rotationEv>
			printf("%d ", HAL_GetTick() - last_conversion);
			printf("%d ", points_amount);
			printf("%d ", packet_recieved);
			printf("%f \n", lidar_RPS);*/

			last_conversion = HAL_GetTick();
 8001678:	f004 fd9e 	bl	80061b8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001684:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			packets_count = 0;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168e:	2200      	movs	r2, #0
 8001690:	f8a3 2d02 	strh.w	r2, [r3, #3330]	; 0xd02
		}
	}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_ZN15Lidar_functions11reset_lidarEv>:

	void reset_lidar(){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
		memset(RxData, '\0', BUFFER_LENGTH);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3301      	adds	r3, #1
 80016a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f013 ff6f 	bl	8015592 <memset>
		current_index = 0;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
		packet_recieved = 0;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
		first_packet = 0;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
		current_point = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8a3 2d00 	strh.w	r2, [r3, #3328]	; 0xd00
		connected = 1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_ZN15Lidar_functions24update_connection_statusEv>:

	void update_connection_status(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
		if (HAL_GPIO_ReadPin(connect_det_ports[lidar_index - 1], connect_det_pins[lidar_index - 1]) == 0 && last_connected == 0 && connected == 0){
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a92      	ldr	r2, [pc, #584]	; (8001944 <_ZN15Lidar_functions24update_connection_statusEv+0x258>)
 80016fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	4990      	ldr	r1, [pc, #576]	; (8001948 <_ZN15Lidar_functions24update_connection_statusEv+0x25c>)
 8001708:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800170c:	4619      	mov	r1, r3
 800170e:	4610      	mov	r0, r2
 8001710:	f006 fb24 	bl	8007d5c <HAL_GPIO_ReadPin>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <_ZN15Lidar_functions24update_connection_statusEv+0x4e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001720:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001724:	2b00      	cmp	r3, #0
 8001726:	d108      	bne.n	800173a <_ZN15Lidar_functions24update_connection_statusEv+0x4e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800172e:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <_ZN15Lidar_functions24update_connection_statusEv+0x4e>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <_ZN15Lidar_functions24update_connection_statusEv+0x50>
 800173a:	2300      	movs	r3, #0
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 813d 	beq.w	80019bc <_ZN15Lidar_functions24update_connection_statusEv+0x2d0>
			HAL_GPIO_WritePin(connect_led_ports[lidar_index - 1], connect_led_pins[lidar_index - 1], GPIO_PIN_SET);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	3b01      	subs	r3, #1
 8001748:	4a80      	ldr	r2, [pc, #512]	; (800194c <_ZN15Lidar_functions24update_connection_statusEv+0x260>)
 800174a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	4a7e      	ldr	r2, [pc, #504]	; (8001950 <_ZN15Lidar_functions24update_connection_statusEv+0x264>)
 8001756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175a:	2201      	movs	r2, #1
 800175c:	4619      	mov	r1, r3
 800175e:	f006 fb15 	bl	8007d8c <HAL_GPIO_WritePin>
			reset_lidar();
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ff9a 	bl	800169c <_ZN15Lidar_functions11reset_lidarEv>
			
			if (disconnected){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800176e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80ca 	beq.w	800190c <_ZN15Lidar_functions24update_connection_statusEv+0x220>
				__HAL_TIM_SET_COMPARE(&htim4, timer_channels[0], 0);
 8001778:	4b76      	ldr	r3, [pc, #472]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d104      	bne.n	800178a <_ZN15Lidar_functions24update_connection_statusEv+0x9e>
 8001780:	4b75      	ldr	r3, [pc, #468]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
 8001788:	e027      	b.n	80017da <_ZN15Lidar_functions24update_connection_statusEv+0xee>
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d104      	bne.n	800179c <_ZN15Lidar_functions24update_connection_statusEv+0xb0>
 8001792:	4b71      	ldr	r3, [pc, #452]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	639a      	str	r2, [r3, #56]	; 0x38
 800179a:	e01e      	b.n	80017da <_ZN15Lidar_functions24update_connection_statusEv+0xee>
 800179c:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d104      	bne.n	80017ae <_ZN15Lidar_functions24update_connection_statusEv+0xc2>
 80017a4:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2200      	movs	r2, #0
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80017ac:	e015      	b.n	80017da <_ZN15Lidar_functions24update_connection_statusEv+0xee>
 80017ae:	4b69      	ldr	r3, [pc, #420]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d104      	bne.n	80017c0 <_ZN15Lidar_functions24update_connection_statusEv+0xd4>
 80017b6:	4b68      	ldr	r3, [pc, #416]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
 80017be:	e00c      	b.n	80017da <_ZN15Lidar_functions24update_connection_statusEv+0xee>
 80017c0:	4b64      	ldr	r3, [pc, #400]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	2b10      	cmp	r3, #16
 80017c6:	d104      	bne.n	80017d2 <_ZN15Lidar_functions24update_connection_statusEv+0xe6>
 80017c8:	4b63      	ldr	r3, [pc, #396]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	649a      	str	r2, [r3, #72]	; 0x48
 80017d0:	e003      	b.n	80017da <_ZN15Lidar_functions24update_connection_statusEv+0xee>
 80017d2:	4b61      	ldr	r3, [pc, #388]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	64da      	str	r2, [r3, #76]	; 0x4c
				__HAL_TIM_SET_COMPARE(&htim4, timer_channels[1], 0);
 80017da:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 80017dc:	885b      	ldrh	r3, [r3, #2]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d104      	bne.n	80017ec <_ZN15Lidar_functions24update_connection_statusEv+0x100>
 80017e2:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	e027      	b.n	800183c <_ZN15Lidar_functions24update_connection_statusEv+0x150>
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 80017ee:	885b      	ldrh	r3, [r3, #2]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d104      	bne.n	80017fe <_ZN15Lidar_functions24update_connection_statusEv+0x112>
 80017f4:	4b58      	ldr	r3, [pc, #352]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2200      	movs	r2, #0
 80017fa:	639a      	str	r2, [r3, #56]	; 0x38
 80017fc:	e01e      	b.n	800183c <_ZN15Lidar_functions24update_connection_statusEv+0x150>
 80017fe:	4b55      	ldr	r3, [pc, #340]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 8001800:	885b      	ldrh	r3, [r3, #2]
 8001802:	2b08      	cmp	r3, #8
 8001804:	d104      	bne.n	8001810 <_ZN15Lidar_functions24update_connection_statusEv+0x124>
 8001806:	4b54      	ldr	r3, [pc, #336]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c
 800180e:	e015      	b.n	800183c <_ZN15Lidar_functions24update_connection_statusEv+0x150>
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 8001812:	885b      	ldrh	r3, [r3, #2]
 8001814:	2b0c      	cmp	r3, #12
 8001816:	d104      	bne.n	8001822 <_ZN15Lidar_functions24update_connection_statusEv+0x136>
 8001818:	4b4f      	ldr	r3, [pc, #316]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	641a      	str	r2, [r3, #64]	; 0x40
 8001820:	e00c      	b.n	800183c <_ZN15Lidar_functions24update_connection_statusEv+0x150>
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 8001824:	885b      	ldrh	r3, [r3, #2]
 8001826:	2b10      	cmp	r3, #16
 8001828:	d104      	bne.n	8001834 <_ZN15Lidar_functions24update_connection_statusEv+0x148>
 800182a:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	649a      	str	r2, [r3, #72]	; 0x48
 8001832:	e003      	b.n	800183c <_ZN15Lidar_functions24update_connection_statusEv+0x150>
 8001834:	4b48      	ldr	r3, [pc, #288]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2200      	movs	r2, #0
 800183a:	64da      	str	r2, [r3, #76]	; 0x4c
				__HAL_TIM_SET_COMPARE(&htim4, timer_channels[2], 0);
 800183c:	4b45      	ldr	r3, [pc, #276]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 800183e:	889b      	ldrh	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <_ZN15Lidar_functions24update_connection_statusEv+0x162>
 8001844:	4b44      	ldr	r3, [pc, #272]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	635a      	str	r2, [r3, #52]	; 0x34
 800184c:	e027      	b.n	800189e <_ZN15Lidar_functions24update_connection_statusEv+0x1b2>
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 8001850:	889b      	ldrh	r3, [r3, #4]
 8001852:	2b04      	cmp	r3, #4
 8001854:	d104      	bne.n	8001860 <_ZN15Lidar_functions24update_connection_statusEv+0x174>
 8001856:	4b40      	ldr	r3, [pc, #256]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
 800185e:	e01e      	b.n	800189e <_ZN15Lidar_functions24update_connection_statusEv+0x1b2>
 8001860:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 8001862:	889b      	ldrh	r3, [r3, #4]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d104      	bne.n	8001872 <_ZN15Lidar_functions24update_connection_statusEv+0x186>
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2200      	movs	r2, #0
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001870:	e015      	b.n	800189e <_ZN15Lidar_functions24update_connection_statusEv+0x1b2>
 8001872:	4b38      	ldr	r3, [pc, #224]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 8001874:	889b      	ldrh	r3, [r3, #4]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d104      	bne.n	8001884 <_ZN15Lidar_functions24update_connection_statusEv+0x198>
 800187a:	4b37      	ldr	r3, [pc, #220]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
 8001882:	e00c      	b.n	800189e <_ZN15Lidar_functions24update_connection_statusEv+0x1b2>
 8001884:	4b33      	ldr	r3, [pc, #204]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 8001886:	889b      	ldrh	r3, [r3, #4]
 8001888:	2b10      	cmp	r3, #16
 800188a:	d104      	bne.n	8001896 <_ZN15Lidar_functions24update_connection_statusEv+0x1aa>
 800188c:	4b32      	ldr	r3, [pc, #200]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	649a      	str	r2, [r3, #72]	; 0x48
 8001894:	e003      	b.n	800189e <_ZN15Lidar_functions24update_connection_statusEv+0x1b2>
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	64da      	str	r2, [r3, #76]	; 0x4c
				__HAL_TIM_SET_COMPARE(&htim4, timer_channels[3], 0);
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 80018a0:	88db      	ldrh	r3, [r3, #6]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d104      	bne.n	80018b0 <_ZN15Lidar_functions24update_connection_statusEv+0x1c4>
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	635a      	str	r2, [r3, #52]	; 0x34
 80018ae:	e027      	b.n	8001900 <_ZN15Lidar_functions24update_connection_statusEv+0x214>
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 80018b2:	88db      	ldrh	r3, [r3, #6]
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d104      	bne.n	80018c2 <_ZN15Lidar_functions24update_connection_statusEv+0x1d6>
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2200      	movs	r2, #0
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
 80018c0:	e01e      	b.n	8001900 <_ZN15Lidar_functions24update_connection_statusEv+0x214>
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 80018c4:	88db      	ldrh	r3, [r3, #6]
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d104      	bne.n	80018d4 <_ZN15Lidar_functions24update_connection_statusEv+0x1e8>
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80018d2:	e015      	b.n	8001900 <_ZN15Lidar_functions24update_connection_statusEv+0x214>
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 80018d6:	88db      	ldrh	r3, [r3, #6]
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	d104      	bne.n	80018e6 <_ZN15Lidar_functions24update_connection_statusEv+0x1fa>
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
 80018e4:	e00c      	b.n	8001900 <_ZN15Lidar_functions24update_connection_statusEv+0x214>
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 80018e8:	88db      	ldrh	r3, [r3, #6]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d104      	bne.n	80018f8 <_ZN15Lidar_functions24update_connection_statusEv+0x20c>
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2200      	movs	r2, #0
 80018f4:	649a      	str	r2, [r3, #72]	; 0x48
 80018f6:	e003      	b.n	8001900 <_ZN15Lidar_functions24update_connection_statusEv+0x214>
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	64da      	str	r2, [r3, #76]	; 0x4c
				HAL_Delay(1000);
 8001900:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001904:	f004 fc64 	bl	80061d0 <HAL_Delay>
				__NVIC_SystemReset();
 8001908:	f7ff fb1a 	bl	8000f40 <__NVIC_SystemReset>
			}
			
			__HAL_TIM_SET_COMPARE(&htim4, timer_channels[lidar_index - 1], LIDAR_SPEED);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	3b01      	subs	r3, #1
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 8001914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <_ZN15Lidar_functions24update_connection_statusEv+0x23c>
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f240 5246 	movw	r2, #1350	; 0x546
 8001924:	635a      	str	r2, [r3, #52]	; 0x34
 8001926:	e0d0      	b.n	8001aca <_ZN15Lidar_functions24update_connection_statusEv+0x3de>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	3b01      	subs	r3, #1
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <_ZN15Lidar_functions24update_connection_statusEv+0x268>)
 8001930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001934:	2b04      	cmp	r3, #4
 8001936:	d111      	bne.n	800195c <_ZN15Lidar_functions24update_connection_statusEv+0x270>
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <_ZN15Lidar_functions24update_connection_statusEv+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f240 5246 	movw	r2, #1350	; 0x546
 8001940:	639a      	str	r2, [r3, #56]	; 0x38
 8001942:	e0c2      	b.n	8001aca <_ZN15Lidar_functions24update_connection_statusEv+0x3de>
 8001944:	20000000 	.word	0x20000000
 8001948:	20000010 	.word	0x20000010
 800194c:	20000018 	.word	0x20000018
 8001950:	20000028 	.word	0x20000028
 8001954:	20000048 	.word	0x20000048
 8001958:	20026fc8 	.word	0x20026fc8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	3b01      	subs	r3, #1
 8001962:	4a8d      	ldr	r2, [pc, #564]	; (8001b98 <_ZN15Lidar_functions24update_connection_statusEv+0x4ac>)
 8001964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001968:	2b08      	cmp	r3, #8
 800196a:	d105      	bne.n	8001978 <_ZN15Lidar_functions24update_connection_statusEv+0x28c>
 800196c:	4b8b      	ldr	r3, [pc, #556]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f240 5246 	movw	r2, #1350	; 0x546
 8001974:	63da      	str	r2, [r3, #60]	; 0x3c
 8001976:	e0a8      	b.n	8001aca <_ZN15Lidar_functions24update_connection_statusEv+0x3de>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	4a86      	ldr	r2, [pc, #536]	; (8001b98 <_ZN15Lidar_functions24update_connection_statusEv+0x4ac>)
 8001980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d105      	bne.n	8001994 <_ZN15Lidar_functions24update_connection_statusEv+0x2a8>
 8001988:	4b84      	ldr	r3, [pc, #528]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f240 5246 	movw	r2, #1350	; 0x546
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
 8001992:	e09a      	b.n	8001aca <_ZN15Lidar_functions24update_connection_statusEv+0x3de>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3b01      	subs	r3, #1
 800199a:	4a7f      	ldr	r2, [pc, #508]	; (8001b98 <_ZN15Lidar_functions24update_connection_statusEv+0x4ac>)
 800199c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	d105      	bne.n	80019b0 <_ZN15Lidar_functions24update_connection_statusEv+0x2c4>
 80019a4:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f240 5246 	movw	r2, #1350	; 0x546
 80019ac:	649a      	str	r2, [r3, #72]	; 0x48
 80019ae:	e08c      	b.n	8001aca <_ZN15Lidar_functions24update_connection_statusEv+0x3de>
 80019b0:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f240 5246 	movw	r2, #1350	; 0x546
 80019b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80019ba:	e086      	b.n	8001aca <_ZN15Lidar_functions24update_connection_statusEv+0x3de>
		}
		else if(HAL_GPIO_ReadPin(connect_det_ports[lidar_index - 1], connect_det_pins[lidar_index - 1]) == 1 && last_connected == 1 && connected == 1){
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	4a77      	ldr	r2, [pc, #476]	; (8001ba0 <_ZN15Lidar_functions24update_connection_statusEv+0x4b4>)
 80019c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	4975      	ldr	r1, [pc, #468]	; (8001ba4 <_ZN15Lidar_functions24update_connection_statusEv+0x4b8>)
 80019d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f006 f9c0 	bl	8007d5c <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10f      	bne.n	8001a02 <_ZN15Lidar_functions24update_connection_statusEv+0x316>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019e8:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <_ZN15Lidar_functions24update_connection_statusEv+0x316>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019f6:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <_ZN15Lidar_functions24update_connection_statusEv+0x316>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <_ZN15Lidar_functions24update_connection_statusEv+0x318>
 8001a02:	2300      	movs	r3, #0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d060      	beq.n	8001aca <_ZN15Lidar_functions24update_connection_statusEv+0x3de>
			HAL_GPIO_WritePin(connect_led_ports[lidar_index - 1], connect_led_pins[lidar_index - 1], GPIO_PIN_RESET);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	4a66      	ldr	r2, [pc, #408]	; (8001ba8 <_ZN15Lidar_functions24update_connection_statusEv+0x4bc>)
 8001a10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	4a64      	ldr	r2, [pc, #400]	; (8001bac <_ZN15Lidar_functions24update_connection_statusEv+0x4c0>)
 8001a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a20:	2200      	movs	r2, #0
 8001a22:	4619      	mov	r1, r3
 8001a24:	f006 f9b2 	bl	8007d8c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, timer_channels[lidar_index - 1], 0);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	4a5a      	ldr	r2, [pc, #360]	; (8001b98 <_ZN15Lidar_functions24update_connection_statusEv+0x4ac>)
 8001a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <_ZN15Lidar_functions24update_connection_statusEv+0x356>
 8001a38:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a40:	e037      	b.n	8001ab2 <_ZN15Lidar_functions24update_connection_statusEv+0x3c6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <_ZN15Lidar_functions24update_connection_statusEv+0x4ac>)
 8001a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d104      	bne.n	8001a5c <_ZN15Lidar_functions24update_connection_statusEv+0x370>
 8001a52:	4b52      	ldr	r3, [pc, #328]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	639a      	str	r2, [r3, #56]	; 0x38
 8001a5a:	e02a      	b.n	8001ab2 <_ZN15Lidar_functions24update_connection_statusEv+0x3c6>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <_ZN15Lidar_functions24update_connection_statusEv+0x4ac>)
 8001a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d104      	bne.n	8001a76 <_ZN15Lidar_functions24update_connection_statusEv+0x38a>
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a74:	e01d      	b.n	8001ab2 <_ZN15Lidar_functions24update_connection_statusEv+0x3c6>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	4a46      	ldr	r2, [pc, #280]	; (8001b98 <_ZN15Lidar_functions24update_connection_statusEv+0x4ac>)
 8001a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d104      	bne.n	8001a90 <_ZN15Lidar_functions24update_connection_statusEv+0x3a4>
 8001a86:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8e:	e010      	b.n	8001ab2 <_ZN15Lidar_functions24update_connection_statusEv+0x3c6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	4a40      	ldr	r2, [pc, #256]	; (8001b98 <_ZN15Lidar_functions24update_connection_statusEv+0x4ac>)
 8001a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a9c:	2b10      	cmp	r3, #16
 8001a9e:	d104      	bne.n	8001aaa <_ZN15Lidar_functions24update_connection_statusEv+0x3be>
 8001aa0:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	649a      	str	r2, [r3, #72]	; 0x48
 8001aa8:	e003      	b.n	8001ab2 <_ZN15Lidar_functions24update_connection_statusEv+0x3c6>
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <_ZN15Lidar_functions24update_connection_statusEv+0x4b0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	64da      	str	r2, [r3, #76]	; 0x4c
			
			disconnected = 1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			connected = 0;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
		}

		last_connected = HAL_GPIO_ReadPin(connect_det_ports[lidar_index - 1], connect_det_pins[lidar_index - 1]);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	4a33      	ldr	r2, [pc, #204]	; (8001ba0 <_ZN15Lidar_functions24update_connection_statusEv+0x4b4>)
 8001ad2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	4931      	ldr	r1, [pc, #196]	; (8001ba4 <_ZN15Lidar_functions24update_connection_statusEv+0x4b8>)
 8001ade:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	f006 f939 	bl	8007d5c <HAL_GPIO_ReadPin>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001af4:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

		if(status == 1 && connected == 1 && HAL_GetTick() - last_packet_recieved < 200){
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001afe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d113      	bne.n	8001b2e <_ZN15Lidar_functions24update_connection_statusEv+0x442>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b0c:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d10c      	bne.n	8001b2e <_ZN15Lidar_functions24update_connection_statusEv+0x442>
 8001b14:	f004 fb50 	bl	80061b8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b20:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2bc7      	cmp	r3, #199	; 0xc7
 8001b28:	d801      	bhi.n	8001b2e <_ZN15Lidar_functions24update_connection_statusEv+0x442>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <_ZN15Lidar_functions24update_connection_statusEv+0x444>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d016      	beq.n	8001b62 <_ZN15Lidar_functions24update_connection_statusEv+0x476>
			HAL_GPIO_WritePin(working_led_ports[lidar_index - 1], working_led_pins[lidar_index - 1], GPIO_PIN_SET);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <_ZN15Lidar_functions24update_connection_statusEv+0x4c4>)
 8001b3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <_ZN15Lidar_functions24update_connection_statusEv+0x4c8>)
 8001b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f006 f91c 	bl	8007d8c <HAL_GPIO_WritePin>
			normal_working = 1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
		}
		else{
			HAL_GPIO_WritePin(working_led_ports[lidar_index - 1], working_led_pins[lidar_index - 1], GPIO_PIN_RESET);
			normal_working = 0;
		}
	}
 8001b60:	e015      	b.n	8001b8e <_ZN15Lidar_functions24update_connection_statusEv+0x4a2>
			HAL_GPIO_WritePin(working_led_ports[lidar_index - 1], working_led_pins[lidar_index - 1], GPIO_PIN_RESET);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <_ZN15Lidar_functions24update_connection_statusEv+0x4c4>)
 8001b6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <_ZN15Lidar_functions24update_connection_statusEv+0x4c8>)
 8001b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f006 f905 	bl	8007d8c <HAL_GPIO_WritePin>
			normal_working = 0;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
	}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000048 	.word	0x20000048
 8001b9c:	20026fc8 	.word	0x20026fc8
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000010 	.word	0x20000010
 8001ba8:	20000018 	.word	0x20000018
 8001bac:	20000028 	.word	0x20000028
 8001bb0:	20000030 	.word	0x20000030
 8001bb4:	20000040 	.word	0x20000040

08001bb8 <_ZN15Lidar_functionsC1Ev>:
class Lidar_functions{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f013 fcd1 	bl	8015592 <memset>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8a3 2d00 	strh.w	r2, [r3, #3328]	; 0xd00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c02:	2200      	movs	r2, #0
 8001c04:	f8a3 2d02 	strh.w	r2, [r3, #3330]	; 0xd02
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1a:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8001c1e:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f013 fcb4 	bl	8015592 <memset>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c30:	f603 7308 	addw	r3, r3, #3848	; 0xf08
 8001c34:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f013 fca9 	bl	8015592 <memset>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c46:	2200      	movs	r2, #0
 8001c48:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
 8001c76:	3310      	adds	r3, #16
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9c1 2300 	strd	r2, r3, [r1]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_UARTEx_RxEventCallback>:

uint8_t new_settings = 0;

uint32_t first_reg, second_reg;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2){
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a33      	ldr	r2, [pc, #204]	; (8001dc8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d10b      	bne.n	8001d16 <HAL_UARTEx_RxEventCallback+0x2e>
		if(Size != BUFFER_LENGTH && Size != BUFFER_LENGTH/2){
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d04:	d05c      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d0c:	d058      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
			lidars[0].get_packet_from_lidar();
 8001d0e:	482f      	ldr	r0, [pc, #188]	; (8001dcc <HAL_UARTEx_RxEventCallback+0xe4>)
 8001d10:	f7ff fac6 	bl	80012a0 <_ZN15Lidar_functions21get_packet_from_lidarEv>
	//printf("%d ", Size);
	//printf("%d ", huart->Instance == USART2);
	//printf("%d ", huart->Instance == USART3);
	//printf("%d ", huart->Instance == UART4);
	//printf("%d \n", huart->Instance == UART5);
}
 8001d14:	e054      	b.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
	  else if (huart->Instance == USART3){
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a2d      	ldr	r2, [pc, #180]	; (8001dd0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10b      	bne.n	8001d38 <HAL_UARTEx_RxEventCallback+0x50>
			if(Size != BUFFER_LENGTH && Size != BUFFER_LENGTH/2){
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d26:	d04b      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d2e:	d047      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
				lidars[1].get_packet_from_lidar();
 8001d30:	4828      	ldr	r0, [pc, #160]	; (8001dd4 <HAL_UARTEx_RxEventCallback+0xec>)
 8001d32:	f7ff fab5 	bl	80012a0 <_ZN15Lidar_functions21get_packet_from_lidarEv>
}
 8001d36:	e043      	b.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
	  else if (huart->Instance == UART4){
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10b      	bne.n	8001d5a <HAL_UARTEx_RxEventCallback+0x72>
			if(Size != BUFFER_LENGTH && Size != BUFFER_LENGTH/2){
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d48:	d03a      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d50:	d036      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
				lidars[2].get_packet_from_lidar();
 8001d52:	4822      	ldr	r0, [pc, #136]	; (8001ddc <HAL_UARTEx_RxEventCallback+0xf4>)
 8001d54:	f7ff faa4 	bl	80012a0 <_ZN15Lidar_functions21get_packet_from_lidarEv>
}
 8001d58:	e032      	b.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
	  else if (huart->Instance == UART5){
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a20      	ldr	r2, [pc, #128]	; (8001de0 <HAL_UARTEx_RxEventCallback+0xf8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d10b      	bne.n	8001d7c <HAL_UARTEx_RxEventCallback+0x94>
			if(Size != BUFFER_LENGTH && Size != BUFFER_LENGTH/2){
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d6a:	d029      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d72:	d025      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
				lidars[3].get_packet_from_lidar();
 8001d74:	481b      	ldr	r0, [pc, #108]	; (8001de4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8001d76:	f7ff fa93 	bl	80012a0 <_ZN15Lidar_functions21get_packet_from_lidarEv>
}
 8001d7a:	e021      	b.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
	  else if (huart->Instance == UART7 && HAL_GetTick()>1000){
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_UARTEx_RxEventCallback+0x100>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d107      	bne.n	8001d96 <HAL_UARTEx_RxEventCallback+0xae>
 8001d86:	f004 fa17 	bl	80061b8 <HAL_GetTick>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d90:	d901      	bls.n	8001d96 <HAL_UARTEx_RxEventCallback+0xae>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_UARTEx_RxEventCallback+0xb0>
 8001d96:	2300      	movs	r3, #0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d011      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0xd8>
			memcpy(&settings, settings_rx_buffer, sizeof(settings_rx_buffer));
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_UARTEx_RxEventCallback+0x104>)
 8001d9e:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <HAL_UARTEx_RxEventCallback+0x108>)
 8001da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001da4:	6018      	str	r0, [r3, #0]
 8001da6:	3304      	adds	r3, #4
 8001da8:	8019      	strh	r1, [r3, #0]
 8001daa:	3302      	adds	r3, #2
 8001dac:	0c0a      	lsrs	r2, r1, #16
 8001dae:	701a      	strb	r2, [r3, #0]
			new_settings = 1;
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_IT(&huart7, settings_rx_buffer, sizeof(settings_rx_buffer));
 8001db6:	2207      	movs	r2, #7
 8001db8:	490d      	ldr	r1, [pc, #52]	; (8001df0 <HAL_UARTEx_RxEventCallback+0x108>)
 8001dba:	480f      	ldr	r0, [pc, #60]	; (8001df8 <HAL_UARTEx_RxEventCallback+0x110>)
 8001dbc:	f00f feef 	bl	8011b9e <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	20000268 	.word	0x20000268
 8001dd0:	40004800 	.word	0x40004800
 8001dd4:	20008398 	.word	0x20008398
 8001dd8:	40004c00 	.word	0x40004c00
 8001ddc:	200104c8 	.word	0x200104c8
 8001de0:	40005000 	.word	0x40005000
 8001de4:	200185f8 	.word	0x200185f8
 8001de8:	40007800 	.word	0x40007800
 8001dec:	20020728 	.word	0x20020728
 8001df0:	20020730 	.word	0x20020730
 8001df4:	20020737 	.word	0x20020737
 8001df8:	2002713c 	.word	0x2002713c
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN4Zone17calculate_geometyEv>:
	long double size_x = 0;
	long double size_y = 0;

	uint8_t object_zone = 0;

	void calculate_geomety(){
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
		object_zone = 0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
		for (int i=2; i>=0; i--){
 8001e10:	2302      	movs	r3, #2
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e1e8      	b.n	80021e8 <_ZN4Zone17calculate_geometyEv+0x3e8>
			center_x = 0;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9c1 2300 	strd	r2, r3, [r1]
			center_y = 0;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e941 2302 	strd	r2, r3, [r1, #-8]
			size_x = 0;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8001e44:	4619      	mov	r1, r3
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9c1 2300 	strd	r2, r3, [r1]
	 		size_y = 0;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	e941 2302 	strd	r2, r3, [r1, #-8]
			if (subzone_number_of_points[i] > POINTS_THRESHOLD){
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	889b      	ldrh	r3, [r3, #4]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	f240 81b4 	bls.w	80021e2 <_ZN4Zone17calculate_geometyEv+0x3e2>
				//printf("%d \n", subzone_number_of_points[i]);
				for (int j=0; j<subzone_number_of_points[i]; j++){
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e050      	b.n	8001f22 <_ZN4Zone17calculate_geometyEv+0x122>
					center_x += assembled_points[subzone_points_indexes[i][j]].x;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 8001e86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001e92:	fb03 f101 	mul.w	r1, r3, r1
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	440b      	add	r3, r1
 8001e9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <_ZN4Zone17calculate_geometyEv+0x1b0>)
 8001eaa:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb48 	bl	8000544 <__aeabi_i2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe f9f6 	bl	80002ac <__adddf3>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	f501 611a 	add.w	r1, r1, #2464	; 0x9a0
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
					center_y += assembled_points[subzone_points_indexes[i][j]].y;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8001ed4:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ee0:	fb03 f101 	mul.w	r1, r3, r1
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <_ZN4Zone17calculate_geometyEv+0x1b0>)
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb21 	bl	8000544 <__aeabi_i2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4620      	mov	r0, r4
 8001f08:	4629      	mov	r1, r5
 8001f0a:	f7fe f9cf 	bl	80002ac <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	f501 611b 	add.w	r1, r1, #2480	; 0x9b0
 8001f18:	e941 2302 	strd	r2, r3, [r1, #-8]
				for (int j=0; j<subzone_number_of_points[i]; j++){
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	889b      	ldrh	r3, [r3, #4]
 8001f30:	461a      	mov	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4293      	cmp	r3, r2
 8001f36:	dba3      	blt.n	8001e80 <_ZN4Zone17calculate_geometyEv+0x80>
				}

				center_x = center_x / subzone_number_of_points[i];
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 8001f3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	889b      	ldrh	r3, [r3, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe faf7 	bl	8000544 <__aeabi_i2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe fc85 	bl	800086c <__aeabi_ddiv>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f501 611a 	add.w	r1, r1, #2464	; 0x9a0
 8001f6c:	e9c1 2300 	strd	r2, r3, [r1]
				center_y = center_y / subzone_number_of_points[i];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8001f76:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fadb 	bl	8000544 <__aeabi_i2d>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4620      	mov	r0, r4
 8001f94:	4629      	mov	r1, r5
 8001f96:	f7fe fc69 	bl	800086c <__aeabi_ddiv>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f501 611b 	add.w	r1, r1, #2480	; 0x9b0
 8001fa4:	e941 2302 	strd	r2, r3, [r1, #-8]

				for (int j=0; j<subzone_number_of_points[i]; j++){
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e091      	b.n	80020d2 <_ZN4Zone17calculate_geometyEv+0x2d2>
 8001fae:	bf00      	nop
 8001fb0:	20020748 	.word	0x20020748
					size_x += pow(double(abs(center_x - assembled_points[subzone_points_indexes[i][j]].x)), 0.5);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 8001fba:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001fc6:	fb03 f101 	mul.w	r1, r3, r1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	440b      	add	r3, r1
 8001fce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b88      	ldr	r3, [pc, #544]	; (8002200 <_ZN4Zone17calculate_geometyEv+0x400>)
 8001fde:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe faae 	bl	8000544 <__aeabi_i2d>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4620      	mov	r0, r4
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f7fe f95a 	bl	80002a8 <__aeabi_dsub>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	ec43 2b17 	vmov	d7, r2, r3
 8001ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8002000:	eef0 0a67 	vmov.f32	s1, s15
 8002004:	f7fe ff70 	bl	8000ee8 <_ZSt3abse>
 8002008:	eeb0 7a40 	vmov.f32	s14, s0
 800200c:	eef0 7a60 	vmov.f32	s15, s1
 8002010:	ed9f 1b79 	vldr	d1, [pc, #484]	; 80021f8 <_ZN4Zone17calculate_geometyEv+0x3f8>
 8002014:	eeb0 0a47 	vmov.f32	s0, s14
 8002018:	eef0 0a67 	vmov.f32	s1, s15
 800201c:	f010 fde4 	bl	8012be8 <pow>
 8002020:	ec51 0b10 	vmov	r0, r1, d0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe f93d 	bl	80002ac <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	f501 611b 	add.w	r1, r1, #2480	; 0x9b0
 800203c:	e9c1 2300 	strd	r2, r3, [r1]
					size_y += pow(double(abs(center_y - assembled_points[subzone_points_indexes[i][j]].y)), 0.5);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8002046:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002052:	fb03 f101 	mul.w	r1, r3, r1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	440b      	add	r3, r1
 800205a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002066:	4a66      	ldr	r2, [pc, #408]	; (8002200 <_ZN4Zone17calculate_geometyEv+0x400>)
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa68 	bl	8000544 <__aeabi_i2d>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4620      	mov	r0, r4
 800207a:	4629      	mov	r1, r5
 800207c:	f7fe f914 	bl	80002a8 <__aeabi_dsub>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	ec43 2b17 	vmov	d7, r2, r3
 8002088:	eeb0 0a47 	vmov.f32	s0, s14
 800208c:	eef0 0a67 	vmov.f32	s1, s15
 8002090:	f7fe ff2a 	bl	8000ee8 <_ZSt3abse>
 8002094:	eeb0 7a40 	vmov.f32	s14, s0
 8002098:	eef0 7a60 	vmov.f32	s15, s1
 800209c:	ed9f 1b56 	vldr	d1, [pc, #344]	; 80021f8 <_ZN4Zone17calculate_geometyEv+0x3f8>
 80020a0:	eeb0 0a47 	vmov.f32	s0, s14
 80020a4:	eef0 0a67 	vmov.f32	s1, s15
 80020a8:	f010 fd9e 	bl	8012be8 <pow>
 80020ac:	ec51 0b10 	vmov	r0, r1, d0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 80020b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80020ba:	f7fe f8f7 	bl	80002ac <__adddf3>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	f501 611c 	add.w	r1, r1, #2496	; 0x9c0
 80020c8:	e941 2302 	strd	r2, r3, [r1, #-8]
				for (int j=0; j<subzone_number_of_points[i]; j++){
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3301      	adds	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	889b      	ldrh	r3, [r3, #4]
 80020e0:	461a      	mov	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4293      	cmp	r3, r2
 80020e6:	f6ff af65 	blt.w	8001fb4 <_ZN4Zone17calculate_geometyEv+0x1b4>
				}

				size_x = pow(size_x / subzone_number_of_points[i], 2);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80020f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	889b      	ldrh	r3, [r3, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa1e 	bl	8000544 <__aeabi_i2d>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4620      	mov	r0, r4
 800210e:	4629      	mov	r1, r5
 8002110:	f7fe fbac 	bl	800086c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	ec43 2b17 	vmov	d7, r2, r3
 800211c:	2002      	movs	r0, #2
 800211e:	eeb0 0a47 	vmov.f32	s0, s14
 8002122:	eef0 0a67 	vmov.f32	s1, s15
 8002126:	f002 f817 	bl	8004158 <_ZSt3powIeiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800212a:	eeb0 7a40 	vmov.f32	s14, s0
 800212e:	eef0 7a60 	vmov.f32	s15, s1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8002138:	ed83 7b00 	vstr	d7, [r3]
				size_y = pow(size_y / subzone_number_of_points[i], 2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8002142:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	889b      	ldrh	r3, [r3, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9f5 	bl	8000544 <__aeabi_i2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f7fe fb83 	bl	800086c <__aeabi_ddiv>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	ec43 2b17 	vmov	d7, r2, r3
 800216e:	2002      	movs	r0, #2
 8002170:	eeb0 0a47 	vmov.f32	s0, s14
 8002174:	eef0 0a67 	vmov.f32	s1, s15
 8002178:	f001 ffee 	bl	8004158 <_ZSt3powIeiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800217c:	eeb0 7a40 	vmov.f32	s14, s0
 8002180:	eef0 7a60 	vmov.f32	s15, s1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 800218a:	ed03 7b02 	vstr	d7, [r3, #-8]

				if ((size_x + size_y) / 2.0 > size_treshold){
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8002194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 800219e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80021a2:	f7fe f883 	bl	80002ac <__adddf3>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b6:	f7fe fb59 	bl	800086c <__aeabi_ddiv>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <_ZN4Zone17calculate_geometyEv+0x404>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	f7fe fcb6 	bl	8000b38 <__aeabi_dcmpgt>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <_ZN4Zone17calculate_geometyEv+0x3e2>
					object_zone = i+1;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
					return;
 80021e0:	e006      	b.n	80021f0 <_ZN4Zone17calculate_geometyEv+0x3f0>
		for (int i=2; i>=0; i--){
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f6bf ae13 	bge.w	8001e16 <_ZN4Zone17calculate_geometyEv+0x16>
				}
			}
		}
	}
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bdb0      	pop	{r4, r5, r7, pc}
 80021f6:	bf00      	nop
 80021f8:	00000000 	.word	0x00000000
 80021fc:	3fe00000 	.word	0x3fe00000
 8002200:	20020748 	.word	0x20020748
 8002204:	20000050 	.word	0x20000050

08002208 <_ZN4Zone16simple_mode_sortEv>:

	void simple_mode_sort(){
 8002208:	b490      	push	{r4, r7}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
		for(int i=0; i<3; i++){
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e00a      	b.n	800222c <_ZN4Zone16simple_mode_sortEv+0x24>
			subzone_number_of_points[i] = 0;
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	2200      	movs	r2, #0
 8002224:	809a      	strh	r2, [r3, #4]
		for(int i=0; i<3; i++){
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b02      	cmp	r3, #2
 8002230:	ddf1      	ble.n	8002216 <_ZN4Zone16simple_mode_sortEv+0xe>
		}

		for(int i = 0; i<number_of_points; i++){
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	e095      	b.n	8002364 <_ZN4Zone16simple_mode_sortEv+0x15c>
			subzone_points_indexes[0][i] = point_indexes[i];
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	3208      	adds	r2, #8
 800223e:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	460a      	mov	r2, r1
 8002250:	809a      	strh	r2, [r3, #4]
			subzone_number_of_points[0] ++;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8b3 3994 	ldrh.w	r3, [r3, #2452]	; 0x994
 8002258:	3301      	adds	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8a3 2994 	strh.w	r2, [r3, #2452]	; 0x994

			for (int j = 0; j<2; j++){
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e077      	b.n	8002358 <_ZN4Zone16simple_mode_sortEv+0x150>
				if (assembled_points[point_indexes[i]].x > zone_rects[j][0].x && assembled_points[point_indexes[i]].x < zone_rects[j][1].x &&
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	3208      	adds	r2, #8
 800226e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002272:	461a      	mov	r2, r3
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <_ZN4Zone16simple_mode_sortEv+0x178>)
 8002276:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	440b      	add	r3, r1
 8002282:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	dd62      	ble.n	8002352 <_ZN4Zone16simple_mode_sortEv+0x14a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	3208      	adds	r2, #8
 8002292:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002296:	461a      	mov	r2, r3
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <_ZN4Zone16simple_mode_sortEv+0x178>)
 800229a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3327      	adds	r3, #39	; 0x27
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	440b      	add	r3, r1
 80022a8:	3304      	adds	r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	da50      	bge.n	8002352 <_ZN4Zone16simple_mode_sortEv+0x14a>
					assembled_points[point_indexes[i]].y < zone_rects[j][0].y && assembled_points[point_indexes[i]].y > zone_rects[j][1].y){
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	3208      	adds	r2, #8
 80022b6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80022ba:	4a31      	ldr	r2, [pc, #196]	; (8002380 <_ZN4Zone16simple_mode_sortEv+0x178>)
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	440b      	add	r3, r1
 80022ca:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80022ce:	681b      	ldr	r3, [r3, #0]
				if (assembled_points[point_indexes[i]].x > zone_rects[j][0].x && assembled_points[point_indexes[i]].x < zone_rects[j][1].x &&
 80022d0:	429a      	cmp	r2, r3
 80022d2:	da3e      	bge.n	8002352 <_ZN4Zone16simple_mode_sortEv+0x14a>
					assembled_points[point_indexes[i]].y < zone_rects[j][0].y && assembled_points[point_indexes[i]].y > zone_rects[j][1].y){
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	3208      	adds	r2, #8
 80022da:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80022de:	4a28      	ldr	r2, [pc, #160]	; (8002380 <_ZN4Zone16simple_mode_sortEv+0x178>)
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3327      	adds	r3, #39	; 0x27
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	440b      	add	r3, r1
 80022f0:	3308      	adds	r3, #8
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dd2c      	ble.n	8002352 <_ZN4Zone16simple_mode_sortEv+0x14a>
					subzone_points_indexes[j+1][subzone_number_of_points[j+1]] = point_indexes[i];
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1c59      	adds	r1, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3301      	adds	r3, #1
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	889b      	ldrh	r3, [r3, #4]
 800230c:	461c      	mov	r4, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	3208      	adds	r2, #8
 8002314:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4423      	add	r3, r4
 8002324:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	4602      	mov	r2, r0
 800232e:	809a      	strh	r2, [r3, #4]
					subzone_number_of_points[j+1] ++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	f502 6399 	add.w	r3, r2, #1224	; 0x4c8
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	440b      	add	r3, r1
 800233e:	889b      	ldrh	r3, [r3, #4]
 8002340:	3301      	adds	r3, #1
 8002342:	b298      	uxth	r0, r3
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	f502 6399 	add.w	r3, r2, #1224	; 0x4c8
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	4602      	mov	r2, r0
 8002350:	809a      	strh	r2, [r3, #4]
			for (int j = 0; j<2; j++){
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b01      	cmp	r3, #1
 800235c:	dd84      	ble.n	8002268 <_ZN4Zone16simple_mode_sortEv+0x60>
		for(int i = 0; i<number_of_points; i++){
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3301      	adds	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 800236a:	461a      	mov	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4293      	cmp	r3, r2
 8002370:	f6ff af62 	blt.w	8002238 <_ZN4Zone16simple_mode_sortEv+0x30>
				}
			}
		}
	}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bc90      	pop	{r4, r7}
 800237e:	4770      	bx	lr
 8002380:	20020748 	.word	0x20020748

08002384 <_ZN4Zone14analyse_pointsEv>:

	void analyse_points(){
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
		number_of_points = 0;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268

		for(int i=0; i<assembled_points_amount; i++){
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e036      	b.n	8002408 <_ZN4Zone14analyse_pointsEv+0x84>
			if(assembled_points[i].x > bounding_rect[0].x && assembled_points[i].x < bounding_rect[1].x && assembled_points[i].y < bounding_rect[0].y && assembled_points[i].y > bounding_rect[1].y){
 800239a:	4a23      	ldr	r2, [pc, #140]	; (8002428 <_ZN4Zone14analyse_pointsEv+0xa4>)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	dd2b      	ble.n	8002402 <_ZN4Zone14analyse_pointsEv+0x7e>
 80023aa:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <_ZN4Zone14analyse_pointsEv+0xa4>)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	da23      	bge.n	8002402 <_ZN4Zone14analyse_pointsEv+0x7e>
 80023ba:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <_ZN4Zone14analyse_pointsEv+0xa4>)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	da1a      	bge.n	8002402 <_ZN4Zone14analyse_pointsEv+0x7e>
 80023cc:	4a16      	ldr	r2, [pc, #88]	; (8002428 <_ZN4Zone14analyse_pointsEv+0xa4>)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	429a      	cmp	r2, r3
 80023dc:	dd11      	ble.n	8002402 <_ZN4Zone14analyse_pointsEv+0x7e>
				point_indexes[number_of_points] = i;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 80023e4:	461a      	mov	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	b219      	sxth	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				number_of_points ++;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 80023f8:	3301      	adds	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
		for(int i=0; i<assembled_points_amount; i++){
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3301      	adds	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <_ZN4Zone14analyse_pointsEv+0xa8>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4293      	cmp	r3, r2
 8002412:	dbc2      	blt.n	800239a <_ZN4Zone14analyse_pointsEv+0x16>
			}
		}

		simple_mode_sort();
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fef7 	bl	8002208 <_ZN4Zone16simple_mode_sortEv>

		//printf("%d %d %d %d %d\n", assembled_points_amount, number_of_points,  subzone_number_of_points[0], subzone_number_of_points[1], subzone_number_of_points[2]);
		calculate_geomety();
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff fcf0 	bl	8001e00 <_ZN4Zone17calculate_geometyEv>

		//printf("%d %f %f %f %f %d\n", HAL_GetTick() - main_calculation_timer, center_x, center_y, size_x, size_y, object_zone);
	}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20020748 	.word	0x20020748
 800242c:	20022cc8 	.word	0x20022cc8

08002430 <_ZN17Comnplicated_zone17calculate_geometyEv>:

	Geometry_point distant_point = {0, 5000};

	uint16_t counter = 0;

	void calculate_geomety(){
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
		object_size = 0;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508

		center_x = 0;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e941 2302 	strd	r2, r3, [r1, #-8]
		center_y = 0;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9c1 2300 	strd	r2, r3, [r1]
		size_x = 0;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	4619      	mov	r1, r3
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e941 2302 	strd	r2, r3, [r1, #-8]
	 	size_y = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	4619      	mov	r1, r3
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9c1 2300 	strd	r2, r3, [r1]
		if (final_number_of_points > POINTS_THRESHOLD){
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 8002496:	2b03      	cmp	r3, #3
 8002498:	f240 81cc 	bls.w	8002834 <_ZN17Comnplicated_zone17calculate_geometyEv+0x404>
			//printf("%d \n", subzone_number_of_points[i]);
			for (int i=0; i<final_number_of_points; i++){
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e044      	b.n	800252c <_ZN17Comnplicated_zone17calculate_geometyEv+0xfc>
				center_x += assembled_points[final_point_indexes[i]].x;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80024a8:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <_ZN17Comnplicated_zone17calculate_geometyEv+0x170>)
 80024c0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f83d 	bl	8000544 <__aeabi_i2d>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4620      	mov	r0, r4
 80024d0:	4629      	mov	r1, r5
 80024d2:	f7fd feeb 	bl	80002ac <__adddf3>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 80024e0:	e941 2302 	strd	r2, r3, [r1, #-8]
				center_y += assembled_points[final_point_indexes[i]].y;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80024ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024fe:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <_ZN17Comnplicated_zone17calculate_geometyEv+0x170>)
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f81c 	bl	8000544 <__aeabi_i2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fd feca 	bl	80002ac <__adddf3>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8002522:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i=0; i<final_number_of_points; i++){
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3301      	adds	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4293      	cmp	r3, r2
 8002538:	dbb3      	blt.n	80024a2 <_ZN17Comnplicated_zone17calculate_geometyEv+0x72>
			}

			center_x = center_x / final_number_of_points;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8002540:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd fffa 	bl	8000544 <__aeabi_i2d>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4620      	mov	r0, r4
 8002556:	4629      	mov	r1, r5
 8002558:	f7fe f988 	bl	800086c <__aeabi_ddiv>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8002566:	e941 2302 	strd	r2, r3, [r1, #-8]
			center_y = center_y / final_number_of_points;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8002570:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 800257a:	4618      	mov	r0, r3
 800257c:	f7fd ffe2 	bl	8000544 <__aeabi_i2d>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4620      	mov	r0, r4
 8002586:	4629      	mov	r1, r5
 8002588:	f7fe f970 	bl	800086c <__aeabi_ddiv>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8002596:	e9c1 2300 	strd	r2, r3, [r1]

			for (int i=0; i<final_number_of_points; i++){
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	e084      	b.n	80026aa <_ZN17Comnplicated_zone17calculate_geometyEv+0x27a>
 80025a0:	20020748 	.word	0x20020748
				size_x += pow(double(abs(center_x - assembled_points[final_point_indexes[i]].x)), 0.5);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80025aa:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025be:	461a      	mov	r2, r3
 80025c0:	4ba1      	ldr	r3, [pc, #644]	; (8002848 <_ZN17Comnplicated_zone17calculate_geometyEv+0x418>)
 80025c2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ffbc 	bl	8000544 <__aeabi_i2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fd fe68 	bl	80002a8 <__aeabi_dsub>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	ec43 2b17 	vmov	d7, r2, r3
 80025e0:	eeb0 0a47 	vmov.f32	s0, s14
 80025e4:	eef0 0a67 	vmov.f32	s1, s15
 80025e8:	f7fe fc7e 	bl	8000ee8 <_ZSt3abse>
 80025ec:	eeb0 7a40 	vmov.f32	s14, s0
 80025f0:	eef0 7a60 	vmov.f32	s15, s1
 80025f4:	ed9f 1b92 	vldr	d1, [pc, #584]	; 8002840 <_ZN17Comnplicated_zone17calculate_geometyEv+0x410>
 80025f8:	eeb0 0a47 	vmov.f32	s0, s14
 80025fc:	eef0 0a67 	vmov.f32	s1, s15
 8002600:	f010 faf2 	bl	8012be8 <pow>
 8002604:	ec51 0b10 	vmov	r0, r1, d0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002612:	f7fd fe4b 	bl	80002ac <__adddf3>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8002620:	e941 2302 	strd	r2, r3, [r1, #-8]
				size_y += pow(double(abs(center_y - assembled_points[final_point_indexes[i]].y)), 0.5);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800262a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800263e:	4a82      	ldr	r2, [pc, #520]	; (8002848 <_ZN17Comnplicated_zone17calculate_geometyEv+0x418>)
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff7c 	bl	8000544 <__aeabi_i2d>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fd fe28 	bl	80002a8 <__aeabi_dsub>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	ec43 2b17 	vmov	d7, r2, r3
 8002660:	eeb0 0a47 	vmov.f32	s0, s14
 8002664:	eef0 0a67 	vmov.f32	s1, s15
 8002668:	f7fe fc3e 	bl	8000ee8 <_ZSt3abse>
 800266c:	eeb0 7a40 	vmov.f32	s14, s0
 8002670:	eef0 7a60 	vmov.f32	s15, s1
 8002674:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8002840 <_ZN17Comnplicated_zone17calculate_geometyEv+0x410>
 8002678:	eeb0 0a47 	vmov.f32	s0, s14
 800267c:	eef0 0a67 	vmov.f32	s1, s15
 8002680:	f010 fab2 	bl	8012be8 <pow>
 8002684:	ec51 0b10 	vmov	r0, r1, d0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fd fe0b 	bl	80002ac <__adddf3>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80026a0:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i=0; i<final_number_of_points; i++){
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	3301      	adds	r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 80026b0:	461a      	mov	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	4293      	cmp	r3, r2
 80026b6:	f6ff af75 	blt.w	80025a4 <_ZN17Comnplicated_zone17calculate_geometyEv+0x174>
			}

			size_x = pow(size_x / final_number_of_points, 2);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff3a 	bl	8000544 <__aeabi_i2d>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fe f8c8 	bl	800086c <__aeabi_ddiv>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	ec43 2b17 	vmov	d7, r2, r3
 80026e4:	2002      	movs	r0, #2
 80026e6:	eeb0 0a47 	vmov.f32	s0, s14
 80026ea:	eef0 0a67 	vmov.f32	s1, s15
 80026ee:	f001 fd33 	bl	8004158 <_ZSt3powIeiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80026f2:	eeb0 7a40 	vmov.f32	s14, s0
 80026f6:	eef0 7a60 	vmov.f32	s15, s1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	ed03 7b02 	vstr	d7, [r3, #-8]
			size_y = pow(size_y / final_number_of_points, 2);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd ff15 	bl	8000544 <__aeabi_i2d>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4620      	mov	r0, r4
 8002720:	4629      	mov	r1, r5
 8002722:	f7fe f8a3 	bl	800086c <__aeabi_ddiv>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	ec43 2b17 	vmov	d7, r2, r3
 800272e:	2002      	movs	r0, #2
 8002730:	eeb0 0a47 	vmov.f32	s0, s14
 8002734:	eef0 0a67 	vmov.f32	s1, s15
 8002738:	f001 fd0e 	bl	8004158 <_ZSt3powIeiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800273c:	eeb0 7a40 	vmov.f32	s14, s0
 8002740:	eef0 7a60 	vmov.f32	s15, s1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	ed83 7b00 	vstr	d7, [r3]

			if ((size_x + size_y) / 2.0 > 8){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f7fd fda3 	bl	80002ac <__adddf3>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002776:	f7fe f879 	bl	800086c <__aeabi_ddiv>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <_ZN17Comnplicated_zone17calculate_geometyEv+0x41c>)
 8002788:	f7fe f9d6 	bl	8000b38 <__aeabi_dcmpgt>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <_ZN17Comnplicated_zone17calculate_geometyEv+0x36a>
				object_size = 1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			}
			if ((size_x + size_y) / 2.0 > 10){
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	f7fd fd7d 	bl	80002ac <__adddf3>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027c2:	f7fe f853 	bl	800086c <__aeabi_ddiv>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <_ZN17Comnplicated_zone17calculate_geometyEv+0x420>)
 80027d4:	f7fe f9b0 	bl	8000b38 <__aeabi_dcmpgt>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <_ZN17Comnplicated_zone17calculate_geometyEv+0x3b6>
				object_size = 2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			}
			if ((size_x + size_y) / 2.0 > 15){
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd fd57 	bl	80002ac <__adddf3>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800280e:	f7fe f82d 	bl	800086c <__aeabi_ddiv>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <_ZN17Comnplicated_zone17calculate_geometyEv+0x424>)
 8002820:	f7fe f98a 	bl	8000b38 <__aeabi_dcmpgt>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d100      	bne.n	800282c <_ZN17Comnplicated_zone17calculate_geometyEv+0x3fc>
				object_size = 3;
			}
		}
	}
 800282a:	e003      	b.n	8002834 <_ZN17Comnplicated_zone17calculate_geometyEv+0x404>
				object_size = 3;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2203      	movs	r2, #3
 8002830:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
	}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bdb0      	pop	{r4, r5, r7, pc}
 800283c:	f3af 8000 	nop.w
 8002840:	00000000 	.word	0x00000000
 8002844:	3fe00000 	.word	0x3fe00000
 8002848:	20020748 	.word	0x20020748
 800284c:	40200000 	.word	0x40200000
 8002850:	40240000 	.word	0x40240000
 8002854:	402e0000 	.word	0x402e0000

08002858 <_ZN17Comnplicated_zone11orientationE14Geometry_pointS0_S0_>:

	bool orientation(Geometry_point p, Geometry_point q, Geometry_point r){
 8002858:	b082      	sub	sp, #8
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	1d38      	adds	r0, r7, #4
 8002864:	e880 0006 	stmia.w	r0, {r1, r2}
 8002868:	61fb      	str	r3, [r7, #28]
		return ((q.y - p.y)*(r.x-q.x) - (q.x - p.x) * (r.y - q.y)) > 0;
 800286a:	6a3a      	ldr	r2, [r7, #32]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	1a8a      	subs	r2, r1, r2
 8002876:	fb03 f202 	mul.w	r2, r3, r2
 800287a:	69f9      	ldr	r1, [r7, #28]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	1acb      	subs	r3, r1, r3
 8002880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002882:	6a39      	ldr	r1, [r7, #32]
 8002884:	1a41      	subs	r1, r0, r1
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	bfcc      	ite	gt
 8002890:	2301      	movgt	r3, #1
 8002892:	2300      	movle	r3, #0
 8002894:	b2db      	uxtb	r3, r3
	}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	b002      	add	sp, #8
 80028a2:	4770      	bx	lr

080028a4 <_ZN17Comnplicated_zone13advanced_sortEv>:

	void advanced_sort(){
 80028a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028a8:	b088      	sub	sp, #32
 80028aa:	af04      	add	r7, sp, #16
 80028ac:	6078      	str	r0, [r7, #4]
		final_number_of_points = 0;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8a3 24e2 	strh.w	r2, [r3, #1250]	; 0x4e2

		for(int i=0; i<number_of_points; i++){
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e0d6      	b.n	8002a6a <_ZN17Comnplicated_zone13advanced_sortEv+0x1c6>
			counter = 0;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
			for(int j=0; j<4; j++){
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	e0a9      	b.n	8002a1e <_ZN17Comnplicated_zone13advanced_sortEv+0x17a>
				if(orientation(vertices[j], vertices[(j+1)%4], distant_point) != orientation(vertices[j], vertices[(j+1)%4], assembled_points[point_indexes[i]]) &&
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3301      	adds	r3, #1
 80028ce:	425a      	negs	r2, r3
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	f002 0203 	and.w	r2, r2, #3
 80028d8:	bf58      	it	pl
 80028da:	4253      	negpl	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	1c9c      	adds	r4, r3, #2
 80028e0:	687d      	ldr	r5, [r7, #4]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1c9e      	adds	r6, r3, #2
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f10d 0c04 	add.w	ip, sp, #4
 80028ec:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 80028f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80028f8:	00e3      	lsls	r3, r4, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f852 3034 	ldr.w	r3, [r2, r4, lsl #3]
 8002904:	00f2      	lsls	r2, r6, #3
 8002906:	442a      	add	r2, r5
 8002908:	ca06      	ldmia	r2, {r1, r2}
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffa4 	bl	8002858 <_ZN17Comnplicated_zone11orientationE14Geometry_pointS0_S0_>
 8002910:	4603      	mov	r3, r0
 8002912:	4698      	mov	r8, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	3301      	adds	r3, #1
 8002918:	425a      	negs	r2, r3
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	f002 0203 	and.w	r2, r2, #3
 8002922:	bf58      	it	pl
 8002924:	4253      	negpl	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	3118      	adds	r1, #24
 800292c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002930:	4610      	mov	r0, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	1c9c      	adds	r4, r3, #2
 8002936:	687d      	ldr	r5, [r7, #4]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1c9e      	adds	r6, r3, #2
 800293c:	4952      	ldr	r1, [pc, #328]	; (8002a88 <_ZN17Comnplicated_zone13advanced_sortEv+0x1e4>)
 800293e:	f10d 0c04 	add.w	ip, sp, #4
 8002942:	00c3      	lsls	r3, r0, #3
 8002944:	440b      	add	r3, r1
 8002946:	e893 0003 	ldmia.w	r3, {r0, r1}
 800294a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800294e:	00e3      	lsls	r3, r4, #3
 8002950:	4413      	add	r3, r2
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f852 3034 	ldr.w	r3, [r2, r4, lsl #3]
 800295a:	00f2      	lsls	r2, r6, #3
 800295c:	442a      	add	r2, r5
 800295e:	ca06      	ldmia	r2, {r1, r2}
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff79 	bl	8002858 <_ZN17Comnplicated_zone11orientationE14Geometry_pointS0_S0_>
 8002966:	4603      	mov	r3, r0
 8002968:	4598      	cmp	r8, r3
 800296a:	d04a      	beq.n	8002a02 <_ZN17Comnplicated_zone13advanced_sortEv+0x15e>
				orientation(distant_point, assembled_points[point_indexes[i]], vertices[j]) != orientation(distant_point, assembled_points[point_indexes[i]], vertices[(j+1)%4])){
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	3218      	adds	r2, #24
 8002972:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002976:	461c      	mov	r4, r3
 8002978:	4a43      	ldr	r2, [pc, #268]	; (8002a88 <_ZN17Comnplicated_zone13advanced_sortEv+0x1e4>)
 800297a:	687d      	ldr	r5, [r7, #4]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3302      	adds	r3, #2
 8002982:	ae01      	add	r6, sp, #4
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	e893 0003 	ldmia.w	r3, {r0, r1}
 800298c:	e886 0003 	stmia.w	r6, {r0, r1}
 8002990:	00e3      	lsls	r3, r4, #3
 8002992:	4413      	add	r3, r2
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f852 3034 	ldr.w	r3, [r2, r4, lsl #3]
 800299c:	f205 520c 	addw	r2, r5, #1292	; 0x50c
 80029a0:	ca06      	ldmia	r2, {r1, r2}
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff58 	bl	8002858 <_ZN17Comnplicated_zone11orientationE14Geometry_pointS0_S0_>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4698      	mov	r8, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	3218      	adds	r2, #24
 80029b2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80029b6:	461c      	mov	r4, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	3301      	adds	r3, #1
 80029bc:	425a      	negs	r2, r3
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	f002 0203 	and.w	r2, r2, #3
 80029c6:	bf58      	it	pl
 80029c8:	4253      	negpl	r3, r2
 80029ca:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <_ZN17Comnplicated_zone13advanced_sortEv+0x1e4>)
 80029cc:	687d      	ldr	r5, [r7, #4]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	3302      	adds	r3, #2
 80029d2:	ae01      	add	r6, sp, #4
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029dc:	e886 0003 	stmia.w	r6, {r0, r1}
 80029e0:	00e3      	lsls	r3, r4, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	f852 3034 	ldr.w	r3, [r2, r4, lsl #3]
 80029ec:	f205 520c 	addw	r2, r5, #1292	; 0x50c
 80029f0:	ca06      	ldmia	r2, {r1, r2}
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ff30 	bl	8002858 <_ZN17Comnplicated_zone11orientationE14Geometry_pointS0_S0_>
 80029f8:	4603      	mov	r3, r0
				if(orientation(vertices[j], vertices[(j+1)%4], distant_point) != orientation(vertices[j], vertices[(j+1)%4], assembled_points[point_indexes[i]]) &&
 80029fa:	4598      	cmp	r8, r3
 80029fc:	d001      	beq.n	8002a02 <_ZN17Comnplicated_zone13advanced_sortEv+0x15e>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <_ZN17Comnplicated_zone13advanced_sortEv+0x160>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <_ZN17Comnplicated_zone13advanced_sortEv+0x174>
					counter ++;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 8002a0e:	3301      	adds	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
			for(int j=0; j<4; j++){
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	f77f af52 	ble.w	80028ca <_ZN17Comnplicated_zone13advanced_sortEv+0x26>
				}
			}

			if(counter % 2 == 1){
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d017      	beq.n	8002a64 <_ZN17Comnplicated_zone13advanced_sortEv+0x1c0>
				final_point_indexes[final_number_of_points] = point_indexes[i];
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	3218      	adds	r2, #24
 8002a42:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	460a      	mov	r2, r1
 8002a52:	805a      	strh	r2, [r3, #2]
				final_number_of_points ++;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8a3 24e2 	strh.w	r2, [r3, #1250]	; 0x4e2
		for(int i=0; i<number_of_points; i++){
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 8002a70:	461a      	mov	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4293      	cmp	r3, r2
 8002a76:	f6ff af21 	blt.w	80028bc <_ZN17Comnplicated_zone13advanced_sortEv+0x18>
			}
		}
	}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a86:	bf00      	nop
 8002a88:	20020748 	.word	0x20020748

08002a8c <_ZN17Comnplicated_zone14analyse_pointsEv>:


	void analyse_points(){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
		number_of_points = 0;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288

		for(int i=0; i<assembled_points_amount; i++){
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e036      	b.n	8002b10 <_ZN17Comnplicated_zone14analyse_pointsEv+0x84>
			if(assembled_points[i].x > bounding_rect[0].x && assembled_points[i].x < bounding_rect[1].x && assembled_points[i].y < bounding_rect[0].y && assembled_points[i].y > bounding_rect[1].y){
 8002aa2:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <_ZN17Comnplicated_zone14analyse_pointsEv+0xa4>)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	dd2b      	ble.n	8002b0a <_ZN17Comnplicated_zone14analyse_pointsEv+0x7e>
 8002ab2:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <_ZN17Comnplicated_zone14analyse_pointsEv+0xa4>)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	da23      	bge.n	8002b0a <_ZN17Comnplicated_zone14analyse_pointsEv+0x7e>
 8002ac2:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <_ZN17Comnplicated_zone14analyse_pointsEv+0xa4>)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	da1a      	bge.n	8002b0a <_ZN17Comnplicated_zone14analyse_pointsEv+0x7e>
 8002ad4:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <_ZN17Comnplicated_zone14analyse_pointsEv+0xa4>)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	dd11      	ble.n	8002b0a <_ZN17Comnplicated_zone14analyse_pointsEv+0x7e>
				point_indexes[number_of_points] = i;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 8002aec:	461a      	mov	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	b219      	sxth	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3218      	adds	r2, #24
 8002af6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				number_of_points ++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8b3 3288 	ldrh.w	r3, [r3, #648]	; 0x288
 8002b00:	3301      	adds	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
		for(int i=0; i<assembled_points_amount; i++){
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <_ZN17Comnplicated_zone14analyse_pointsEv+0xa8>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	dbc2      	blt.n	8002aa2 <_ZN17Comnplicated_zone14analyse_pointsEv+0x16>
			}
		}

		advanced_sort();
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff fec1 	bl	80028a4 <_ZN17Comnplicated_zone13advanced_sortEv>
		//printf("%d %d\n", number_of_points, final_number_of_points);
		calculate_geomety();
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fc84 	bl	8002430 <_ZN17Comnplicated_zone17calculate_geometyEv>
		//printf("%d %f %f %f %f %d\n", HAL_GetTick() - main_calculation_timer, center_x, center_y, size_x, size_y, object_size);

	}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20020748 	.word	0x20020748
 8002b34:	20022cc8 	.word	0x20022cc8

08002b38 <_ZN18Collision_detector14add_next_valueEv>:
	uint8_t warning_filtered = 0;
	uint8_t braking_filtered = 0;

	uint8_t counter = 0;

	void add_next_value(){
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
		object_exist[0] = object_exist[1];
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 2291 	ldrb.w	r2, [r3, #657]	; 0x291
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		object_center[0] = object_center[1];
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298
		measurment_time[0] = measurment_time[1];
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 22b4 	ldr.w	r2, [r3, #692]	; 0x2b4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0

		warning[0] = warning[1];
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 22dc 	ldrb.w	r2, [r3, #732]	; 0x2dc
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
		warning[1] = warning[2];
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 22dd 	ldrb.w	r2, [r3, #733]	; 0x2dd
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc

		braking[0] = braking[1];
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 22df 	ldrb.w	r2, [r3, #735]	; 0x2df
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
		braking[1] = braking[2];
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
	}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_ZN18Collision_detector10kinematicsEv>:

	void kinematics(){
 8002ba0:	b5b0      	push	{r4, r5, r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
		if(object_exist[0] && object_exist[1]){
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80c2 	beq.w	8002d38 <_ZN18Collision_detector10kinematicsEv+0x198>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80bc 	beq.w	8002d38 <_ZN18Collision_detector10kinematicsEv+0x198>
			velocity = (object_center[1] - object_center[0])/(measurment_time[1] - measurment_time[0]);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	; 0x2a0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 8002bcc:	f7fd fb6c 	bl	80002a8 <__aeabi_dsub>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4614      	mov	r4, r2
 8002bd6:	461d      	mov	r5, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 22b4 	ldr.w	r2, [r3, #692]	; 0x2b4
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc9c 	bl	8000524 <__aeabi_ui2d>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fe3a 	bl	800086c <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0

			projected_location1 = object_center[1] + velocity*collision_detection_time;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	e9d3 45a8 	ldrd	r4, r5, [r3, #672]	; 0x2a0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 8002c0e:	4b51      	ldr	r3, [pc, #324]	; (8002d54 <_ZN18Collision_detector10kinematicsEv+0x1b4>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f7fd fd00 	bl	8000618 <__aeabi_dmul>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	4629      	mov	r1, r5
 8002c20:	f7fd fb44 	bl	80002ac <__adddf3>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8

			if ((projected_location1 < critical_distance && comparison_type == 0) || (projected_location1 > critical_distance && comparison_type == 1)){
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	e9d3 45b2 	ldrd	r4, r5, [r3, #712]	; 0x2c8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fc82 	bl	8000544 <__aeabi_i2d>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4620      	mov	r0, r4
 8002c46:	4629      	mov	r1, r5
 8002c48:	f7fd ff58 	bl	8000afc <__aeabi_dcmplt>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <_ZN18Collision_detector10kinematicsEv+0xbc>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d016      	beq.n	8002c8a <_ZN18Collision_detector10kinematicsEv+0xea>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	e9d3 45b2 	ldrd	r4, r5, [r3, #712]	; 0x2c8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc6b 	bl	8000544 <__aeabi_i2d>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4620      	mov	r0, r4
 8002c74:	4629      	mov	r1, r5
 8002c76:	f7fd ff5f 	bl	8000b38 <__aeabi_dcmpgt>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <_ZN18Collision_detector10kinematicsEv+0xf4>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d104      	bne.n	8002c94 <_ZN18Collision_detector10kinematicsEv+0xf4>
				warning[2] = 1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 22dd 	strb.w	r2, [r3, #733]	; 0x2dd
 8002c92:	e003      	b.n	8002c9c <_ZN18Collision_detector10kinematicsEv+0xfc>
			}
			else{
				warning[2] = 0;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 22dd 	strb.w	r2, [r3, #733]	; 0x2dd
			}

			projected_location2 = object_center[1] + velocity*1000;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	e9d3 45a8 	ldrd	r4, r5, [r3, #672]	; 0x2a0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <_ZN18Collision_detector10kinematicsEv+0x1b8>)
 8002cae:	f7fd fcb3 	bl	8000618 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	4629      	mov	r1, r5
 8002cba:	f7fd faf7 	bl	80002ac <__adddf3>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0

			if ((projected_location2 < critical_distance && comparison_type == 0) || (projected_location1 > critical_distance && comparison_type == 1)){
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	e9d3 45b4 	ldrd	r4, r5, [r3, #720]	; 0x2d0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fc35 	bl	8000544 <__aeabi_i2d>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	f7fd ff0b 	bl	8000afc <__aeabi_dcmplt>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d004      	beq.n	8002cf6 <_ZN18Collision_detector10kinematicsEv+0x156>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <_ZN18Collision_detector10kinematicsEv+0x184>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	e9d3 45b2 	ldrd	r4, r5, [r3, #712]	; 0x2c8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fc1e 	bl	8000544 <__aeabi_i2d>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	4629      	mov	r1, r5
 8002d10:	f7fd ff12 	bl	8000b38 <__aeabi_dcmpgt>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <_ZN18Collision_detector10kinematicsEv+0x18e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d104      	bne.n	8002d2e <_ZN18Collision_detector10kinematicsEv+0x18e>
				braking[2] = 1;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
			if ((projected_location2 < critical_distance && comparison_type == 0) || (projected_location1 > critical_distance && comparison_type == 1)){
 8002d2c:	e00d      	b.n	8002d4a <_ZN18Collision_detector10kinematicsEv+0x1aa>
			}
			else{
				braking[2] = 0;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
			if ((projected_location2 < critical_distance && comparison_type == 0) || (projected_location1 > critical_distance && comparison_type == 1)){
 8002d36:	e008      	b.n	8002d4a <_ZN18Collision_detector10kinematicsEv+0x1aa>
			}

			//printf("%f %f %f %f %d %d %d %d %d \n", object_center[1], velocity, projected_location1, projected_location2, warning[0], warning[1], warning[2], warning_filtered, braking_filtered);
		}
		else{
			braking[2] = 0;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
			warning[2] = 0;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 22dd 	strb.w	r2, [r3, #733]	; 0x2dd
		}
	}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bdb0      	pop	{r4, r5, r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000058 	.word	0x20000058
 8002d58:	408f4000 	.word	0x408f4000

08002d5c <_ZN18Collision_detector6filterEv>:

	void filter(){
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
		counter = 0;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
		for (int i=0; i<3; i++){
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e010      	b.n	8002d94 <_ZN18Collision_detector6filterEv+0x38>
			counter += warning[i];
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f203 23db 	addw	r3, r3, #731	; 0x2db
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
		for (int i=0; i<3; i++){
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	ddeb      	ble.n	8002d72 <_ZN18Collision_detector6filterEv+0x16>
		}

		if (counter >= 2){
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d904      	bls.n	8002dae <_ZN18Collision_detector6filterEv+0x52>
			warning_filtered = 1;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 8002dac:	e003      	b.n	8002db6 <_ZN18Collision_detector6filterEv+0x5a>
		}
		else{
			warning_filtered = 0;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
		}

		counter = 0;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
		for (int i=0; i<3; i++){
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	e010      	b.n	8002de6 <_ZN18Collision_detector6filterEv+0x8a>
			counter += braking[i];
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	440b      	add	r3, r1
 8002dd0:	f203 23de 	addw	r3, r3, #734	; 0x2de
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
		for (int i=0; i<3; i++){
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3301      	adds	r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	ddeb      	ble.n	8002dc4 <_ZN18Collision_detector6filterEv+0x68>
		}

		if (counter >= 2){
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d904      	bls.n	8002e00 <_ZN18Collision_detector6filterEv+0xa4>
			braking_filtered = 1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
		}
		else{
			braking_filtered = 0;
		}
	}
 8002dfe:	e003      	b.n	8002e08 <_ZN18Collision_detector6filterEv+0xac>
			braking_filtered = 0;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
	}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	0000      	movs	r0, r0
	...

08002e18 <_ZN18Collision_detector22calculate_cloud_centerEv>:

	void calculate_cloud_center(){
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
		number_of_points = 0;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268

		for(int i=0; i<assembled_points_amount; i++){
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e036      	b.n	8002e9c <_ZN18Collision_detector22calculate_cloud_centerEv+0x84>
			if(assembled_points[i].x > bounding_rect[0].x && assembled_points[i].x < bounding_rect[1].x && assembled_points[i].y < bounding_rect[0].y && assembled_points[i].y > bounding_rect[1].y){
 8002e2e:	4a59      	ldr	r2, [pc, #356]	; (8002f94 <_ZN18Collision_detector22calculate_cloud_centerEv+0x17c>)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	dd2b      	ble.n	8002e96 <_ZN18Collision_detector22calculate_cloud_centerEv+0x7e>
 8002e3e:	4a55      	ldr	r2, [pc, #340]	; (8002f94 <_ZN18Collision_detector22calculate_cloud_centerEv+0x17c>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	da23      	bge.n	8002e96 <_ZN18Collision_detector22calculate_cloud_centerEv+0x7e>
 8002e4e:	4a51      	ldr	r2, [pc, #324]	; (8002f94 <_ZN18Collision_detector22calculate_cloud_centerEv+0x17c>)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	da1a      	bge.n	8002e96 <_ZN18Collision_detector22calculate_cloud_centerEv+0x7e>
 8002e60:	4a4c      	ldr	r2, [pc, #304]	; (8002f94 <_ZN18Collision_detector22calculate_cloud_centerEv+0x17c>)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	dd11      	ble.n	8002e96 <_ZN18Collision_detector22calculate_cloud_centerEv+0x7e>
				point_indexes[number_of_points] = i;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8002e78:	461a      	mov	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	b219      	sxth	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3208      	adds	r2, #8
 8002e82:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				number_of_points ++;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
		for(int i=0; i<assembled_points_amount; i++){
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <_ZN18Collision_detector22calculate_cloud_centerEv+0x180>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	dbc2      	blt.n	8002e2e <_ZN18Collision_detector22calculate_cloud_centerEv+0x16>
			}
		}

		//printf("%d ", number_of_points);

		add_next_value();
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fe45 	bl	8002b38 <_ZN18Collision_detector14add_next_valueEv>

		if (number_of_points > POINTS_THRESHOLD){
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	f240 815f 	bls.w	8003178 <_ZN18Collision_detector22calculate_cloud_centerEv+0x360>
			for (int i=0; i<number_of_points; i++){
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	e036      	b.n	8002f2e <_ZN18Collision_detector22calculate_cloud_centerEv+0x116>
				center_x += assembled_points[point_indexes[i]].x;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	e9d3 459c 	ldrd	r4, r5, [r3, #624]	; 0x270
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	3208      	adds	r2, #8
 8002ecc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <_ZN18Collision_detector22calculate_cloud_centerEv+0x17c>)
 8002ed4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb33 	bl	8000544 <__aeabi_i2d>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f7fd f9e1 	bl	80002ac <__adddf3>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
				center_y += assembled_points[point_indexes[i]].y;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	e9d3 459e 	ldrd	r4, r5, [r3, #632]	; 0x278
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	3208      	adds	r2, #8
 8002f00:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <_ZN18Collision_detector22calculate_cloud_centerEv+0x17c>)
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fb19 	bl	8000544 <__aeabi_i2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4620      	mov	r0, r4
 8002f18:	4629      	mov	r1, r5
 8002f1a:	f7fd f9c7 	bl	80002ac <__adddf3>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
			for (int i=0; i<number_of_points; i++){
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8002f34:	461a      	mov	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	dbc1      	blt.n	8002ec0 <_ZN18Collision_detector22calculate_cloud_centerEv+0xa8>
			}

			center_x = center_x / number_of_points;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	e9d3 459c 	ldrd	r4, r5, [r3, #624]	; 0x270
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fafb 	bl	8000544 <__aeabi_i2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4620      	mov	r0, r4
 8002f54:	4629      	mov	r1, r5
 8002f56:	f7fd fc89 	bl	800086c <__aeabi_ddiv>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
			center_y = center_y / number_of_points;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	e9d3 459e 	ldrd	r4, r5, [r3, #632]	; 0x278
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fae7 	bl	8000544 <__aeabi_i2d>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	f7fd fc75 	bl	800086c <__aeabi_ddiv>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278

			for (int i=0; i<number_of_points; i++){
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e075      	b.n	800307e <_ZN18Collision_detector22calculate_cloud_centerEv+0x266>
 8002f92:	bf00      	nop
 8002f94:	20020748 	.word	0x20020748
 8002f98:	20022cc8 	.word	0x20022cc8
				size_x += pow(double(abs(center_x - assembled_points[point_indexes[i]].x)), 0.5);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	e9d3 459c 	ldrd	r4, r5, [r3, #624]	; 0x270
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <_ZN18Collision_detector22calculate_cloud_centerEv+0x388>)
 8002fb0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fac5 	bl	8000544 <__aeabi_i2d>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f7fd f971 	bl	80002a8 <__aeabi_dsub>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	ec43 2b17 	vmov	d7, r2, r3
 8002fce:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd2:	eef0 0a67 	vmov.f32	s1, s15
 8002fd6:	f7fd ff87 	bl	8000ee8 <_ZSt3abse>
 8002fda:	eeb0 7a40 	vmov.f32	s14, s0
 8002fde:	eef0 7a60 	vmov.f32	s15, s1
 8002fe2:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8003198 <_ZN18Collision_detector22calculate_cloud_centerEv+0x380>
 8002fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fea:	eef0 0a67 	vmov.f32	s1, s15
 8002fee:	f00f fdfb 	bl	8012be8 <pow>
 8002ff2:	ec51 0b10 	vmov	r0, r1, d0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 8002ffc:	f7fd f956 	bl	80002ac <__adddf3>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
				size_y += pow(double(abs(center_y - assembled_points[point_indexes[i]].y)), 0.5);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	e9d3 459e 	ldrd	r4, r5, [r3, #632]	; 0x278
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	3208      	adds	r2, #8
 8003016:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800301a:	4a61      	ldr	r2, [pc, #388]	; (80031a0 <_ZN18Collision_detector22calculate_cloud_centerEv+0x388>)
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fa8e 	bl	8000544 <__aeabi_i2d>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4620      	mov	r0, r4
 800302e:	4629      	mov	r1, r5
 8003030:	f7fd f93a 	bl	80002a8 <__aeabi_dsub>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	ec43 2b17 	vmov	d7, r2, r3
 800303c:	eeb0 0a47 	vmov.f32	s0, s14
 8003040:	eef0 0a67 	vmov.f32	s1, s15
 8003044:	f7fd ff50 	bl	8000ee8 <_ZSt3abse>
 8003048:	eeb0 7a40 	vmov.f32	s14, s0
 800304c:	eef0 7a60 	vmov.f32	s15, s1
 8003050:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8003198 <_ZN18Collision_detector22calculate_cloud_centerEv+0x380>
 8003054:	eeb0 0a47 	vmov.f32	s0, s14
 8003058:	eef0 0a67 	vmov.f32	s1, s15
 800305c:	f00f fdc4 	bl	8012be8 <pow>
 8003060:	ec51 0b10 	vmov	r0, r1, d0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	e9d3 23a2 	ldrd	r2, r3, [r3, #648]	; 0x288
 800306a:	f7fd f91f 	bl	80002ac <__adddf3>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
			for (int i=0; i<number_of_points; i++){
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8003084:	461a      	mov	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4293      	cmp	r3, r2
 800308a:	db87      	blt.n	8002f9c <_ZN18Collision_detector22calculate_cloud_centerEv+0x184>
			}

			size_x = pow(size_x / number_of_points, 2);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	e9d3 45a0 	ldrd	r4, r5, [r3, #640]	; 0x280
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa53 	bl	8000544 <__aeabi_i2d>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f7fd fbe1 	bl	800086c <__aeabi_ddiv>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	ec43 2b17 	vmov	d7, r2, r3
 80030b2:	2002      	movs	r0, #2
 80030b4:	eeb0 0a47 	vmov.f32	s0, s14
 80030b8:	eef0 0a67 	vmov.f32	s1, s15
 80030bc:	f001 f84c 	bl	8004158 <_ZSt3powIeiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80030c0:	eeb0 7a40 	vmov.f32	s14, s0
 80030c4:	eef0 7a60 	vmov.f32	s15, s1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	ed83 7ba0 	vstr	d7, [r3, #640]	; 0x280
			size_y = pow(size_y / number_of_points, 2);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	e9d3 45a2 	ldrd	r4, r5, [r3, #648]	; 0x288
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fa32 	bl	8000544 <__aeabi_i2d>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4620      	mov	r0, r4
 80030e6:	4629      	mov	r1, r5
 80030e8:	f7fd fbc0 	bl	800086c <__aeabi_ddiv>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	ec43 2b17 	vmov	d7, r2, r3
 80030f4:	2002      	movs	r0, #2
 80030f6:	eeb0 0a47 	vmov.f32	s0, s14
 80030fa:	eef0 0a67 	vmov.f32	s1, s15
 80030fe:	f001 f82b 	bl	8004158 <_ZSt3powIeiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003102:	eeb0 7a40 	vmov.f32	s14, s0
 8003106:	eef0 7a60 	vmov.f32	s15, s1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	ed83 7ba2 	vstr	d7, [r3, #648]	; 0x288

			
			if ((size_x + size_y)/2.0 > 3){
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	e9d3 01a0 	ldrd	r0, r1, [r3, #640]	; 0x280
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	e9d3 23a2 	ldrd	r2, r3, [r3, #648]	; 0x288
 800311c:	f7fd f8c6 	bl	80002ac <__adddf3>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003130:	f7fd fb9c 	bl	800086c <__aeabi_ddiv>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <_ZN18Collision_detector22calculate_cloud_centerEv+0x38c>)
 8003142:	f7fd fcf9 	bl	8000b38 <__aeabi_dcmpgt>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <_ZN18Collision_detector22calculate_cloud_centerEv+0x356>
				object_exist[1] = 1;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
				measurment_time[1] = HAL_GetTick();
 8003154:	f003 f830 	bl	80061b8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
				object_center[1] = center_y;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	e9d3 239e 	ldrd	r2, r3, [r3, #632]	; 0x278
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
 800316c:	e008      	b.n	8003180 <_ZN18Collision_detector22calculate_cloud_centerEv+0x368>
			}
			else{
				object_exist[1] = 0;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8003176:	e003      	b.n	8003180 <_ZN18Collision_detector22calculate_cloud_centerEv+0x368>
			}
		}
		else{
			object_exist[1] = 0;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
		}

		kinematics();
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fd0d 	bl	8002ba0 <_ZN18Collision_detector10kinematicsEv>
		filter();
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fde8 	bl	8002d5c <_ZN18Collision_detector6filterEv>
	}
 800318c:	bf00      	nop
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bdb0      	pop	{r4, r5, r7, pc}
 8003194:	f3af 8000 	nop.w
 8003198:	00000000 	.word	0x00000000
 800319c:	3fe00000 	.word	0x3fe00000
 80031a0:	20020748 	.word	0x20020748
 80031a4:	40080000 	.word	0x40080000

080031a8 <_ZN17Comnplicated_zoneC1Ev>:
class Comnplicated_zone{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8a3 24e2 	strh.w	r2, [r3, #1250]	; 0x4e2
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80031c6:	4619      	mov	r1, r3
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e941 2302 	strd	r2, r3, [r1, #-8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80031da:	4619      	mov	r1, r3
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9c1 2300 	strd	r2, r3, [r1]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	4619      	mov	r1, r3
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	e941 2302 	strd	r2, r3, [r1, #-8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	4619      	mov	r1, r3
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9c1 2300 	strd	r2, r3, [r1]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <_ZN4ZoneC1Ev>:
class Zone{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f8a3 2994 	strh.w	r2, [r3, #2452]	; 0x994
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f8a3 2996 	strh.w	r2, [r3, #2454]	; 0x996
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8a3 2998 	strh.w	r2, [r3, #2456]	; 0x998
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 800326e:	4619      	mov	r1, r3
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9c1 2300 	strd	r2, r3, [r1]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8003282:	4619      	mov	r1, r3
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e941 2302 	strd	r2, r3, [r1, #-8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8003296:	4619      	mov	r1, r3
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9c1 2300 	strd	r2, r3, [r1]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 80032aa:	4619      	mov	r1, r3
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e941 2302 	strd	r2, r3, [r1, #-8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <_ZN18Collision_detectorC1Ev>:
class Collision_detector{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 22dd 	strb.w	r2, [r3, #733]	; 0x2dd
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <_ZN12Display_dataC1Ev>:
Zone blind_spots[5];

Collision_detector front_detector;
Collision_detector rear_detector;

struct Display_data{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	22aa      	movs	r2, #170	; 0xaa
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a0c      	ldr	r2, [pc, #48]	; (800341c <_ZN12Display_dataC1Ev+0x44>)
 80033ea:	3301      	adds	r3, #1
 80033ec:	6810      	ldr	r0, [r2, #0]
 80033ee:	6018      	str	r0, [r3, #0]
 80033f0:	8891      	ldrh	r1, [r2, #4]
 80033f2:	7992      	ldrb	r2, [r2, #6]
 80033f4:	8099      	strh	r1, [r3, #4]
 80033f6:	719a      	strb	r2, [r3, #6]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	721a      	strb	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	725a      	strb	r2, [r3, #9]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	330a      	adds	r3, #10
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	08017480 	.word	0x08017480

08003420 <loop>:

settings_profile smallest_profile;

uint32_t setting_send_timer = 0;

void loop(){
 8003420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003424:	b090      	sub	sp, #64	; 0x40
 8003426:	af06      	add	r7, sp, #24
	for (int i=0; i<4; i++){
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
 800342c:	e00c      	b.n	8003448 <loop+0x28>
		lidars[i].tick();
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f248 1230 	movw	r2, #33072	; 0x8130
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	4a98      	ldr	r2, [pc, #608]	; (800369c <loop+0x27c>)
 800343a:	4413      	add	r3, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe f909 	bl	8001654 <_ZN15Lidar_functions4tickEv>
	for (int i=0; i<4; i++){
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	3301      	adds	r3, #1
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	2b03      	cmp	r3, #3
 800344c:	ddef      	ble.n	800342e <loop+0xe>
	}

	if (HAL_GetTick() - main_calculation_timer > 160){
 800344e:	f002 feb3 	bl	80061b8 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	4b92      	ldr	r3, [pc, #584]	; (80036a0 <loop+0x280>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2ba0      	cmp	r3, #160	; 0xa0
 800345c:	bf8c      	ite	hi
 800345e:	2301      	movhi	r3, #1
 8003460:	2300      	movls	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8177 	beq.w	8003758 <loop+0x338>

		assembled_points_amount = 0;
 800346a:	4b8e      	ldr	r3, [pc, #568]	; (80036a4 <loop+0x284>)
 800346c:	2200      	movs	r2, #0
 800346e:	801a      	strh	r2, [r3, #0]

		for (int i=0; i<4; i++){
 8003470:	2300      	movs	r3, #0
 8003472:	623b      	str	r3, [r7, #32]
 8003474:	e05f      	b.n	8003536 <loop+0x116>
			/*for(int j=0; j<lidars[i].points_amount_old; j++, assembled_points_amount++){
			assembled_points[assembled_points_amount].x = (lidars[i].lidar_points_processed_old[j].x + 0.5);
			assembled_points[assembled_points_amount].y = (lidars[i].lidar_points_processed_old[j].y + 0.5);
			}*/

			for(int j=0; j<lidars[i].points_amount; j++, assembled_points_amount++){
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e04a      	b.n	8003512 <loop+0xf2>
				assembled_points[assembled_points_amount].x = int(lidars[i].lidar_points_processed[j].x + 0.5);
 800347c:	4987      	ldr	r1, [pc, #540]	; (800369c <loop+0x27c>)
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	0152      	lsls	r2, r2, #5
 8003484:	f248 1030 	movw	r0, #33072	; 0x8130
 8003488:	fb00 f303 	mul.w	r3, r0, r3
 800348c:	4413      	add	r3, r2
 800348e:	440b      	add	r3, r1
 8003490:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8003494:	3318      	adds	r3, #24
 8003496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	4b82      	ldr	r3, [pc, #520]	; (80036a8 <loop+0x288>)
 80034a0:	f7fc ff04 	bl	80002ac <__adddf3>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	497e      	ldr	r1, [pc, #504]	; (80036a4 <loop+0x284>)
 80034aa:	8809      	ldrh	r1, [r1, #0]
 80034ac:	460c      	mov	r4, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f7fd fb61 	bl	8000b78 <__aeabi_d2iz>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4a7c      	ldr	r2, [pc, #496]	; (80036ac <loop+0x28c>)
 80034ba:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
				assembled_points[assembled_points_amount].y = int(lidars[i].lidar_points_processed[j].y + 0.5);
 80034be:	4977      	ldr	r1, [pc, #476]	; (800369c <loop+0x27c>)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f103 02e9 	add.w	r2, r3, #233	; 0xe9
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	0152      	lsls	r2, r2, #5
 80034ca:	f248 1030 	movw	r0, #33072	; 0x8130
 80034ce:	fb00 f303 	mul.w	r3, r0, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	440b      	add	r3, r1
 80034d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <loop+0x288>)
 80034e0:	f7fc fee4 	bl	80002ac <__adddf3>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	496e      	ldr	r1, [pc, #440]	; (80036a4 <loop+0x284>)
 80034ea:	8809      	ldrh	r1, [r1, #0]
 80034ec:	460c      	mov	r4, r1
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	f7fd fb41 	bl	8000b78 <__aeabi_d2iz>
 80034f6:	4602      	mov	r2, r0
 80034f8:	496c      	ldr	r1, [pc, #432]	; (80036ac <loop+0x28c>)
 80034fa:	00e3      	lsls	r3, r4, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	605a      	str	r2, [r3, #4]
			for(int j=0; j<lidars[i].points_amount; j++, assembled_points_amount++){
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	3301      	adds	r3, #1
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <loop+0x284>)
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <loop+0x284>)
 8003510:	801a      	strh	r2, [r3, #0]
 8003512:	4a62      	ldr	r2, [pc, #392]	; (800369c <loop+0x27c>)
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f248 1130 	movw	r1, #33072	; 0x8130
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
 8003524:	3308      	adds	r3, #8
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	4293      	cmp	r3, r2
 800352e:	dba5      	blt.n	800347c <loop+0x5c>
		for (int i=0; i<4; i++){
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	3301      	adds	r3, #1
 8003534:	623b      	str	r3, [r7, #32]
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	2b03      	cmp	r3, #3
 800353a:	dd9c      	ble.n	8003476 <loop+0x56>
			}
		}

		front_detector.calculate_cloud_center();
 800353c:	485c      	ldr	r0, [pc, #368]	; (80036b0 <loop+0x290>)
 800353e:	f7ff fc6b 	bl	8002e18 <_ZN18Collision_detector22calculate_cloud_centerEv>
		rear_detector.calculate_cloud_center();
 8003542:	485c      	ldr	r0, [pc, #368]	; (80036b4 <loop+0x294>)
 8003544:	f7ff fc68 	bl	8002e18 <_ZN18Collision_detector22calculate_cloud_centerEv>

		for(int i=0; i<5; i++){
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e00c      	b.n	8003568 <loop+0x148>
			blind_spots[i].analyse_points();
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f640 12c8 	movw	r2, #2504	; 0x9c8
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	4a57      	ldr	r2, [pc, #348]	; (80036b8 <loop+0x298>)
 800355a:	4413      	add	r3, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe ff11 	bl	8002384 <_ZN4Zone14analyse_pointsEv>
		for(int i=0; i<5; i++){
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	3301      	adds	r3, #1
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b04      	cmp	r3, #4
 800356c:	ddef      	ble.n	800354e <loop+0x12e>
		}
		for(int i=0; i<2; i++){
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e00c      	b.n	800358e <loop+0x16e>
			danger_zones[i].analyse_points();
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	4a4f      	ldr	r2, [pc, #316]	; (80036bc <loop+0x29c>)
 8003580:	4413      	add	r3, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fa82 	bl	8002a8c <_ZN17Comnplicated_zone14analyse_pointsEv>
		for(int i=0; i<2; i++){
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3301      	adds	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b01      	cmp	r3, #1
 8003592:	ddef      	ble.n	8003574 <loop+0x154>
		}

		tx_packet.zones_status[0] = blind_spots[0].object_zone;
 8003594:	4b48      	ldr	r3, [pc, #288]	; (80036b8 <loop+0x298>)
 8003596:	f893 39c0 	ldrb.w	r3, [r3, #2496]	; 0x9c0
 800359a:	b25a      	sxtb	r2, r3
 800359c:	4b48      	ldr	r3, [pc, #288]	; (80036c0 <loop+0x2a0>)
 800359e:	705a      	strb	r2, [r3, #1]
		tx_packet.zones_status[1] = danger_zones[0].object_size;
 80035a0:	4b46      	ldr	r3, [pc, #280]	; (80036bc <loop+0x29c>)
 80035a2:	f893 3508 	ldrb.w	r3, [r3, #1288]	; 0x508
 80035a6:	b25a      	sxtb	r2, r3
 80035a8:	4b45      	ldr	r3, [pc, #276]	; (80036c0 <loop+0x2a0>)
 80035aa:	709a      	strb	r2, [r3, #2]
		tx_packet.zones_status[2] = danger_zones[1].object_size;
 80035ac:	4b43      	ldr	r3, [pc, #268]	; (80036bc <loop+0x29c>)
 80035ae:	f893 3a20 	ldrb.w	r3, [r3, #2592]	; 0xa20
 80035b2:	b25a      	sxtb	r2, r3
 80035b4:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <loop+0x2a0>)
 80035b6:	70da      	strb	r2, [r3, #3]
		tx_packet.zones_status[3] = blind_spots[1].object_zone;
 80035b8:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <loop+0x298>)
 80035ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035be:	f893 3388 	ldrb.w	r3, [r3, #904]	; 0x388
 80035c2:	b25a      	sxtb	r2, r3
 80035c4:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <loop+0x2a0>)
 80035c6:	711a      	strb	r2, [r3, #4]
		tx_packet.zones_status[4] = blind_spots[2].object_zone;
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <loop+0x298>)
 80035ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ce:	f893 3d50 	ldrb.w	r3, [r3, #3408]	; 0xd50
 80035d2:	b25a      	sxtb	r2, r3
 80035d4:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <loop+0x2a0>)
 80035d6:	715a      	strb	r2, [r3, #5]
		tx_packet.zones_status[5] = blind_spots[3].object_zone;
 80035d8:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <loop+0x298>)
 80035da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035de:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 80035e2:	b25a      	sxtb	r2, r3
 80035e4:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <loop+0x2a0>)
 80035e6:	719a      	strb	r2, [r3, #6]
		tx_packet.zones_status[6] = blind_spots[4].object_zone;
 80035e8:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <loop+0x298>)
 80035ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80035ee:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80035f2:	b25a      	sxtb	r2, r3
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <loop+0x2a0>)
 80035f6:	71da      	strb	r2, [r3, #7]

		tx_packet.collisions[0] = rear_detector.warning_filtered;
 80035f8:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <loop+0x294>)
 80035fa:	f893 22e1 	ldrb.w	r2, [r3, #737]	; 0x2e1
 80035fe:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <loop+0x2a0>)
 8003600:	721a      	strb	r2, [r3, #8]
		tx_packet.collisions[1] = front_detector.warning_filtered;
 8003602:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <loop+0x290>)
 8003604:	f893 22e1 	ldrb.w	r2, [r3, #737]	; 0x2e1
 8003608:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <loop+0x2a0>)
 800360a:	725a      	strb	r2, [r3, #9]

		for(int i=0; i<4; i++){
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	e030      	b.n	8003674 <loop+0x254>
			if(lidars[i].normal_working == 1){
 8003612:	4a22      	ldr	r2, [pc, #136]	; (800369c <loop+0x27c>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f248 1130 	movw	r1, #33072	; 0x8130
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
 8003624:	3321      	adds	r3, #33	; 0x21
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d106      	bne.n	800363a <loop+0x21a>
				tx_packet.lidars_status[i] = 2;
 800362c:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <loop+0x2a0>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	330a      	adds	r3, #10
 8003634:	2202      	movs	r2, #2
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	e019      	b.n	800366e <loop+0x24e>
			}
			else if(lidars[i].connected == 1){
 800363a:	4a18      	ldr	r2, [pc, #96]	; (800369c <loop+0x27c>)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f248 1130 	movw	r1, #33072	; 0x8130
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
 800364c:	3319      	adds	r3, #25
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <loop+0x242>
				tx_packet.lidars_status[i] = 1;
 8003654:	4a1a      	ldr	r2, [pc, #104]	; (80036c0 <loop+0x2a0>)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	330a      	adds	r3, #10
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e005      	b.n	800366e <loop+0x24e>
			}
			else{
				tx_packet.lidars_status[i] = 0;
 8003662:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <loop+0x2a0>)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	330a      	adds	r3, #10
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<4; i++){
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3301      	adds	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b03      	cmp	r3, #3
 8003678:	ddcb      	ble.n	8003612 <loop+0x1f2>
			}
		}

		if(settings.autoBreak == 1 && (front_detector.braking_filtered == 1)){
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <loop+0x2a4>)
 800367c:	791b      	ldrb	r3, [r3, #4]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d124      	bne.n	80036cc <loop+0x2ac>
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <loop+0x290>)
 8003684:	f893 32e2 	ldrb.w	r3, [r3, #738]	; 0x2e2
 8003688:	2b01      	cmp	r3, #1
 800368a:	d11f      	bne.n	80036cc <loop+0x2ac>
			HAL_GPIO_WritePin(BRAKE_2_GPIO_Port, BRAKE_2_Pin, GPIO_PIN_SET);
 800368c:	2201      	movs	r2, #1
 800368e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003692:	480d      	ldr	r0, [pc, #52]	; (80036c8 <loop+0x2a8>)
 8003694:	f004 fb7a 	bl	8007d8c <HAL_GPIO_WritePin>
 8003698:	e01e      	b.n	80036d8 <loop+0x2b8>
 800369a:	bf00      	nop
 800369c:	20000268 	.word	0x20000268
 80036a0:	20020744 	.word	0x20020744
 80036a4:	20022cc8 	.word	0x20022cc8
 80036a8:	3fe00000 	.word	0x3fe00000
 80036ac:	20020748 	.word	0x20020748
 80036b0:	200267e8 	.word	0x200267e8
 80036b4:	20026ad0 	.word	0x20026ad0
 80036b8:	20023700 	.word	0x20023700
 80036bc:	20022cd0 	.word	0x20022cd0
 80036c0:	20026db8 	.word	0x20026db8
 80036c4:	20020728 	.word	0x20020728
 80036c8:	42020800 	.word	0x42020800
		}
		else{
			HAL_GPIO_WritePin(BRAKE_2_GPIO_Port, BRAKE_2_Pin, GPIO_PIN_RESET);
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036d2:	488d      	ldr	r0, [pc, #564]	; (8003908 <loop+0x4e8>)
 80036d4:	f004 fb5a 	bl	8007d8c <HAL_GPIO_WritePin>
		}

		memcpy(display_tx_buffer, &tx_packet, sizeof(tx_packet));
 80036d8:	4a8c      	ldr	r2, [pc, #560]	; (800390c <loop+0x4ec>)
 80036da:	4b8d      	ldr	r3, [pc, #564]	; (8003910 <loop+0x4f0>)
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80036e8:	e884 0003 	stmia.w	r4, {r0, r1}

		HAL_UART_Transmit_IT(&huart7, (uint8_t*)display_tx_buffer, sizeof(display_tx_buffer));
 80036ec:	2218      	movs	r2, #24
 80036ee:	4987      	ldr	r1, [pc, #540]	; (800390c <loop+0x4ec>)
 80036f0:	4888      	ldr	r0, [pc, #544]	; (8003914 <loop+0x4f4>)
 80036f2:	f00b ff8b 	bl	800f60c <HAL_UART_Transmit_IT>

		printf("%d %d %d %d %d %d %d %d\n", settings.power, settings.sensetivity, settings.range, settings.collision, settings.autoBreak, settings.brightness_1, settings.brightness_2, HAL_GetTick() - main_calculation_timer, HAL_GetTick());
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <loop+0x4f8>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	4698      	mov	r8, r3
 80036fc:	4b86      	ldr	r3, [pc, #536]	; (8003918 <loop+0x4f8>)
 80036fe:	789b      	ldrb	r3, [r3, #2]
 8003700:	4699      	mov	r9, r3
 8003702:	4b85      	ldr	r3, [pc, #532]	; (8003918 <loop+0x4f8>)
 8003704:	785b      	ldrb	r3, [r3, #1]
 8003706:	469a      	mov	sl, r3
 8003708:	4b83      	ldr	r3, [pc, #524]	; (8003918 <loop+0x4f8>)
 800370a:	78db      	ldrb	r3, [r3, #3]
 800370c:	461d      	mov	r5, r3
 800370e:	4b82      	ldr	r3, [pc, #520]	; (8003918 <loop+0x4f8>)
 8003710:	791b      	ldrb	r3, [r3, #4]
 8003712:	461e      	mov	r6, r3
 8003714:	4b80      	ldr	r3, [pc, #512]	; (8003918 <loop+0x4f8>)
 8003716:	795b      	ldrb	r3, [r3, #5]
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	4b7f      	ldr	r3, [pc, #508]	; (8003918 <loop+0x4f8>)
 800371c:	799b      	ldrb	r3, [r3, #6]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	f002 fd4a 	bl	80061b8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	4b7d      	ldr	r3, [pc, #500]	; (800391c <loop+0x4fc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1ad4      	subs	r4, r2, r3
 800372c:	f002 fd44 	bl	80061b8 <HAL_GetTick>
 8003730:	4603      	mov	r3, r0
 8003732:	9305      	str	r3, [sp, #20]
 8003734:	9404      	str	r4, [sp, #16]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	9203      	str	r2, [sp, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	9601      	str	r6, [sp, #4]
 8003740:	9500      	str	r5, [sp, #0]
 8003742:	4653      	mov	r3, sl
 8003744:	464a      	mov	r2, r9
 8003746:	4641      	mov	r1, r8
 8003748:	4875      	ldr	r0, [pc, #468]	; (8003920 <loop+0x500>)
 800374a:	f011 fecd 	bl	80154e8 <iprintf>

		main_calculation_timer = HAL_GetTick();
 800374e:	f002 fd33 	bl	80061b8 <HAL_GetTick>
 8003752:	4603      	mov	r3, r0
 8003754:	4a71      	ldr	r2, [pc, #452]	; (800391c <loop+0x4fc>)
 8003756:	6013      	str	r3, [r2, #0]
	}

	if(HAL_GetTick() - connect_update_timer > 100){
 8003758:	f002 fd2e 	bl	80061b8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	4b71      	ldr	r3, [pc, #452]	; (8003924 <loop+0x504>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b64      	cmp	r3, #100	; 0x64
 8003766:	bf8c      	ite	hi
 8003768:	2301      	movhi	r3, #1
 800376a:	2300      	movls	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d017      	beq.n	80037a2 <loop+0x382>
		for (int i=0; i<4; i++){
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e00c      	b.n	8003792 <loop+0x372>
			lidars[i].update_connection_status();
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f248 1230 	movw	r2, #33072	; 0x8130
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	4a69      	ldr	r2, [pc, #420]	; (8003928 <loop+0x508>)
 8003784:	4413      	add	r3, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd ffb0 	bl	80016ec <_ZN15Lidar_functions24update_connection_statusEv>
		for (int i=0; i<4; i++){
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b03      	cmp	r3, #3
 8003796:	ddef      	ble.n	8003778 <loop+0x358>
		}
		
		connect_update_timer = HAL_GetTick();
 8003798:	f002 fd0e 	bl	80061b8 <HAL_GetTick>
 800379c:	4603      	mov	r3, r0
 800379e:	4a61      	ldr	r2, [pc, #388]	; (8003924 <loop+0x504>)
 80037a0:	6013      	str	r3, [r2, #0]
	}

	if (new_settings && HAL_GetTick()>1000){
 80037a2:	4b62      	ldr	r3, [pc, #392]	; (800392c <loop+0x50c>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <loop+0x39a>
 80037aa:	f002 fd05 	bl	80061b8 <HAL_GetTick>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037b4:	d901      	bls.n	80037ba <loop+0x39a>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <loop+0x39c>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 808f 	beq.w	80038e0 <loop+0x4c0>
		tx_packet.sensetivity = settings.sensetivity;
 80037c2:	4b55      	ldr	r3, [pc, #340]	; (8003918 <loop+0x4f8>)
 80037c4:	789a      	ldrb	r2, [r3, #2]
 80037c6:	4b52      	ldr	r3, [pc, #328]	; (8003910 <loop+0x4f0>)
 80037c8:	74da      	strb	r2, [r3, #19]
		tx_packet.range = settings.range;
 80037ca:	4b53      	ldr	r3, [pc, #332]	; (8003918 <loop+0x4f8>)
 80037cc:	785a      	ldrb	r2, [r3, #1]
 80037ce:	4b50      	ldr	r3, [pc, #320]	; (8003910 <loop+0x4f0>)
 80037d0:	749a      	strb	r2, [r3, #18]
		tx_packet.collision = settings.collision;
 80037d2:	4b51      	ldr	r3, [pc, #324]	; (8003918 <loop+0x4f8>)
 80037d4:	78da      	ldrb	r2, [r3, #3]
 80037d6:	4b4e      	ldr	r3, [pc, #312]	; (8003910 <loop+0x4f0>)
 80037d8:	751a      	strb	r2, [r3, #20]
		tx_packet.power = settings.power;
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <loop+0x4f8>)
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	4b4c      	ldr	r3, [pc, #304]	; (8003910 <loop+0x4f0>)
 80037e0:	745a      	strb	r2, [r3, #17]
		tx_packet.autoBreak = settings.autoBreak;
 80037e2:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <loop+0x4f8>)
 80037e4:	791a      	ldrb	r2, [r3, #4]
 80037e6:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <loop+0x4f0>)
 80037e8:	755a      	strb	r2, [r3, #21]
		tx_packet.brightness_1 = settings.brightness_1;
 80037ea:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <loop+0x4f8>)
 80037ec:	795a      	ldrb	r2, [r3, #5]
 80037ee:	4b48      	ldr	r3, [pc, #288]	; (8003910 <loop+0x4f0>)
 80037f0:	759a      	strb	r2, [r3, #22]
		tx_packet.brightness_2 = settings.brightness_2;
 80037f2:	4b49      	ldr	r3, [pc, #292]	; (8003918 <loop+0x4f8>)
 80037f4:	799a      	ldrb	r2, [r3, #6]
 80037f6:	4b46      	ldr	r3, [pc, #280]	; (8003910 <loop+0x4f0>)
 80037f8:	75da      	strb	r2, [r3, #23]

		if (settings.sensetivity == 1){
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <loop+0x4f8>)
 80037fc:	789b      	ldrb	r3, [r3, #2]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d106      	bne.n	8003810 <loop+0x3f0>
			size_treshold = 3.5;
 8003802:	494b      	ldr	r1, [pc, #300]	; (8003930 <loop+0x510>)
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	4b4a      	ldr	r3, [pc, #296]	; (8003934 <loop+0x514>)
 800380a:	e9c1 2300 	strd	r2, r3, [r1]
 800380e:	e014      	b.n	800383a <loop+0x41a>
		}
		else if (settings.sensetivity == 2){
 8003810:	4b41      	ldr	r3, [pc, #260]	; (8003918 <loop+0x4f8>)
 8003812:	789b      	ldrb	r3, [r3, #2]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d106      	bne.n	8003826 <loop+0x406>
			size_treshold = 8;
 8003818:	4945      	ldr	r1, [pc, #276]	; (8003930 <loop+0x510>)
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	4b46      	ldr	r3, [pc, #280]	; (8003938 <loop+0x518>)
 8003820:	e9c1 2300 	strd	r2, r3, [r1]
 8003824:	e009      	b.n	800383a <loop+0x41a>
		}
		else if (settings.sensetivity == 3){
 8003826:	4b3c      	ldr	r3, [pc, #240]	; (8003918 <loop+0x4f8>)
 8003828:	789b      	ldrb	r3, [r3, #2]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d105      	bne.n	800383a <loop+0x41a>
			size_treshold = 10;
 800382e:	4940      	ldr	r1, [pc, #256]	; (8003930 <loop+0x510>)
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	4b41      	ldr	r3, [pc, #260]	; (800393c <loop+0x51c>)
 8003836:	e9c1 2300 	strd	r2, r3, [r1]
		}

		collision_detection_time = settings.collision * 1000;
 800383a:	4b37      	ldr	r3, [pc, #220]	; (8003918 <loop+0x4f8>)
 800383c:	78db      	ldrb	r3, [r3, #3]
 800383e:	461a      	mov	r2, r3
 8003840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fe7b 	bl	8000544 <__aeabi_i2d>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	493b      	ldr	r1, [pc, #236]	; (8003940 <loop+0x520>)
 8003854:	e9c1 2300 	strd	r2, r3, [r1]

		new_settings = 0;
 8003858:	4b34      	ldr	r3, [pc, #208]	; (800392c <loop+0x50c>)
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]

		printf("%d %d %d %d %d %d %d %d\n", settings.power, settings.sensetivity, settings.range, settings.collision, settings.autoBreak, settings.brightness_1, settings.brightness_2, HAL_GetTick());
 800385e:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <loop+0x4f8>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4698      	mov	r8, r3
 8003864:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <loop+0x4f8>)
 8003866:	789b      	ldrb	r3, [r3, #2]
 8003868:	4699      	mov	r9, r3
 800386a:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <loop+0x4f8>)
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	469a      	mov	sl, r3
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <loop+0x4f8>)
 8003872:	78db      	ldrb	r3, [r3, #3]
 8003874:	461c      	mov	r4, r3
 8003876:	4b28      	ldr	r3, [pc, #160]	; (8003918 <loop+0x4f8>)
 8003878:	791b      	ldrb	r3, [r3, #4]
 800387a:	461d      	mov	r5, r3
 800387c:	4b26      	ldr	r3, [pc, #152]	; (8003918 <loop+0x4f8>)
 800387e:	795b      	ldrb	r3, [r3, #5]
 8003880:	461e      	mov	r6, r3
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <loop+0x4f8>)
 8003884:	799b      	ldrb	r3, [r3, #6]
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	f002 fc96 	bl	80061b8 <HAL_GetTick>
 800388c:	4603      	mov	r3, r0
 800388e:	9304      	str	r3, [sp, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	9303      	str	r3, [sp, #12]
 8003894:	9602      	str	r6, [sp, #8]
 8003896:	9501      	str	r5, [sp, #4]
 8003898:	9400      	str	r4, [sp, #0]
 800389a:	4653      	mov	r3, sl
 800389c:	464a      	mov	r2, r9
 800389e:	4641      	mov	r1, r8
 80038a0:	481f      	ldr	r0, [pc, #124]	; (8003920 <loop+0x500>)
 80038a2:	f011 fe21 	bl	80154e8 <iprintf>
 80038a6:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <loop+0x4f8>)
 80038a8:	681b      	ldr	r3, [r3, #0]

		memcpy(&first_reg, &settings, 4);
 80038aa:	4a26      	ldr	r2, [pc, #152]	; (8003944 <loop+0x524>)
 80038ac:	6013      	str	r3, [r2, #0]
		memcpy(&second_reg, &settings+4, 3);
 80038ae:	4b26      	ldr	r3, [pc, #152]	; (8003948 <loop+0x528>)
 80038b0:	2203      	movs	r2, #3
 80038b2:	4619      	mov	r1, r3
 80038b4:	4825      	ldr	r0, [pc, #148]	; (800394c <loop+0x52c>)
 80038b6:	f011 fefa 	bl	80156ae <memcpy>
		HAL_PWR_EnableBkUpAccess();
 80038ba:	f004 fb8d 	bl	8007fd8 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, first_reg);
 80038be:	4b21      	ldr	r3, [pc, #132]	; (8003944 <loop+0x524>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	2101      	movs	r1, #1
 80038c6:	4822      	ldr	r0, [pc, #136]	; (8003950 <loop+0x530>)
 80038c8:	f00a fca0 	bl	800e20c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, second_reg);
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <loop+0x52c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	2102      	movs	r1, #2
 80038d4:	481e      	ldr	r0, [pc, #120]	; (8003950 <loop+0x530>)
 80038d6:	f00a fc99 	bl	800e20c <HAL_RTCEx_BKUPWrite>
		HAL_PWR_DisableBkUpAccess();
 80038da:	f004 fb8d 	bl	8007ff8 <HAL_PWR_DisableBkUpAccess>
	}
	else if(HAL_GetTick() < 1000){
		new_settings = 0;
	}
}
 80038de:	e00e      	b.n	80038fe <loop+0x4de>
	else if(HAL_GetTick() < 1000){
 80038e0:	f002 fc6a 	bl	80061b8 <HAL_GetTick>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bf94      	ite	ls
 80038ee:	2301      	movls	r3, #1
 80038f0:	2300      	movhi	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <loop+0x4de>
		new_settings = 0;
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <loop+0x50c>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
}
 80038fe:	bf00      	nop
 8003900:	3728      	adds	r7, #40	; 0x28
 8003902:	46bd      	mov	sp, r7
 8003904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003908:	42020800 	.word	0x42020800
 800390c:	20026dd0 	.word	0x20026dd0
 8003910:	20026db8 	.word	0x20026db8
 8003914:	2002713c 	.word	0x2002713c
 8003918:	20020728 	.word	0x20020728
 800391c:	20020744 	.word	0x20020744
 8003920:	08017488 	.word	0x08017488
 8003924:	20020740 	.word	0x20020740
 8003928:	20000268 	.word	0x20000268
 800392c:	20020737 	.word	0x20020737
 8003930:	20000050 	.word	0x20000050
 8003934:	400c0000 	.word	0x400c0000
 8003938:	40200000 	.word	0x40200000
 800393c:	40240000 	.word	0x40240000
 8003940:	20000058 	.word	0x20000058
 8003944:	20020738 	.word	0x20020738
 8003948:	20020744 	.word	0x20020744
 800394c:	2002073c 	.word	0x2002073c
 8003950:	20026f98 	.word	0x20026f98

08003954 <setup>:

void setup(){
 8003954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003956:	b087      	sub	sp, #28
 8003958:	af04      	add	r7, sp, #16
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800395a:	2100      	movs	r1, #0
 800395c:	48bc      	ldr	r0, [pc, #752]	; (8003c50 <setup+0x2fc>)
 800395e:	f00a fd09 	bl	800e374 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003962:	2104      	movs	r1, #4
 8003964:	48ba      	ldr	r0, [pc, #744]	; (8003c50 <setup+0x2fc>)
 8003966:	f00a fd05 	bl	800e374 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800396a:	2108      	movs	r1, #8
 800396c:	48b8      	ldr	r0, [pc, #736]	; (8003c50 <setup+0x2fc>)
 800396e:	f00a fd01 	bl	800e374 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003972:	210c      	movs	r1, #12
 8003974:	48b6      	ldr	r0, [pc, #728]	; (8003c50 <setup+0x2fc>)
 8003976:	f00a fcfd 	bl	800e374 <HAL_TIM_PWM_Start>


	first_reg = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 800397a:	2101      	movs	r1, #1
 800397c:	48b5      	ldr	r0, [pc, #724]	; (8003c54 <setup+0x300>)
 800397e:	f00a fc5d 	bl	800e23c <HAL_RTCEx_BKUPRead>
 8003982:	4603      	mov	r3, r0
 8003984:	4ab4      	ldr	r2, [pc, #720]	; (8003c58 <setup+0x304>)
 8003986:	6013      	str	r3, [r2, #0]
	second_reg = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8003988:	2101      	movs	r1, #1
 800398a:	48b2      	ldr	r0, [pc, #712]	; (8003c54 <setup+0x300>)
 800398c:	f00a fc56 	bl	800e23c <HAL_RTCEx_BKUPRead>
 8003990:	4603      	mov	r3, r0
 8003992:	4ab2      	ldr	r2, [pc, #712]	; (8003c5c <setup+0x308>)
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4bb0      	ldr	r3, [pc, #704]	; (8003c58 <setup+0x304>)
 8003998:	681b      	ldr	r3, [r3, #0]

	memcpy(&settings, &first_reg, 4);
 800399a:	4ab1      	ldr	r2, [pc, #708]	; (8003c60 <setup+0x30c>)
 800399c:	6013      	str	r3, [r2, #0]
	memcpy(&settings+4, &second_reg, 3);
 800399e:	4bb1      	ldr	r3, [pc, #708]	; (8003c64 <setup+0x310>)
 80039a0:	2203      	movs	r2, #3
 80039a2:	49ae      	ldr	r1, [pc, #696]	; (8003c5c <setup+0x308>)
 80039a4:	4618      	mov	r0, r3
 80039a6:	f011 fe82 	bl	80156ae <memcpy>

	if (settings.sensetivity == 0){
 80039aa:	4bad      	ldr	r3, [pc, #692]	; (8003c60 <setup+0x30c>)
 80039ac:	789b      	ldrb	r3, [r3, #2]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d114      	bne.n	80039dc <setup+0x88>
		settings.power = 0;
 80039b2:	4bab      	ldr	r3, [pc, #684]	; (8003c60 <setup+0x30c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
		settings.sensetivity = 2;
 80039b8:	4ba9      	ldr	r3, [pc, #676]	; (8003c60 <setup+0x30c>)
 80039ba:	2202      	movs	r2, #2
 80039bc:	709a      	strb	r2, [r3, #2]
		settings.range = 2;
 80039be:	4ba8      	ldr	r3, [pc, #672]	; (8003c60 <setup+0x30c>)
 80039c0:	2202      	movs	r2, #2
 80039c2:	705a      	strb	r2, [r3, #1]
		settings.collision = 2;
 80039c4:	4ba6      	ldr	r3, [pc, #664]	; (8003c60 <setup+0x30c>)
 80039c6:	2202      	movs	r2, #2
 80039c8:	70da      	strb	r2, [r3, #3]
		settings.autoBreak = 0;
 80039ca:	4ba5      	ldr	r3, [pc, #660]	; (8003c60 <setup+0x30c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	711a      	strb	r2, [r3, #4]
		settings.brightness_1 = 2;
 80039d0:	4ba3      	ldr	r3, [pc, #652]	; (8003c60 <setup+0x30c>)
 80039d2:	2202      	movs	r2, #2
 80039d4:	715a      	strb	r2, [r3, #5]
		settings.brightness_2 = 3;
 80039d6:	4ba2      	ldr	r3, [pc, #648]	; (8003c60 <setup+0x30c>)
 80039d8:	2203      	movs	r2, #3
 80039da:	719a      	strb	r2, [r3, #6]
	}

	tx_packet.sensetivity = settings.sensetivity;
 80039dc:	4ba0      	ldr	r3, [pc, #640]	; (8003c60 <setup+0x30c>)
 80039de:	789a      	ldrb	r2, [r3, #2]
 80039e0:	4ba1      	ldr	r3, [pc, #644]	; (8003c68 <setup+0x314>)
 80039e2:	74da      	strb	r2, [r3, #19]
	tx_packet.range = settings.range;
 80039e4:	4b9e      	ldr	r3, [pc, #632]	; (8003c60 <setup+0x30c>)
 80039e6:	785a      	ldrb	r2, [r3, #1]
 80039e8:	4b9f      	ldr	r3, [pc, #636]	; (8003c68 <setup+0x314>)
 80039ea:	749a      	strb	r2, [r3, #18]
	tx_packet.collision = settings.collision;
 80039ec:	4b9c      	ldr	r3, [pc, #624]	; (8003c60 <setup+0x30c>)
 80039ee:	78da      	ldrb	r2, [r3, #3]
 80039f0:	4b9d      	ldr	r3, [pc, #628]	; (8003c68 <setup+0x314>)
 80039f2:	751a      	strb	r2, [r3, #20]
	tx_packet.power = settings.power;
 80039f4:	4b9a      	ldr	r3, [pc, #616]	; (8003c60 <setup+0x30c>)
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	4b9b      	ldr	r3, [pc, #620]	; (8003c68 <setup+0x314>)
 80039fa:	745a      	strb	r2, [r3, #17]
	tx_packet.autoBreak = settings.autoBreak;
 80039fc:	4b98      	ldr	r3, [pc, #608]	; (8003c60 <setup+0x30c>)
 80039fe:	791a      	ldrb	r2, [r3, #4]
 8003a00:	4b99      	ldr	r3, [pc, #612]	; (8003c68 <setup+0x314>)
 8003a02:	755a      	strb	r2, [r3, #21]
	tx_packet.brightness_1 = settings.brightness_1;
 8003a04:	4b96      	ldr	r3, [pc, #600]	; (8003c60 <setup+0x30c>)
 8003a06:	795a      	ldrb	r2, [r3, #5]
 8003a08:	4b97      	ldr	r3, [pc, #604]	; (8003c68 <setup+0x314>)
 8003a0a:	759a      	strb	r2, [r3, #22]
	tx_packet.brightness_2 = settings.brightness_2;
 8003a0c:	4b94      	ldr	r3, [pc, #592]	; (8003c60 <setup+0x30c>)
 8003a0e:	799a      	ldrb	r2, [r3, #6]
 8003a10:	4b95      	ldr	r3, [pc, #596]	; (8003c68 <setup+0x314>)
 8003a12:	75da      	strb	r2, [r3, #23]

	printf("%d %d %d %d %d %d %d\n", settings.power, settings.sensetivity, settings.range, settings.collision, settings.autoBreak, settings.brightness_1, settings.brightness_2);
 8003a14:	4b92      	ldr	r3, [pc, #584]	; (8003c60 <setup+0x30c>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461c      	mov	r4, r3
 8003a1a:	4b91      	ldr	r3, [pc, #580]	; (8003c60 <setup+0x30c>)
 8003a1c:	789b      	ldrb	r3, [r3, #2]
 8003a1e:	461d      	mov	r5, r3
 8003a20:	4b8f      	ldr	r3, [pc, #572]	; (8003c60 <setup+0x30c>)
 8003a22:	785b      	ldrb	r3, [r3, #1]
 8003a24:	461e      	mov	r6, r3
 8003a26:	4b8e      	ldr	r3, [pc, #568]	; (8003c60 <setup+0x30c>)
 8003a28:	78db      	ldrb	r3, [r3, #3]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4b8c      	ldr	r3, [pc, #560]	; (8003c60 <setup+0x30c>)
 8003a2e:	791b      	ldrb	r3, [r3, #4]
 8003a30:	4619      	mov	r1, r3
 8003a32:	4b8b      	ldr	r3, [pc, #556]	; (8003c60 <setup+0x30c>)
 8003a34:	795b      	ldrb	r3, [r3, #5]
 8003a36:	4618      	mov	r0, r3
 8003a38:	4b89      	ldr	r3, [pc, #548]	; (8003c60 <setup+0x30c>)
 8003a3a:	799b      	ldrb	r3, [r3, #6]
 8003a3c:	9303      	str	r3, [sp, #12]
 8003a3e:	9002      	str	r0, [sp, #8]
 8003a40:	9101      	str	r1, [sp, #4]
 8003a42:	9200      	str	r2, [sp, #0]
 8003a44:	4633      	mov	r3, r6
 8003a46:	462a      	mov	r2, r5
 8003a48:	4621      	mov	r1, r4
 8003a4a:	4888      	ldr	r0, [pc, #544]	; (8003c6c <setup+0x318>)
 8003a4c:	f011 fd4c 	bl	80154e8 <iprintf>

  	lidars[0].lidar_index = 1;
 8003a50:	4b87      	ldr	r3, [pc, #540]	; (8003c70 <setup+0x31c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
  	lidars[1].lidar_index = 2;
 8003a56:	4b86      	ldr	r3, [pc, #536]	; (8003c70 <setup+0x31c>)
 8003a58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  	lidars[2].lidar_index = 3;
 8003a62:	4b83      	ldr	r3, [pc, #524]	; (8003c70 <setup+0x31c>)
 8003a64:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003a68:	2203      	movs	r2, #3
 8003a6a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  	lidars[3].lidar_index = 4;
 8003a6e:	4b80      	ldr	r3, [pc, #512]	; (8003c70 <setup+0x31c>)
 8003a70:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003a74:	2204      	movs	r2, #4
 8003a76:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390

  	lidars[0].y_shift = -240;
 8003a7a:	4b7d      	ldr	r3, [pc, #500]	; (8003c70 <setup+0x31c>)
 8003a7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003a80:	f64f 7210 	movw	r2, #65296	; 0xff10
 8003a84:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  	lidars[1].y_shift = -240;
 8003a88:	4b79      	ldr	r3, [pc, #484]	; (8003c70 <setup+0x31c>)
 8003a8a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003a8e:	f64f 7210 	movw	r2, #65296	; 0xff10
 8003a92:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
  	lidars[2].y_shift = 240;
 8003a96:	4b76      	ldr	r3, [pc, #472]	; (8003c70 <setup+0x31c>)
 8003a98:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003a9c:	22f0      	movs	r2, #240	; 0xf0
 8003a9e:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
  	lidars[3].y_shift = 240;
 8003aa2:	4b73      	ldr	r3, [pc, #460]	; (8003c70 <setup+0x31c>)
 8003aa4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003aa8:	22f0      	movs	r2, #240	; 0xf0
 8003aaa:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c

  	lidars[0].invert = -1;
 8003aae:	4b70      	ldr	r3, [pc, #448]	; (8003c70 <setup+0x31c>)
 8003ab0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003ab4:	22ff      	movs	r2, #255	; 0xff
 8003ab6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
  	lidars[1].invert = -1;
 8003aba:	4b6d      	ldr	r3, [pc, #436]	; (8003c70 <setup+0x31c>)
 8003abc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
  	lidars[2].invert = 1;
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <setup+0x31c>)
 8003ac8:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
  	lidars[3].invert = 1;
 8003ad2:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <setup+0x31c>)
 8003ad4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
	right_danger_zone.vertices[0] = {170, 451};
	right_danger_zone.vertices[1] = {170, -155};
	right_danger_zone.vertices[2] = {825, 623};
	right_danger_zone.vertices[3] = {825, 848};*/

	front_detector.bounding_rect[0] = {-150, 2000};
 8003ade:	4b65      	ldr	r3, [pc, #404]	; (8003c74 <setup+0x320>)
 8003ae0:	4a65      	ldr	r2, [pc, #404]	; (8003c78 <setup+0x324>)
 8003ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ae6:	e883 0003 	stmia.w	r3, {r0, r1}
	front_detector.bounding_rect[1] = {150, 300};
 8003aea:	4b62      	ldr	r3, [pc, #392]	; (8003c74 <setup+0x320>)
 8003aec:	4a63      	ldr	r2, [pc, #396]	; (8003c7c <setup+0x328>)
 8003aee:	3308      	adds	r3, #8
 8003af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003af4:	e883 0003 	stmia.w	r3, {r0, r1}
	front_detector.critical_distance = 300;
 8003af8:	4b5e      	ldr	r3, [pc, #376]	; (8003c74 <setup+0x320>)
 8003afa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003afe:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
	front_detector.comparison_type = 0;
 8003b02:	4b5c      	ldr	r3, [pc, #368]	; (8003c74 <setup+0x320>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da

	rear_detector.bounding_rect[0] = {-150, -300};
 8003b0a:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <setup+0x32c>)
 8003b0c:	4a5d      	ldr	r2, [pc, #372]	; (8003c84 <setup+0x330>)
 8003b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b12:	e883 0003 	stmia.w	r3, {r0, r1}
	rear_detector.bounding_rect[1] = {150, -1500};
 8003b16:	4b5a      	ldr	r3, [pc, #360]	; (8003c80 <setup+0x32c>)
 8003b18:	4a5b      	ldr	r2, [pc, #364]	; (8003c88 <setup+0x334>)
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b20:	e883 0003 	stmia.w	r3, {r0, r1}
	rear_detector.critical_distance = -300;
 8003b24:	4b56      	ldr	r3, [pc, #344]	; (8003c80 <setup+0x32c>)
 8003b26:	f64f 62d4 	movw	r2, #65236	; 0xfed4
 8003b2a:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
	rear_detector.comparison_type = 1;
 8003b2e:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <setup+0x32c>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da

	smallest_profile.blind_spot_bounding_rects[0][0] = {170, 800};
 8003b36:	4b55      	ldr	r3, [pc, #340]	; (8003c8c <setup+0x338>)
 8003b38:	4a55      	ldr	r2, [pc, #340]	; (8003c90 <setup+0x33c>)
 8003b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b3e:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_bounding_rects[0][1] = {550, 330};
 8003b42:	4b52      	ldr	r3, [pc, #328]	; (8003c8c <setup+0x338>)
 8003b44:	4a53      	ldr	r2, [pc, #332]	; (8003c94 <setup+0x340>)
 8003b46:	3308      	adds	r3, #8
 8003b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b4c:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[0][0][0] = {170, 630};
 8003b50:	4b4e      	ldr	r3, [pc, #312]	; (8003c8c <setup+0x338>)
 8003b52:	4a51      	ldr	r2, [pc, #324]	; (8003c98 <setup+0x344>)
 8003b54:	3350      	adds	r3, #80	; 0x50
 8003b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b5a:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[0][0][1] = {430, 330};
 8003b5e:	4b4b      	ldr	r3, [pc, #300]	; (8003c8c <setup+0x338>)
 8003b60:	4a4e      	ldr	r2, [pc, #312]	; (8003c9c <setup+0x348>)
 8003b62:	3358      	adds	r3, #88	; 0x58
 8003b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b68:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[0][1][0] = {170, 480};
 8003b6c:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <setup+0x338>)
 8003b6e:	4a4c      	ldr	r2, [pc, #304]	; (8003ca0 <setup+0x34c>)
 8003b70:	3360      	adds	r3, #96	; 0x60
 8003b72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b76:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[0][1][1] = {300, 330};
 8003b7a:	4b44      	ldr	r3, [pc, #272]	; (8003c8c <setup+0x338>)
 8003b7c:	4a49      	ldr	r2, [pc, #292]	; (8003ca4 <setup+0x350>)
 8003b7e:	3368      	adds	r3, #104	; 0x68
 8003b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b84:	e883 0003 	stmia.w	r3, {r0, r1}

	smallest_profile.blind_spot_bounding_rects[1][0] = {-550, 800};
 8003b88:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <setup+0x338>)
 8003b8a:	4a47      	ldr	r2, [pc, #284]	; (8003ca8 <setup+0x354>)
 8003b8c:	3310      	adds	r3, #16
 8003b8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b92:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_bounding_rects[1][1] = {-170, 330};
 8003b96:	4b3d      	ldr	r3, [pc, #244]	; (8003c8c <setup+0x338>)
 8003b98:	4a44      	ldr	r2, [pc, #272]	; (8003cac <setup+0x358>)
 8003b9a:	3318      	adds	r3, #24
 8003b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ba0:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[1][0][0] = {-430, 630};
 8003ba4:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <setup+0x338>)
 8003ba6:	4a42      	ldr	r2, [pc, #264]	; (8003cb0 <setup+0x35c>)
 8003ba8:	3370      	adds	r3, #112	; 0x70
 8003baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bae:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[1][0][1] = {-170, 330};
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <setup+0x338>)
 8003bb4:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <setup+0x358>)
 8003bb6:	3378      	adds	r3, #120	; 0x78
 8003bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bbc:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[1][1][0] = {-300, 480};
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <setup+0x338>)
 8003bc2:	4a3c      	ldr	r2, [pc, #240]	; (8003cb4 <setup+0x360>)
 8003bc4:	3380      	adds	r3, #128	; 0x80
 8003bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bca:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[1][1][1] = {-170, 330};
 8003bce:	4b2f      	ldr	r3, [pc, #188]	; (8003c8c <setup+0x338>)
 8003bd0:	4a36      	ldr	r2, [pc, #216]	; (8003cac <setup+0x358>)
 8003bd2:	3388      	adds	r3, #136	; 0x88
 8003bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bd8:	e883 0003 	stmia.w	r3, {r0, r1}

	smallest_profile.blind_spot_bounding_rects[2][0] = {-550, -330};
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <setup+0x338>)
 8003bde:	4a36      	ldr	r2, [pc, #216]	; (8003cb8 <setup+0x364>)
 8003be0:	3320      	adds	r3, #32
 8003be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003be6:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_bounding_rects[2][1] = {-170, -480};
 8003bea:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <setup+0x338>)
 8003bec:	4a33      	ldr	r2, [pc, #204]	; (8003cbc <setup+0x368>)
 8003bee:	3328      	adds	r3, #40	; 0x28
 8003bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bf4:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[2][0][0] = {-430, -330};
 8003bf8:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <setup+0x338>)
 8003bfa:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <setup+0x36c>)
 8003bfc:	3390      	adds	r3, #144	; 0x90
 8003bfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c02:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[2][0][1] = {-300, -630};
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <setup+0x338>)
 8003c08:	4a2e      	ldr	r2, [pc, #184]	; (8003cc4 <setup+0x370>)
 8003c0a:	3398      	adds	r3, #152	; 0x98
 8003c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c10:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[2][1][0] = {-300, -330};
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <setup+0x338>)
 8003c16:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <setup+0x374>)
 8003c18:	33a0      	adds	r3, #160	; 0xa0
 8003c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c1e:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[2][1][1] = {-170, -800};
 8003c22:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <setup+0x338>)
 8003c24:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <setup+0x378>)
 8003c26:	33a8      	adds	r3, #168	; 0xa8
 8003c28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c2c:	e883 0003 	stmia.w	r3, {r0, r1}

	smallest_profile.blind_spot_bounding_rects[3][0] = {-170, -330};
 8003c30:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <setup+0x338>)
 8003c32:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <setup+0x37c>)
 8003c34:	3330      	adds	r3, #48	; 0x30
 8003c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c3a:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_bounding_rects[3][1] = {170, -480};
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <setup+0x338>)
 8003c40:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <setup+0x380>)
 8003c42:	3338      	adds	r3, #56	; 0x38
 8003c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c48:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c4c:	e044      	b.n	8003cd8 <setup+0x384>
 8003c4e:	bf00      	nop
 8003c50:	20026fc8 	.word	0x20026fc8
 8003c54:	20026f98 	.word	0x20026f98
 8003c58:	20020738 	.word	0x20020738
 8003c5c:	2002073c 	.word	0x2002073c
 8003c60:	20020728 	.word	0x20020728
 8003c64:	20020744 	.word	0x20020744
 8003c68:	20026db8 	.word	0x20026db8
 8003c6c:	080174a4 	.word	0x080174a4
 8003c70:	20000268 	.word	0x20000268
 8003c74:	200267e8 	.word	0x200267e8
 8003c78:	080174c8 	.word	0x080174c8
 8003c7c:	080174d0 	.word	0x080174d0
 8003c80:	20026ad0 	.word	0x20026ad0
 8003c84:	080174d8 	.word	0x080174d8
 8003c88:	080174e0 	.word	0x080174e0
 8003c8c:	20026de8 	.word	0x20026de8
 8003c90:	080174e8 	.word	0x080174e8
 8003c94:	080174f0 	.word	0x080174f0
 8003c98:	080174f8 	.word	0x080174f8
 8003c9c:	08017500 	.word	0x08017500
 8003ca0:	08017508 	.word	0x08017508
 8003ca4:	08017510 	.word	0x08017510
 8003ca8:	08017518 	.word	0x08017518
 8003cac:	08017520 	.word	0x08017520
 8003cb0:	08017528 	.word	0x08017528
 8003cb4:	08017530 	.word	0x08017530
 8003cb8:	08017538 	.word	0x08017538
 8003cbc:	08017540 	.word	0x08017540
 8003cc0:	08017548 	.word	0x08017548
 8003cc4:	08017550 	.word	0x08017550
 8003cc8:	08017558 	.word	0x08017558
 8003ccc:	08017560 	.word	0x08017560
 8003cd0:	08017568 	.word	0x08017568
 8003cd4:	08017570 	.word	0x08017570
	smallest_profile.blind_spot_zones_rects[3][0][0] = {-170, -330};
 8003cd8:	4b8f      	ldr	r3, [pc, #572]	; (8003f18 <setup+0x5c4>)
 8003cda:	4a90      	ldr	r2, [pc, #576]	; (8003f1c <setup+0x5c8>)
 8003cdc:	33b0      	adds	r3, #176	; 0xb0
 8003cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ce2:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[3][0][1] = {170, -630};
 8003ce6:	4b8c      	ldr	r3, [pc, #560]	; (8003f18 <setup+0x5c4>)
 8003ce8:	4a8d      	ldr	r2, [pc, #564]	; (8003f20 <setup+0x5cc>)
 8003cea:	33b8      	adds	r3, #184	; 0xb8
 8003cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cf0:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[3][1][0] = {-170, -330};
 8003cf4:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <setup+0x5c4>)
 8003cf6:	4a89      	ldr	r2, [pc, #548]	; (8003f1c <setup+0x5c8>)
 8003cf8:	33c0      	adds	r3, #192	; 0xc0
 8003cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cfe:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[3][1][1] = {170, -800};
 8003d02:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <setup+0x5c4>)
 8003d04:	4a87      	ldr	r2, [pc, #540]	; (8003f24 <setup+0x5d0>)
 8003d06:	33c8      	adds	r3, #200	; 0xc8
 8003d08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d0c:	e883 0003 	stmia.w	r3, {r0, r1}

	smallest_profile.blind_spot_bounding_rects[4][0] = {170, -330};
 8003d10:	4b81      	ldr	r3, [pc, #516]	; (8003f18 <setup+0x5c4>)
 8003d12:	4a85      	ldr	r2, [pc, #532]	; (8003f28 <setup+0x5d4>)
 8003d14:	3340      	adds	r3, #64	; 0x40
 8003d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d1a:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_bounding_rects[4][1] = {550, -480};
 8003d1e:	4b7e      	ldr	r3, [pc, #504]	; (8003f18 <setup+0x5c4>)
 8003d20:	4a82      	ldr	r2, [pc, #520]	; (8003f2c <setup+0x5d8>)
 8003d22:	3348      	adds	r3, #72	; 0x48
 8003d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d28:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[4][0][0] = {170, -330};
 8003d2c:	4b7a      	ldr	r3, [pc, #488]	; (8003f18 <setup+0x5c4>)
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	; (8003f28 <setup+0x5d4>)
 8003d30:	33d0      	adds	r3, #208	; 0xd0
 8003d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d36:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[4][0][1] = {430, -630};
 8003d3a:	4b77      	ldr	r3, [pc, #476]	; (8003f18 <setup+0x5c4>)
 8003d3c:	4a7c      	ldr	r2, [pc, #496]	; (8003f30 <setup+0x5dc>)
 8003d3e:	33d8      	adds	r3, #216	; 0xd8
 8003d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d44:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[4][1][0] = {170, -330};
 8003d48:	4b73      	ldr	r3, [pc, #460]	; (8003f18 <setup+0x5c4>)
 8003d4a:	4a77      	ldr	r2, [pc, #476]	; (8003f28 <setup+0x5d4>)
 8003d4c:	33e0      	adds	r3, #224	; 0xe0
 8003d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d52:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.blind_spot_zones_rects[4][1][1] = {300, -800};
 8003d56:	4b70      	ldr	r3, [pc, #448]	; (8003f18 <setup+0x5c4>)
 8003d58:	4a76      	ldr	r2, [pc, #472]	; (8003f34 <setup+0x5e0>)
 8003d5a:	33e8      	adds	r3, #232	; 0xe8
 8003d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d60:	e883 0003 	stmia.w	r3, {r0, r1}

	smallest_profile.dadnger_zones_bounding_rects[0][0] = {170, 565};
 8003d64:	4b6c      	ldr	r3, [pc, #432]	; (8003f18 <setup+0x5c4>)
 8003d66:	4a74      	ldr	r2, [pc, #464]	; (8003f38 <setup+0x5e4>)
 8003d68:	33f0      	adds	r3, #240	; 0xf0
 8003d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d6e:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.dadnger_zones_bounding_rects[0][1] = {550, -155};
 8003d72:	4b69      	ldr	r3, [pc, #420]	; (8003f18 <setup+0x5c4>)
 8003d74:	4a71      	ldr	r2, [pc, #452]	; (8003f3c <setup+0x5e8>)
 8003d76:	33f8      	adds	r3, #248	; 0xf8
 8003d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d7c:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.danger_zones_vertices[0][0] = {170, 451};
 8003d80:	4b65      	ldr	r3, [pc, #404]	; (8003f18 <setup+0x5c4>)
 8003d82:	4a6f      	ldr	r2, [pc, #444]	; (8003f40 <setup+0x5ec>)
 8003d84:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d8c:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.danger_zones_vertices[0][1] = {550, 556};
 8003d90:	4b61      	ldr	r3, [pc, #388]	; (8003f18 <setup+0x5c4>)
 8003d92:	4a6c      	ldr	r2, [pc, #432]	; (8003f44 <setup+0x5f0>)
 8003d94:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d9c:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.danger_zones_vertices[0][2] = {550, 405};
 8003da0:	4b5d      	ldr	r3, [pc, #372]	; (8003f18 <setup+0x5c4>)
 8003da2:	4a69      	ldr	r2, [pc, #420]	; (8003f48 <setup+0x5f4>)
 8003da4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dac:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.danger_zones_vertices[0][3] = {170, -155};
 8003db0:	4b59      	ldr	r3, [pc, #356]	; (8003f18 <setup+0x5c4>)
 8003db2:	4a66      	ldr	r2, [pc, #408]	; (8003f4c <setup+0x5f8>)
 8003db4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dbc:	e883 0003 	stmia.w	r3, {r0, r1}

	smallest_profile.dadnger_zones_bounding_rects[1][0] = {-550, 565};
 8003dc0:	4b55      	ldr	r3, [pc, #340]	; (8003f18 <setup+0x5c4>)
 8003dc2:	4a63      	ldr	r2, [pc, #396]	; (8003f50 <setup+0x5fc>)
 8003dc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dcc:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.dadnger_zones_bounding_rects[1][1] = {-170, -155};
 8003dd0:	4b51      	ldr	r3, [pc, #324]	; (8003f18 <setup+0x5c4>)
 8003dd2:	4a60      	ldr	r2, [pc, #384]	; (8003f54 <setup+0x600>)
 8003dd4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003dd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ddc:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.danger_zones_vertices[1][0] = {-170, 451};
 8003de0:	4b4d      	ldr	r3, [pc, #308]	; (8003f18 <setup+0x5c4>)
 8003de2:	4a5d      	ldr	r2, [pc, #372]	; (8003f58 <setup+0x604>)
 8003de4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dec:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.danger_zones_vertices[1][1] = {-550, 556};
 8003df0:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <setup+0x5c4>)
 8003df2:	4a5a      	ldr	r2, [pc, #360]	; (8003f5c <setup+0x608>)
 8003df4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dfc:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.danger_zones_vertices[1][2] = {-550, 405};
 8003e00:	4b45      	ldr	r3, [pc, #276]	; (8003f18 <setup+0x5c4>)
 8003e02:	4a57      	ldr	r2, [pc, #348]	; (8003f60 <setup+0x60c>)
 8003e04:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e0c:	e883 0003 	stmia.w	r3, {r0, r1}
	smallest_profile.danger_zones_vertices[1][3] = {-170, -155};
 8003e10:	4b41      	ldr	r3, [pc, #260]	; (8003f18 <setup+0x5c4>)
 8003e12:	4a50      	ldr	r2, [pc, #320]	; (8003f54 <setup+0x600>)
 8003e14:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e1c:	e883 0003 	stmia.w	r3, {r0, r1}

	for(int i=0; i < 5; i++){
 8003e20:	2300      	movs	r3, #0
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	e072      	b.n	8003f0c <setup+0x5b8>
		blind_spots[i].bounding_rect[0] = smallest_profile.blind_spot_bounding_rects[i][0];
 8003e26:	4a4f      	ldr	r2, [pc, #316]	; (8003f64 <setup+0x610>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f640 11c8 	movw	r1, #2504	; 0x9c8
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	18d1      	adds	r1, r2, r3
 8003e34:	4a38      	ldr	r2, [pc, #224]	; (8003f18 <setup+0x5c4>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	441a      	add	r2, r3
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e42:	e883 0003 	stmia.w	r3, {r0, r1}
		blind_spots[i].bounding_rect[1] = smallest_profile.blind_spot_bounding_rects[i][1];
 8003e46:	4a47      	ldr	r2, [pc, #284]	; (8003f64 <setup+0x610>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f640 11c8 	movw	r1, #2504	; 0x9c8
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	f103 0108 	add.w	r1, r3, #8
 8003e58:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <setup+0x5c4>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	4413      	add	r3, r2
 8003e60:	f103 0208 	add.w	r2, r3, #8
 8003e64:	460b      	mov	r3, r1
 8003e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e6a:	e883 0003 	stmia.w	r3, {r0, r1}

		blind_spots[i].zone_rects[0][0] = smallest_profile.blind_spot_zones_rects[i][0][0];
 8003e6e:	4a3d      	ldr	r2, [pc, #244]	; (8003f64 <setup+0x610>)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f640 11c8 	movw	r1, #2504	; 0x9c8
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003e80:	4925      	ldr	r1, [pc, #148]	; (8003f18 <setup+0x5c4>)
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	0152      	lsls	r2, r2, #5
 8003e86:	440a      	add	r2, r1
 8003e88:	3250      	adds	r2, #80	; 0x50
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e90:	e883 0003 	stmia.w	r3, {r0, r1}
		blind_spots[i].zone_rects[0][1] = smallest_profile.blind_spot_zones_rects[i][0][1];
 8003e94:	4a33      	ldr	r2, [pc, #204]	; (8003f64 <setup+0x610>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f640 11c8 	movw	r1, #2504	; 0x9c8
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8003ea6:	491c      	ldr	r1, [pc, #112]	; (8003f18 <setup+0x5c4>)
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	0152      	lsls	r2, r2, #5
 8003eac:	440a      	add	r2, r1
 8003eae:	3258      	adds	r2, #88	; 0x58
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003eb6:	e883 0003 	stmia.w	r3, {r0, r1}
		blind_spots[i].zone_rects[1][0] = smallest_profile.blind_spot_zones_rects[i][1][0];
 8003eba:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <setup+0x610>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f640 11c8 	movw	r1, #2504	; 0x9c8
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ecc:	4912      	ldr	r1, [pc, #72]	; (8003f18 <setup+0x5c4>)
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	3203      	adds	r2, #3
 8003ed2:	0152      	lsls	r2, r2, #5
 8003ed4:	440a      	add	r2, r1
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003edc:	e883 0003 	stmia.w	r3, {r0, r1}
		blind_spots[i].zone_rects[1][1] = smallest_profile.blind_spot_zones_rects[i][1][1];
 8003ee0:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <setup+0x610>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f640 11c8 	movw	r1, #2504	; 0x9c8
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ef2:	4909      	ldr	r1, [pc, #36]	; (8003f18 <setup+0x5c4>)
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	0152      	lsls	r2, r2, #5
 8003ef8:	440a      	add	r2, r1
 8003efa:	3268      	adds	r2, #104	; 0x68
 8003efc:	3304      	adds	r3, #4
 8003efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f02:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i=0; i < 5; i++){
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	dd89      	ble.n	8003e26 <setup+0x4d2>
	}

	for(int i=0; i < 2; i++){
 8003f12:	2300      	movs	r3, #0
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	e09e      	b.n	8004056 <setup+0x702>
 8003f18:	20026de8 	.word	0x20026de8
 8003f1c:	08017568 	.word	0x08017568
 8003f20:	08017578 	.word	0x08017578
 8003f24:	08017580 	.word	0x08017580
 8003f28:	08017588 	.word	0x08017588
 8003f2c:	08017590 	.word	0x08017590
 8003f30:	08017598 	.word	0x08017598
 8003f34:	080175a0 	.word	0x080175a0
 8003f38:	080175a8 	.word	0x080175a8
 8003f3c:	080175b0 	.word	0x080175b0
 8003f40:	080175b8 	.word	0x080175b8
 8003f44:	080175c0 	.word	0x080175c0
 8003f48:	080175c8 	.word	0x080175c8
 8003f4c:	080175d0 	.word	0x080175d0
 8003f50:	080175d8 	.word	0x080175d8
 8003f54:	080175e0 	.word	0x080175e0
 8003f58:	080175e8 	.word	0x080175e8
 8003f5c:	080175f0 	.word	0x080175f0
 8003f60:	080175f8 	.word	0x080175f8
 8003f64:	20023700 	.word	0x20023700
		danger_zones[i].bounding_rect[0] = smallest_profile.dadnger_zones_bounding_rects[i][0];
 8003f68:	4a6b      	ldr	r2, [pc, #428]	; (8004118 <setup+0x7c4>)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f44f 61a3 	mov.w	r1, #1304	; 0x518
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	18d1      	adds	r1, r2, r3
 8003f76:	4a69      	ldr	r2, [pc, #420]	; (800411c <setup+0x7c8>)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	330f      	adds	r3, #15
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	441a      	add	r2, r3
 8003f80:	460b      	mov	r3, r1
 8003f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f86:	e883 0003 	stmia.w	r3, {r0, r1}
		danger_zones[i].bounding_rect[1] = smallest_profile.dadnger_zones_bounding_rects[i][1];
 8003f8a:	4a63      	ldr	r2, [pc, #396]	; (8004118 <setup+0x7c4>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f44f 61a3 	mov.w	r1, #1304	; 0x518
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	f103 0108 	add.w	r1, r3, #8
 8003f9c:	4a5f      	ldr	r2, [pc, #380]	; (800411c <setup+0x7c8>)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8003fa8:	460b      	mov	r3, r1
 8003faa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fae:	e883 0003 	stmia.w	r3, {r0, r1}

		danger_zones[i].vertices[0] = smallest_profile.danger_zones_vertices[i][0];
 8003fb2:	4a59      	ldr	r2, [pc, #356]	; (8004118 <setup+0x7c4>)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f44f 61a3 	mov.w	r1, #1304	; 0x518
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f103 0110 	add.w	r1, r3, #16
 8003fc4:	4a55      	ldr	r2, [pc, #340]	; (800411c <setup+0x7c8>)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	015b      	lsls	r3, r3, #5
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd6:	e883 0003 	stmia.w	r3, {r0, r1}
		danger_zones[i].vertices[1] = smallest_profile.danger_zones_vertices[i][1];
 8003fda:	4a4f      	ldr	r2, [pc, #316]	; (8004118 <setup+0x7c4>)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f44f 61a3 	mov.w	r1, #1304	; 0x518
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f103 0118 	add.w	r1, r3, #24
 8003fec:	4a4b      	ldr	r2, [pc, #300]	; (800411c <setup+0x7c8>)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015b      	lsls	r3, r3, #5
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ffe:	e883 0003 	stmia.w	r3, {r0, r1}
		danger_zones[i].vertices[2] = smallest_profile.danger_zones_vertices[i][2];
 8004002:	4a45      	ldr	r2, [pc, #276]	; (8004118 <setup+0x7c4>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f44f 61a3 	mov.w	r1, #1304	; 0x518
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	f103 0120 	add.w	r1, r3, #32
 8004014:	4a41      	ldr	r2, [pc, #260]	; (800411c <setup+0x7c8>)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	3309      	adds	r3, #9
 800401a:	015b      	lsls	r3, r3, #5
 800401c:	441a      	add	r2, r3
 800401e:	460b      	mov	r3, r1
 8004020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004024:	e883 0003 	stmia.w	r3, {r0, r1}
		danger_zones[i].vertices[3] = smallest_profile.danger_zones_vertices[i][3];
 8004028:	4a3b      	ldr	r2, [pc, #236]	; (8004118 <setup+0x7c4>)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f44f 61a3 	mov.w	r1, #1304	; 0x518
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800403a:	4a38      	ldr	r2, [pc, #224]	; (800411c <setup+0x7c8>)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	4413      	add	r3, r2
 8004042:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8004046:	460b      	mov	r3, r1
 8004048:	e892 0003 	ldmia.w	r2, {r0, r1}
 800404c:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i=0; i < 2; i++){
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	dd85      	ble.n	8003f68 <setup+0x614>
  	HAL_GPIO_WritePin(CONNECT_LED_4_GPIO_Port, CONNECT_LED_4_Pin, GPIO_PIN_SET);
  	HAL_GPIO_WritePin(WORKING_LED_1_GPIO_Port, WORKING_LED_1_Pin, GPIO_PIN_SET);
  	HAL_GPIO_WritePin(WORKING_LED_2_GPIO_Port, WORKING_LED_2_Pin, GPIO_PIN_SET);
  	HAL_GPIO_WritePin(WORKING_LED_3_GPIO_Port, WORKING_LED_3_Pin, GPIO_PIN_SET);
  	HAL_GPIO_WritePin(WORKING_LED_4_GPIO_Port, WORKING_LED_4_Pin, GPIO_PIN_SET);*/
  	printf("%d ", HAL_GPIO_ReadPin(CONNECT_DET_1_GPIO_Port, CONNECT_DET_1_Pin));
 800405c:	2140      	movs	r1, #64	; 0x40
 800405e:	4830      	ldr	r0, [pc, #192]	; (8004120 <setup+0x7cc>)
 8004060:	f003 fe7c 	bl	8007d5c <HAL_GPIO_ReadPin>
 8004064:	4603      	mov	r3, r0
 8004066:	4619      	mov	r1, r3
 8004068:	482e      	ldr	r0, [pc, #184]	; (8004124 <setup+0x7d0>)
 800406a:	f011 fa3d 	bl	80154e8 <iprintf>
  	printf("%d ", HAL_GPIO_ReadPin(CONNECT_DET_2_GPIO_Port, CONNECT_DET_2_Pin));
 800406e:	2120      	movs	r1, #32
 8004070:	482d      	ldr	r0, [pc, #180]	; (8004128 <setup+0x7d4>)
 8004072:	f003 fe73 	bl	8007d5c <HAL_GPIO_ReadPin>
 8004076:	4603      	mov	r3, r0
 8004078:	4619      	mov	r1, r3
 800407a:	482a      	ldr	r0, [pc, #168]	; (8004124 <setup+0x7d0>)
 800407c:	f011 fa34 	bl	80154e8 <iprintf>
  	printf("%d ", HAL_GPIO_ReadPin(CONNECT_DET_3_GPIO_Port, CONNECT_DET_3_Pin));
 8004080:	2101      	movs	r1, #1
 8004082:	4829      	ldr	r0, [pc, #164]	; (8004128 <setup+0x7d4>)
 8004084:	f003 fe6a 	bl	8007d5c <HAL_GPIO_ReadPin>
 8004088:	4603      	mov	r3, r0
 800408a:	4619      	mov	r1, r3
 800408c:	4825      	ldr	r0, [pc, #148]	; (8004124 <setup+0x7d0>)
 800408e:	f011 fa2b 	bl	80154e8 <iprintf>
  	printf("%d \n", HAL_GPIO_ReadPin(CONNECT_DET_4_GPIO_Port, CONNECT_DET_4_Pin));
 8004092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004096:	4824      	ldr	r0, [pc, #144]	; (8004128 <setup+0x7d4>)
 8004098:	f003 fe60 	bl	8007d5c <HAL_GPIO_ReadPin>
 800409c:	4603      	mov	r3, r0
 800409e:	4619      	mov	r1, r3
 80040a0:	4822      	ldr	r0, [pc, #136]	; (800412c <setup+0x7d8>)
 80040a2:	f011 fa21 	bl	80154e8 <iprintf>


  	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, lidars[0].RxData, BUFFER_LENGTH);
 80040a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040aa:	4921      	ldr	r1, [pc, #132]	; (8004130 <setup+0x7dc>)
 80040ac:	4821      	ldr	r0, [pc, #132]	; (8004134 <setup+0x7e0>)
 80040ae:	f00d fdc6 	bl	8011c3e <HAL_UARTEx_ReceiveToIdle_DMA>
  	memset(lidars[0].RxData, '\0', BUFFER_LENGTH);
 80040b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040b6:	2100      	movs	r1, #0
 80040b8:	481d      	ldr	r0, [pc, #116]	; (8004130 <setup+0x7dc>)
 80040ba:	f011 fa6a 	bl	8015592 <memset>

  	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, lidars[1].RxData, BUFFER_LENGTH);
 80040be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040c2:	491d      	ldr	r1, [pc, #116]	; (8004138 <setup+0x7e4>)
 80040c4:	481d      	ldr	r0, [pc, #116]	; (800413c <setup+0x7e8>)
 80040c6:	f00d fdba 	bl	8011c3e <HAL_UARTEx_ReceiveToIdle_DMA>
  	memset(lidars[1].RxData, '\0', BUFFER_LENGTH);
 80040ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040ce:	2100      	movs	r1, #0
 80040d0:	4819      	ldr	r0, [pc, #100]	; (8004138 <setup+0x7e4>)
 80040d2:	f011 fa5e 	bl	8015592 <memset>

  	HAL_UARTEx_ReceiveToIdle_DMA(&huart4, lidars[2].RxData, BUFFER_LENGTH);
 80040d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040da:	4919      	ldr	r1, [pc, #100]	; (8004140 <setup+0x7ec>)
 80040dc:	4819      	ldr	r0, [pc, #100]	; (8004144 <setup+0x7f0>)
 80040de:	f00d fdae 	bl	8011c3e <HAL_UARTEx_ReceiveToIdle_DMA>
  	memset(lidars[2].RxData, '\0', BUFFER_LENGTH);
 80040e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040e6:	2100      	movs	r1, #0
 80040e8:	4815      	ldr	r0, [pc, #84]	; (8004140 <setup+0x7ec>)
 80040ea:	f011 fa52 	bl	8015592 <memset>

  	HAL_UARTEx_ReceiveToIdle_DMA(&huart5, lidars[3].RxData, BUFFER_LENGTH);
 80040ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040f2:	4915      	ldr	r1, [pc, #84]	; (8004148 <setup+0x7f4>)
 80040f4:	4815      	ldr	r0, [pc, #84]	; (800414c <setup+0x7f8>)
 80040f6:	f00d fda2 	bl	8011c3e <HAL_UARTEx_ReceiveToIdle_DMA>
  	memset(lidars[3].RxData, '\0', BUFFER_LENGTH);
 80040fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040fe:	2100      	movs	r1, #0
 8004100:	4811      	ldr	r0, [pc, #68]	; (8004148 <setup+0x7f4>)
 8004102:	f011 fa46 	bl	8015592 <memset>

	HAL_UARTEx_ReceiveToIdle_IT(&huart7, settings_rx_buffer, sizeof(settings_rx_buffer));
 8004106:	2207      	movs	r2, #7
 8004108:	4911      	ldr	r1, [pc, #68]	; (8004150 <setup+0x7fc>)
 800410a:	4812      	ldr	r0, [pc, #72]	; (8004154 <setup+0x800>)
 800410c:	f00d fd47 	bl	8011b9e <HAL_UARTEx_ReceiveToIdle_IT>
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004118:	20022cd0 	.word	0x20022cd0
 800411c:	20026de8 	.word	0x20026de8
 8004120:	42020000 	.word	0x42020000
 8004124:	080174bc 	.word	0x080174bc
 8004128:	42020800 	.word	0x42020800
 800412c:	080174c0 	.word	0x080174c0
 8004130:	20000269 	.word	0x20000269
 8004134:	20027264 	.word	0x20027264
 8004138:	20008399 	.word	0x20008399
 800413c:	200272f8 	.word	0x200272f8
 8004140:	200104c9 	.word	0x200104c9
 8004144:	20027014 	.word	0x20027014
 8004148:	200185f9 	.word	0x200185f9
 800414c:	200270a8 	.word	0x200270a8
 8004150:	20020730 	.word	0x20020730
 8004154:	2002713c 	.word	0x2002713c

08004158 <_ZSt3powIeiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	ed87 0b02 	vstr	d0, [r7, #8]
 8004162:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fc f9ed 	bl	8000544 <__aeabi_i2d>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	ec43 2b11 	vmov	d1, r2, r3
 8004172:	ed97 0b02 	vldr	d0, [r7, #8]
 8004176:	f7fc fecb 	bl	8000f10 <_ZSt3powee>
 800417a:	eeb0 7a40 	vmov.f32	s14, s0
 800417e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8004182:	eeb0 0a47 	vmov.f32	s0, s14
 8004186:	eef0 0a67 	vmov.f32	s1, s15
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_Z41__static_initialization_and_destruction_0ii>:
 8004190:	b5b0      	push	{r4, r5, r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d133      	bne.n	8004208 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d12e      	bne.n	8004208 <_Z41__static_initialization_and_destruction_0ii+0x78>
Lidar_functions lidars[4];
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80041ac:	2403      	movs	r4, #3
 80041ae:	461d      	mov	r5, r3
 80041b0:	e007      	b.n	80041c2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80041b2:	4628      	mov	r0, r5
 80041b4:	f7fd fd00 	bl	8001bb8 <_ZN15Lidar_functionsC1Ev>
 80041b8:	f505 4301 	add.w	r3, r5, #33024	; 0x8100
 80041bc:	3330      	adds	r3, #48	; 0x30
 80041be:	461d      	mov	r5, r3
 80041c0:	3c01      	subs	r4, #1
 80041c2:	2c00      	cmp	r4, #0
 80041c4:	daf5      	bge.n	80041b2 <_Z41__static_initialization_and_destruction_0ii+0x22>
Comnplicated_zone danger_zones[2];
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80041c8:	2401      	movs	r4, #1
 80041ca:	461d      	mov	r5, r3
 80041cc:	e005      	b.n	80041da <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80041ce:	4628      	mov	r0, r5
 80041d0:	f7fe ffea 	bl	80031a8 <_ZN17Comnplicated_zoneC1Ev>
 80041d4:	f505 65a3 	add.w	r5, r5, #1304	; 0x518
 80041d8:	3c01      	subs	r4, #1
 80041da:	2c00      	cmp	r4, #0
 80041dc:	daf7      	bge.n	80041ce <_Z41__static_initialization_and_destruction_0ii+0x3e>
Zone blind_spots[5];
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80041e0:	2404      	movs	r4, #4
 80041e2:	461d      	mov	r5, r3
 80041e4:	e005      	b.n	80041f2 <_Z41__static_initialization_and_destruction_0ii+0x62>
 80041e6:	4628      	mov	r0, r5
 80041e8:	f7ff f82a 	bl	8003240 <_ZN4ZoneC1Ev>
 80041ec:	f605 15c8 	addw	r5, r5, #2504	; 0x9c8
 80041f0:	3c01      	subs	r4, #1
 80041f2:	2c00      	cmp	r4, #0
 80041f4:	daf7      	bge.n	80041e6 <_Z41__static_initialization_and_destruction_0ii+0x56>
Collision_detector front_detector;
 80041f6:	4809      	ldr	r0, [pc, #36]	; (800421c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80041f8:	f7ff f869 	bl	80032ce <_ZN18Collision_detectorC1Ev>
Collision_detector rear_detector;
 80041fc:	4808      	ldr	r0, [pc, #32]	; (8004220 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80041fe:	f7ff f866 	bl	80032ce <_ZN18Collision_detectorC1Ev>
Display_data tx_packet;
 8004202:	4808      	ldr	r0, [pc, #32]	; (8004224 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004204:	f7ff f8e8 	bl	80033d8 <_ZN12Display_dataC1Ev>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bdb0      	pop	{r4, r5, r7, pc}
 8004210:	20000268 	.word	0x20000268
 8004214:	20022cd0 	.word	0x20022cd0
 8004218:	20023700 	.word	0x20023700
 800421c:	200267e8 	.word	0x200267e8
 8004220:	20026ad0 	.word	0x20026ad0
 8004224:	20026db8 	.word	0x20026db8

08004228 <_GLOBAL__sub_I__Z7radiansd>:
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
 800422c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004230:	2001      	movs	r0, #1
 8004232:	f7ff ffad 	bl	8004190 <_Z41__static_initialization_and_destruction_0ii>
 8004236:	bd80      	pop	{r7, pc}

08004238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d013      	beq.n	8004278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004260:	e000      	b.n	8004264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f9      	beq.n	8004262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800426e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004278:	687b      	ldr	r3, [r7, #4]
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <__io_putchar>:

int new_recieve = 0;



int __io_putchar(int ch){
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	if (debug_channel == 0){
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <__io_putchar+0x3c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <__io_putchar+0x20>
		HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004298:	1d39      	adds	r1, r7, #4
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	2201      	movs	r2, #1
 80042a0:	4809      	ldr	r0, [pc, #36]	; (80042c8 <__io_putchar+0x40>)
 80042a2:	f00b f915 	bl	800f4d0 <HAL_UART_Transmit>
 80042a6:	e007      	b.n	80042b8 <__io_putchar+0x30>
	}
	else if(debug_channel == 1){
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <__io_putchar+0x3c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d103      	bne.n	80042b8 <__io_putchar+0x30>
		ITM_SendChar(ch);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff ffc0 	bl	8004238 <ITM_SendChar>
	}
	else if(debug_channel == 2){
		//ITM_SendChar(ITM_STIM1, ch);
	}

	return ch;
 80042b8:	687b      	ldr	r3, [r7, #4]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200279c4 	.word	0x200279c4
 80042c8:	200271d0 	.word	0x200271d0

080042cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042d2:	f001 ff01 	bl	80060d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042d6:	f000 f83f 	bl	8004358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042da:	f000 fc45 	bl	8004b68 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80042de:	f000 f8cf 	bl	8004480 <MX_GPDMA1_Init>
  MX_GPDMA2_Init();
 80042e2:	f000 f8f5 	bl	80044d0 <MX_GPDMA2_Init>
  MX_TIM4_Init();
 80042e6:	f000 f97b 	bl	80045e0 <MX_TIM4_Init>
  MX_UART4_Init();
 80042ea:	f000 f9f5 	bl	80046d8 <MX_UART4_Init>
  MX_UART5_Init();
 80042ee:	f000 fa3f 	bl	8004770 <MX_UART5_Init>
  MX_UART7_Init();
 80042f2:	f000 fa89 	bl	8004808 <MX_UART7_Init>
  MX_USART1_UART_Init();
 80042f6:	f000 fad3 	bl	80048a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80042fa:	f000 fb1f 	bl	800493c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80042fe:	f000 fb69 	bl	80049d4 <MX_USART3_UART_Init>
  MX_USART6_Init();
 8004302:	f000 fbb3 	bl	8004a6c <MX_USART6_Init>
  MX_MEMORYMAP_Init();
 8004306:	f000 f916 	bl	8004536 <MX_MEMORYMAP_Init>
  MX_USB_PCD_Init();
 800430a:	f000 fbfb 	bl	8004b04 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 800430e:	f000 f907 	bl	8004520 <MX_ICACHE_Init>
  MX_CORDIC_Init();
 8004312:	f000 f88d 	bl	8004430 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8004316:	f000 f89f 	bl	8004458 <MX_FMAC_Init>
  MX_RTC_Init();
 800431a:	f000 f913 	bl	8004544 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  setup();
 800431e:	f7ff fb19 	bl	8003954 <setup>

    int pwm =  1400;
 8004322:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8004326:	607b      	str	r3, [r7, #4]
    int inc =  1;
 8004328:	2301      	movs	r3, #1
 800432a:	603b      	str	r3, [r7, #0]
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm);
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <main+0x88>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm);
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <main+0x88>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm);
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <main+0x88>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm);
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <main+0x88>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
  	  /*if(new_recieve){
  		  printf("data\n");
  		  new_recieve = 0;
  	  }*/

  	  loop();
 800434c:	f7ff f868 	bl	8003420 <loop>
 8004350:	e7fc      	b.n	800434c <main+0x80>
 8004352:	bf00      	nop
 8004354:	20026fc8 	.word	0x20026fc8

08004358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b09c      	sub	sp, #112	; 0x70
 800435c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800435e:	f107 0320 	add.w	r3, r7, #32
 8004362:	2250      	movs	r2, #80	; 0x50
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f011 f913 	bl	8015592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800436c:	f107 0308 	add.w	r3, r7, #8
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	605a      	str	r2, [r3, #4]
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	611a      	str	r2, [r3, #16]
 800437c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800437e:	4b2b      	ldr	r3, [pc, #172]	; (800442c <SystemClock_Config+0xd4>)
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	4a2a      	ldr	r2, [pc, #168]	; (800442c <SystemClock_Config+0xd4>)
 8004384:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004388:	6113      	str	r3, [r2, #16]
 800438a:	4b28      	ldr	r3, [pc, #160]	; (800442c <SystemClock_Config+0xd4>)
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004396:	bf00      	nop
 8004398:	4b24      	ldr	r3, [pc, #144]	; (800442c <SystemClock_Config+0xd4>)
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d1f9      	bne.n	8004398 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80043a4:	2329      	movs	r3, #41	; 0x29
 80043a6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80043ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80043b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043ba:	2302      	movs	r3, #2
 80043bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80043be:	2303      	movs	r3, #3
 80043c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80043c2:	2304      	movs	r3, #4
 80043c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 80043c6:	2328      	movs	r3, #40	; 0x28
 80043c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80043ca:	2302      	movs	r3, #2
 80043cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80043ce:	2302      	movs	r3, #2
 80043d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80043d2:	2302      	movs	r3, #2
 80043d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80043d6:	230c      	movs	r3, #12
 80043d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80043da:	2300      	movs	r3, #0
 80043dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043e2:	f107 0320 	add.w	r3, r7, #32
 80043e6:	4618      	mov	r0, r3
 80043e8:	f003 fe16 	bl	8008018 <HAL_RCC_OscConfig>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80043f2:	f000 fcbb 	bl	8004d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043f6:	231f      	movs	r3, #31
 80043f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043fa:	2303      	movs	r3, #3
 80043fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	2105      	movs	r1, #5
 8004414:	4618      	mov	r0, r3
 8004416:	f004 fa37 	bl	8008888 <HAL_RCC_ClockConfig>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8004420:	f000 fca4 	bl	8004d6c <Error_Handler>
  }
}
 8004424:	bf00      	nop
 8004426:	3770      	adds	r7, #112	; 0x70
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	44020800 	.word	0x44020800

08004430 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <MX_CORDIC_Init+0x20>)
 8004436:	4a07      	ldr	r2, [pc, #28]	; (8004454 <MX_CORDIC_Init+0x24>)
 8004438:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800443a:	4805      	ldr	r0, [pc, #20]	; (8004450 <MX_CORDIC_Init+0x20>)
 800443c:	f001 feec 	bl	8006218 <HAL_CORDIC_Init>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8004446:	f000 fc91 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20026f38 	.word	0x20026f38
 8004454:	40023800 	.word	0x40023800

08004458 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <MX_FMAC_Init+0x20>)
 800445e:	4a07      	ldr	r2, [pc, #28]	; (800447c <MX_FMAC_Init+0x24>)
 8004460:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004462:	4805      	ldr	r0, [pc, #20]	; (8004478 <MX_FMAC_Init+0x20>)
 8004464:	f003 fa7b 	bl	800795e <HAL_FMAC_Init>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800446e:	f000 fc7d 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20026f60 	.word	0x20026f60
 800447c:	40023c00 	.word	0x40023c00

08004480 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <MX_GPDMA1_Init+0x4c>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	4a0f      	ldr	r2, [pc, #60]	; (80044cc <MX_GPDMA1_Init+0x4c>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <MX_GPDMA1_Init+0x4c>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80044a4:	2200      	movs	r2, #0
 80044a6:	2100      	movs	r1, #0
 80044a8:	201b      	movs	r0, #27
 80044aa:	f001 ffc2 	bl	8006432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80044ae:	201b      	movs	r0, #27
 80044b0:	f001 ffd9 	bl	8006466 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 1, 0);
 80044b4:	2200      	movs	r2, #0
 80044b6:	2101      	movs	r1, #1
 80044b8:	201c      	movs	r0, #28
 80044ba:	f001 ffba 	bl	8006432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80044be:	201c      	movs	r0, #28
 80044c0:	f001 ffd1 	bl	8006466 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	44020c00 	.word	0x44020c00

080044d0 <MX_GPDMA2_Init>:
  * @brief GPDMA2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA2_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Init 0 */

  /* USER CODE END GPDMA2_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA2_CLK_ENABLE();
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <MX_GPDMA2_Init+0x4c>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	4a0f      	ldr	r2, [pc, #60]	; (800451c <MX_GPDMA2_Init+0x4c>)
 80044de:	f043 0302 	orr.w	r3, r3, #2
 80044e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <MX_GPDMA2_Init+0x4c>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA2 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA2_Channel0_IRQn, 3, 0);
 80044f4:	2200      	movs	r2, #0
 80044f6:	2103      	movs	r1, #3
 80044f8:	205a      	movs	r0, #90	; 0x5a
 80044fa:	f001 ff9a 	bl	8006432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA2_Channel0_IRQn);
 80044fe:	205a      	movs	r0, #90	; 0x5a
 8004500:	f001 ffb1 	bl	8006466 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA2_Channel1_IRQn, 2, 0);
 8004504:	2200      	movs	r2, #0
 8004506:	2102      	movs	r1, #2
 8004508:	205b      	movs	r0, #91	; 0x5b
 800450a:	f001 ff92 	bl	8006432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA2_Channel1_IRQn);
 800450e:	205b      	movs	r0, #91	; 0x5b
 8004510:	f001 ffa9 	bl	8006466 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA2_Init 1 */
  /* USER CODE BEGIN GPDMA2_Init 2 */

  /* USER CODE END GPDMA2_Init 2 */

}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	44020c00 	.word	0x44020c00

08004520 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8004524:	f003 fc4a 	bl	8007dbc <HAL_ICACHE_Enable>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800452e:	f000 fc1d 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}

08004536 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 800453a:	bf00      	nop
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	611a      	str	r2, [r3, #16]
 8004558:	615a      	str	r2, [r3, #20]
 800455a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <MX_RTC_Init+0x94>)
 800455e:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <MX_RTC_Init+0x98>)
 8004560:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <MX_RTC_Init+0x94>)
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <MX_RTC_Init+0x94>)
 800456a:	227f      	movs	r2, #127	; 0x7f
 800456c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <MX_RTC_Init+0x94>)
 8004570:	22ff      	movs	r2, #255	; 0xff
 8004572:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004574:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <MX_RTC_Init+0x94>)
 8004576:	2200      	movs	r2, #0
 8004578:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <MX_RTC_Init+0x94>)
 800457c:	2200      	movs	r2, #0
 800457e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004580:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <MX_RTC_Init+0x94>)
 8004582:	2200      	movs	r2, #0
 8004584:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004586:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <MX_RTC_Init+0x94>)
 8004588:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800458c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <MX_RTC_Init+0x94>)
 8004590:	2200      	movs	r2, #0
 8004592:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8004594:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <MX_RTC_Init+0x94>)
 8004596:	2200      	movs	r2, #0
 8004598:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800459a:	480f      	ldr	r0, [pc, #60]	; (80045d8 <MX_RTC_Init+0x94>)
 800459c:	f009 fd08 	bl	800dfb0 <HAL_RTC_Init>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80045a6:	f000 fbe1 	bl	8004d6c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4806      	ldr	r0, [pc, #24]	; (80045d8 <MX_RTC_Init+0x94>)
 80045c0:	f009 fe52 	bl	800e268 <HAL_RTCEx_PrivilegeModeSet>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80045ca:	f000 fbcf 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80045ce:	bf00      	nop
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20026f98 	.word	0x20026f98
 80045dc:	44007800 	.word	0x44007800

080045e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e6:	f107 031c 	add.w	r3, r7, #28
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045f2:	463b      	mov	r3, r7
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	611a      	str	r2, [r3, #16]
 8004600:	615a      	str	r2, [r3, #20]
 8004602:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004604:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <MX_TIM4_Init+0xf0>)
 8004606:	4a33      	ldr	r2, [pc, #204]	; (80046d4 <MX_TIM4_Init+0xf4>)
 8004608:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 800460a:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <MX_TIM4_Init+0xf0>)
 800460c:	2206      	movs	r2, #6
 800460e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004610:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <MX_TIM4_Init+0xf0>)
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8004616:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <MX_TIM4_Init+0xf0>)
 8004618:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800461c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800461e:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <MX_TIM4_Init+0xf0>)
 8004620:	2200      	movs	r2, #0
 8004622:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004624:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <MX_TIM4_Init+0xf0>)
 8004626:	2200      	movs	r2, #0
 8004628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800462a:	4829      	ldr	r0, [pc, #164]	; (80046d0 <MX_TIM4_Init+0xf0>)
 800462c:	f009 fe4a 	bl	800e2c4 <HAL_TIM_PWM_Init>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8004636:	f000 fb99 	bl	8004d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800463e:	2300      	movs	r3, #0
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004642:	f107 031c 	add.w	r3, r7, #28
 8004646:	4619      	mov	r1, r3
 8004648:	4821      	ldr	r0, [pc, #132]	; (80046d0 <MX_TIM4_Init+0xf0>)
 800464a:	f00a fe21 	bl	800f290 <HAL_TIMEx_MasterConfigSynchronization>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004654:	f000 fb8a 	bl	8004d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004658:	2360      	movs	r3, #96	; 0x60
 800465a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004660:	2302      	movs	r3, #2
 8004662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004668:	463b      	mov	r3, r7
 800466a:	2200      	movs	r2, #0
 800466c:	4619      	mov	r1, r3
 800466e:	4818      	ldr	r0, [pc, #96]	; (80046d0 <MX_TIM4_Init+0xf0>)
 8004670:	f009 ffe0 	bl	800e634 <HAL_TIM_PWM_ConfigChannel>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800467a:	f000 fb77 	bl	8004d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800467e:	463b      	mov	r3, r7
 8004680:	2204      	movs	r2, #4
 8004682:	4619      	mov	r1, r3
 8004684:	4812      	ldr	r0, [pc, #72]	; (80046d0 <MX_TIM4_Init+0xf0>)
 8004686:	f009 ffd5 	bl	800e634 <HAL_TIM_PWM_ConfigChannel>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8004690:	f000 fb6c 	bl	8004d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004694:	463b      	mov	r3, r7
 8004696:	2208      	movs	r2, #8
 8004698:	4619      	mov	r1, r3
 800469a:	480d      	ldr	r0, [pc, #52]	; (80046d0 <MX_TIM4_Init+0xf0>)
 800469c:	f009 ffca 	bl	800e634 <HAL_TIM_PWM_ConfigChannel>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80046a6:	f000 fb61 	bl	8004d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80046aa:	463b      	mov	r3, r7
 80046ac:	220c      	movs	r2, #12
 80046ae:	4619      	mov	r1, r3
 80046b0:	4807      	ldr	r0, [pc, #28]	; (80046d0 <MX_TIM4_Init+0xf0>)
 80046b2:	f009 ffbf 	bl	800e634 <HAL_TIM_PWM_ConfigChannel>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80046bc:	f000 fb56 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80046c0:	4803      	ldr	r0, [pc, #12]	; (80046d0 <MX_TIM4_Init+0xf0>)
 80046c2:	f000 fc25 	bl	8004f10 <HAL_TIM_MspPostInit>

}
 80046c6:	bf00      	nop
 80046c8:	3728      	adds	r7, #40	; 0x28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20026fc8 	.word	0x20026fc8
 80046d4:	40000800 	.word	0x40000800

080046d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80046dc:	4b22      	ldr	r3, [pc, #136]	; (8004768 <MX_UART4_Init+0x90>)
 80046de:	4a23      	ldr	r2, [pc, #140]	; (800476c <MX_UART4_Init+0x94>)
 80046e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80046e2:	4b21      	ldr	r3, [pc, #132]	; (8004768 <MX_UART4_Init+0x90>)
 80046e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80046ea:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <MX_UART4_Init+0x90>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80046f0:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <MX_UART4_Init+0x90>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <MX_UART4_Init+0x90>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80046fc:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <MX_UART4_Init+0x90>)
 80046fe:	220c      	movs	r2, #12
 8004700:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004702:	4b19      	ldr	r3, [pc, #100]	; (8004768 <MX_UART4_Init+0x90>)
 8004704:	2200      	movs	r2, #0
 8004706:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004708:	4b17      	ldr	r3, [pc, #92]	; (8004768 <MX_UART4_Init+0x90>)
 800470a:	2200      	movs	r2, #0
 800470c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800470e:	4b16      	ldr	r3, [pc, #88]	; (8004768 <MX_UART4_Init+0x90>)
 8004710:	2200      	movs	r2, #0
 8004712:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <MX_UART4_Init+0x90>)
 8004716:	2200      	movs	r2, #0
 8004718:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800471a:	4b13      	ldr	r3, [pc, #76]	; (8004768 <MX_UART4_Init+0x90>)
 800471c:	2200      	movs	r2, #0
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004720:	4811      	ldr	r0, [pc, #68]	; (8004768 <MX_UART4_Init+0x90>)
 8004722:	f00a fe85 	bl	800f430 <HAL_UART_Init>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800472c:	f000 fb1e 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004730:	2100      	movs	r1, #0
 8004732:	480d      	ldr	r0, [pc, #52]	; (8004768 <MX_UART4_Init+0x90>)
 8004734:	f00d f9b7 	bl	8011aa6 <HAL_UARTEx_SetTxFifoThreshold>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800473e:	f000 fb15 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004742:	2100      	movs	r1, #0
 8004744:	4808      	ldr	r0, [pc, #32]	; (8004768 <MX_UART4_Init+0x90>)
 8004746:	f00d f9ec 	bl	8011b22 <HAL_UARTEx_SetRxFifoThreshold>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8004750:	f000 fb0c 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004754:	4804      	ldr	r0, [pc, #16]	; (8004768 <MX_UART4_Init+0x90>)
 8004756:	f00d f96d 	bl	8011a34 <HAL_UARTEx_DisableFifoMode>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8004760:	f000 fb04 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004764:	bf00      	nop
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20027014 	.word	0x20027014
 800476c:	40004c00 	.word	0x40004c00

08004770 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <MX_UART5_Init+0x90>)
 8004776:	4a23      	ldr	r2, [pc, #140]	; (8004804 <MX_UART5_Init+0x94>)
 8004778:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800477a:	4b21      	ldr	r3, [pc, #132]	; (8004800 <MX_UART5_Init+0x90>)
 800477c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004780:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004782:	4b1f      	ldr	r3, [pc, #124]	; (8004800 <MX_UART5_Init+0x90>)
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004788:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <MX_UART5_Init+0x90>)
 800478a:	2200      	movs	r2, #0
 800478c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <MX_UART5_Init+0x90>)
 8004790:	2200      	movs	r2, #0
 8004792:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004794:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <MX_UART5_Init+0x90>)
 8004796:	220c      	movs	r2, #12
 8004798:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800479a:	4b19      	ldr	r3, [pc, #100]	; (8004800 <MX_UART5_Init+0x90>)
 800479c:	2200      	movs	r2, #0
 800479e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80047a0:	4b17      	ldr	r3, [pc, #92]	; (8004800 <MX_UART5_Init+0x90>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047a6:	4b16      	ldr	r3, [pc, #88]	; (8004800 <MX_UART5_Init+0x90>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047ac:	4b14      	ldr	r3, [pc, #80]	; (8004800 <MX_UART5_Init+0x90>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <MX_UART5_Init+0x90>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80047b8:	4811      	ldr	r0, [pc, #68]	; (8004800 <MX_UART5_Init+0x90>)
 80047ba:	f00a fe39 	bl	800f430 <HAL_UART_Init>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80047c4:	f000 fad2 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047c8:	2100      	movs	r1, #0
 80047ca:	480d      	ldr	r0, [pc, #52]	; (8004800 <MX_UART5_Init+0x90>)
 80047cc:	f00d f96b 	bl	8011aa6 <HAL_UARTEx_SetTxFifoThreshold>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80047d6:	f000 fac9 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047da:	2100      	movs	r1, #0
 80047dc:	4808      	ldr	r0, [pc, #32]	; (8004800 <MX_UART5_Init+0x90>)
 80047de:	f00d f9a0 	bl	8011b22 <HAL_UARTEx_SetRxFifoThreshold>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80047e8:	f000 fac0 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80047ec:	4804      	ldr	r0, [pc, #16]	; (8004800 <MX_UART5_Init+0x90>)
 80047ee:	f00d f921 	bl	8011a34 <HAL_UARTEx_DisableFifoMode>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80047f8:	f000 fab8 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80047fc:	bf00      	nop
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	200270a8 	.word	0x200270a8
 8004804:	40005000 	.word	0x40005000

08004808 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800480c:	4b22      	ldr	r3, [pc, #136]	; (8004898 <MX_UART7_Init+0x90>)
 800480e:	4a23      	ldr	r2, [pc, #140]	; (800489c <MX_UART7_Init+0x94>)
 8004810:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004812:	4b21      	ldr	r3, [pc, #132]	; (8004898 <MX_UART7_Init+0x90>)
 8004814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004818:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800481a:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <MX_UART7_Init+0x90>)
 800481c:	2200      	movs	r2, #0
 800481e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004820:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <MX_UART7_Init+0x90>)
 8004822:	2200      	movs	r2, #0
 8004824:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004826:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <MX_UART7_Init+0x90>)
 8004828:	2200      	movs	r2, #0
 800482a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800482c:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <MX_UART7_Init+0x90>)
 800482e:	220c      	movs	r2, #12
 8004830:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004832:	4b19      	ldr	r3, [pc, #100]	; (8004898 <MX_UART7_Init+0x90>)
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004838:	4b17      	ldr	r3, [pc, #92]	; (8004898 <MX_UART7_Init+0x90>)
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800483e:	4b16      	ldr	r3, [pc, #88]	; (8004898 <MX_UART7_Init+0x90>)
 8004840:	2200      	movs	r2, #0
 8004842:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004844:	4b14      	ldr	r3, [pc, #80]	; (8004898 <MX_UART7_Init+0x90>)
 8004846:	2200      	movs	r2, #0
 8004848:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800484a:	4b13      	ldr	r3, [pc, #76]	; (8004898 <MX_UART7_Init+0x90>)
 800484c:	2200      	movs	r2, #0
 800484e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004850:	4811      	ldr	r0, [pc, #68]	; (8004898 <MX_UART7_Init+0x90>)
 8004852:	f00a fded 	bl	800f430 <HAL_UART_Init>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800485c:	f000 fa86 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004860:	2100      	movs	r1, #0
 8004862:	480d      	ldr	r0, [pc, #52]	; (8004898 <MX_UART7_Init+0x90>)
 8004864:	f00d f91f 	bl	8011aa6 <HAL_UARTEx_SetTxFifoThreshold>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800486e:	f000 fa7d 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004872:	2100      	movs	r1, #0
 8004874:	4808      	ldr	r0, [pc, #32]	; (8004898 <MX_UART7_Init+0x90>)
 8004876:	f00d f954 	bl	8011b22 <HAL_UARTEx_SetRxFifoThreshold>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8004880:	f000 fa74 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8004884:	4804      	ldr	r0, [pc, #16]	; (8004898 <MX_UART7_Init+0x90>)
 8004886:	f00d f8d5 	bl	8011a34 <HAL_UARTEx_DisableFifoMode>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8004890:	f000 fa6c 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004894:	bf00      	nop
 8004896:	bd80      	pop	{r7, pc}
 8004898:	2002713c 	.word	0x2002713c
 800489c:	40007800 	.word	0x40007800

080048a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048a6:	4a23      	ldr	r2, [pc, #140]	; (8004934 <MX_USART1_UART_Init+0x94>)
 80048a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80048aa:	4b21      	ldr	r3, [pc, #132]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048ac:	4a22      	ldr	r2, [pc, #136]	; (8004938 <MX_USART1_UART_Init+0x98>)
 80048ae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048bc:	4b1c      	ldr	r3, [pc, #112]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048c2:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048c4:	220c      	movs	r2, #12
 80048c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048ce:	4b18      	ldr	r3, [pc, #96]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048dc:	2200      	movs	r2, #0
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048e0:	4b13      	ldr	r3, [pc, #76]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048e6:	4812      	ldr	r0, [pc, #72]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048e8:	f00a fda2 	bl	800f430 <HAL_UART_Init>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80048f2:	f000 fa3b 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048f6:	2100      	movs	r1, #0
 80048f8:	480d      	ldr	r0, [pc, #52]	; (8004930 <MX_USART1_UART_Init+0x90>)
 80048fa:	f00d f8d4 	bl	8011aa6 <HAL_UARTEx_SetTxFifoThreshold>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8004904:	f000 fa32 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004908:	2100      	movs	r1, #0
 800490a:	4809      	ldr	r0, [pc, #36]	; (8004930 <MX_USART1_UART_Init+0x90>)
 800490c:	f00d f909 	bl	8011b22 <HAL_UARTEx_SetRxFifoThreshold>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8004916:	f000 fa29 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800491a:	4805      	ldr	r0, [pc, #20]	; (8004930 <MX_USART1_UART_Init+0x90>)
 800491c:	f00d f88a 	bl	8011a34 <HAL_UARTEx_DisableFifoMode>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8004926:	f000 fa21 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200271d0 	.word	0x200271d0
 8004934:	40013800 	.word	0x40013800
 8004938:	001e8480 	.word	0x001e8480

0800493c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004940:	4b22      	ldr	r3, [pc, #136]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004942:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <MX_USART2_UART_Init+0x94>)
 8004944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004946:	4b21      	ldr	r3, [pc, #132]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800494c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800494e:	4b1f      	ldr	r3, [pc, #124]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004950:	2200      	movs	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004954:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004956:	2200      	movs	r2, #0
 8004958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800495a:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <MX_USART2_UART_Init+0x90>)
 800495c:	2200      	movs	r2, #0
 800495e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004962:	220c      	movs	r2, #12
 8004964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004968:	2200      	movs	r2, #0
 800496a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800496c:	4b17      	ldr	r3, [pc, #92]	; (80049cc <MX_USART2_UART_Init+0x90>)
 800496e:	2200      	movs	r2, #0
 8004970:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004972:	4b16      	ldr	r3, [pc, #88]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004974:	2200      	movs	r2, #0
 8004976:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <MX_USART2_UART_Init+0x90>)
 800497a:	2200      	movs	r2, #0
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004980:	2200      	movs	r2, #0
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004984:	4811      	ldr	r0, [pc, #68]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004986:	f00a fd53 	bl	800f430 <HAL_UART_Init>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004990:	f000 f9ec 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004994:	2100      	movs	r1, #0
 8004996:	480d      	ldr	r0, [pc, #52]	; (80049cc <MX_USART2_UART_Init+0x90>)
 8004998:	f00d f885 	bl	8011aa6 <HAL_UARTEx_SetTxFifoThreshold>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80049a2:	f000 f9e3 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049a6:	2100      	movs	r1, #0
 80049a8:	4808      	ldr	r0, [pc, #32]	; (80049cc <MX_USART2_UART_Init+0x90>)
 80049aa:	f00d f8ba 	bl	8011b22 <HAL_UARTEx_SetRxFifoThreshold>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80049b4:	f000 f9da 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80049b8:	4804      	ldr	r0, [pc, #16]	; (80049cc <MX_USART2_UART_Init+0x90>)
 80049ba:	f00d f83b 	bl	8011a34 <HAL_UARTEx_DisableFifoMode>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80049c4:	f000 f9d2 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049c8:	bf00      	nop
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20027264 	.word	0x20027264
 80049d0:	40004400 	.word	0x40004400

080049d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80049d8:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 80049da:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <MX_USART3_UART_Init+0x94>)
 80049dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80049de:	4b21      	ldr	r3, [pc, #132]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 80049e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80049ec:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80049f2:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 80049fa:	220c      	movs	r2, #12
 80049fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049fe:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a04:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a0a:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a10:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a16:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a1c:	4811      	ldr	r0, [pc, #68]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 8004a1e:	f00a fd07 	bl	800f430 <HAL_UART_Init>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004a28:	f000 f9a0 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	480d      	ldr	r0, [pc, #52]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 8004a30:	f00d f839 	bl	8011aa6 <HAL_UARTEx_SetTxFifoThreshold>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004a3a:	f000 f997 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4808      	ldr	r0, [pc, #32]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 8004a42:	f00d f86e 	bl	8011b22 <HAL_UARTEx_SetRxFifoThreshold>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004a4c:	f000 f98e 	bl	8004d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004a50:	4804      	ldr	r0, [pc, #16]	; (8004a64 <MX_USART3_UART_Init+0x90>)
 8004a52:	f00c ffef 	bl	8011a34 <HAL_UARTEx_DisableFifoMode>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004a5c:	f000 f986 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a60:	bf00      	nop
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200272f8 	.word	0x200272f8
 8004a68:	40004800 	.word	0x40004800

08004a6c <MX_USART6_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_Init(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  husart6.Instance = USART6;
 8004a70:	4b22      	ldr	r3, [pc, #136]	; (8004afc <MX_USART6_Init+0x90>)
 8004a72:	4a23      	ldr	r2, [pc, #140]	; (8004b00 <MX_USART6_Init+0x94>)
 8004a74:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 8004a76:	4b21      	ldr	r3, [pc, #132]	; (8004afc <MX_USART6_Init+0x90>)
 8004a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a7c:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = USART_WORDLENGTH_8B;
 8004a7e:	4b1f      	ldr	r3, [pc, #124]	; (8004afc <MX_USART6_Init+0x90>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = USART_STOPBITS_1;
 8004a84:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <MX_USART6_Init+0x90>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = USART_PARITY_NONE;
 8004a8a:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <MX_USART6_Init+0x90>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = USART_MODE_TX_RX;
 8004a90:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <MX_USART6_Init+0x90>)
 8004a92:	220c      	movs	r2, #12
 8004a94:	615a      	str	r2, [r3, #20]
  husart6.Init.CLKPolarity = USART_POLARITY_LOW;
 8004a96:	4b19      	ldr	r3, [pc, #100]	; (8004afc <MX_USART6_Init+0x90>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	619a      	str	r2, [r3, #24]
  husart6.Init.CLKPhase = USART_PHASE_1EDGE;
 8004a9c:	4b17      	ldr	r3, [pc, #92]	; (8004afc <MX_USART6_Init+0x90>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	61da      	str	r2, [r3, #28]
  husart6.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8004aa2:	4b16      	ldr	r3, [pc, #88]	; (8004afc <MX_USART6_Init+0x90>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	621a      	str	r2, [r3, #32]
  husart6.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8004aa8:	4b14      	ldr	r3, [pc, #80]	; (8004afc <MX_USART6_Init+0x90>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24
  husart6.SlaveMode = USART_SLAVEMODE_DISABLE;
 8004aae:	4b13      	ldr	r3, [pc, #76]	; (8004afc <MX_USART6_Init+0x90>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart6) != HAL_OK)
 8004ab4:	4811      	ldr	r0, [pc, #68]	; (8004afc <MX_USART6_Init+0x90>)
 8004ab6:	f00d f965 	bl	8011d84 <HAL_USART_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <MX_USART6_Init+0x58>
  {
    Error_Handler();
 8004ac0:	f000 f954 	bl	8004d6c <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart6, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	480d      	ldr	r0, [pc, #52]	; (8004afc <MX_USART6_Init+0x90>)
 8004ac8:	f00d ff6a 	bl	80129a0 <HAL_USARTEx_SetTxFifoThreshold>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <MX_USART6_Init+0x6a>
  {
    Error_Handler();
 8004ad2:	f000 f94b 	bl	8004d6c <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart6, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4808      	ldr	r0, [pc, #32]	; (8004afc <MX_USART6_Init+0x90>)
 8004ada:	f00d ff9f 	bl	8012a1c <HAL_USARTEx_SetRxFifoThreshold>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <MX_USART6_Init+0x7c>
  {
    Error_Handler();
 8004ae4:	f000 f942 	bl	8004d6c <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart6) != HAL_OK)
 8004ae8:	4804      	ldr	r0, [pc, #16]	; (8004afc <MX_USART6_Init+0x90>)
 8004aea:	f00d ff20 	bl	801292e <HAL_USARTEx_DisableFifoMode>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_USART6_Init+0x8c>
  {
    Error_Handler();
 8004af4:	f000 f93a 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	2002738c 	.word	0x2002738c
 8004b00:	40006400 	.word	0x40006400

08004b04 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b0a:	4a16      	ldr	r2, [pc, #88]	; (8004b64 <MX_USB_PCD_Init+0x60>)
 8004b0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8004b0e:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b10:	2208      	movs	r2, #8
 8004b12:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b16:	2202      	movs	r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004b1a:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8004b26:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8004b4a:	4805      	ldr	r0, [pc, #20]	; (8004b60 <MX_USB_PCD_Init+0x5c>)
 8004b4c:	f003 f946 	bl	8007ddc <HAL_PCD_Init>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8004b56:	f000 f909 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004b5a:	bf00      	nop
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	200276bc 	.word	0x200276bc
 8004b64:	40016000 	.word	0x40016000

08004b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b6e:	f107 0314 	add.w	r3, r7, #20
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	605a      	str	r2, [r3, #4]
 8004b78:	609a      	str	r2, [r3, #8]
 8004b7a:	60da      	str	r2, [r3, #12]
 8004b7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b7e:	4b74      	ldr	r3, [pc, #464]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b84:	4a72      	ldr	r2, [pc, #456]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004b86:	f043 0304 	orr.w	r3, r3, #4
 8004b8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b8e:	4b70      	ldr	r3, [pc, #448]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b9c:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba2:	4a6b      	ldr	r2, [pc, #428]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004bac:	4b68      	ldr	r3, [pc, #416]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bba:	4b65      	ldr	r3, [pc, #404]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc0:	4a63      	ldr	r2, [pc, #396]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004bca:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd8:	4b5d      	ldr	r3, [pc, #372]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bde:	4a5c      	ldr	r2, [pc, #368]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004be8:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	607b      	str	r3, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bf6:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bfc:	4a54      	ldr	r2, [pc, #336]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004bfe:	f043 0308 	orr.w	r3, r3, #8
 8004c02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c06:	4b52      	ldr	r3, [pc, #328]	; (8004d50 <MX_GPIO_Init+0x1e8>)
 8004c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WORKING_LED_3_Pin|CONNECT_LED_3_Pin|BRAKE_2_Pin, GPIO_PIN_RESET);
 8004c14:	2200      	movs	r2, #0
 8004c16:	f240 210a 	movw	r1, #522	; 0x20a
 8004c1a:	484e      	ldr	r0, [pc, #312]	; (8004d54 <MX_GPIO_Init+0x1ec>)
 8004c1c:	f003 f8b6 	bl	8007d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WORKING_LED_1_GPIO_Port, WORKING_LED_1_Pin, GPIO_PIN_SET);
 8004c20:	2201      	movs	r2, #1
 8004c22:	2110      	movs	r1, #16
 8004c24:	484c      	ldr	r0, [pc, #304]	; (8004d58 <MX_GPIO_Init+0x1f0>)
 8004c26:	f003 f8b1 	bl	8007d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CONNECT_LED_1_Pin|WORKING_LED_2_Pin|WORKING_LED_4_Pin|CONNECT_LED_4_Pin, GPIO_PIN_RESET);
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
 8004c30:	4849      	ldr	r0, [pc, #292]	; (8004d58 <MX_GPIO_Init+0x1f0>)
 8004c32:	f003 f8ab 	bl	8007d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CONNECT_LED_2_Pin|Brake1_Pin, GPIO_PIN_RESET);
 8004c36:	2200      	movs	r2, #0
 8004c38:	2121      	movs	r1, #33	; 0x21
 8004c3a:	4848      	ldr	r0, [pc, #288]	; (8004d5c <MX_GPIO_Init+0x1f4>)
 8004c3c:	f003 f8a6 	bl	8007d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_Pin CONNECT_DET_3_Pin CONNECT_DET_2_Pin CONNECT_DET_4_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|CONNECT_DET_3_Pin|CONNECT_DET_2_Pin|CONNECT_DET_4_Pin;
 8004c40:	f242 4321 	movw	r3, #9249	; 0x2421
 8004c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c4e:	f107 0314 	add.w	r3, r7, #20
 8004c52:	4619      	mov	r1, r3
 8004c54:	483f      	ldr	r0, [pc, #252]	; (8004d54 <MX_GPIO_Init+0x1ec>)
 8004c56:	f002 ff2f 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WORKING_LED_3_Pin CONNECT_LED_3_Pin BRAKE_2_Pin */
  GPIO_InitStruct.Pin = WORKING_LED_3_Pin|CONNECT_LED_3_Pin|BRAKE_2_Pin;
 8004c5a:	f240 230a 	movw	r3, #522	; 0x20a
 8004c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c60:	2301      	movs	r3, #1
 8004c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	4619      	mov	r1, r3
 8004c72:	4838      	ldr	r0, [pc, #224]	; (8004d54 <MX_GPIO_Init+0x1ec>)
 8004c74:	f002 ff20 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WORKING_LED_1_Pin CONNECT_LED_1_Pin WORKING_LED_2_Pin WORKING_LED_4_Pin
                           CONNECT_LED_4_Pin */
  GPIO_InitStruct.Pin = WORKING_LED_1_Pin|CONNECT_LED_1_Pin|WORKING_LED_2_Pin|WORKING_LED_4_Pin
 8004c78:	f44f 63d6 	mov.w	r3, #1712	; 0x6b0
 8004c7c:	617b      	str	r3, [r7, #20]
                          |CONNECT_LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c86:	2300      	movs	r3, #0
 8004c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8a:	f107 0314 	add.w	r3, r7, #20
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4831      	ldr	r0, [pc, #196]	; (8004d58 <MX_GPIO_Init+0x1f0>)
 8004c92:	f002 ff11 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECT_DET_1_Pin */
  GPIO_InitStruct.Pin = CONNECT_DET_1_Pin;
 8004c96:	2340      	movs	r3, #64	; 0x40
 8004c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CONNECT_DET_1_GPIO_Port, &GPIO_InitStruct);
 8004ca2:	f107 0314 	add.w	r3, r7, #20
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	482b      	ldr	r0, [pc, #172]	; (8004d58 <MX_GPIO_Init+0x1f0>)
 8004caa:	f002 ff05 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONNECT_LED_2_Pin Brake1_Pin */
  GPIO_InitStruct.Pin = CONNECT_LED_2_Pin|Brake1_Pin;
 8004cae:	2321      	movs	r3, #33	; 0x21
 8004cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cbe:	f107 0314 	add.w	r3, r7, #20
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4825      	ldr	r0, [pc, #148]	; (8004d5c <MX_GPIO_Init+0x1f4>)
 8004cc6:	f002 fef7 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd6:	f107 0314 	add.w	r3, r7, #20
 8004cda:	4619      	mov	r1, r3
 8004cdc:	481f      	ldr	r0, [pc, #124]	; (8004d5c <MX_GPIO_Init+0x1f4>)
 8004cde:	f002 feeb 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cee:	f107 0314 	add.w	r3, r7, #20
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4819      	ldr	r0, [pc, #100]	; (8004d5c <MX_GPIO_Init+0x1f4>)
 8004cf6:	f002 fedf 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d00:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <MX_GPIO_Init+0x1f8>)
 8004d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4812      	ldr	r0, [pc, #72]	; (8004d58 <MX_GPIO_Init+0x1f0>)
 8004d10:	f002 fed2 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEED_1_Pin SPEED_2_Pin */
  GPIO_InitStruct.Pin = SPEED_1_Pin|SPEED_2_Pin;
 8004d14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <MX_GPIO_Init+0x1fc>)
 8004d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d22:	f107 0314 	add.w	r3, r7, #20
 8004d26:	4619      	mov	r1, r3
 8004d28:	480a      	ldr	r0, [pc, #40]	; (8004d54 <MX_GPIO_Init+0x1ec>)
 8004d2a:	f002 fec5 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8004d2e:	2304      	movs	r3, #4
 8004d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4809      	ldr	r0, [pc, #36]	; (8004d68 <MX_GPIO_Init+0x200>)
 8004d42:	f002 feb9 	bl	8007ab8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004d46:	bf00      	nop
 8004d48:	3728      	adds	r7, #40	; 0x28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	44020c00 	.word	0x44020c00
 8004d54:	42020800 	.word	0x42020800
 8004d58:	42020000 	.word	0x42020000
 8004d5c:	42020400 	.word	0x42020400
 8004d60:	10110000 	.word	0x10110000
 8004d64:	10310000 	.word	0x10310000
 8004d68:	42020c00 	.word	0x42020c00

08004d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d70:	b672      	cpsid	i
}
 8004d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d74:	e7fe      	b.n	8004d74 <Error_Handler+0x8>

08004d76 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d76:	b480      	push	{r7}
 8004d78:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <HAL_CORDIC_MspInit+0x3c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10e      	bne.n	8004db4 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_CORDIC_MspInit+0x40>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <HAL_CORDIC_MspInit+0x40>)
 8004d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004da6:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <HAL_CORDIC_MspInit+0x40>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	44020c00 	.word	0x44020c00

08004dc8 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0b      	ldr	r2, [pc, #44]	; (8004e04 <HAL_FMAC_MspInit+0x3c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10e      	bne.n	8004df8 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_FMAC_MspInit+0x40>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <HAL_FMAC_MspInit+0x40>)
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_FMAC_MspInit+0x40>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40023c00 	.word	0x40023c00
 8004e08:	44020c00 	.word	0x44020c00

08004e0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b0c6      	sub	sp, #280	; 0x118
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004e16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e1a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e24:	4618      	mov	r0, r3
 8004e26:	f44f 7384 	mov.w	r3, #264	; 0x108
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	f010 fbb0 	bl	8015592 <memset>
  if(hrtc->Instance==RTC)
 8004e32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004e36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <HAL_RTC_MspInit+0xb8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d13a      	bne.n	8004eba <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004e44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004e48:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8004e4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004e58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e64:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e68:	f107 0310 	add.w	r3, r7, #16
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f004 f84d 	bl	8008f0c <HAL_RCCEx_PeriphCLKConfig>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8004e78:	f7ff ff78 	bl	8004d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004e7c:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <HAL_RTC_MspInit+0xbc>)
 8004e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e82:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <HAL_RTC_MspInit+0xbc>)
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <HAL_RTC_MspInit+0xbc>)
 8004e8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e92:	4a0d      	ldr	r2, [pc, #52]	; (8004ec8 <HAL_RTC_MspInit+0xbc>)
 8004e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e98:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <HAL_RTC_MspInit+0xbc>)
 8004e9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ea2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004ea6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004eaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004eb4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eb8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004eba:	bf00      	nop
 8004ebc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	44007800 	.word	0x44007800
 8004ec8:	44020c00 	.word	0x44020c00

08004ecc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a0b      	ldr	r2, [pc, #44]	; (8004f08 <HAL_TIM_PWM_MspInit+0x3c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d10e      	bne.n	8004efc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_TIM_PWM_MspInit+0x40>)
 8004ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ee4:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <HAL_TIM_PWM_MspInit+0x40>)
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <HAL_TIM_PWM_MspInit+0x40>)
 8004ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	44020c00 	.word	0x44020c00

08004f10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	605a      	str	r2, [r3, #4]
 8004f22:	609a      	str	r2, [r3, #8]
 8004f24:	60da      	str	r2, [r3, #12]
 8004f26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <HAL_TIM_MspPostInit+0xa8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d13e      	bne.n	8004fb0 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f32:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <HAL_TIM_MspPostInit+0xac>)
 8004f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f38:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <HAL_TIM_MspPostInit+0xac>)
 8004f3a:	f043 0304 	orr.w	r3, r3, #4
 8004f3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f42:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <HAL_TIM_MspPostInit+0xac>)
 8004f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <HAL_TIM_MspPostInit+0xac>)
 8004f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f56:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <HAL_TIM_MspPostInit+0xac>)
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f60:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <HAL_TIM_MspPostInit+0xac>)
 8004f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM4_CH4
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f6e:	2304      	movs	r3, #4
 8004f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f72:	2302      	movs	r3, #2
 8004f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f82:	f107 0314 	add.w	r3, r7, #20
 8004f86:	4619      	mov	r1, r3
 8004f88:	480d      	ldr	r0, [pc, #52]	; (8004fc0 <HAL_TIM_MspPostInit+0xb0>)
 8004f8a:	f002 fd95 	bl	8007ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8004f8e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f94:	2302      	movs	r3, #2
 8004f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <HAL_TIM_MspPostInit+0xb4>)
 8004fac:	f002 fd84 	bl	8007ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004fb0:	bf00      	nop
 8004fb2:	3728      	adds	r7, #40	; 0x28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	44020c00 	.word	0x44020c00
 8004fc0:	42020800 	.word	0x42020800
 8004fc4:	42020400 	.word	0x42020400

08004fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b0f2      	sub	sp, #456	; 0x1c8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8004fd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004fd6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fe8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8004fec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f44f 7384 	mov.w	r3, #264	; 0x108
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	f010 faca 	bl	8015592 <memset>
  if(huart->Instance==UART4)
 8004ffe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005002:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a7a      	ldr	r2, [pc, #488]	; (80051f4 <HAL_UART_MspInit+0x22c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	f040 80ff 	bne.w	8005210 <HAL_UART_MspInit+0x248>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005012:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005016:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800501a:	f04f 0208 	mov.w	r2, #8
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005026:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800502a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800502e:	2200      	movs	r2, #0
 8005030:	669a      	str	r2, [r3, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005036:	4618      	mov	r0, r3
 8005038:	f003 ff68 	bl	8008f0c <HAL_RCCEx_PeriphCLKConfig>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8005042:	f7ff fe93 	bl	8004d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005046:	4b6c      	ldr	r3, [pc, #432]	; (80051f8 <HAL_UART_MspInit+0x230>)
 8005048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800504c:	4a6a      	ldr	r2, [pc, #424]	; (80051f8 <HAL_UART_MspInit+0x230>)
 800504e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005052:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005056:	4b68      	ldr	r3, [pc, #416]	; (80051f8 <HAL_UART_MspInit+0x230>)
 8005058:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800505c:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 8005060:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005064:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800506e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005072:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005074:	4b60      	ldr	r3, [pc, #384]	; (80051f8 <HAL_UART_MspInit+0x230>)
 8005076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507a:	4a5f      	ldr	r2, [pc, #380]	; (80051f8 <HAL_UART_MspInit+0x230>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005084:	4b5c      	ldr	r3, [pc, #368]	; (80051f8 <HAL_UART_MspInit+0x230>)
 8005086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508a:	f003 0201 	and.w	r2, r3, #1
 800508e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005092:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800509c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80050a0:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050a2:	2303      	movs	r3, #3
 80050a4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a8:	2302      	movs	r3, #2
 80050aa:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b4:	2300      	movs	r3, #0
 80050b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050ba:	2308      	movs	r3, #8
 80050bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80050c4:	4619      	mov	r1, r3
 80050c6:	484d      	ldr	r0, [pc, #308]	; (80051fc <HAL_UART_MspInit+0x234>)
 80050c8:	f002 fcf6 	bl	8007ab8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* GPDMA2_REQUEST_UART4_RX Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80050cc:	2321      	movs	r3, #33	; 0x21
 80050ce:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    NodeConfig.Init.Request = GPDMA2_REQUEST_UART4_RX;
 80050d2:	231b      	movs	r3, #27
 80050d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80050d8:	2300      	movs	r3, #0
 80050da:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050de:	2300      	movs	r3, #0
 80050e0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80050ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    NodeConfig.Init.SrcBurstLength = 1;
 80050fe:	2301      	movs	r3, #1
 8005100:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    NodeConfig.Init.DestBurstLength = 1;
 8005104:	2301      	movs	r3, #1
 8005106:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800510a:	2300      	movs	r3, #0
 800510c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005110:	2300      	movs	r3, #0
 8005112:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    NodeConfig.Init.Mode = DMA_NORMAL;
 8005116:	2300      	movs	r3, #0
 8005118:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800511c:	2300      	movs	r3, #0
 800511e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8005122:	2300      	movs	r3, #0
 8005124:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8005128:	2300      	movs	r3, #0
 800512a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA2_Channel1) != HAL_OK)
 800512e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005132:	4933      	ldr	r1, [pc, #204]	; (8005200 <HAL_UART_MspInit+0x238>)
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fe51 	bl	8006ddc <HAL_DMAEx_List_BuildNode>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_UART_MspInit+0x17c>
    {
      Error_Handler();
 8005140:	f7ff fe14 	bl	8004d6c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA2_Channel1, NULL, &Node_GPDMA2_Channel1) != HAL_OK)
 8005144:	4a2e      	ldr	r2, [pc, #184]	; (8005200 <HAL_UART_MspInit+0x238>)
 8005146:	2100      	movs	r1, #0
 8005148:	482e      	ldr	r0, [pc, #184]	; (8005204 <HAL_UART_MspInit+0x23c>)
 800514a:	f001 fe5d 	bl	8006e08 <HAL_DMAEx_List_InsertNode>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_UART_MspInit+0x190>
    {
      Error_Handler();
 8005154:	f7ff fe0a 	bl	8004d6c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA2_Channel1) != HAL_OK)
 8005158:	482a      	ldr	r0, [pc, #168]	; (8005204 <HAL_UART_MspInit+0x23c>)
 800515a:	f001 ff1e 	bl	8006f9a <HAL_DMAEx_List_SetCircularMode>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_UART_MspInit+0x1a0>
    {
      Error_Handler();
 8005164:	f7ff fe02 	bl	8004d6c <Error_Handler>
    }

    handle_GPDMA2_Channel1.Instance = GPDMA2_Channel1;
 8005168:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_UART_MspInit+0x240>)
 800516a:	4a28      	ldr	r2, [pc, #160]	; (800520c <HAL_UART_MspInit+0x244>)
 800516c:	601a      	str	r2, [r3, #0]
    handle_GPDMA2_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <HAL_UART_MspInit+0x240>)
 8005170:	2200      	movs	r2, #0
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA2_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8005174:	4b24      	ldr	r3, [pc, #144]	; (8005208 <HAL_UART_MspInit+0x240>)
 8005176:	2200      	movs	r2, #0
 8005178:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA2_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <HAL_UART_MspInit+0x240>)
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA2_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005180:	4b21      	ldr	r3, [pc, #132]	; (8005208 <HAL_UART_MspInit+0x240>)
 8005182:	2200      	movs	r2, #0
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA2_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8005186:	4b20      	ldr	r3, [pc, #128]	; (8005208 <HAL_UART_MspInit+0x240>)
 8005188:	2281      	movs	r2, #129	; 0x81
 800518a:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA2_Channel1) != HAL_OK)
 800518c:	481e      	ldr	r0, [pc, #120]	; (8005208 <HAL_UART_MspInit+0x240>)
 800518e:	f001 fc65 	bl	8006a5c <HAL_DMAEx_List_Init>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_UART_MspInit+0x1d4>
    {
      Error_Handler();
 8005198:	f7ff fde8 	bl	8004d6c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA2_Channel1, &List_GPDMA2_Channel1) != HAL_OK)
 800519c:	4919      	ldr	r1, [pc, #100]	; (8005204 <HAL_UART_MspInit+0x23c>)
 800519e:	481a      	ldr	r0, [pc, #104]	; (8005208 <HAL_UART_MspInit+0x240>)
 80051a0:	f001 ff5c 	bl	800705c <HAL_DMAEx_List_LinkQ>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_UART_MspInit+0x1e6>
    {
      Error_Handler();
 80051aa:	f7ff fddf 	bl	8004d6c <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA2_Channel1);
 80051ae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80051b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a13      	ldr	r2, [pc, #76]	; (8005208 <HAL_UART_MspInit+0x240>)
 80051ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <HAL_UART_MspInit+0x240>)
 80051c0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80051c4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80051cc:	2110      	movs	r1, #16
 80051ce:	480e      	ldr	r0, [pc, #56]	; (8005208 <HAL_UART_MspInit+0x240>)
 80051d0:	f001 fbe2 	bl	8006998 <HAL_DMA_ConfigChannelAttributes>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_UART_MspInit+0x216>
    {
      Error_Handler();
 80051da:	f7ff fdc7 	bl	8004d6c <Error_Handler>
    }

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 80051de:	2200      	movs	r2, #0
 80051e0:	2102      	movs	r1, #2
 80051e2:	203d      	movs	r0, #61	; 0x3d
 80051e4:	f001 f925 	bl	8006432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80051e8:	203d      	movs	r0, #61	; 0x3d
 80051ea:	f001 f93c 	bl	8006466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80051ee:	f000 bc52 	b.w	8005a96 <HAL_UART_MspInit+0xace>
 80051f2:	bf00      	nop
 80051f4:	40004c00 	.word	0x40004c00
 80051f8:	44020c00 	.word	0x44020c00
 80051fc:	42020000 	.word	0x42020000
 8005200:	200273ec 	.word	0x200273ec
 8005204:	20027410 	.word	0x20027410
 8005208:	20027428 	.word	0x20027428
 800520c:	400210d0 	.word	0x400210d0
  else if(huart->Instance==UART5)
 8005210:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005214:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4ac8      	ldr	r2, [pc, #800]	; (8005540 <HAL_UART_MspInit+0x578>)
 800521e:	4293      	cmp	r3, r2
 8005220:	f040 80f0 	bne.w	8005404 <HAL_UART_MspInit+0x43c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005224:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005228:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800522c:	f04f 0210 	mov.w	r2, #16
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8005238:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800523c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005240:	2200      	movs	r2, #0
 8005242:	66da      	str	r2, [r3, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005244:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005248:	4618      	mov	r0, r3
 800524a:	f003 fe5f 	bl	8008f0c <HAL_RCCEx_PeriphCLKConfig>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_UART_MspInit+0x290>
      Error_Handler();
 8005254:	f7ff fd8a 	bl	8004d6c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005258:	4bba      	ldr	r3, [pc, #744]	; (8005544 <HAL_UART_MspInit+0x57c>)
 800525a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800525e:	4ab9      	ldr	r2, [pc, #740]	; (8005544 <HAL_UART_MspInit+0x57c>)
 8005260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005264:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005268:	4bb6      	ldr	r3, [pc, #728]	; (8005544 <HAL_UART_MspInit+0x57c>)
 800526a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800526e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005272:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005276:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005280:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005284:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005286:	4baf      	ldr	r3, [pc, #700]	; (8005544 <HAL_UART_MspInit+0x57c>)
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800528c:	4aad      	ldr	r2, [pc, #692]	; (8005544 <HAL_UART_MspInit+0x57c>)
 800528e:	f043 0302 	orr.w	r3, r3, #2
 8005292:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005296:	4bab      	ldr	r3, [pc, #684]	; (8005544 <HAL_UART_MspInit+0x57c>)
 8005298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529c:	f003 0202 	and.w	r2, r3, #2
 80052a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80052a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80052ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80052b2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80052b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80052b8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052bc:	2302      	movs	r3, #2
 80052be:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c8:	2300      	movs	r3, #0
 80052ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80052ce:	230e      	movs	r3, #14
 80052d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d4:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80052d8:	4619      	mov	r1, r3
 80052da:	489b      	ldr	r0, [pc, #620]	; (8005548 <HAL_UART_MspInit+0x580>)
 80052dc:	f002 fbec 	bl	8007ab8 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80052e0:	2321      	movs	r3, #33	; 0x21
 80052e2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    NodeConfig.Init.Request = GPDMA2_REQUEST_UART5_RX;
 80052e6:	231d      	movs	r3, #29
 80052e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80052ec:	2300      	movs	r3, #0
 80052ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80052fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005302:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8005306:	2300      	movs	r3, #0
 8005308:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800530c:	2300      	movs	r3, #0
 800530e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    NodeConfig.Init.SrcBurstLength = 1;
 8005312:	2301      	movs	r3, #1
 8005314:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    NodeConfig.Init.DestBurstLength = 1;
 8005318:	2301      	movs	r3, #1
 800531a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800531e:	2300      	movs	r3, #0
 8005320:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    NodeConfig.Init.Mode = DMA_NORMAL;
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8005330:	2300      	movs	r3, #0
 8005332:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8005336:	2300      	movs	r3, #0
 8005338:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800533c:	2300      	movs	r3, #0
 800533e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA2_Channel0) != HAL_OK)
 8005342:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005346:	4981      	ldr	r1, [pc, #516]	; (800554c <HAL_UART_MspInit+0x584>)
 8005348:	4618      	mov	r0, r3
 800534a:	f001 fd47 	bl	8006ddc <HAL_DMAEx_List_BuildNode>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_UART_MspInit+0x390>
      Error_Handler();
 8005354:	f7ff fd0a 	bl	8004d6c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA2_Channel0, NULL, &Node_GPDMA2_Channel0) != HAL_OK)
 8005358:	4a7c      	ldr	r2, [pc, #496]	; (800554c <HAL_UART_MspInit+0x584>)
 800535a:	2100      	movs	r1, #0
 800535c:	487c      	ldr	r0, [pc, #496]	; (8005550 <HAL_UART_MspInit+0x588>)
 800535e:	f001 fd53 	bl	8006e08 <HAL_DMAEx_List_InsertNode>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8005368:	f7ff fd00 	bl	8004d6c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA2_Channel0) != HAL_OK)
 800536c:	4878      	ldr	r0, [pc, #480]	; (8005550 <HAL_UART_MspInit+0x588>)
 800536e:	f001 fe14 	bl	8006f9a <HAL_DMAEx_List_SetCircularMode>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_UART_MspInit+0x3b4>
      Error_Handler();
 8005378:	f7ff fcf8 	bl	8004d6c <Error_Handler>
    handle_GPDMA2_Channel0.Instance = GPDMA2_Channel0;
 800537c:	4b75      	ldr	r3, [pc, #468]	; (8005554 <HAL_UART_MspInit+0x58c>)
 800537e:	4a76      	ldr	r2, [pc, #472]	; (8005558 <HAL_UART_MspInit+0x590>)
 8005380:	601a      	str	r2, [r3, #0]
    handle_GPDMA2_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8005382:	4b74      	ldr	r3, [pc, #464]	; (8005554 <HAL_UART_MspInit+0x58c>)
 8005384:	2200      	movs	r2, #0
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA2_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8005388:	4b72      	ldr	r3, [pc, #456]	; (8005554 <HAL_UART_MspInit+0x58c>)
 800538a:	2200      	movs	r2, #0
 800538c:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA2_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800538e:	4b71      	ldr	r3, [pc, #452]	; (8005554 <HAL_UART_MspInit+0x58c>)
 8005390:	2200      	movs	r2, #0
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA2_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005394:	4b6f      	ldr	r3, [pc, #444]	; (8005554 <HAL_UART_MspInit+0x58c>)
 8005396:	2200      	movs	r2, #0
 8005398:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA2_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800539a:	4b6e      	ldr	r3, [pc, #440]	; (8005554 <HAL_UART_MspInit+0x58c>)
 800539c:	2281      	movs	r2, #129	; 0x81
 800539e:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA2_Channel0) != HAL_OK)
 80053a0:	486c      	ldr	r0, [pc, #432]	; (8005554 <HAL_UART_MspInit+0x58c>)
 80053a2:	f001 fb5b 	bl	8006a5c <HAL_DMAEx_List_Init>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_UART_MspInit+0x3e8>
      Error_Handler();
 80053ac:	f7ff fcde 	bl	8004d6c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA2_Channel0, &List_GPDMA2_Channel0) != HAL_OK)
 80053b0:	4967      	ldr	r1, [pc, #412]	; (8005550 <HAL_UART_MspInit+0x588>)
 80053b2:	4868      	ldr	r0, [pc, #416]	; (8005554 <HAL_UART_MspInit+0x58c>)
 80053b4:	f001 fe52 	bl	800705c <HAL_DMAEx_List_LinkQ>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_UART_MspInit+0x3fa>
      Error_Handler();
 80053be:	f7ff fcd5 	bl	8004d6c <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA2_Channel0);
 80053c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80053c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a61      	ldr	r2, [pc, #388]	; (8005554 <HAL_UART_MspInit+0x58c>)
 80053ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80053d2:	4a60      	ldr	r2, [pc, #384]	; (8005554 <HAL_UART_MspInit+0x58c>)
 80053d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80053d8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80053e0:	2110      	movs	r1, #16
 80053e2:	485c      	ldr	r0, [pc, #368]	; (8005554 <HAL_UART_MspInit+0x58c>)
 80053e4:	f001 fad8 	bl	8006998 <HAL_DMA_ConfigChannelAttributes>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_UART_MspInit+0x42a>
      Error_Handler();
 80053ee:	f7ff fcbd 	bl	8004d6c <Error_Handler>
    HAL_NVIC_SetPriority(UART5_IRQn, 3, 0);
 80053f2:	2200      	movs	r2, #0
 80053f4:	2103      	movs	r1, #3
 80053f6:	203e      	movs	r0, #62	; 0x3e
 80053f8:	f001 f81b 	bl	8006432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80053fc:	203e      	movs	r0, #62	; 0x3e
 80053fe:	f001 f832 	bl	8006466 <HAL_NVIC_EnableIRQ>
}
 8005402:	e348      	b.n	8005a96 <HAL_UART_MspInit+0xace>
  else if(huart->Instance==UART7)
 8005404:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005408:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a52      	ldr	r2, [pc, #328]	; (800555c <HAL_UART_MspInit+0x594>)
 8005412:	4293      	cmp	r3, r2
 8005414:	f040 80a6 	bne.w	8005564 <HAL_UART_MspInit+0x59c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005418:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800541c:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8005420:	f04f 0240 	mov.w	r2, #64	; 0x40
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800542c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005430:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005434:	2200      	movs	r2, #0
 8005436:	675a      	str	r2, [r3, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800543c:	4618      	mov	r0, r3
 800543e:	f003 fd65 	bl	8008f0c <HAL_RCCEx_PeriphCLKConfig>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_UART_MspInit+0x484>
      Error_Handler();
 8005448:	f7ff fc90 	bl	8004d6c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800544c:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <HAL_UART_MspInit+0x57c>)
 800544e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005452:	4a3c      	ldr	r2, [pc, #240]	; (8005544 <HAL_UART_MspInit+0x57c>)
 8005454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005458:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800545c:	4b39      	ldr	r3, [pc, #228]	; (8005544 <HAL_UART_MspInit+0x57c>)
 800545e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005462:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005466:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800546a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005474:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005478:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800547a:	4b32      	ldr	r3, [pc, #200]	; (8005544 <HAL_UART_MspInit+0x57c>)
 800547c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005480:	4a30      	ldr	r2, [pc, #192]	; (8005544 <HAL_UART_MspInit+0x57c>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800548a:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <HAL_UART_MspInit+0x57c>)
 800548c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005490:	f003 0201 	and.w	r2, r3, #1
 8005494:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005498:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80054a2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80054a6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054a8:	4b26      	ldr	r3, [pc, #152]	; (8005544 <HAL_UART_MspInit+0x57c>)
 80054aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ae:	4a25      	ldr	r2, [pc, #148]	; (8005544 <HAL_UART_MspInit+0x57c>)
 80054b0:	f043 0302 	orr.w	r3, r3, #2
 80054b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054b8:	4b22      	ldr	r3, [pc, #136]	; (8005544 <HAL_UART_MspInit+0x57c>)
 80054ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054be:	f003 0202 	and.w	r2, r3, #2
 80054c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80054c6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80054d0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80054d4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054da:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054de:	2302      	movs	r3, #2
 80054e0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80054f0:	230b      	movs	r3, #11
 80054f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f6:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4818      	ldr	r0, [pc, #96]	; (8005560 <HAL_UART_MspInit+0x598>)
 80054fe:	f002 fadb 	bl	8007ab8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005502:	2310      	movs	r3, #16
 8005504:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005508:	2302      	movs	r3, #2
 800550a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	2300      	movs	r3, #0
 8005510:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 800551a:	230b      	movs	r3, #11
 800551c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005520:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8005524:	4619      	mov	r1, r3
 8005526:	4808      	ldr	r0, [pc, #32]	; (8005548 <HAL_UART_MspInit+0x580>)
 8005528:	f002 fac6 	bl	8007ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 800552c:	2200      	movs	r2, #0
 800552e:	2104      	movs	r1, #4
 8005530:	2062      	movs	r0, #98	; 0x62
 8005532:	f000 ff7e 	bl	8006432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005536:	2062      	movs	r0, #98	; 0x62
 8005538:	f000 ff95 	bl	8006466 <HAL_NVIC_EnableIRQ>
}
 800553c:	e2ab      	b.n	8005a96 <HAL_UART_MspInit+0xace>
 800553e:	bf00      	nop
 8005540:	40005000 	.word	0x40005000
 8005544:	44020c00 	.word	0x44020c00
 8005548:	42020400 	.word	0x42020400
 800554c:	200274a0 	.word	0x200274a0
 8005550:	200274c4 	.word	0x200274c4
 8005554:	200274dc 	.word	0x200274dc
 8005558:	40021050 	.word	0x40021050
 800555c:	40007800 	.word	0x40007800
 8005560:	42020000 	.word	0x42020000
  else if(huart->Instance==USART1)
 8005564:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005568:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4aad      	ldr	r2, [pc, #692]	; (8005828 <HAL_UART_MspInit+0x860>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d15e      	bne.n	8005634 <HAL_UART_MspInit+0x66c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005576:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800557a:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800557e:	f04f 0201 	mov.w	r2, #1
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800558a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800558e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005592:	2200      	movs	r2, #0
 8005594:	65da      	str	r2, [r3, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800559a:	4618      	mov	r0, r3
 800559c:	f003 fcb6 	bl	8008f0c <HAL_RCCEx_PeriphCLKConfig>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_UART_MspInit+0x5e2>
      Error_Handler();
 80055a6:	f7ff fbe1 	bl	8004d6c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80055aa:	4ba0      	ldr	r3, [pc, #640]	; (800582c <HAL_UART_MspInit+0x864>)
 80055ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055b0:	4a9e      	ldr	r2, [pc, #632]	; (800582c <HAL_UART_MspInit+0x864>)
 80055b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055b6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80055ba:	4b9c      	ldr	r3, [pc, #624]	; (800582c <HAL_UART_MspInit+0x864>)
 80055bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055c0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80055c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80055c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80055d2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80055d6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d8:	4b94      	ldr	r3, [pc, #592]	; (800582c <HAL_UART_MspInit+0x864>)
 80055da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055de:	4a93      	ldr	r2, [pc, #588]	; (800582c <HAL_UART_MspInit+0x864>)
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055e8:	4b90      	ldr	r3, [pc, #576]	; (800582c <HAL_UART_MspInit+0x864>)
 80055ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ee:	f003 0202 	and.w	r2, r3, #2
 80055f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80055f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005600:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005604:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005606:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800560a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560e:	2302      	movs	r3, #2
 8005610:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800561a:	2300      	movs	r3, #0
 800561c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005620:	2304      	movs	r3, #4
 8005622:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005626:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800562a:	4619      	mov	r1, r3
 800562c:	4880      	ldr	r0, [pc, #512]	; (8005830 <HAL_UART_MspInit+0x868>)
 800562e:	f002 fa43 	bl	8007ab8 <HAL_GPIO_Init>
}
 8005632:	e230      	b.n	8005a96 <HAL_UART_MspInit+0xace>
  else if(huart->Instance==USART2)
 8005634:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005638:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a7c      	ldr	r2, [pc, #496]	; (8005834 <HAL_UART_MspInit+0x86c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f040 8102 	bne.w	800584c <HAL_UART_MspInit+0x884>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005648:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800564c:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8005650:	f04f 0202 	mov.w	r2, #2
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800565c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005660:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005664:	2200      	movs	r2, #0
 8005666:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005668:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800566c:	4618      	mov	r0, r3
 800566e:	f003 fc4d 	bl	8008f0c <HAL_RCCEx_PeriphCLKConfig>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_UART_MspInit+0x6b4>
      Error_Handler();
 8005678:	f7ff fb78 	bl	8004d6c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800567c:	4b6b      	ldr	r3, [pc, #428]	; (800582c <HAL_UART_MspInit+0x864>)
 800567e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005682:	4a6a      	ldr	r2, [pc, #424]	; (800582c <HAL_UART_MspInit+0x864>)
 8005684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005688:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800568c:	4b67      	ldr	r3, [pc, #412]	; (800582c <HAL_UART_MspInit+0x864>)
 800568e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005692:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8005696:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800569a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80056a4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056a8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056aa:	4b60      	ldr	r3, [pc, #384]	; (800582c <HAL_UART_MspInit+0x864>)
 80056ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b0:	4a5e      	ldr	r2, [pc, #376]	; (800582c <HAL_UART_MspInit+0x864>)
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80056ba:	4b5c      	ldr	r3, [pc, #368]	; (800582c <HAL_UART_MspInit+0x864>)
 80056bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c0:	f003 0201 	and.w	r2, r3, #1
 80056c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80056c8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80056d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056d6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80056d8:	230c      	movs	r3, #12
 80056da:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056de:	2302      	movs	r3, #2
 80056e0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056f0:	2307      	movs	r3, #7
 80056f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f6:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80056fa:	4619      	mov	r1, r3
 80056fc:	484e      	ldr	r0, [pc, #312]	; (8005838 <HAL_UART_MspInit+0x870>)
 80056fe:	f002 f9db 	bl	8007ab8 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8005702:	2321      	movs	r3, #33	; 0x21
 8005704:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    NodeConfig.Init.Request = GPDMA1_REQUEST_USART2_RX;
 8005708:	2317      	movs	r3, #23
 800570a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800570e:	2300      	movs	r3, #0
 8005710:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005714:	2300      	movs	r3, #0
 8005716:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800571a:	2300      	movs	r3, #0
 800571c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8005720:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005724:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    NodeConfig.Init.SrcBurstLength = 1;
 8005734:	2301      	movs	r3, #1
 8005736:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    NodeConfig.Init.DestBurstLength = 1;
 800573a:	2301      	movs	r3, #1
 800573c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8005740:	2300      	movs	r3, #0
 8005742:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005746:	2300      	movs	r3, #0
 8005748:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    NodeConfig.Init.Mode = DMA_NORMAL;
 800574c:	2300      	movs	r3, #0
 800574e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8005752:	2300      	movs	r3, #0
 8005754:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8005758:	2300      	movs	r3, #0
 800575a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800575e:	2300      	movs	r3, #0
 8005760:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8005764:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005768:	4934      	ldr	r1, [pc, #208]	; (800583c <HAL_UART_MspInit+0x874>)
 800576a:	4618      	mov	r0, r3
 800576c:	f001 fb36 	bl	8006ddc <HAL_DMAEx_List_BuildNode>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_UART_MspInit+0x7b2>
      Error_Handler();
 8005776:	f7ff faf9 	bl	8004d6c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800577a:	4a30      	ldr	r2, [pc, #192]	; (800583c <HAL_UART_MspInit+0x874>)
 800577c:	2100      	movs	r1, #0
 800577e:	4830      	ldr	r0, [pc, #192]	; (8005840 <HAL_UART_MspInit+0x878>)
 8005780:	f001 fb42 	bl	8006e08 <HAL_DMAEx_List_InsertNode>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_UART_MspInit+0x7c6>
      Error_Handler();
 800578a:	f7ff faef 	bl	8004d6c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800578e:	482c      	ldr	r0, [pc, #176]	; (8005840 <HAL_UART_MspInit+0x878>)
 8005790:	f001 fc03 	bl	8006f9a <HAL_DMAEx_List_SetCircularMode>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_UART_MspInit+0x7d6>
      Error_Handler();
 800579a:	f7ff fae7 	bl	8004d6c <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800579e:	4b29      	ldr	r3, [pc, #164]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057a0:	4a29      	ldr	r2, [pc, #164]	; (8005848 <HAL_UART_MspInit+0x880>)
 80057a2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80057a4:	4b27      	ldr	r3, [pc, #156]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80057aa:	4b26      	ldr	r3, [pc, #152]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80057b0:	4b24      	ldr	r3, [pc, #144]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80057b6:	4b23      	ldr	r3, [pc, #140]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80057bc:	4b21      	ldr	r3, [pc, #132]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057be:	2281      	movs	r2, #129	; 0x81
 80057c0:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80057c2:	4820      	ldr	r0, [pc, #128]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057c4:	f001 f94a 	bl	8006a5c <HAL_DMAEx_List_Init>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_UART_MspInit+0x80a>
      Error_Handler();
 80057ce:	f7ff facd 	bl	8004d6c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80057d2:	491b      	ldr	r1, [pc, #108]	; (8005840 <HAL_UART_MspInit+0x878>)
 80057d4:	481b      	ldr	r0, [pc, #108]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057d6:	f001 fc41 	bl	800705c <HAL_DMAEx_List_LinkQ>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_UART_MspInit+0x81c>
      Error_Handler();
 80057e0:	f7ff fac4 	bl	8004d6c <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel0);
 80057e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80057e8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a15      	ldr	r2, [pc, #84]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80057f4:	4a13      	ldr	r2, [pc, #76]	; (8005844 <HAL_UART_MspInit+0x87c>)
 80057f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80057fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8005802:	2110      	movs	r1, #16
 8005804:	480f      	ldr	r0, [pc, #60]	; (8005844 <HAL_UART_MspInit+0x87c>)
 8005806:	f001 f8c7 	bl	8006998 <HAL_DMA_ConfigChannelAttributes>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_UART_MspInit+0x84c>
      Error_Handler();
 8005810:	f7ff faac 	bl	8004d6c <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005814:	2200      	movs	r2, #0
 8005816:	2100      	movs	r1, #0
 8005818:	203b      	movs	r0, #59	; 0x3b
 800581a:	f000 fe0a 	bl	8006432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800581e:	203b      	movs	r0, #59	; 0x3b
 8005820:	f000 fe21 	bl	8006466 <HAL_NVIC_EnableIRQ>
}
 8005824:	e137      	b.n	8005a96 <HAL_UART_MspInit+0xace>
 8005826:	bf00      	nop
 8005828:	40013800 	.word	0x40013800
 800582c:	44020c00 	.word	0x44020c00
 8005830:	42020400 	.word	0x42020400
 8005834:	40004400 	.word	0x40004400
 8005838:	42020000 	.word	0x42020000
 800583c:	20027554 	.word	0x20027554
 8005840:	20027578 	.word	0x20027578
 8005844:	20027590 	.word	0x20027590
 8005848:	40020050 	.word	0x40020050
  else if(huart->Instance==USART3)
 800584c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005850:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a91      	ldr	r2, [pc, #580]	; (8005aa0 <HAL_UART_MspInit+0xad8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	f040 811b 	bne.w	8005a96 <HAL_UART_MspInit+0xace>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005860:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005864:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8005868:	f04f 0204 	mov.w	r2, #4
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005874:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005878:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800587c:	2200      	movs	r2, #0
 800587e:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005884:	4618      	mov	r0, r3
 8005886:	f003 fb41 	bl	8008f0c <HAL_RCCEx_PeriphCLKConfig>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_UART_MspInit+0x8cc>
      Error_Handler();
 8005890:	f7ff fa6c 	bl	8004d6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005894:	4b83      	ldr	r3, [pc, #524]	; (8005aa4 <HAL_UART_MspInit+0xadc>)
 8005896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800589a:	4a82      	ldr	r2, [pc, #520]	; (8005aa4 <HAL_UART_MspInit+0xadc>)
 800589c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80058a4:	4b7f      	ldr	r3, [pc, #508]	; (8005aa4 <HAL_UART_MspInit+0xadc>)
 80058a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058aa:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80058ae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80058b2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80058bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80058c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058c2:	4b78      	ldr	r3, [pc, #480]	; (8005aa4 <HAL_UART_MspInit+0xadc>)
 80058c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c8:	4a76      	ldr	r2, [pc, #472]	; (8005aa4 <HAL_UART_MspInit+0xadc>)
 80058ca:	f043 0304 	orr.w	r3, r3, #4
 80058ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80058d2:	4b74      	ldr	r3, [pc, #464]	; (8005aa4 <HAL_UART_MspInit+0xadc>)
 80058d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d8:	f003 0204 	and.w	r2, r3, #4
 80058dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80058e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80058ea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80058ee:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058f0:	4b6c      	ldr	r3, [pc, #432]	; (8005aa4 <HAL_UART_MspInit+0xadc>)
 80058f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058f6:	4a6b      	ldr	r2, [pc, #428]	; (8005aa4 <HAL_UART_MspInit+0xadc>)
 80058f8:	f043 0302 	orr.w	r3, r3, #2
 80058fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005900:	4b68      	ldr	r3, [pc, #416]	; (8005aa4 <HAL_UART_MspInit+0xadc>)
 8005902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005906:	f003 0202 	and.w	r2, r3, #2
 800590a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800590e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005918:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800591c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800591e:	2310      	movs	r3, #16
 8005920:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005924:	2302      	movs	r3, #2
 8005926:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592a:	2300      	movs	r3, #0
 800592c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005930:	2300      	movs	r3, #0
 8005932:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005936:	2307      	movs	r3, #7
 8005938:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800593c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8005940:	4619      	mov	r1, r3
 8005942:	4859      	ldr	r0, [pc, #356]	; (8005aa8 <HAL_UART_MspInit+0xae0>)
 8005944:	f002 f8b8 	bl	8007ab8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800594c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005950:	2302      	movs	r3, #2
 8005952:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005962:	2307      	movs	r3, #7
 8005964:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005968:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800596c:	4619      	mov	r1, r3
 800596e:	484f      	ldr	r0, [pc, #316]	; (8005aac <HAL_UART_MspInit+0xae4>)
 8005970:	f002 f8a2 	bl	8007ab8 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8005974:	2321      	movs	r3, #33	; 0x21
 8005976:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    NodeConfig.Init.Request = GPDMA1_REQUEST_USART3_RX;
 800597a:	2319      	movs	r3, #25
 800597c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005986:	2300      	movs	r3, #0
 8005988:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800598c:	2300      	movs	r3, #0
 800598e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8005992:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005996:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800599a:	2300      	movs	r3, #0
 800599c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    NodeConfig.Init.SrcBurstLength = 1;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    NodeConfig.Init.DestBurstLength = 1;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80059b8:	2300      	movs	r3, #0
 80059ba:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    NodeConfig.Init.Mode = DMA_NORMAL;
 80059be:	2300      	movs	r3, #0
 80059c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80059c4:	2300      	movs	r3, #0
 80059c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80059d0:	2300      	movs	r3, #0
 80059d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80059d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059da:	4935      	ldr	r1, [pc, #212]	; (8005ab0 <HAL_UART_MspInit+0xae8>)
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 f9fd 	bl	8006ddc <HAL_DMAEx_List_BuildNode>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_UART_MspInit+0xa24>
      Error_Handler();
 80059e8:	f7ff f9c0 	bl	8004d6c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80059ec:	4a30      	ldr	r2, [pc, #192]	; (8005ab0 <HAL_UART_MspInit+0xae8>)
 80059ee:	2100      	movs	r1, #0
 80059f0:	4830      	ldr	r0, [pc, #192]	; (8005ab4 <HAL_UART_MspInit+0xaec>)
 80059f2:	f001 fa09 	bl	8006e08 <HAL_DMAEx_List_InsertNode>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_UART_MspInit+0xa38>
      Error_Handler();
 80059fc:	f7ff f9b6 	bl	8004d6c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8005a00:	482c      	ldr	r0, [pc, #176]	; (8005ab4 <HAL_UART_MspInit+0xaec>)
 8005a02:	f001 faca 	bl	8006f9a <HAL_DMAEx_List_SetCircularMode>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_UART_MspInit+0xa48>
      Error_Handler();
 8005a0c:	f7ff f9ae 	bl	8004d6c <Error_Handler>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8005a10:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a12:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <HAL_UART_MspInit+0xaf4>)
 8005a14:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8005a16:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8005a1c:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8005a22:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005a28:	4b23      	ldr	r3, [pc, #140]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8005a2e:	4b22      	ldr	r3, [pc, #136]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a30:	2281      	movs	r2, #129	; 0x81
 8005a32:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8005a34:	4820      	ldr	r0, [pc, #128]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a36:	f001 f811 	bl	8006a5c <HAL_DMAEx_List_Init>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_UART_MspInit+0xa7c>
      Error_Handler();
 8005a40:	f7ff f994 	bl	8004d6c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8005a44:	491b      	ldr	r1, [pc, #108]	; (8005ab4 <HAL_UART_MspInit+0xaec>)
 8005a46:	481c      	ldr	r0, [pc, #112]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a48:	f001 fb08 	bl	800705c <HAL_DMAEx_List_LinkQ>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_UART_MspInit+0xa8e>
      Error_Handler();
 8005a52:	f7ff f98b 	bl	8004d6c <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel1);
 8005a56:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005a5a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005a66:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005a6c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8005a74:	2110      	movs	r1, #16
 8005a76:	4810      	ldr	r0, [pc, #64]	; (8005ab8 <HAL_UART_MspInit+0xaf0>)
 8005a78:	f000 ff8e 	bl	8006998 <HAL_DMA_ConfigChannelAttributes>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_UART_MspInit+0xabe>
      Error_Handler();
 8005a82:	f7ff f973 	bl	8004d6c <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005a86:	2200      	movs	r2, #0
 8005a88:	2101      	movs	r1, #1
 8005a8a:	203c      	movs	r0, #60	; 0x3c
 8005a8c:	f000 fcd1 	bl	8006432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a90:	203c      	movs	r0, #60	; 0x3c
 8005a92:	f000 fce8 	bl	8006466 <HAL_NVIC_EnableIRQ>
}
 8005a96:	bf00      	nop
 8005a98:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40004800 	.word	0x40004800
 8005aa4:	44020c00 	.word	0x44020c00
 8005aa8:	42020800 	.word	0x42020800
 8005aac:	42020400 	.word	0x42020400
 8005ab0:	20027608 	.word	0x20027608
 8005ab4:	2002762c 	.word	0x2002762c
 8005ab8:	20027644 	.word	0x20027644
 8005abc:	400200d0 	.word	0x400200d0

08005ac0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b0cc      	sub	sp, #304	; 0x130
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ace:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005aee:	461a      	mov	r2, r3
 8005af0:	2100      	movs	r1, #0
 8005af2:	f00f fd4e 	bl	8015592 <memset>
  if(husart->Instance==USART6)
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <HAL_USART_MspInit+0x110>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d15d      	bne.n	8005bc4 <HAL_USART_MspInit+0x104>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8005b10:	f04f 0220 	mov.w	r2, #32
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8005b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b20:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b24:	2200      	movs	r2, #0
 8005b26:	671a      	str	r2, [r3, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b28:	f107 0310 	add.w	r3, r7, #16
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f003 f9ed 	bl	8008f0c <HAL_RCCEx_PeriphCLKConfig>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_USART_MspInit+0x7c>
    {
      Error_Handler();
 8005b38:	f7ff f918 	bl	8004d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <HAL_USART_MspInit+0x114>)
 8005b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b42:	4a24      	ldr	r2, [pc, #144]	; (8005bd4 <HAL_USART_MspInit+0x114>)
 8005b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b4c:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <HAL_USART_MspInit+0x114>)
 8005b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b52:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8005b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005b68:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b6a:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <HAL_USART_MspInit+0x114>)
 8005b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <HAL_USART_MspInit+0x114>)
 8005b72:	f043 0304 	orr.w	r3, r3, #4
 8005b76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b7a:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <HAL_USART_MspInit+0x114>)
 8005b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b80:	f003 0204 	and.w	r2, r3, #4
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005b96:	681b      	ldr	r3, [r3, #0]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    PC8     ------> USART6_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8005b98:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005b9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8005bb2:	2307      	movs	r3, #7
 8005bb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bb8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4806      	ldr	r0, [pc, #24]	; (8005bd8 <HAL_USART_MspInit+0x118>)
 8005bc0:	f001 ff7a 	bl	8007ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005bc4:	bf00      	nop
 8005bc6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40006400 	.word	0x40006400
 8005bd4:	44020c00 	.word	0x44020c00
 8005bd8:	42020800 	.word	0x42020800

08005bdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b0cc      	sub	sp, #304	; 0x130
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bea:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bec:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	605a      	str	r2, [r3, #4]
 8005bf6:	609a      	str	r2, [r3, #8]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c04:	4618      	mov	r0, r3
 8005c06:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	f00f fcc0 	bl	8015592 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8005c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a33      	ldr	r2, [pc, #204]	; (8005cec <HAL_PCD_MspInit+0x110>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d15e      	bne.n	8005ce2 <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c28:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0310 	mov.w	r3, #16
 8005c34:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c40:	2230      	movs	r2, #48	; 0x30
 8005c42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c46:	f107 0310 	add.w	r3, r7, #16
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f003 f95e 	bl	8008f0c <HAL_RCCEx_PeriphCLKConfig>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 8005c56:	f7ff f889 	bl	8004d6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c5a:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <HAL_PCD_MspInit+0x114>)
 8005c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c60:	4a23      	ldr	r2, [pc, #140]	; (8005cf0 <HAL_PCD_MspInit+0x114>)
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c6a:	4b21      	ldr	r3, [pc, #132]	; (8005cf0 <HAL_PCD_MspInit+0x114>)
 8005c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c70:	f003 0201 	and.w	r2, r3, #1
 8005c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c82:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c86:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005c88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005c8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c90:	2302      	movs	r3, #2
 8005c92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8005ca2:	230a      	movs	r3, #10
 8005ca4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005cac:	4619      	mov	r1, r3
 8005cae:	4811      	ldr	r0, [pc, #68]	; (8005cf4 <HAL_PCD_MspInit+0x118>)
 8005cb0:	f001 ff02 	bl	8007ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <HAL_PCD_MspInit+0x114>)
 8005cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cba:	4a0d      	ldr	r2, [pc, #52]	; (8005cf0 <HAL_PCD_MspInit+0x114>)
 8005cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cc0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <HAL_PCD_MspInit+0x114>)
 8005cc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cca:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cdc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ce0:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8005ce2:	bf00      	nop
 8005ce4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40016000 	.word	0x40016000
 8005cf0:	44020c00 	.word	0x44020c00
 8005cf4:	42020000 	.word	0x42020000

08005cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005cfc:	e7fe      	b.n	8005cfc <NMI_Handler+0x4>

08005cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d02:	e7fe      	b.n	8005d02 <HardFault_Handler+0x4>

08005d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d08:	e7fe      	b.n	8005d08 <MemManage_Handler+0x4>

08005d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d0e:	e7fe      	b.n	8005d0e <BusFault_Handler+0x4>

08005d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d14:	e7fe      	b.n	8005d14 <UsageFault_Handler+0x4>

08005d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d16:	b480      	push	{r7}
 8005d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d1a:	bf00      	nop
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d32:	b480      	push	{r7}
 8005d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d36:	bf00      	nop
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d44:	f000 fa24 	bl	8006190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8005d50:	4802      	ldr	r0, [pc, #8]	; (8005d5c <GPDMA1_Channel0_IRQHandler+0x10>)
 8005d52:	f000 fca7 	bl	80066a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20027590 	.word	0x20027590

08005d60 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8005d64:	4802      	ldr	r0, [pc, #8]	; (8005d70 <GPDMA1_Channel1_IRQHandler+0x10>)
 8005d66:	f000 fc9d 	bl	80066a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20027644 	.word	0x20027644

08005d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005d78:	4802      	ldr	r0, [pc, #8]	; (8005d84 <USART2_IRQHandler+0x10>)
 8005d7a:	f009 fceb 	bl	800f754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20027264 	.word	0x20027264

08005d88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005d8c:	4802      	ldr	r0, [pc, #8]	; (8005d98 <USART3_IRQHandler+0x10>)
 8005d8e:	f009 fce1 	bl	800f754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200272f8 	.word	0x200272f8

08005d9c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <UART4_IRQHandler+0x10>)
 8005da2:	f009 fcd7 	bl	800f754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20027014 	.word	0x20027014

08005db0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005db4:	4802      	ldr	r0, [pc, #8]	; (8005dc0 <UART5_IRQHandler+0x10>)
 8005db6:	f009 fccd 	bl	800f754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	200270a8 	.word	0x200270a8

08005dc4 <GPDMA2_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 0 global interrupt.
  */
void GPDMA2_Channel0_IRQHandler(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 0 */

  /* USER CODE END GPDMA2_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel0);
 8005dc8:	4802      	ldr	r0, [pc, #8]	; (8005dd4 <GPDMA2_Channel0_IRQHandler+0x10>)
 8005dca:	f000 fc6b 	bl	80066a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 1 */

  /* USER CODE END GPDMA2_Channel0_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200274dc 	.word	0x200274dc

08005dd8 <GPDMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 1 global interrupt.
  */
void GPDMA2_Channel1_IRQHandler(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel1_IRQn 0 */

  /* USER CODE END GPDMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel1);
 8005ddc:	4802      	ldr	r0, [pc, #8]	; (8005de8 <GPDMA2_Channel1_IRQHandler+0x10>)
 8005dde:	f000 fc61 	bl	80066a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel1_IRQn 1 */

  /* USER CODE END GPDMA2_Channel1_IRQn 1 */
}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20027428 	.word	0x20027428

08005dec <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005df0:	4802      	ldr	r0, [pc, #8]	; (8005dfc <UART7_IRQHandler+0x10>)
 8005df2:	f009 fcaf 	bl	800f754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005df6:	bf00      	nop
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	2002713c 	.word	0x2002713c

08005e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return 1;
 8005e04:	2301      	movs	r3, #1
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <_kill>:

int _kill(int pid, int sig)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005e1a:	f00f fc0d 	bl	8015638 <__errno>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2216      	movs	r2, #22
 8005e22:	601a      	str	r2, [r3, #0]
  return -1;
 8005e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <_exit>:

void _exit (int status)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e38:	f04f 31ff 	mov.w	r1, #4294967295
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ffe7 	bl	8005e10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e42:	e7fe      	b.n	8005e42 <_exit+0x12>

08005e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e00a      	b.n	8005e6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e56:	f3af 8000 	nop.w
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	60ba      	str	r2, [r7, #8]
 8005e62:	b2ca      	uxtb	r2, r1
 8005e64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	dbf0      	blt.n	8005e56 <_read+0x12>
  }

  return len;
 8005e74:	687b      	ldr	r3, [r7, #4]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b086      	sub	sp, #24
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	e009      	b.n	8005ea4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	60ba      	str	r2, [r7, #8]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe f9f5 	bl	8004288 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	dbf1      	blt.n	8005e90 <_write+0x12>
  }
  return len;
 8005eac:	687b      	ldr	r3, [r7, #4]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <_close>:

int _close(int file)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ede:	605a      	str	r2, [r3, #4]
  return 0;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <_isatty>:

int _isatty(int file)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ef6:	2301      	movs	r3, #1
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
	...

08005f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f28:	4a14      	ldr	r2, [pc, #80]	; (8005f7c <_sbrk+0x5c>)
 8005f2a:	4b15      	ldr	r3, [pc, #84]	; (8005f80 <_sbrk+0x60>)
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f34:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <_sbrk+0x64>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f3c:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <_sbrk+0x64>)
 8005f3e:	4a12      	ldr	r2, [pc, #72]	; (8005f88 <_sbrk+0x68>)
 8005f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <_sbrk+0x64>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d207      	bcs.n	8005f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f50:	f00f fb72 	bl	8015638 <__errno>
 8005f54:	4603      	mov	r3, r0
 8005f56:	220c      	movs	r2, #12
 8005f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5e:	e009      	b.n	8005f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f60:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <_sbrk+0x64>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <_sbrk+0x64>)
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	4a05      	ldr	r2, [pc, #20]	; (8005f84 <_sbrk+0x64>)
 8005f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	200a0000 	.word	0x200a0000
 8005f80:	00000400 	.word	0x00000400
 8005f84:	200279c8 	.word	0x200279c8
 8005f88:	20027b20 	.word	0x20027b20

08005f8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005f92:	4b35      	ldr	r3, [pc, #212]	; (8006068 <SystemInit+0xdc>)
 8005f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f98:	4a33      	ldr	r2, [pc, #204]	; (8006068 <SystemInit+0xdc>)
 8005f9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8005fa2:	4b32      	ldr	r3, [pc, #200]	; (800606c <SystemInit+0xe0>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005fa8:	4b30      	ldr	r3, [pc, #192]	; (800606c <SystemInit+0xe0>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8005fae:	4b2f      	ldr	r3, [pc, #188]	; (800606c <SystemInit+0xe0>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8005fb4:	4b2d      	ldr	r3, [pc, #180]	; (800606c <SystemInit+0xe0>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	492c      	ldr	r1, [pc, #176]	; (800606c <SystemInit+0xe0>)
 8005fba:	4b2d      	ldr	r3, [pc, #180]	; (8006070 <SystemInit+0xe4>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8005fc0:	4b2a      	ldr	r3, [pc, #168]	; (800606c <SystemInit+0xe0>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8005fc6:	4b29      	ldr	r3, [pc, #164]	; (800606c <SystemInit+0xe0>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8005fcc:	4b27      	ldr	r3, [pc, #156]	; (800606c <SystemInit+0xe0>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8005fd2:	4b26      	ldr	r3, [pc, #152]	; (800606c <SystemInit+0xe0>)
 8005fd4:	4a27      	ldr	r2, [pc, #156]	; (8006074 <SystemInit+0xe8>)
 8005fd6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8005fd8:	4b24      	ldr	r3, [pc, #144]	; (800606c <SystemInit+0xe0>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8005fde:	4b23      	ldr	r3, [pc, #140]	; (800606c <SystemInit+0xe0>)
 8005fe0:	4a24      	ldr	r2, [pc, #144]	; (8006074 <SystemInit+0xe8>)
 8005fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8005fe4:	4b21      	ldr	r3, [pc, #132]	; (800606c <SystemInit+0xe0>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8005fea:	4b20      	ldr	r3, [pc, #128]	; (800606c <SystemInit+0xe0>)
 8005fec:	4a21      	ldr	r2, [pc, #132]	; (8006074 <SystemInit+0xe8>)
 8005fee:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8005ff0:	4b1e      	ldr	r3, [pc, #120]	; (800606c <SystemInit+0xe0>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8005ff6:	4b1d      	ldr	r3, [pc, #116]	; (800606c <SystemInit+0xe0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1c      	ldr	r2, [pc, #112]	; (800606c <SystemInit+0xe0>)
 8005ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006000:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8006002:	4b1a      	ldr	r3, [pc, #104]	; (800606c <SystemInit+0xe0>)
 8006004:	2200      	movs	r2, #0
 8006006:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006008:	4b17      	ldr	r3, [pc, #92]	; (8006068 <SystemInit+0xdc>)
 800600a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800600e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <SystemInit+0xec>)
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8006018:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8006020:	d003      	beq.n	800602a <SystemInit+0x9e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006028:	d117      	bne.n	800605a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800602a:	4b13      	ldr	r3, [pc, #76]	; (8006078 <SystemInit+0xec>)
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8006036:	4b10      	ldr	r3, [pc, #64]	; (8006078 <SystemInit+0xec>)
 8006038:	4a10      	ldr	r2, [pc, #64]	; (800607c <SystemInit+0xf0>)
 800603a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800603c:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <SystemInit+0xec>)
 800603e:	4a10      	ldr	r2, [pc, #64]	; (8006080 <SystemInit+0xf4>)
 8006040:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8006042:	4b0d      	ldr	r3, [pc, #52]	; (8006078 <SystemInit+0xec>)
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <SystemInit+0xec>)
 8006048:	f043 0302 	orr.w	r3, r3, #2
 800604c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800604e:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <SystemInit+0xec>)
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	4a09      	ldr	r2, [pc, #36]	; (8006078 <SystemInit+0xec>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	61d3      	str	r3, [r2, #28]
  }
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	e000ed00 	.word	0xe000ed00
 800606c:	44020c00 	.word	0x44020c00
 8006070:	eae2eae3 	.word	0xeae2eae3
 8006074:	01010280 	.word	0x01010280
 8006078:	40022000 	.word	0x40022000
 800607c:	08192a3b 	.word	0x08192a3b
 8006080:	4c5d6e7f 	.word	0x4c5d6e7f

08006084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006084:	480d      	ldr	r0, [pc, #52]	; (80060bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006086:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006088:	f7ff ff80 	bl	8005f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800608c:	480c      	ldr	r0, [pc, #48]	; (80060c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800608e:	490d      	ldr	r1, [pc, #52]	; (80060c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006090:	4a0d      	ldr	r2, [pc, #52]	; (80060c8 <LoopForever+0xe>)
  movs r3, #0
 8006092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006094:	e002      	b.n	800609c <LoopCopyDataInit>

08006096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800609a:	3304      	adds	r3, #4

0800609c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800609c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800609e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060a0:	d3f9      	bcc.n	8006096 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060a2:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80060a4:	4c0a      	ldr	r4, [pc, #40]	; (80060d0 <LoopForever+0x16>)
  movs r3, #0
 80060a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060a8:	e001      	b.n	80060ae <LoopFillZerobss>

080060aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060ac:	3204      	adds	r2, #4

080060ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060b0:	d3fb      	bcc.n	80060aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80060b2:	f00f fac7 	bl	8015644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80060b6:	f7fe f909 	bl	80042cc <main>

080060ba <LoopForever>:

LoopForever:
    b LoopForever
 80060ba:	e7fe      	b.n	80060ba <LoopForever>
  ldr   r0, =_estack
 80060bc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80060c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060c4:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80060c8:	08017be0 	.word	0x08017be0
  ldr r2, =_sbss
 80060cc:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80060d0:	20027b1c 	.word	0x20027b1c

080060d4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80060d4:	e7fe      	b.n	80060d4 <ADC1_IRQHandler>
	...

080060d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060dc:	2003      	movs	r0, #3
 80060de:	f000 f99d 	bl	800641c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80060e2:	f002 fd89 	bl	8008bf8 <HAL_RCC_GetSysClockFreq>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <HAL_Init+0x40>)
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	490a      	ldr	r1, [pc, #40]	; (800611c <HAL_Init+0x44>)
 80060f2:	5ccb      	ldrb	r3, [r1, r3]
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
 80060f8:	4a09      	ldr	r2, [pc, #36]	; (8006120 <HAL_Init+0x48>)
 80060fa:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80060fc:	200f      	movs	r0, #15
 80060fe:	f000 f811 	bl	8006124 <HAL_InitTick>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e002      	b.n	8006112 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800610c:	f7fe fe33 	bl	8004d76 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	44020c00 	.word	0x44020c00
 800611c:	08017600 	.word	0x08017600
 8006120:	20000060 	.word	0x20000060

08006124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800612c:	4b15      	ldr	r3, [pc, #84]	; (8006184 <HAL_InitTick+0x60>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e021      	b.n	800617c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006138:	4b13      	ldr	r3, [pc, #76]	; (8006188 <HAL_InitTick+0x64>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <HAL_InitTick+0x60>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006146:	fbb3 f3f1 	udiv	r3, r3, r1
 800614a:	fbb2 f3f3 	udiv	r3, r2, r3
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f997 	bl	8006482 <HAL_SYSTICK_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e00e      	b.n	800617c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b0f      	cmp	r3, #15
 8006162:	d80a      	bhi.n	800617a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006164:	2200      	movs	r2, #0
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	f000 f961 	bl	8006432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006170:	4a06      	ldr	r2, [pc, #24]	; (800618c <HAL_InitTick+0x68>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e000      	b.n	800617c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000068 	.word	0x20000068
 8006188:	20000060 	.word	0x20000060
 800618c:	20000064 	.word	0x20000064

08006190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006194:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <HAL_IncTick+0x20>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_IncTick+0x24>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4413      	add	r3, r2
 80061a0:	4a04      	ldr	r2, [pc, #16]	; (80061b4 <HAL_IncTick+0x24>)
 80061a2:	6013      	str	r3, [r2, #0]
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	20000068 	.word	0x20000068
 80061b4:	200279cc 	.word	0x200279cc

080061b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  return uwTick;
 80061bc:	4b03      	ldr	r3, [pc, #12]	; (80061cc <HAL_GetTick+0x14>)
 80061be:	681b      	ldr	r3, [r3, #0]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	200279cc 	.word	0x200279cc

080061d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061d8:	f7ff ffee 	bl	80061b8 <HAL_GetTick>
 80061dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d005      	beq.n	80061f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061ea:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <HAL_Delay+0x44>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061f6:	bf00      	nop
 80061f8:	f7ff ffde 	bl	80061b8 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	429a      	cmp	r2, r3
 8006206:	d8f7      	bhi.n	80061f8 <HAL_Delay+0x28>
  {
  }
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000068 	.word	0x20000068

08006218 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e023      	b.n	8006272 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fe fda0 	bl	8004d84 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <__NVIC_SetPriorityGrouping>:
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800628c:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <__NVIC_SetPriorityGrouping+0x44>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006298:	4013      	ands	r3, r2
 800629a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062ae:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <__NVIC_SetPriorityGrouping+0x44>)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	60d3      	str	r3, [r2, #12]
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <__NVIC_GetPriorityGrouping>:
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062c8:	4b04      	ldr	r3, [pc, #16]	; (80062dc <__NVIC_GetPriorityGrouping+0x18>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	0a1b      	lsrs	r3, r3, #8
 80062ce:	f003 0307 	and.w	r3, r3, #7
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	e000ed00 	.word	0xe000ed00

080062e0 <__NVIC_EnableIRQ>:
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80062ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	db0b      	blt.n	800630a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	f003 021f 	and.w	r2, r3, #31
 80062f8:	4907      	ldr	r1, [pc, #28]	; (8006318 <__NVIC_EnableIRQ+0x38>)
 80062fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	2001      	movs	r0, #1
 8006302:	fa00 f202 	lsl.w	r2, r0, r2
 8006306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	e000e100 	.word	0xe000e100

0800631c <__NVIC_SetPriority>:
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	6039      	str	r1, [r7, #0]
 8006326:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800632c:	2b00      	cmp	r3, #0
 800632e:	db0a      	blt.n	8006346 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	b2da      	uxtb	r2, r3
 8006334:	490c      	ldr	r1, [pc, #48]	; (8006368 <__NVIC_SetPriority+0x4c>)
 8006336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800633a:	0112      	lsls	r2, r2, #4
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	440b      	add	r3, r1
 8006340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006344:	e00a      	b.n	800635c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	b2da      	uxtb	r2, r3
 800634a:	4908      	ldr	r1, [pc, #32]	; (800636c <__NVIC_SetPriority+0x50>)
 800634c:	88fb      	ldrh	r3, [r7, #6]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	3b04      	subs	r3, #4
 8006354:	0112      	lsls	r2, r2, #4
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	440b      	add	r3, r1
 800635a:	761a      	strb	r2, [r3, #24]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	e000e100 	.word	0xe000e100
 800636c:	e000ed00 	.word	0xe000ed00

08006370 <NVIC_EncodePriority>:
{
 8006370:	b480      	push	{r7}
 8006372:	b089      	sub	sp, #36	; 0x24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f1c3 0307 	rsb	r3, r3, #7
 800638a:	2b04      	cmp	r3, #4
 800638c:	bf28      	it	cs
 800638e:	2304      	movcs	r3, #4
 8006390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	3304      	adds	r3, #4
 8006396:	2b06      	cmp	r3, #6
 8006398:	d902      	bls.n	80063a0 <NVIC_EncodePriority+0x30>
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	3b03      	subs	r3, #3
 800639e:	e000      	b.n	80063a2 <NVIC_EncodePriority+0x32>
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063a4:	f04f 32ff 	mov.w	r2, #4294967295
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	43da      	mvns	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	401a      	ands	r2, r3
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063b8:	f04f 31ff 	mov.w	r1, #4294967295
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	fa01 f303 	lsl.w	r3, r1, r3
 80063c2:	43d9      	mvns	r1, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063c8:	4313      	orrs	r3, r2
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3724      	adds	r7, #36	; 0x24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
	...

080063d8 <SysTick_Config>:
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063e8:	d301      	bcc.n	80063ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80063ea:	2301      	movs	r3, #1
 80063ec:	e00f      	b.n	800640e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063ee:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <SysTick_Config+0x40>)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063f6:	210f      	movs	r1, #15
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	f7ff ff8e 	bl	800631c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <SysTick_Config+0x40>)
 8006402:	2200      	movs	r2, #0
 8006404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006406:	4b04      	ldr	r3, [pc, #16]	; (8006418 <SysTick_Config+0x40>)
 8006408:	2207      	movs	r2, #7
 800640a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	e000e010 	.word	0xe000e010

0800641c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff ff29 	bl	800627c <__NVIC_SetPriorityGrouping>
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b086      	sub	sp, #24
 8006436:	af00      	add	r7, sp, #0
 8006438:	4603      	mov	r3, r0
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
 800643e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006440:	f7ff ff40 	bl	80062c4 <__NVIC_GetPriorityGrouping>
 8006444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	6978      	ldr	r0, [r7, #20]
 800644c:	f7ff ff90 	bl	8006370 <NVIC_EncodePriority>
 8006450:	4602      	mov	r2, r0
 8006452:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006456:	4611      	mov	r1, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff ff5f 	bl	800631c <__NVIC_SetPriority>
}
 800645e:	bf00      	nop
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	4603      	mov	r3, r0
 800646e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff ff33 	bl	80062e0 <__NVIC_EnableIRQ>
}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff ffa4 	bl	80063d8 <SysTick_Config>
 8006490:	4603      	mov	r3, r0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e04f      	b.n	8006552 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_DMA_Start_IT+0x26>
 80064bc:	2302      	movs	r3, #2
 80064be:	e048      	b.n	8006552 <HAL_DMA_Start_IT+0xb8>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d136      	bne.n	8006542 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fa91 	bl	8006a10 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695a      	ldr	r2, [r3, #20]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80064fc:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695a      	ldr	r2, [r3, #20]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006514:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800652c:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	e007      	b.n	8006552 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2240      	movs	r2, #64	; 0x40
 8006546:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8006562:	f7ff fe29 	bl	80061b8 <HAL_GetTick>
 8006566:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e06b      	b.n	800664a <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d008      	beq.n	8006590 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e05c      	b.n	800664a <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695a      	ldr	r2, [r3, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0204 	orr.w	r2, r2, #4
 800659e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2205      	movs	r2, #5
 80065a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80065a8:	e020      	b.n	80065ec <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80065aa:	f7ff fe05 	bl	80061b8 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b05      	cmp	r3, #5
 80065b6:	d919      	bls.n	80065ec <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065bc:	f043 0210 	orr.w	r2, r3, #16
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2203      	movs	r2, #3
 80065c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065dc:	2201      	movs	r2, #1
 80065de:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e02e      	b.n	800664a <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0d7      	beq.n	80065aa <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695a      	ldr	r2, [r3, #20]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0202 	orr.w	r2, r2, #2
 8006608:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2204      	movs	r2, #4
 800660e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800661a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006634:	2201      	movs	r2, #1
 8006636:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2200      	movs	r2, #0
 800663e:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e019      	b.n	8006698 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d004      	beq.n	800667a <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e00e      	b.n	8006698 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2204      	movs	r2, #4
 800667e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6812      	ldr	r2, [r2, #0]
 800668c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006690:	f043 0304 	orr.w	r3, r3, #4
 8006694:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80066b4:	f023 030f 	bic.w	r3, r3, #15
 80066b8:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066c2:	3b50      	subs	r3, #80	; 0x50
 80066c4:	09db      	lsrs	r3, r3, #7
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	2201      	movs	r2, #1
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4013      	ands	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 8154 	beq.w	800698c <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d011      	beq.n	8006716 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006708:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670e:	f043 0201 	orr.w	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006720:	2b00      	cmp	r3, #0
 8006722:	d011      	beq.n	8006748 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800673a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006740:	f043 0202 	orr.w	r2, r3, #2
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d011      	beq.n	800677a <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800676c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	f043 0204 	orr.w	r2, r3, #4
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d011      	beq.n	80067ac <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800679e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a4:	f043 0208 	orr.w	r2, r3, #8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d013      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00c      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d0:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d059      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d052      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006806:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b04      	cmp	r3, #4
 8006812:	d13b      	bne.n	800688c <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006822:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695a      	ldr	r2, [r3, #20]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0202 	orr.w	r2, r2, #2
 8006832:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2203      	movs	r2, #3
 8006846:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800684a:	e003      	b.n	8006854 <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006864:	2201      	movs	r2, #1
 8006866:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2200      	movs	r2, #0
 800686e:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8087 	beq.w	8006990 <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
        }

        return;
 800688a:	e081      	b.n	8006990 <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2205      	movs	r2, #5
 8006890:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d039      	beq.n	8006926 <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d032      	beq.n	8006926 <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d012      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d116      	bne.n	8006904 <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d111      	bne.n	8006904 <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ec:	2201      	movs	r2, #1
 80068ee:	731a      	strb	r2, [r3, #12]
 80068f0:	e008      	b.n	8006904 <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d103      	bne.n	8006904 <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f44f 7240 	mov.w	r2, #768	; 0x300
 800690c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692a:	2b00      	cmp	r3, #0
 800692c:	d031      	beq.n	8006992 <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0202 	orr.w	r2, r2, #2
 800693c:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d004      	beq.n	8006956 <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2203      	movs	r2, #3
 8006950:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006954:	e003      	b.n	800695e <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696e:	2201      	movs	r2, #1
 8006970:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
 800698a:	e002      	b.n	8006992 <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800698c:	bf00      	nop
 800698e:	e000      	b.n	8006992 <HAL_DMA_IRQHandler+0x2ee>
        return;
 8006990:	bf00      	nop
    }
  }
}
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e02b      	b.n	8006a04 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80069b4:	f023 030f 	bic.w	r3, r3, #15
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c2:	3b50      	subs	r3, #80	; 0x50
 80069c4:	09db      	lsrs	r3, r3, #7
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2201      	movs	r2, #1
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d012      	beq.n	8006a02 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f003 0311 	and.w	r3, r3, #17
 80069e2:	2b11      	cmp	r3, #17
 80069e4:	d106      	bne.n	80069f4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	605a      	str	r2, [r3, #4]
 80069f2:	e006      	b.n	8006a02 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	43db      	mvns	r3, r3
 80069fc:	401a      	ands	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	b291      	uxth	r1, r2
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8006a3c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006a64:	f7ff fba8 	bl	80061b8 <HAL_GetTick>
 8006a68:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0db      	b.n	8006c2c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a6e      	ldr	r2, [pc, #440]	; (8006c34 <HAL_DMAEx_List_Init+0x1d8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	f000 809f 	beq.w	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a6c      	ldr	r2, [pc, #432]	; (8006c38 <HAL_DMAEx_List_Init+0x1dc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	f000 8099 	beq.w	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a6a      	ldr	r2, [pc, #424]	; (8006c3c <HAL_DMAEx_List_Init+0x1e0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	f000 8093 	beq.w	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a68      	ldr	r2, [pc, #416]	; (8006c40 <HAL_DMAEx_List_Init+0x1e4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	f000 808d 	beq.w	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a66      	ldr	r2, [pc, #408]	; (8006c44 <HAL_DMAEx_List_Init+0x1e8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	f000 8087 	beq.w	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a64      	ldr	r2, [pc, #400]	; (8006c48 <HAL_DMAEx_List_Init+0x1ec>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f000 8081 	beq.w	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a62      	ldr	r2, [pc, #392]	; (8006c4c <HAL_DMAEx_List_Init+0x1f0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d07b      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a61      	ldr	r2, [pc, #388]	; (8006c50 <HAL_DMAEx_List_Init+0x1f4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d076      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a5f      	ldr	r2, [pc, #380]	; (8006c54 <HAL_DMAEx_List_Init+0x1f8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d071      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a5e      	ldr	r2, [pc, #376]	; (8006c58 <HAL_DMAEx_List_Init+0x1fc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d06c      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a5c      	ldr	r2, [pc, #368]	; (8006c5c <HAL_DMAEx_List_Init+0x200>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d067      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a5b      	ldr	r2, [pc, #364]	; (8006c60 <HAL_DMAEx_List_Init+0x204>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d062      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a59      	ldr	r2, [pc, #356]	; (8006c64 <HAL_DMAEx_List_Init+0x208>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d05d      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a58      	ldr	r2, [pc, #352]	; (8006c68 <HAL_DMAEx_List_Init+0x20c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d058      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a56      	ldr	r2, [pc, #344]	; (8006c6c <HAL_DMAEx_List_Init+0x210>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d053      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a55      	ldr	r2, [pc, #340]	; (8006c70 <HAL_DMAEx_List_Init+0x214>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d04e      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a53      	ldr	r2, [pc, #332]	; (8006c74 <HAL_DMAEx_List_Init+0x218>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d049      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a52      	ldr	r2, [pc, #328]	; (8006c78 <HAL_DMAEx_List_Init+0x21c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d044      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a50      	ldr	r2, [pc, #320]	; (8006c7c <HAL_DMAEx_List_Init+0x220>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d03f      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a4f      	ldr	r2, [pc, #316]	; (8006c80 <HAL_DMAEx_List_Init+0x224>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d03a      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a4d      	ldr	r2, [pc, #308]	; (8006c84 <HAL_DMAEx_List_Init+0x228>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d035      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a4c      	ldr	r2, [pc, #304]	; (8006c88 <HAL_DMAEx_List_Init+0x22c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d030      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a4a      	ldr	r2, [pc, #296]	; (8006c8c <HAL_DMAEx_List_Init+0x230>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d02b      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a49      	ldr	r2, [pc, #292]	; (8006c90 <HAL_DMAEx_List_Init+0x234>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d026      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a47      	ldr	r2, [pc, #284]	; (8006c94 <HAL_DMAEx_List_Init+0x238>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d021      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a46      	ldr	r2, [pc, #280]	; (8006c98 <HAL_DMAEx_List_Init+0x23c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d01c      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a44      	ldr	r2, [pc, #272]	; (8006c9c <HAL_DMAEx_List_Init+0x240>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d017      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a43      	ldr	r2, [pc, #268]	; (8006ca0 <HAL_DMAEx_List_Init+0x244>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d012      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a41      	ldr	r2, [pc, #260]	; (8006ca4 <HAL_DMAEx_List_Init+0x248>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00d      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a40      	ldr	r2, [pc, #256]	; (8006ca8 <HAL_DMAEx_List_Init+0x24c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d008      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a3e      	ldr	r2, [pc, #248]	; (8006cac <HAL_DMAEx_List_Init+0x250>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <HAL_DMAEx_List_Init+0x162>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a3d      	ldr	r2, [pc, #244]	; (8006cb0 <HAL_DMAEx_List_Init+0x254>)
 8006bbc:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695a      	ldr	r2, [r3, #20]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0206 	orr.w	r2, r2, #6
 8006bdc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006bde:	e00f      	b.n	8006c00 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006be0:	f7ff faea 	bl	80061b8 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d908      	bls.n	8006c00 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e015      	b.n	8006c2c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e8      	bne.n	8006be0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 faba 	bl	8007188 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	40020050 	.word	0x40020050
 8006c38:	50020050 	.word	0x50020050
 8006c3c:	400200d0 	.word	0x400200d0
 8006c40:	500200d0 	.word	0x500200d0
 8006c44:	40020150 	.word	0x40020150
 8006c48:	50020150 	.word	0x50020150
 8006c4c:	400201d0 	.word	0x400201d0
 8006c50:	500201d0 	.word	0x500201d0
 8006c54:	40020250 	.word	0x40020250
 8006c58:	50020250 	.word	0x50020250
 8006c5c:	400202d0 	.word	0x400202d0
 8006c60:	500202d0 	.word	0x500202d0
 8006c64:	40020350 	.word	0x40020350
 8006c68:	50020350 	.word	0x50020350
 8006c6c:	400203d0 	.word	0x400203d0
 8006c70:	500203d0 	.word	0x500203d0
 8006c74:	40021050 	.word	0x40021050
 8006c78:	50021050 	.word	0x50021050
 8006c7c:	400210d0 	.word	0x400210d0
 8006c80:	500210d0 	.word	0x500210d0
 8006c84:	40021150 	.word	0x40021150
 8006c88:	50021150 	.word	0x50021150
 8006c8c:	400211d0 	.word	0x400211d0
 8006c90:	500211d0 	.word	0x500211d0
 8006c94:	40021250 	.word	0x40021250
 8006c98:	50021250 	.word	0x50021250
 8006c9c:	400212d0 	.word	0x400212d0
 8006ca0:	500212d0 	.word	0x500212d0
 8006ca4:	40021350 	.word	0x40021350
 8006ca8:	50021350 	.word	0x50021350
 8006cac:	400213d0 	.word	0x400213d0
 8006cb0:	500213d0 	.word	0x500213d0

08006cb4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_DMAEx_List_Start_IT+0x16>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e082      	b.n	8006dd4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006cd4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ce0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d005      	beq.n	8006cf4 <HAL_DMAEx_List_Start_IT+0x40>
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d16a      	bne.n	8006dc4 <HAL_DMAEx_List_Start_IT+0x110>
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d067      	beq.n	8006dc4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d157      	bne.n	8006db0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d101      	bne.n	8006d0e <HAL_DMAEx_List_Start_IT+0x5a>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e062      	b.n	8006dd4 <HAL_DMAEx_List_Start_IT+0x120>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d22:	2202      	movs	r2, #2
 8006d24:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d30:	2200      	movs	r2, #0
 8006d32:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695a      	ldr	r2, [r3, #20]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8006d42:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d007      	beq.n	8006d74 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695a      	ldr	r2, [r3, #20]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d72:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f107 010c 	add.w	r1, r7, #12
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fd1d 	bl	80077c0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	0c0b      	lsrs	r3, r1, #16
 8006d94:	041b      	lsls	r3, r3, #16
 8006d96:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006da4:	4013      	ands	r3, r2
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	430b      	orrs	r3, r1
 8006dae:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e007      	b.n	8006dd4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2240      	movs	r2, #64	; 0x40
 8006dc8:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <HAL_DMAEx_List_BuildNode+0x16>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e004      	b.n	8006e00 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fb1d 	bl	8007438 <DMA_List_BuildNode>

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08c      	sub	sp, #48	; 0x30
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <HAL_DMAEx_List_InsertNode+0x18>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0b6      	b.n	8006f92 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d104      	bne.n	8006e36 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e0ad      	b.n	8006f92 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fc52 	bl	80076e8 <DMA_List_CheckNodesBaseAddresses>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2205      	movs	r2, #5
 8006e4e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e09e      	b.n	8006f92 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fc73 	bl	8007748 <DMA_List_CheckNodesTypes>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e08f      	b.n	8006f92 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2202      	movs	r2, #2
 8006e76:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006e7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc99 	bl	80077c0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d11a      	bne.n	8006ecc <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d106      	bne.n	8006eaa <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	609a      	str	r2, [r3, #8]
 8006ea8:	e06c      	b.n	8006f84 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ebc:	4319      	orrs	r1, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	609a      	str	r2, [r3, #8]
 8006eca:	e05b      	b.n	8006f84 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10f      	bne.n	8006ef2 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006edc:	4013      	ands	r3, r2
 8006ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee2:	4319      	orrs	r1, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e043      	b.n	8006f7a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006ef6:	f107 0314 	add.w	r3, r7, #20
 8006efa:	461a      	mov	r2, r3
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 fc8e 	bl	8007820 <DMA_List_FindNode>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d132      	bne.n	8006f70 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d11a      	bne.n	8006f4a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00b      	beq.n	8006f34 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	461a      	mov	r2, r3
 8006f22:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006f26:	4013      	ands	r3, r2
 8006f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f2c:	4319      	orrs	r1, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f40:	4319      	orrs	r1, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f48:	e017      	b.n	8006f7a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006f60:	4013      	ands	r3, r2
 8006f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f66:	4319      	orrs	r1, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f6e:	e004      	b.n	8006f7a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2206      	movs	r2, #6
 8006f74:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e00b      	b.n	8006f92 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3730      	adds	r7, #48	; 0x30
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b08a      	sub	sp, #40	; 0x28
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e052      	b.n	8007052 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d104      	bne.n	8006fbe <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e049      	b.n	8007052 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00c      	beq.n	8006fe0 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d101      	bne.n	8006fd6 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e03d      	b.n	8007052 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e038      	b.n	8007052 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d104      	bne.n	8006ff2 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2204      	movs	r2, #4
 8006fec:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e02f      	b.n	8007052 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f107 0220 	add.w	r2, r7, #32
 8007006:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fbd8 	bl	80077c0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8007014:	f107 030c 	add.w	r3, r7, #12
 8007018:	461a      	mov	r2, r3
 800701a:	2100      	movs	r1, #0
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fbff 	bl	8007820 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800702c:	4013      	ands	r3, r2
 800702e:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	4610      	mov	r0, r2
 8007034:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8007036:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007038:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3728      	adds	r7, #40	; 0x28
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <HAL_DMAEx_List_LinkQ+0x16>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e072      	b.n	800715c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800707c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d002      	beq.n	8007090 <HAL_DMAEx_List_LinkQ+0x34>
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b05      	cmp	r3, #5
 800708e:	d108      	bne.n	80070a2 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2240      	movs	r2, #64	; 0x40
 8007094:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e05c      	b.n	800715c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	7b1b      	ldrb	r3, [r3, #12]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d104      	bne.n	80070b6 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2201      	movs	r2, #1
 80070b0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e052      	b.n	800715c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2b      	ldr	r2, [pc, #172]	; (8007168 <HAL_DMAEx_List_LinkQ+0x10c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_DMAEx_List_LinkQ+0xaa>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a29      	ldr	r2, [pc, #164]	; (800716c <HAL_DMAEx_List_LinkQ+0x110>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d01d      	beq.n	8007106 <HAL_DMAEx_List_LinkQ+0xaa>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a28      	ldr	r2, [pc, #160]	; (8007170 <HAL_DMAEx_List_LinkQ+0x114>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_DMAEx_List_LinkQ+0xaa>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a26      	ldr	r2, [pc, #152]	; (8007174 <HAL_DMAEx_List_LinkQ+0x118>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_DMAEx_List_LinkQ+0xaa>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a25      	ldr	r2, [pc, #148]	; (8007178 <HAL_DMAEx_List_LinkQ+0x11c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_DMAEx_List_LinkQ+0xaa>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a23      	ldr	r2, [pc, #140]	; (800717c <HAL_DMAEx_List_LinkQ+0x120>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_DMAEx_List_LinkQ+0xaa>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a22      	ldr	r2, [pc, #136]	; (8007180 <HAL_DMAEx_List_LinkQ+0x124>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_DMAEx_List_LinkQ+0xaa>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a20      	ldr	r2, [pc, #128]	; (8007184 <HAL_DMAEx_List_LinkQ+0x128>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d101      	bne.n	800710a <HAL_DMAEx_List_LinkQ+0xae>
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <HAL_DMAEx_List_LinkQ+0xb0>
 800710a:	2300      	movs	r3, #0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10b      	bne.n	8007128 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2203      	movs	r2, #3
 8007122:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e019      	b.n	800715c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712c:	2b81      	cmp	r3, #129	; 0x81
 800712e:	d108      	bne.n	8007142 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10d      	bne.n	8007154 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2204      	movs	r2, #4
 800713c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e00c      	b.n	800715c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2204      	movs	r2, #4
 800714e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e003      	b.n	800715c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	40020350 	.word	0x40020350
 800716c:	50020350 	.word	0x50020350
 8007170:	400203d0 	.word	0x400203d0
 8007174:	500203d0 	.word	0x500203d0
 8007178:	40021350 	.word	0x40021350
 800717c:	50021350 	.word	0x50021350
 8007180:	400213d0 	.word	0x400213d0
 8007184:	500213d0 	.word	0x500213d0

08007188 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a85      	ldr	r2, [pc, #532]	; (80073b8 <DMA_List_Init+0x230>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	f000 80a0 	beq.w	80072e8 <DMA_List_Init+0x160>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a83      	ldr	r2, [pc, #524]	; (80073bc <DMA_List_Init+0x234>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	f000 809a 	beq.w	80072e8 <DMA_List_Init+0x160>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a81      	ldr	r2, [pc, #516]	; (80073c0 <DMA_List_Init+0x238>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	f000 8094 	beq.w	80072e8 <DMA_List_Init+0x160>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a7f      	ldr	r2, [pc, #508]	; (80073c4 <DMA_List_Init+0x23c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	f000 808e 	beq.w	80072e8 <DMA_List_Init+0x160>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a7d      	ldr	r2, [pc, #500]	; (80073c8 <DMA_List_Init+0x240>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	f000 8088 	beq.w	80072e8 <DMA_List_Init+0x160>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a7b      	ldr	r2, [pc, #492]	; (80073cc <DMA_List_Init+0x244>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	f000 8082 	beq.w	80072e8 <DMA_List_Init+0x160>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a79      	ldr	r2, [pc, #484]	; (80073d0 <DMA_List_Init+0x248>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d07c      	beq.n	80072e8 <DMA_List_Init+0x160>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a78      	ldr	r2, [pc, #480]	; (80073d4 <DMA_List_Init+0x24c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d077      	beq.n	80072e8 <DMA_List_Init+0x160>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a76      	ldr	r2, [pc, #472]	; (80073d8 <DMA_List_Init+0x250>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d072      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a75      	ldr	r2, [pc, #468]	; (80073dc <DMA_List_Init+0x254>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d06d      	beq.n	80072e8 <DMA_List_Init+0x160>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a73      	ldr	r2, [pc, #460]	; (80073e0 <DMA_List_Init+0x258>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d068      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a72      	ldr	r2, [pc, #456]	; (80073e4 <DMA_List_Init+0x25c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d063      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a70      	ldr	r2, [pc, #448]	; (80073e8 <DMA_List_Init+0x260>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d05e      	beq.n	80072e8 <DMA_List_Init+0x160>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a6f      	ldr	r2, [pc, #444]	; (80073ec <DMA_List_Init+0x264>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d059      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a6d      	ldr	r2, [pc, #436]	; (80073f0 <DMA_List_Init+0x268>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d054      	beq.n	80072e8 <DMA_List_Init+0x160>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a6c      	ldr	r2, [pc, #432]	; (80073f4 <DMA_List_Init+0x26c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d04f      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a6a      	ldr	r2, [pc, #424]	; (80073f8 <DMA_List_Init+0x270>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d04a      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a69      	ldr	r2, [pc, #420]	; (80073fc <DMA_List_Init+0x274>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d045      	beq.n	80072e8 <DMA_List_Init+0x160>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a67      	ldr	r2, [pc, #412]	; (8007400 <DMA_List_Init+0x278>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d040      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a66      	ldr	r2, [pc, #408]	; (8007404 <DMA_List_Init+0x27c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d03b      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a64      	ldr	r2, [pc, #400]	; (8007408 <DMA_List_Init+0x280>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d036      	beq.n	80072e8 <DMA_List_Init+0x160>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a63      	ldr	r2, [pc, #396]	; (800740c <DMA_List_Init+0x284>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d031      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a61      	ldr	r2, [pc, #388]	; (8007410 <DMA_List_Init+0x288>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d02c      	beq.n	80072e8 <DMA_List_Init+0x160>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a60      	ldr	r2, [pc, #384]	; (8007414 <DMA_List_Init+0x28c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d027      	beq.n	80072e8 <DMA_List_Init+0x160>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a5e      	ldr	r2, [pc, #376]	; (8007418 <DMA_List_Init+0x290>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d022      	beq.n	80072e8 <DMA_List_Init+0x160>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a5d      	ldr	r2, [pc, #372]	; (800741c <DMA_List_Init+0x294>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d01d      	beq.n	80072e8 <DMA_List_Init+0x160>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a5b      	ldr	r2, [pc, #364]	; (8007420 <DMA_List_Init+0x298>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d018      	beq.n	80072e8 <DMA_List_Init+0x160>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a5a      	ldr	r2, [pc, #360]	; (8007424 <DMA_List_Init+0x29c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d013      	beq.n	80072e8 <DMA_List_Init+0x160>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a58      	ldr	r2, [pc, #352]	; (8007428 <DMA_List_Init+0x2a0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00e      	beq.n	80072e8 <DMA_List_Init+0x160>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a57      	ldr	r2, [pc, #348]	; (800742c <DMA_List_Init+0x2a4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d009      	beq.n	80072e8 <DMA_List_Init+0x160>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a55      	ldr	r2, [pc, #340]	; (8007430 <DMA_List_Init+0x2a8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d004      	beq.n	80072e8 <DMA_List_Init+0x160>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a54      	ldr	r2, [pc, #336]	; (8007434 <DMA_List_Init+0x2ac>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d101      	bne.n	80072ec <DMA_List_Init+0x164>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e000      	b.n	80072ee <DMA_List_Init+0x166>
 80072ec:	2300      	movs	r3, #0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	430a      	orrs	r2, r1
 800730e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2200      	movs	r2, #0
 8007316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007320:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2200      	movs	r2, #0
 8007328:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2200      	movs	r2, #0
 8007330:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2200      	movs	r2, #0
 8007338:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a2a      	ldr	r2, [pc, #168]	; (80073e8 <DMA_List_Init+0x260>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d022      	beq.n	800738a <DMA_List_Init+0x202>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a28      	ldr	r2, [pc, #160]	; (80073ec <DMA_List_Init+0x264>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01d      	beq.n	800738a <DMA_List_Init+0x202>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a27      	ldr	r2, [pc, #156]	; (80073f0 <DMA_List_Init+0x268>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d018      	beq.n	800738a <DMA_List_Init+0x202>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a25      	ldr	r2, [pc, #148]	; (80073f4 <DMA_List_Init+0x26c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <DMA_List_Init+0x202>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a30      	ldr	r2, [pc, #192]	; (8007428 <DMA_List_Init+0x2a0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <DMA_List_Init+0x202>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a2e      	ldr	r2, [pc, #184]	; (800742c <DMA_List_Init+0x2a4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <DMA_List_Init+0x202>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2d      	ldr	r2, [pc, #180]	; (8007430 <DMA_List_Init+0x2a8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <DMA_List_Init+0x202>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a2b      	ldr	r2, [pc, #172]	; (8007434 <DMA_List_Init+0x2ac>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d101      	bne.n	800738e <DMA_List_Init+0x206>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <DMA_List_Init+0x208>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2200      	movs	r2, #0
 800739a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2200      	movs	r2, #0
 80073a2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2200      	movs	r2, #0
 80073aa:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80073ac:	bf00      	nop
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	40020050 	.word	0x40020050
 80073bc:	50020050 	.word	0x50020050
 80073c0:	400200d0 	.word	0x400200d0
 80073c4:	500200d0 	.word	0x500200d0
 80073c8:	40020150 	.word	0x40020150
 80073cc:	50020150 	.word	0x50020150
 80073d0:	400201d0 	.word	0x400201d0
 80073d4:	500201d0 	.word	0x500201d0
 80073d8:	40020250 	.word	0x40020250
 80073dc:	50020250 	.word	0x50020250
 80073e0:	400202d0 	.word	0x400202d0
 80073e4:	500202d0 	.word	0x500202d0
 80073e8:	40020350 	.word	0x40020350
 80073ec:	50020350 	.word	0x50020350
 80073f0:	400203d0 	.word	0x400203d0
 80073f4:	500203d0 	.word	0x500203d0
 80073f8:	40021050 	.word	0x40021050
 80073fc:	50021050 	.word	0x50021050
 8007400:	400210d0 	.word	0x400210d0
 8007404:	500210d0 	.word	0x500210d0
 8007408:	40021150 	.word	0x40021150
 800740c:	50021150 	.word	0x50021150
 8007410:	400211d0 	.word	0x400211d0
 8007414:	500211d0 	.word	0x500211d0
 8007418:	40021250 	.word	0x40021250
 800741c:	50021250 	.word	0x50021250
 8007420:	400212d0 	.word	0x400212d0
 8007424:	500212d0 	.word	0x500212d0
 8007428:	40021350 	.word	0x40021350
 800742c:	50021350 	.word	0x50021350
 8007430:	400213d0 	.word	0x400213d0
 8007434:	500213d0 	.word	0x500213d0

08007438 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800744a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8007450:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007456:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800745c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d017      	beq.n	800749e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	3b01      	subs	r3, #1
 8007482:	051b      	lsls	r3, r3, #20
 8007484:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007488:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	3b01      	subs	r3, #1
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007496:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007498:	431a      	orrs	r2, r3
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	f240 23ff 	movw	r3, #767	; 0x2ff
 80074aa:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80074ac:	431a      	orrs	r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ba:	d10c      	bne.n	80074d6 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d011      	beq.n	80074ec <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	605a      	str	r2, [r3, #4]
 80074d4:	e00a      	b.n	80074ec <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074de:	d105      	bne.n	80074ec <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f4:	431a      	orrs	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00f      	beq.n	8007522 <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750e:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800751a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800751c:	431a      	orrs	r2, r3
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007526:	b29a      	uxth	r2, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d04e      	beq.n	80075d6 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007540:	3b01      	subs	r3, #1
 8007542:	0419      	lsls	r1, r3, #16
 8007544:	4b66      	ldr	r3, [pc, #408]	; (80076e0 <DMA_List_BuildNode+0x2a8>)
 8007546:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007548:	431a      	orrs	r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007552:	2b00      	cmp	r3, #0
 8007554:	da06      	bge.n	8007564 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	609a      	str	r2, [r3, #8]
 8007562:	e005      	b.n	8007570 <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007574:	2b00      	cmp	r3, #0
 8007576:	da06      	bge.n	8007586 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	609a      	str	r2, [r3, #8]
 8007584:	e005      	b.n	8007592 <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007596:	2b00      	cmp	r3, #0
 8007598:	da06      	bge.n	80075a8 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	609a      	str	r2, [r3, #8]
 80075a6:	e005      	b.n	80075b4 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da06      	bge.n	80075ca <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	609a      	str	r2, [r3, #8]
 80075c8:	e005      	b.n	80075d6 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d059      	beq.n	80076a6 <DMA_List_BuildNode+0x26e>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da09      	bge.n	800760e <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fe:	425b      	negs	r3, r3
 8007600:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	615a      	str	r2, [r3, #20]
 800760c:	e005      	b.n	800761a <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007612:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761e:	2b00      	cmp	r3, #0
 8007620:	da0d      	bge.n	800763e <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	425b      	negs	r3, r3
 8007628:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695a      	ldr	r2, [r3, #20]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	0419      	lsls	r1, r3, #16
 8007632:	4b2c      	ldr	r3, [pc, #176]	; (80076e4 <DMA_List_BuildNode+0x2ac>)
 8007634:	400b      	ands	r3, r1
 8007636:	431a      	orrs	r2, r3
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	615a      	str	r2, [r3, #20]
 800763c:	e009      	b.n	8007652 <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	0419      	lsls	r1, r3, #16
 8007648:	4b26      	ldr	r3, [pc, #152]	; (80076e4 <DMA_List_BuildNode+0x2ac>)
 800764a:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800764c:	431a      	orrs	r2, r3
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007656:	2b00      	cmp	r3, #0
 8007658:	da08      	bge.n	800766c <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765e:	425b      	negs	r3, r3
 8007660:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	b29a      	uxth	r2, r3
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	619a      	str	r2, [r3, #24]
 800766a:	e004      	b.n	8007676 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007670:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767a:	2b00      	cmp	r3, #0
 800767c:	da0b      	bge.n	8007696 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007682:	425b      	negs	r3, r3
 8007684:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800768e:	431a      	orrs	r2, r3
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	619a      	str	r2, [r3, #24]
 8007694:	e007      	b.n	80076a6 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80076a0:	431a      	orrs	r2, r3
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d006      	beq.n	80076c8 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80076c6:	e005      	b.n	80076d4 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	621a      	str	r2, [r3, #32]
}
 80076d4:	bf00      	nop
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	07ff0000 	.word	0x07ff0000
 80076e4:	1fff0000 	.word	0x1fff0000

080076e8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	0c1b      	lsrs	r3, r3, #16
 8007700:	041b      	lsls	r3, r3, #16
 8007702:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	e00a      	b.n	800772a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	e004      	b.n	800772a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	0c1b      	lsrs	r3, r3, #16
 800772e:	041b      	lsls	r3, r3, #16
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	429a      	cmp	r2, r3
 8007734:	d001      	beq.n	800773a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d004      	beq.n	8007768 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	e00e      	b.n	8007786 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e006      	b.n	8007786 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d007      	beq.n	800779c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007798:	2302      	movs	r3, #2
 800779a:	e00b      	b.n	80077b4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d001      	beq.n	80077b2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e000      	b.n	80077b4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00c      	beq.n	80077f2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	4a0d      	ldr	r2, [pc, #52]	; (8007818 <DMA_List_GetCLLRNodeInfo+0x58>)
 80077e2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00f      	beq.n	800780a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2207      	movs	r2, #7
 80077ee:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80077f0:	e00b      	b.n	800780a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4a08      	ldr	r2, [pc, #32]	; (800781c <DMA_List_GetCLLRNodeInfo+0x5c>)
 80077fc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2205      	movs	r2, #5
 8007808:	601a      	str	r2, [r3, #0]
}
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	fe010000 	.word	0xfe010000
 800781c:	f8010000 	.word	0xf8010000

08007820 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007820:	b480      	push	{r7}
 8007822:	b089      	sub	sp, #36	; 0x24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d142      	bne.n	80078ca <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007844:	e01d      	b.n	8007882 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d107      	bne.n	800785c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007856:	4013      	ands	r3, r2
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	e00f      	b.n	800787c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	0c1b      	lsrs	r3, r3, #16
 8007866:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	4413      	add	r3, r2
 800786c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007874:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007878:	4013      	ands	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	3301      	adds	r3, #1
 8007880:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	429a      	cmp	r2, r3
 800788a:	d3dc      	bcc.n	8007846 <DMA_List_FindNode+0x26>
 800788c:	e029      	b.n	80078e2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d107      	bne.n	80078a4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	461a      	mov	r2, r3
 800789a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800789e:	4013      	ands	r3, r2
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	e00f      	b.n	80078c4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	0c1b      	lsrs	r3, r3, #16
 80078ae:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	4413      	add	r3, r2
 80078b4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80078bc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80078c0:	4013      	ands	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	3301      	adds	r3, #1
 80078c8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d206      	bcs.n	80078e2 <DMA_List_FindNode+0xc2>
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80078da:	4013      	ands	r3, r2
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d1d5      	bne.n	800788e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d008      	beq.n	80078fa <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80078ee:	4013      	ands	r3, r2
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d001      	beq.n	80078fa <DMA_List_FindNode+0xda>
    {
      return 1U;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e02b      	b.n	8007952 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	0c1b      	lsrs	r3, r3, #16
 8007906:	041b      	lsls	r3, r3, #16
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	0c1b      	lsrs	r3, r3, #16
 8007916:	041b      	lsls	r3, r3, #16
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	461a      	mov	r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00f      	beq.n	8007950 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	461a      	mov	r2, r3
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800793c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007940:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	041b      	lsls	r3, r3, #16
 800794a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3724      	adds	r7, #36	; 0x24
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e033      	b.n	80079d8 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fd fa1f 	bl	8004dc8 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f854 	bl	8007a3e <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f822 	bl	80079e0 <FMAC_Reset>
 800799c:	4603      	mov	r3, r0
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d10c      	bne.n	80079bc <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	f043 0210 	orr.w	r2, r3, #16
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	22a0      	movs	r2, #160	; 0xa0
 80079b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	73fb      	strb	r3, [r7, #15]
 80079ba:	e008      	b.n	80079ce <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079e8:	f7fe fbe6 	bl	80061b8 <HAL_GetTick>
 80079ec:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691a      	ldr	r2, [r3, #16]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80079fc:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80079fe:	e00f      	b.n	8007a20 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007a00:	f7fe fbda 	bl	80061b8 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007a0e:	d907      	bls.n	8007a20 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e00a      	b.n	8007a36 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e8      	bne.n	8007a00 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f807 	bl	8007a5a <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f81b 	bl	8007a88 <FMAC_ResetOutputStateAndDataPointers>
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007ac6:	e136      	b.n	8007d36 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	2101      	movs	r1, #1
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 8128 	beq.w	8007d30 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d003      	beq.n	8007af0 <HAL_GPIO_Init+0x38>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2b12      	cmp	r3, #18
 8007aee:	d125      	bne.n	8007b3c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	08da      	lsrs	r2, r3, #3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3208      	adds	r2, #8
 8007af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	220f      	movs	r2, #15
 8007b08:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4013      	ands	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f003 020f 	and.w	r2, r3, #15
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	fa02 f303 	lsl.w	r3, r2, r3
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	08da      	lsrs	r2, r3, #3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3208      	adds	r2, #8
 8007b36:	6979      	ldr	r1, [r7, #20]
 8007b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	2203      	movs	r2, #3
 8007b48:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4013      	ands	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f003 0203 	and.w	r2, r3, #3
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	fa02 f303 	lsl.w	r3, r2, r3
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d00b      	beq.n	8007b90 <HAL_GPIO_Init+0xd8>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d007      	beq.n	8007b90 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b84:	2b11      	cmp	r3, #17
 8007b86:	d003      	beq.n	8007b90 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b12      	cmp	r3, #18
 8007b8e:	d130      	bne.n	8007bf2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba0:	43db      	mvns	r3, r3
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	43db      	mvns	r3, r3
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	091b      	lsrs	r3, r3, #4
 8007bdc:	f003 0201 	and.w	r2, r3, #1
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	fa02 f303 	lsl.w	r3, r2, r3
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d017      	beq.n	8007c2a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	2203      	movs	r2, #3
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d07c      	beq.n	8007d30 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007c36:	4a47      	ldr	r2, [pc, #284]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	089b      	lsrs	r3, r3, #2
 8007c3c:	3318      	adds	r3, #24
 8007c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c42:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	220f      	movs	r2, #15
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	43db      	mvns	r3, r3
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	4013      	ands	r3, r2
 8007c58:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	0a9a      	lsrs	r2, r3, #10
 8007c5e:	4b3e      	ldr	r3, [pc, #248]	; (8007d58 <HAL_GPIO_Init+0x2a0>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	f002 0203 	and.w	r2, r2, #3
 8007c68:	00d2      	lsls	r2, r2, #3
 8007c6a:	4093      	lsls	r3, r2
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007c72:	4938      	ldr	r1, [pc, #224]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	089b      	lsrs	r3, r3, #2
 8007c78:	3318      	adds	r3, #24
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007c80:	4b34      	ldr	r3, [pc, #208]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	43db      	mvns	r3, r3
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8007ca4:	4a2b      	ldr	r2, [pc, #172]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007caa:	4b2a      	ldr	r3, [pc, #168]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	43db      	mvns	r3, r3
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8007cce:	4a21      	ldr	r2, [pc, #132]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007cd4:	4b1f      	ldr	r3, [pc, #124]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cda:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8007cfa:	4a16      	ldr	r2, [pc, #88]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8007d02:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d08:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4013      	ands	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8007d28:	4a0a      	ldr	r2, [pc, #40]	; (8007d54 <HAL_GPIO_Init+0x29c>)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	3301      	adds	r3, #1
 8007d34:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f47f aec1 	bne.w	8007ac8 <HAL_GPIO_Init+0x10>
  }
}
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	44022000 	.word	0x44022000
 8007d58:	002f7f7f 	.word	0x002f7f7f

08007d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	887b      	ldrh	r3, [r7, #2]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d74:	2301      	movs	r3, #1
 8007d76:	73fb      	strb	r3, [r7, #15]
 8007d78:	e001      	b.n	8007d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	807b      	strh	r3, [r7, #2]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d9c:	787b      	ldrb	r3, [r7, #1]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007da2:	887a      	ldrh	r2, [r7, #2]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007da8:	e002      	b.n	8007db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007daa:	887a      	ldrh	r2, [r7, #2]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <HAL_ICACHE_Enable+0x1c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a04      	ldr	r2, [pc, #16]	; (8007dd8 <HAL_ICACHE_Enable+0x1c>)
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	40030400 	.word	0x40030400

08007ddc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dde:	b08f      	sub	sp, #60	; 0x3c
 8007de0:	af0a      	add	r7, sp, #40	; 0x28
 8007de2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e0cd      	b.n	8007f8a <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7fd feea 	bl	8005bdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f00a fe89 	bl	8012b2c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]
 8007e1e:	e03e      	b.n	8007e9e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007e20:	7bfa      	ldrb	r2, [r7, #15]
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	440b      	add	r3, r1
 8007e2e:	333d      	adds	r3, #61	; 0x3d
 8007e30:	2201      	movs	r2, #1
 8007e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007e34:	7bfa      	ldrb	r2, [r7, #15]
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	440b      	add	r3, r1
 8007e42:	333c      	adds	r3, #60	; 0x3c
 8007e44:	7bfa      	ldrb	r2, [r7, #15]
 8007e46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007e48:	7bfa      	ldrb	r2, [r7, #15]
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	440b      	add	r3, r1
 8007e56:	333f      	adds	r3, #63	; 0x3f
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007e5c:	7bfa      	ldrb	r2, [r7, #15]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	440b      	add	r3, r1
 8007e6a:	334c      	adds	r3, #76	; 0x4c
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007e70:	7bfa      	ldrb	r2, [r7, #15]
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	440b      	add	r3, r1
 8007e7e:	3350      	adds	r3, #80	; 0x50
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007e84:	7bfa      	ldrb	r2, [r7, #15]
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	440b      	add	r3, r1
 8007e92:	3354      	adds	r3, #84	; 0x54
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	73fb      	strb	r3, [r7, #15]
 8007e9e:	7bfa      	ldrb	r2, [r7, #15]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d3bb      	bcc.n	8007e20 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
 8007eac:	e044      	b.n	8007f38 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007eae:	7bfa      	ldrb	r2, [r7, #15]
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	440b      	add	r3, r1
 8007ebc:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007ec4:	7bfa      	ldrb	r2, [r7, #15]
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	440b      	add	r3, r1
 8007ed2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ed6:	7bfa      	ldrb	r2, [r7, #15]
 8007ed8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007eda:	7bfa      	ldrb	r2, [r7, #15]
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	440b      	add	r3, r1
 8007ee8:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007ef0:	7bfa      	ldrb	r2, [r7, #15]
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	440b      	add	r3, r1
 8007efe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007f06:	7bfa      	ldrb	r2, [r7, #15]
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	440b      	add	r3, r1
 8007f14:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007f1c:	7bfa      	ldrb	r2, [r7, #15]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	440b      	add	r3, r1
 8007f2a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	3301      	adds	r3, #1
 8007f36:	73fb      	strb	r3, [r7, #15]
 8007f38:	7bfa      	ldrb	r2, [r7, #15]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d3b5      	bcc.n	8007eae <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	687e      	ldr	r6, [r7, #4]
 8007f4a:	466d      	mov	r5, sp
 8007f4c:	f106 0410 	add.w	r4, r6, #16
 8007f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f60:	1d33      	adds	r3, r6, #4
 8007f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f64:	6838      	ldr	r0, [r7, #0]
 8007f66:	f00a fe19 	bl	8012b9c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d102      	bne.n	8007f88 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f805 	bl	8007f92 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f92 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb4:	f043 0201 	orr.w	r2, r3, #1
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc0:	f043 0202 	orr.w	r2, r3, #2
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
	...

08007fd8 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	4a04      	ldr	r2, [pc, #16]	; (8007ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007fe2:	f043 0301 	orr.w	r3, r3, #1
 8007fe6:	6253      	str	r3, [r2, #36]	; 0x24
}
 8007fe8:	bf00      	nop
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	44020800 	.word	0x44020800

08007ff8 <HAL_PWR_DisableBkUpAccess>:
  *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
  *         and backup SRAM).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	4a04      	ldr	r2, [pc, #16]	; (8008014 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8008002:	f023 0301 	bic.w	r3, r3, #1
 8008006:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008008:	bf00      	nop
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	44020800 	.word	0x44020800

08008018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d102      	bne.n	800802c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	f000 bc28 	b.w	800887c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800802c:	4b94      	ldr	r3, [pc, #592]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	f003 0318 	and.w	r3, r3, #24
 8008034:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8008036:	4b92      	ldr	r3, [pc, #584]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	2b00      	cmp	r3, #0
 800804a:	d05b      	beq.n	8008104 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	2b08      	cmp	r3, #8
 8008050:	d005      	beq.n	800805e <HAL_RCC_OscConfig+0x46>
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	2b18      	cmp	r3, #24
 8008056:	d114      	bne.n	8008082 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d111      	bne.n	8008082 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f000 bc08 	b.w	800887c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800806c:	4b84      	ldr	r3, [pc, #528]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	041b      	lsls	r3, r3, #16
 800807a:	4981      	ldr	r1, [pc, #516]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 800807c:	4313      	orrs	r3, r2
 800807e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8008080:	e040      	b.n	8008104 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d023      	beq.n	80080d2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800808a:	4b7d      	ldr	r3, [pc, #500]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a7c      	ldr	r2, [pc, #496]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008096:	f7fe f88f 	bl	80061b8 <HAL_GetTick>
 800809a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800809e:	f7fe f88b 	bl	80061b8 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e3e5      	b.n	800887c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80080b0:	4b73      	ldr	r3, [pc, #460]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d0f0      	beq.n	800809e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80080bc:	4b70      	ldr	r3, [pc, #448]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	041b      	lsls	r3, r3, #16
 80080ca:	496d      	ldr	r1, [pc, #436]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	618b      	str	r3, [r1, #24]
 80080d0:	e018      	b.n	8008104 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080d2:	4b6b      	ldr	r3, [pc, #428]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a6a      	ldr	r2, [pc, #424]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80080d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080de:	f7fe f86b 	bl	80061b8 <HAL_GetTick>
 80080e2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80080e4:	e008      	b.n	80080f8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80080e6:	f7fe f867 	bl	80061b8 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d901      	bls.n	80080f8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e3c1      	b.n	800887c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80080f8:	4b61      	ldr	r3, [pc, #388]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f0      	bne.n	80080e6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 80a0 	beq.w	8008252 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	2b10      	cmp	r3, #16
 8008116:	d005      	beq.n	8008124 <HAL_RCC_OscConfig+0x10c>
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	2b18      	cmp	r3, #24
 800811c:	d109      	bne.n	8008132 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	2b03      	cmp	r3, #3
 8008122:	d106      	bne.n	8008132 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f040 8092 	bne.w	8008252 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e3a4      	b.n	800887c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800813a:	d106      	bne.n	800814a <HAL_RCC_OscConfig+0x132>
 800813c:	4b50      	ldr	r3, [pc, #320]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a4f      	ldr	r2, [pc, #316]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	e058      	b.n	80081fc <HAL_RCC_OscConfig+0x1e4>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d112      	bne.n	8008178 <HAL_RCC_OscConfig+0x160>
 8008152:	4b4b      	ldr	r3, [pc, #300]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a4a      	ldr	r2, [pc, #296]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	4b48      	ldr	r3, [pc, #288]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a47      	ldr	r2, [pc, #284]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008164:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	4b45      	ldr	r3, [pc, #276]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a44      	ldr	r2, [pc, #272]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	e041      	b.n	80081fc <HAL_RCC_OscConfig+0x1e4>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008180:	d112      	bne.n	80081a8 <HAL_RCC_OscConfig+0x190>
 8008182:	4b3f      	ldr	r3, [pc, #252]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a3e      	ldr	r2, [pc, #248]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	4b3c      	ldr	r3, [pc, #240]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a3b      	ldr	r2, [pc, #236]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008194:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	4b39      	ldr	r3, [pc, #228]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a38      	ldr	r2, [pc, #224]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	e029      	b.n	80081fc <HAL_RCC_OscConfig+0x1e4>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80081b0:	d112      	bne.n	80081d8 <HAL_RCC_OscConfig+0x1c0>
 80081b2:	4b33      	ldr	r3, [pc, #204]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a32      	ldr	r2, [pc, #200]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	4b30      	ldr	r3, [pc, #192]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a2f      	ldr	r2, [pc, #188]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	4b2d      	ldr	r3, [pc, #180]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2c      	ldr	r2, [pc, #176]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	e011      	b.n	80081fc <HAL_RCC_OscConfig+0x1e4>
 80081d8:	4b29      	ldr	r3, [pc, #164]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a28      	ldr	r2, [pc, #160]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	4b26      	ldr	r3, [pc, #152]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a25      	ldr	r2, [pc, #148]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	4b23      	ldr	r3, [pc, #140]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a22      	ldr	r2, [pc, #136]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 80081f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d013      	beq.n	800822c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008204:	f7fd ffd8 	bl	80061b8 <HAL_GetTick>
 8008208:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800820a:	e008      	b.n	800821e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800820c:	f7fd ffd4 	bl	80061b8 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b64      	cmp	r3, #100	; 0x64
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e32e      	b.n	800887c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800821e:	4b18      	ldr	r3, [pc, #96]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0f0      	beq.n	800820c <HAL_RCC_OscConfig+0x1f4>
 800822a:	e012      	b.n	8008252 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822c:	f7fd ffc4 	bl	80061b8 <HAL_GetTick>
 8008230:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008232:	e008      	b.n	8008246 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8008234:	f7fd ffc0 	bl	80061b8 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b64      	cmp	r3, #100	; 0x64
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e31a      	b.n	800887c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008246:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <HAL_RCC_OscConfig+0x268>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1f0      	bne.n	8008234 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 809a 	beq.w	8008394 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d005      	beq.n	8008272 <HAL_RCC_OscConfig+0x25a>
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	2b18      	cmp	r3, #24
 800826a:	d149      	bne.n	8008300 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d146      	bne.n	8008300 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d104      	bne.n	8008284 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e2fe      	b.n	800887c <HAL_RCC_OscConfig+0x864>
 800827e:	bf00      	nop
 8008280:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d11c      	bne.n	80082c4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800828a:	4b9a      	ldr	r3, [pc, #616]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0218 	and.w	r2, r3, #24
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	429a      	cmp	r2, r3
 8008298:	d014      	beq.n	80082c4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800829a:	4b96      	ldr	r3, [pc, #600]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f023 0218 	bic.w	r2, r3, #24
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	4993      	ldr	r1, [pc, #588]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80082ac:	f000 fdd0 	bl	8008e50 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80082b0:	4b91      	ldr	r3, [pc, #580]	; (80084f8 <HAL_RCC_OscConfig+0x4e0>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fd ff35 	bl	8006124 <HAL_InitTick>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e2db      	b.n	800887c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c4:	f7fd ff78 	bl	80061b8 <HAL_GetTick>
 80082c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082ca:	e008      	b.n	80082de <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80082cc:	f7fd ff74 	bl	80061b8 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d901      	bls.n	80082de <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e2ce      	b.n	800887c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082de:	4b85      	ldr	r3, [pc, #532]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0f0      	beq.n	80082cc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80082ea:	4b82      	ldr	r3, [pc, #520]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	497e      	ldr	r1, [pc, #504]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80082fe:	e049      	b.n	8008394 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d02c      	beq.n	8008362 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8008308:	4b7a      	ldr	r3, [pc, #488]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f023 0218 	bic.w	r2, r3, #24
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	4977      	ldr	r1, [pc, #476]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 8008316:	4313      	orrs	r3, r2
 8008318:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800831a:	4b76      	ldr	r3, [pc, #472]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a75      	ldr	r2, [pc, #468]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 8008320:	f043 0301 	orr.w	r3, r3, #1
 8008324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008326:	f7fd ff47 	bl	80061b8 <HAL_GetTick>
 800832a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800832c:	e008      	b.n	8008340 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800832e:	f7fd ff43 	bl	80061b8 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e29d      	b.n	800887c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008340:	4b6c      	ldr	r3, [pc, #432]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0f0      	beq.n	800832e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800834c:	4b69      	ldr	r3, [pc, #420]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	041b      	lsls	r3, r3, #16
 800835a:	4966      	ldr	r1, [pc, #408]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800835c:	4313      	orrs	r3, r2
 800835e:	610b      	str	r3, [r1, #16]
 8008360:	e018      	b.n	8008394 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008362:	4b64      	ldr	r3, [pc, #400]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a63      	ldr	r2, [pc, #396]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 8008368:	f023 0301 	bic.w	r3, r3, #1
 800836c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836e:	f7fd ff23 	bl	80061b8 <HAL_GetTick>
 8008372:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008374:	e008      	b.n	8008388 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8008376:	f7fd ff1f 	bl	80061b8 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d901      	bls.n	8008388 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e279      	b.n	800887c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008388:	4b5a      	ldr	r3, [pc, #360]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f0      	bne.n	8008376 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b00      	cmp	r3, #0
 800839e:	d03c      	beq.n	800841a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01c      	beq.n	80083e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083a8:	4b52      	ldr	r3, [pc, #328]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80083aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083ae:	4a51      	ldr	r2, [pc, #324]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80083b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b8:	f7fd fefe 	bl	80061b8 <HAL_GetTick>
 80083bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80083be:	e008      	b.n	80083d2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80083c0:	f7fd fefa 	bl	80061b8 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e254      	b.n	800887c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80083d2:	4b48      	ldr	r3, [pc, #288]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80083d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0ef      	beq.n	80083c0 <HAL_RCC_OscConfig+0x3a8>
 80083e0:	e01b      	b.n	800841a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083e2:	4b44      	ldr	r3, [pc, #272]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80083e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083e8:	4a42      	ldr	r2, [pc, #264]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80083ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f2:	f7fd fee1 	bl	80061b8 <HAL_GetTick>
 80083f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80083fa:	f7fd fedd 	bl	80061b8 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e237      	b.n	800887c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800840c:	4b39      	ldr	r3, [pc, #228]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800840e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1ef      	bne.n	80083fa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0304 	and.w	r3, r3, #4
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 80d2 	beq.w	80085cc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008428:	4b34      	ldr	r3, [pc, #208]	; (80084fc <HAL_RCC_OscConfig+0x4e4>)
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b00      	cmp	r3, #0
 8008432:	d118      	bne.n	8008466 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8008434:	4b31      	ldr	r3, [pc, #196]	; (80084fc <HAL_RCC_OscConfig+0x4e4>)
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	4a30      	ldr	r2, [pc, #192]	; (80084fc <HAL_RCC_OscConfig+0x4e4>)
 800843a:	f043 0301 	orr.w	r3, r3, #1
 800843e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008440:	f7fd feba 	bl	80061b8 <HAL_GetTick>
 8008444:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008448:	f7fd feb6 	bl	80061b8 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e210      	b.n	800887c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800845a:	4b28      	ldr	r3, [pc, #160]	; (80084fc <HAL_RCC_OscConfig+0x4e4>)
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0f0      	beq.n	8008448 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d108      	bne.n	8008480 <HAL_RCC_OscConfig+0x468>
 800846e:	4b21      	ldr	r3, [pc, #132]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 8008470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008474:	4a1f      	ldr	r2, [pc, #124]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 8008476:	f043 0301 	orr.w	r3, r3, #1
 800847a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800847e:	e074      	b.n	800856a <HAL_RCC_OscConfig+0x552>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d118      	bne.n	80084ba <HAL_RCC_OscConfig+0x4a2>
 8008488:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800848a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800848e:	4a19      	ldr	r2, [pc, #100]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 8008490:	f023 0301 	bic.w	r3, r3, #1
 8008494:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008498:	4b16      	ldr	r3, [pc, #88]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 800849a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800849e:	4a15      	ldr	r2, [pc, #84]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80084a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80084a8:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80084aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084ae:	4a11      	ldr	r2, [pc, #68]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80084b0:	f023 0304 	bic.w	r3, r3, #4
 80084b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80084b8:	e057      	b.n	800856a <HAL_RCC_OscConfig+0x552>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	2b05      	cmp	r3, #5
 80084c0:	d11e      	bne.n	8008500 <HAL_RCC_OscConfig+0x4e8>
 80084c2:	4b0c      	ldr	r3, [pc, #48]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80084c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084c8:	4a0a      	ldr	r2, [pc, #40]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80084ca:	f043 0304 	orr.w	r3, r3, #4
 80084ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80084d2:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80084d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084d8:	4a06      	ldr	r2, [pc, #24]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80084da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80084e2:	4b04      	ldr	r3, [pc, #16]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80084e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084e8:	4a02      	ldr	r2, [pc, #8]	; (80084f4 <HAL_RCC_OscConfig+0x4dc>)
 80084ea:	f043 0301 	orr.w	r3, r3, #1
 80084ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80084f2:	e03a      	b.n	800856a <HAL_RCC_OscConfig+0x552>
 80084f4:	44020c00 	.word	0x44020c00
 80084f8:	20000064 	.word	0x20000064
 80084fc:	44020800 	.word	0x44020800
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b85      	cmp	r3, #133	; 0x85
 8008506:	d118      	bne.n	800853a <HAL_RCC_OscConfig+0x522>
 8008508:	4ba2      	ldr	r3, [pc, #648]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800850a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800850e:	4aa1      	ldr	r2, [pc, #644]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008510:	f043 0304 	orr.w	r3, r3, #4
 8008514:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008518:	4b9e      	ldr	r3, [pc, #632]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800851a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800851e:	4a9d      	ldr	r2, [pc, #628]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008524:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008528:	4b9a      	ldr	r3, [pc, #616]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800852a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800852e:	4a99      	ldr	r2, [pc, #612]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008530:	f043 0301 	orr.w	r3, r3, #1
 8008534:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008538:	e017      	b.n	800856a <HAL_RCC_OscConfig+0x552>
 800853a:	4b96      	ldr	r3, [pc, #600]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800853c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008540:	4a94      	ldr	r2, [pc, #592]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008542:	f023 0301 	bic.w	r3, r3, #1
 8008546:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800854a:	4b92      	ldr	r3, [pc, #584]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800854c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008550:	4a90      	ldr	r2, [pc, #576]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008552:	f023 0304 	bic.w	r3, r3, #4
 8008556:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800855a:	4b8e      	ldr	r3, [pc, #568]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800855c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008560:	4a8c      	ldr	r2, [pc, #560]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008566:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d016      	beq.n	80085a0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008572:	f7fd fe21 	bl	80061b8 <HAL_GetTick>
 8008576:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008578:	e00a      	b.n	8008590 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800857a:	f7fd fe1d 	bl	80061b8 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	f241 3288 	movw	r2, #5000	; 0x1388
 8008588:	4293      	cmp	r3, r2
 800858a:	d901      	bls.n	8008590 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e175      	b.n	800887c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008590:	4b80      	ldr	r3, [pc, #512]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0ed      	beq.n	800857a <HAL_RCC_OscConfig+0x562>
 800859e:	e015      	b.n	80085cc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a0:	f7fd fe0a 	bl	80061b8 <HAL_GetTick>
 80085a4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80085a6:	e00a      	b.n	80085be <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085a8:	f7fd fe06 	bl	80061b8 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e15e      	b.n	800887c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80085be:	4b75      	ldr	r3, [pc, #468]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 80085c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1ed      	bne.n	80085a8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0320 	and.w	r3, r3, #32
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d036      	beq.n	8008646 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d019      	beq.n	8008614 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085e0:	4b6c      	ldr	r3, [pc, #432]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a6b      	ldr	r2, [pc, #428]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 80085e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ec:	f7fd fde4 	bl	80061b8 <HAL_GetTick>
 80085f0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80085f2:	e008      	b.n	8008606 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80085f4:	f7fd fde0 	bl	80061b8 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d901      	bls.n	8008606 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e13a      	b.n	800887c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008606:	4b63      	ldr	r3, [pc, #396]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0f0      	beq.n	80085f4 <HAL_RCC_OscConfig+0x5dc>
 8008612:	e018      	b.n	8008646 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008614:	4b5f      	ldr	r3, [pc, #380]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a5e      	ldr	r2, [pc, #376]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800861a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800861e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008620:	f7fd fdca 	bl	80061b8 <HAL_GetTick>
 8008624:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008626:	e008      	b.n	800863a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8008628:	f7fd fdc6 	bl	80061b8 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b02      	cmp	r3, #2
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e120      	b.n	800887c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800863a:	4b56      	ldr	r3, [pc, #344]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1f0      	bne.n	8008628 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 8115 	beq.w	800887a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	2b18      	cmp	r3, #24
 8008654:	f000 80af 	beq.w	80087b6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865c:	2b02      	cmp	r3, #2
 800865e:	f040 8086 	bne.w	800876e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8008662:	4b4c      	ldr	r3, [pc, #304]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a4b      	ldr	r2, [pc, #300]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008668:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800866c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866e:	f7fd fda3 	bl	80061b8 <HAL_GetTick>
 8008672:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008674:	e008      	b.n	8008688 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8008676:	f7fd fd9f 	bl	80061b8 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e0f9      	b.n	800887c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008688:	4b42      	ldr	r3, [pc, #264]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1f0      	bne.n	8008676 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8008694:	4b3f      	ldr	r3, [pc, #252]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008698:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800869c:	f023 0303 	bic.w	r3, r3, #3
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80086a8:	0212      	lsls	r2, r2, #8
 80086aa:	430a      	orrs	r2, r1
 80086ac:	4939      	ldr	r1, [pc, #228]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	628b      	str	r3, [r1, #40]	; 0x28
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b6:	3b01      	subs	r3, #1
 80086b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	3b01      	subs	r3, #1
 80086c2:	025b      	lsls	r3, r3, #9
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	431a      	orrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086cc:	3b01      	subs	r3, #1
 80086ce:	041b      	lsls	r3, r3, #16
 80086d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086d4:	431a      	orrs	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	3b01      	subs	r3, #1
 80086dc:	061b      	lsls	r3, r3, #24
 80086de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086e2:	492c      	ldr	r1, [pc, #176]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80086e8:	4b2a      	ldr	r3, [pc, #168]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	4a29      	ldr	r2, [pc, #164]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 80086ee:	f023 0310 	bic.w	r3, r3, #16
 80086f2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f8:	4a26      	ldr	r2, [pc, #152]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80086fe:	4b25      	ldr	r3, [pc, #148]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	4a24      	ldr	r2, [pc, #144]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008704:	f043 0310 	orr.w	r3, r3, #16
 8008708:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800870a:	4b22      	ldr	r3, [pc, #136]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	f023 020c 	bic.w	r2, r3, #12
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008716:	491f      	ldr	r1, [pc, #124]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008718:	4313      	orrs	r3, r2
 800871a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800871c:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008720:	f023 0220 	bic.w	r2, r3, #32
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008728:	491a      	ldr	r1, [pc, #104]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800872a:	4313      	orrs	r3, r2
 800872c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800872e:	4b19      	ldr	r3, [pc, #100]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008732:	4a18      	ldr	r2, [pc, #96]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008738:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a15      	ldr	r2, [pc, #84]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008746:	f7fd fd37 	bl	80061b8 <HAL_GetTick>
 800874a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800874c:	e008      	b.n	8008760 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800874e:	f7fd fd33 	bl	80061b8 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d901      	bls.n	8008760 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e08d      	b.n	800887c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008760:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0f0      	beq.n	800874e <HAL_RCC_OscConfig+0x736>
 800876c:	e085      	b.n	800887a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800876e:	4b09      	ldr	r3, [pc, #36]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a08      	ldr	r2, [pc, #32]	; (8008794 <HAL_RCC_OscConfig+0x77c>)
 8008774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800877a:	f7fd fd1d 	bl	80061b8 <HAL_GetTick>
 800877e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008780:	e00a      	b.n	8008798 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8008782:	f7fd fd19 	bl	80061b8 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d903      	bls.n	8008798 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e073      	b.n	800887c <HAL_RCC_OscConfig+0x864>
 8008794:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008798:	4b3a      	ldr	r3, [pc, #232]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1ee      	bne.n	8008782 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80087a4:	4b37      	ldr	r3, [pc, #220]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 80087a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a8:	4a36      	ldr	r2, [pc, #216]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 80087aa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80087ae:	f023 0303 	bic.w	r3, r3, #3
 80087b2:	6293      	str	r3, [r2, #40]	; 0x28
 80087b4:	e061      	b.n	800887a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80087b6:	4b33      	ldr	r3, [pc, #204]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 80087b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80087bc:	4b31      	ldr	r3, [pc, #196]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 80087be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d031      	beq.n	800882e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f003 0203 	and.w	r2, r3, #3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d12a      	bne.n	800882e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d122      	bne.n	800882e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d11a      	bne.n	800882e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	0a5b      	lsrs	r3, r3, #9
 80087fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8008806:	429a      	cmp	r2, r3
 8008808:	d111      	bne.n	800882e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	0c1b      	lsrs	r3, r3, #16
 800880e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008816:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8008818:	429a      	cmp	r2, r3
 800881a:	d108      	bne.n	800882e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	0e1b      	lsrs	r3, r3, #24
 8008820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008828:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800882a:	429a      	cmp	r2, r3
 800882c:	d001      	beq.n	8008832 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e024      	b.n	800887c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008832:	4b14      	ldr	r3, [pc, #80]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	08db      	lsrs	r3, r3, #3
 8008838:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008840:	429a      	cmp	r2, r3
 8008842:	d01a      	beq.n	800887a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 8008846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008848:	4a0e      	ldr	r2, [pc, #56]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 800884a:	f023 0310 	bic.w	r3, r3, #16
 800884e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fd fcb2 	bl	80061b8 <HAL_GetTick>
 8008854:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8008856:	bf00      	nop
 8008858:	f7fd fcae 	bl	80061b8 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	4293      	cmp	r3, r2
 8008862:	d0f9      	beq.n	8008858 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008868:	4a06      	ldr	r2, [pc, #24]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	4a04      	ldr	r2, [pc, #16]	; (8008884 <HAL_RCC_OscConfig+0x86c>)
 8008874:	f043 0310 	orr.w	r3, r3, #16
 8008878:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	44020c00 	.word	0x44020c00

08008888 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e19e      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800889c:	4b83      	ldr	r3, [pc, #524]	; (8008aac <HAL_RCC_ClockConfig+0x224>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d910      	bls.n	80088cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088aa:	4b80      	ldr	r3, [pc, #512]	; (8008aac <HAL_RCC_ClockConfig+0x224>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f023 020f 	bic.w	r2, r3, #15
 80088b2:	497e      	ldr	r1, [pc, #504]	; (8008aac <HAL_RCC_ClockConfig+0x224>)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ba:	4b7c      	ldr	r3, [pc, #496]	; (8008aac <HAL_RCC_ClockConfig+0x224>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d001      	beq.n	80088cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e186      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0310 	and.w	r3, r3, #16
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d012      	beq.n	80088fe <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	695a      	ldr	r2, [r3, #20]
 80088dc:	4b74      	ldr	r3, [pc, #464]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	0a1b      	lsrs	r3, r3, #8
 80088e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d909      	bls.n	80088fe <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80088ea:	4b71      	ldr	r3, [pc, #452]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	021b      	lsls	r3, r3, #8
 80088f8:	496d      	ldr	r1, [pc, #436]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	2b00      	cmp	r3, #0
 8008908:	d012      	beq.n	8008930 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	4b68      	ldr	r3, [pc, #416]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	091b      	lsrs	r3, r3, #4
 8008914:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008918:	429a      	cmp	r2, r3
 800891a:	d909      	bls.n	8008930 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800891c:	4b64      	ldr	r3, [pc, #400]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	011b      	lsls	r3, r3, #4
 800892a:	4961      	ldr	r1, [pc, #388]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 800892c:	4313      	orrs	r3, r2
 800892e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d010      	beq.n	800895e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68da      	ldr	r2, [r3, #12]
 8008940:	4b5b      	ldr	r3, [pc, #364]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008948:	429a      	cmp	r2, r3
 800894a:	d908      	bls.n	800895e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800894c:	4b58      	ldr	r3, [pc, #352]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	4955      	ldr	r1, [pc, #340]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 800895a:	4313      	orrs	r3, r2
 800895c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d010      	beq.n	800898c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689a      	ldr	r2, [r3, #8]
 800896e:	4b50      	ldr	r3, [pc, #320]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	f003 030f 	and.w	r3, r3, #15
 8008976:	429a      	cmp	r2, r3
 8008978:	d908      	bls.n	800898c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800897a:	4b4d      	ldr	r3, [pc, #308]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f023 020f 	bic.w	r2, r3, #15
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	494a      	ldr	r1, [pc, #296]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 8008988:	4313      	orrs	r3, r2
 800898a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8093 	beq.w	8008ac0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d107      	bne.n	80089b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80089a2:	4b43      	ldr	r3, [pc, #268]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d121      	bne.n	80089f2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e113      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d107      	bne.n	80089ca <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089ba:	4b3d      	ldr	r3, [pc, #244]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d115      	bne.n	80089f2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e107      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d107      	bne.n	80089e2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80089d2:	4b37      	ldr	r3, [pc, #220]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d109      	bne.n	80089f2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e0fb      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089e2:	4b33      	ldr	r3, [pc, #204]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e0f3      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80089f2:	4b2f      	ldr	r3, [pc, #188]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f023 0203 	bic.w	r2, r3, #3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	492c      	ldr	r1, [pc, #176]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a04:	f7fd fbd8 	bl	80061b8 <HAL_GetTick>
 8008a08:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d112      	bne.n	8008a38 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a12:	e00a      	b.n	8008a2a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008a14:	f7fd fbd0 	bl	80061b8 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e0d7      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a2a:	4b21      	ldr	r3, [pc, #132]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	f003 0318 	and.w	r3, r3, #24
 8008a32:	2b18      	cmp	r3, #24
 8008a34:	d1ee      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x18c>
 8008a36:	e043      	b.n	8008ac0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d112      	bne.n	8008a66 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a40:	e00a      	b.n	8008a58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008a42:	f7fd fbb9 	bl	80061b8 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d901      	bls.n	8008a58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e0c0      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a58:	4b15      	ldr	r3, [pc, #84]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	f003 0318 	and.w	r3, r3, #24
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d1ee      	bne.n	8008a42 <HAL_RCC_ClockConfig+0x1ba>
 8008a64:	e02c      	b.n	8008ac0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d122      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8008a6e:	e00a      	b.n	8008a86 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008a70:	f7fd fba2 	bl	80061b8 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e0a9      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <HAL_RCC_ClockConfig+0x228>)
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	f003 0318 	and.w	r3, r3, #24
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	d1ee      	bne.n	8008a70 <HAL_RCC_ClockConfig+0x1e8>
 8008a92:	e015      	b.n	8008ac0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008a94:	f7fd fb90 	bl	80061b8 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d906      	bls.n	8008ab4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e097      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
 8008aaa:	bf00      	nop
 8008aac:	40022000 	.word	0x40022000
 8008ab0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ab4:	4b4b      	ldr	r3, [pc, #300]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	f003 0318 	and.w	r3, r3, #24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e9      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d010      	beq.n	8008aee <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	4b44      	ldr	r3, [pc, #272]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	f003 030f 	and.w	r3, r3, #15
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d208      	bcs.n	8008aee <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8008adc:	4b41      	ldr	r3, [pc, #260]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	f023 020f 	bic.w	r2, r3, #15
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	493e      	ldr	r1, [pc, #248]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008aee:	4b3e      	ldr	r3, [pc, #248]	; (8008be8 <HAL_RCC_ClockConfig+0x360>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d210      	bcs.n	8008b1e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008afc:	4b3a      	ldr	r3, [pc, #232]	; (8008be8 <HAL_RCC_ClockConfig+0x360>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f023 020f 	bic.w	r2, r3, #15
 8008b04:	4938      	ldr	r1, [pc, #224]	; (8008be8 <HAL_RCC_ClockConfig+0x360>)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b0c:	4b36      	ldr	r3, [pc, #216]	; (8008be8 <HAL_RCC_ClockConfig+0x360>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d001      	beq.n	8008b1e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e05d      	b.n	8008bda <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0304 	and.w	r3, r3, #4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d010      	beq.n	8008b4c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	4b2d      	ldr	r3, [pc, #180]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d208      	bcs.n	8008b4c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8008b3a:	4b2a      	ldr	r3, [pc, #168]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	4927      	ldr	r1, [pc, #156]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0308 	and.w	r3, r3, #8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d012      	beq.n	8008b7e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	691a      	ldr	r2, [r3, #16]
 8008b5c:	4b21      	ldr	r3, [pc, #132]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	091b      	lsrs	r3, r3, #4
 8008b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d209      	bcs.n	8008b7e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8008b6a:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	491a      	ldr	r1, [pc, #104]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0310 	and.w	r3, r3, #16
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d012      	beq.n	8008bb0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	695a      	ldr	r2, [r3, #20]
 8008b8e:	4b15      	ldr	r3, [pc, #84]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d209      	bcs.n	8008bb0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8008b9c:	4b11      	ldr	r3, [pc, #68]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	021b      	lsls	r3, r3, #8
 8008baa:	490e      	ldr	r1, [pc, #56]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008bb0:	f000 f822 	bl	8008bf8 <HAL_RCC_GetSysClockFreq>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <HAL_RCC_ClockConfig+0x35c>)
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	f003 030f 	and.w	r3, r3, #15
 8008bbe:	490b      	ldr	r1, [pc, #44]	; (8008bec <HAL_RCC_ClockConfig+0x364>)
 8008bc0:	5ccb      	ldrb	r3, [r1, r3]
 8008bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc6:	4a0a      	ldr	r2, [pc, #40]	; (8008bf0 <HAL_RCC_ClockConfig+0x368>)
 8008bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008bca:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <HAL_RCC_ClockConfig+0x36c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fd faa8 	bl	8006124 <HAL_InitTick>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8008bd8:	7afb      	ldrb	r3, [r7, #11]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	44020c00 	.word	0x44020c00
 8008be8:	40022000 	.word	0x40022000
 8008bec:	08017600 	.word	0x08017600
 8008bf0:	20000060 	.word	0x20000060
 8008bf4:	20000064 	.word	0x20000064

08008bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b089      	sub	sp, #36	; 0x24
 8008bfc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8008bfe:	4b8c      	ldr	r3, [pc, #560]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	f003 0318 	and.w	r3, r3, #24
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d102      	bne.n	8008c10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008c0a:	4b8a      	ldr	r3, [pc, #552]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x23c>)
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e107      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c10:	4b87      	ldr	r3, [pc, #540]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	f003 0318 	and.w	r3, r3, #24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d112      	bne.n	8008c42 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8008c1c:	4b84      	ldr	r3, [pc, #528]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0320 	and.w	r3, r3, #32
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d009      	beq.n	8008c3c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c28:	4b81      	ldr	r3, [pc, #516]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	08db      	lsrs	r3, r3, #3
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	4a81      	ldr	r2, [pc, #516]	; (8008e38 <HAL_RCC_GetSysClockFreq+0x240>)
 8008c34:	fa22 f303 	lsr.w	r3, r2, r3
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	e0f1      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8008c3c:	4b7e      	ldr	r3, [pc, #504]	; (8008e38 <HAL_RCC_GetSysClockFreq+0x240>)
 8008c3e:	61fb      	str	r3, [r7, #28]
 8008c40:	e0ee      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c42:	4b7b      	ldr	r3, [pc, #492]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	f003 0318 	and.w	r3, r3, #24
 8008c4a:	2b10      	cmp	r3, #16
 8008c4c:	d102      	bne.n	8008c54 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008c4e:	4b7b      	ldr	r3, [pc, #492]	; (8008e3c <HAL_RCC_GetSysClockFreq+0x244>)
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	e0e5      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c54:	4b76      	ldr	r3, [pc, #472]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	f003 0318 	and.w	r3, r3, #24
 8008c5c:	2b18      	cmp	r3, #24
 8008c5e:	f040 80dd 	bne.w	8008e1c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008c62:	4b73      	ldr	r3, [pc, #460]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008c6c:	4b70      	ldr	r3, [pc, #448]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c70:	0a1b      	lsrs	r3, r3, #8
 8008c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008c78:	4b6d      	ldr	r3, [pc, #436]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7c:	091b      	lsrs	r3, r3, #4
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008c84:	4b6a      	ldr	r3, [pc, #424]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8008c88:	08db      	lsrs	r3, r3, #3
 8008c8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	fb02 f303 	mul.w	r3, r2, r3
 8008c94:	ee07 3a90 	vmov	s15, r3
 8008c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 80b7 	beq.w	8008e16 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d003      	beq.n	8008cb6 <HAL_RCC_GetSysClockFreq+0xbe>
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d056      	beq.n	8008d62 <HAL_RCC_GetSysClockFreq+0x16a>
 8008cb4:	e077      	b.n	8008da6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8008cb6:	4b5e      	ldr	r3, [pc, #376]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d02d      	beq.n	8008d1e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cc2:	4b5b      	ldr	r3, [pc, #364]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	08db      	lsrs	r3, r3, #3
 8008cc8:	f003 0303 	and.w	r3, r3, #3
 8008ccc:	4a5a      	ldr	r2, [pc, #360]	; (8008e38 <HAL_RCC_GetSysClockFreq+0x240>)
 8008cce:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	ee07 3a90 	vmov	s15, r3
 8008ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cec:	4b50      	ldr	r3, [pc, #320]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf4:	ee07 3a90 	vmov	s15, r3
 8008cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d00:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008e40 <HAL_RCC_GetSysClockFreq+0x248>
 8008d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d18:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8008d1c:	e065      	b.n	8008dea <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	ee07 3a90 	vmov	s15, r3
 8008d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d28:	eddf 6a46 	vldr	s13, [pc, #280]	; 8008e44 <HAL_RCC_GetSysClockFreq+0x24c>
 8008d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d30:	4b3f      	ldr	r3, [pc, #252]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d38:	ee07 3a90 	vmov	s15, r3
 8008d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d40:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d44:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008e40 <HAL_RCC_GetSysClockFreq+0x248>
 8008d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008d60:	e043      	b.n	8008dea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008e48 <HAL_RCC_GetSysClockFreq+0x250>
 8008d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d74:	4b2e      	ldr	r3, [pc, #184]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d88:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008e40 <HAL_RCC_GetSysClockFreq+0x248>
 8008d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8008da4:	e021      	b.n	8008dea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	ee07 3a90 	vmov	s15, r3
 8008dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db0:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008e4c <HAL_RCC_GetSysClockFreq+0x254>
 8008db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db8:	4b1d      	ldr	r3, [pc, #116]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dcc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008e40 <HAL_RCC_GetSysClockFreq+0x248>
 8008dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008de8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8008dea:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x238>)
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	0a5b      	lsrs	r3, r3, #9
 8008df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df4:	3301      	adds	r3, #1
 8008df6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e02:	edd7 6a06 	vldr	s13, [r7, #24]
 8008e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e0e:	ee17 3a90 	vmov	r3, s15
 8008e12:	61fb      	str	r3, [r7, #28]
 8008e14:	e004      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	61fb      	str	r3, [r7, #28]
 8008e1a:	e001      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8008e1c:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <HAL_RCC_GetSysClockFreq+0x240>)
 8008e1e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8008e20:	69fb      	ldr	r3, [r7, #28]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3724      	adds	r7, #36	; 0x24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	44020c00 	.word	0x44020c00
 8008e34:	003d0900 	.word	0x003d0900
 8008e38:	03d09000 	.word	0x03d09000
 8008e3c:	02faf080 	.word	0x02faf080
 8008e40:	46000000 	.word	0x46000000
 8008e44:	4c742400 	.word	0x4c742400
 8008e48:	4c3ebc20 	.word	0x4c3ebc20
 8008e4c:	4a742400 	.word	0x4a742400

08008e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008e54:	f7ff fed0 	bl	8008bf8 <HAL_RCC_GetSysClockFreq>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	4b08      	ldr	r3, [pc, #32]	; (8008e7c <HAL_RCC_GetHCLKFreq+0x2c>)
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008e5e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008e62:	4907      	ldr	r1, [pc, #28]	; (8008e80 <HAL_RCC_GetHCLKFreq+0x30>)
 8008e64:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008e66:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6e:	4a05      	ldr	r2, [pc, #20]	; (8008e84 <HAL_RCC_GetHCLKFreq+0x34>)
 8008e70:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8008e72:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <HAL_RCC_GetHCLKFreq+0x34>)
 8008e74:	681b      	ldr	r3, [r3, #0]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	44020c00 	.word	0x44020c00
 8008e80:	08017600 	.word	0x08017600
 8008e84:	20000060 	.word	0x20000060

08008e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8008e8c:	f7ff ffe0 	bl	8008e50 <HAL_RCC_GetHCLKFreq>
 8008e90:	4602      	mov	r2, r0
 8008e92:	4b06      	ldr	r3, [pc, #24]	; (8008eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	091b      	lsrs	r3, r3, #4
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	4904      	ldr	r1, [pc, #16]	; (8008eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ea0:	f003 031f 	and.w	r3, r3, #31
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	44020c00 	.word	0x44020c00
 8008eb0:	08017610 	.word	0x08017610

08008eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8008eb8:	f7ff ffca 	bl	8008e50 <HAL_RCC_GetHCLKFreq>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	0a1b      	lsrs	r3, r3, #8
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	4904      	ldr	r1, [pc, #16]	; (8008edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008eca:	5ccb      	ldrb	r3, [r1, r3]
 8008ecc:	f003 031f 	and.w	r3, r3, #31
 8008ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	44020c00 	.word	0x44020c00
 8008edc:	08017610 	.word	0x08017610

08008ee0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8008ee4:	f7ff ffb4 	bl	8008e50 <HAL_RCC_GetHCLKFreq>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	0b1b      	lsrs	r3, r3, #12
 8008ef0:	f003 0307 	and.w	r3, r3, #7
 8008ef4:	4904      	ldr	r1, [pc, #16]	; (8008f08 <HAL_RCC_GetPCLK3Freq+0x28>)
 8008ef6:	5ccb      	ldrb	r3, [r1, r3]
 8008ef8:	f003 031f 	and.w	r3, r3, #31
 8008efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	44020c00 	.word	0x44020c00
 8008f08:	08017610 	.word	0x08017610

08008f0c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f10:	b0d8      	sub	sp, #352	; 0x160
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8008f30:	2500      	movs	r5, #0
 8008f32:	ea54 0305 	orrs.w	r3, r4, r5
 8008f36:	d00b      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8008f38:	4bcd      	ldr	r3, [pc, #820]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008f3e:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8008f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f48:	4ac9      	ldr	r2, [pc, #804]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f002 0801 	and.w	r8, r2, #1
 8008f5c:	f04f 0900 	mov.w	r9, #0
 8008f60:	ea58 0309 	orrs.w	r3, r8, r9
 8008f64:	d042      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8008f66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6c:	2b05      	cmp	r3, #5
 8008f6e:	d823      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8008f70:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008fc1 	.word	0x08008fc1
 8008f7c:	08008f91 	.word	0x08008f91
 8008f80:	08008fa5 	.word	0x08008fa5
 8008f84:	08008fc1 	.word	0x08008fc1
 8008f88:	08008fc1 	.word	0x08008fc1
 8008f8c:	08008fc1 	.word	0x08008fc1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f94:	3308      	adds	r3, #8
 8008f96:	4618      	mov	r0, r3
 8008f98:	f004 feda 	bl	800dd50 <RCCEx_PLL2_Config>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8008fa2:	e00e      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fa8:	3330      	adds	r3, #48	; 0x30
 8008faa:	4618      	mov	r0, r3
 8008fac:	f004 ff68 	bl	800de80 <RCCEx_PLL3_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8008fb6:	e004      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8008fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10c      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008fca:	4ba9      	ldr	r3, [pc, #676]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008fcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008fd0:	f023 0107 	bic.w	r1, r3, #7
 8008fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fda:	4aa5      	ldr	r2, [pc, #660]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008fdc:	430b      	orrs	r3, r1
 8008fde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008fe2:	e003      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008fe8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f002 0a02 	and.w	sl, r2, #2
 8008ff8:	f04f 0b00 	mov.w	fp, #0
 8008ffc:	ea5a 030b 	orrs.w	r3, sl, fp
 8009000:	f000 8088 	beq.w	8009114 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8009004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800900a:	2b28      	cmp	r3, #40	; 0x28
 800900c:	d868      	bhi.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	080090e9 	.word	0x080090e9
 8009018:	080090e1 	.word	0x080090e1
 800901c:	080090e1 	.word	0x080090e1
 8009020:	080090e1 	.word	0x080090e1
 8009024:	080090e1 	.word	0x080090e1
 8009028:	080090e1 	.word	0x080090e1
 800902c:	080090e1 	.word	0x080090e1
 8009030:	080090e1 	.word	0x080090e1
 8009034:	080090b9 	.word	0x080090b9
 8009038:	080090e1 	.word	0x080090e1
 800903c:	080090e1 	.word	0x080090e1
 8009040:	080090e1 	.word	0x080090e1
 8009044:	080090e1 	.word	0x080090e1
 8009048:	080090e1 	.word	0x080090e1
 800904c:	080090e1 	.word	0x080090e1
 8009050:	080090e1 	.word	0x080090e1
 8009054:	080090cd 	.word	0x080090cd
 8009058:	080090e1 	.word	0x080090e1
 800905c:	080090e1 	.word	0x080090e1
 8009060:	080090e1 	.word	0x080090e1
 8009064:	080090e1 	.word	0x080090e1
 8009068:	080090e1 	.word	0x080090e1
 800906c:	080090e1 	.word	0x080090e1
 8009070:	080090e1 	.word	0x080090e1
 8009074:	080090e9 	.word	0x080090e9
 8009078:	080090e1 	.word	0x080090e1
 800907c:	080090e1 	.word	0x080090e1
 8009080:	080090e1 	.word	0x080090e1
 8009084:	080090e1 	.word	0x080090e1
 8009088:	080090e1 	.word	0x080090e1
 800908c:	080090e1 	.word	0x080090e1
 8009090:	080090e1 	.word	0x080090e1
 8009094:	080090e9 	.word	0x080090e9
 8009098:	080090e1 	.word	0x080090e1
 800909c:	080090e1 	.word	0x080090e1
 80090a0:	080090e1 	.word	0x080090e1
 80090a4:	080090e1 	.word	0x080090e1
 80090a8:	080090e1 	.word	0x080090e1
 80090ac:	080090e1 	.word	0x080090e1
 80090b0:	080090e1 	.word	0x080090e1
 80090b4:	080090e9 	.word	0x080090e9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80090b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090bc:	3308      	adds	r3, #8
 80090be:	4618      	mov	r0, r3
 80090c0:	f004 fe46 	bl	800dd50 <RCCEx_PLL2_Config>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80090ca:	e00e      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090d0:	3330      	adds	r3, #48	; 0x30
 80090d2:	4618      	mov	r0, r3
 80090d4:	f004 fed4 	bl	800de80 <RCCEx_PLL3_Config>
 80090d8:	4603      	mov	r3, r0
 80090da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80090de:	e004      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80090e6:	e000      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80090e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10c      	bne.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80090f2:	4b5f      	ldr	r3, [pc, #380]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80090f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80090f8:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80090fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009102:	4a5b      	ldr	r2, [pc, #364]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009104:	430b      	orrs	r3, r1
 8009106:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800910a:	e003      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009110:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009114:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	f002 0304 	and.w	r3, r2, #4
 8009120:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009124:	2300      	movs	r3, #0
 8009126:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800912a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800912e:	460b      	mov	r3, r1
 8009130:	4313      	orrs	r3, r2
 8009132:	d04e      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8009134:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800913a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800913e:	d02c      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8009140:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009144:	d825      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800914a:	d028      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800914c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009150:	d81f      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009152:	2bc0      	cmp	r3, #192	; 0xc0
 8009154:	d025      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8009156:	2bc0      	cmp	r3, #192	; 0xc0
 8009158:	d81b      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800915a:	2b80      	cmp	r3, #128	; 0x80
 800915c:	d00f      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800915e:	2b80      	cmp	r3, #128	; 0x80
 8009160:	d817      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01f      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8009166:	2b40      	cmp	r3, #64	; 0x40
 8009168:	d113      	bne.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800916a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800916e:	3308      	adds	r3, #8
 8009170:	4618      	mov	r0, r3
 8009172:	f004 fded 	bl	800dd50 <RCCEx_PLL2_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800917c:	e014      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800917e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009182:	3330      	adds	r3, #48	; 0x30
 8009184:	4618      	mov	r0, r3
 8009186:	f004 fe7b 	bl	800de80 <RCCEx_PLL3_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8009190:	e00a      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009198:	e006      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800919a:	bf00      	nop
 800919c:	e004      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800919e:	bf00      	nop
 80091a0:	e002      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80091a2:	bf00      	nop
 80091a4:	e000      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80091a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10c      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80091b0:	4b2f      	ldr	r3, [pc, #188]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80091b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80091b6:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80091ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091c0:	4a2b      	ldr	r2, [pc, #172]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80091c2:	430b      	orrs	r3, r1
 80091c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80091c8:	e003      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80091d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f002 0308 	and.w	r3, r2, #8
 80091de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80091e2:	2300      	movs	r3, #0
 80091e4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80091e8:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80091ec:	460b      	mov	r3, r1
 80091ee:	4313      	orrs	r3, r2
 80091f0:	d056      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80091f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80091fc:	d031      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80091fe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009202:	d82a      	bhi.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009208:	d02d      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800920a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800920e:	d824      	bhi.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009210:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009214:	d029      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8009216:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800921a:	d81e      	bhi.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800921c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009220:	d011      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8009222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009226:	d818      	bhi.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009228:	2b00      	cmp	r3, #0
 800922a:	d023      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800922c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009230:	d113      	bne.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009232:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009236:	3308      	adds	r3, #8
 8009238:	4618      	mov	r0, r3
 800923a:	f004 fd89 	bl	800dd50 <RCCEx_PLL2_Config>
 800923e:	4603      	mov	r3, r0
 8009240:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8009244:	e017      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009246:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800924a:	3330      	adds	r3, #48	; 0x30
 800924c:	4618      	mov	r0, r3
 800924e:	f004 fe17 	bl	800de80 <RCCEx_PLL3_Config>
 8009252:	4603      	mov	r3, r0
 8009254:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8009258:	e00d      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009260:	e009      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8009262:	bf00      	nop
 8009264:	e007      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8009266:	bf00      	nop
 8009268:	e005      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800926a:	bf00      	nop
 800926c:	e003      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800926e:	bf00      	nop
 8009270:	44020c00 	.word	0x44020c00
        break;
 8009274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009276:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10c      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800927e:	4bbb      	ldr	r3, [pc, #748]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009284:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8009288:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800928c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800928e:	4ab7      	ldr	r2, [pc, #732]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009290:	430b      	orrs	r3, r1
 8009292:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009296:	e003      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009298:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800929c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80092a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f002 0310 	and.w	r3, r2, #16
 80092ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80092b0:	2300      	movs	r3, #0
 80092b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80092b6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80092ba:	460b      	mov	r3, r1
 80092bc:	4313      	orrs	r3, r2
 80092be:	d053      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80092c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80092ca:	d031      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80092cc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80092d0:	d82a      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80092d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092d6:	d02d      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80092d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092dc:	d824      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80092de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092e2:	d029      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80092e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092e8:	d81e      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80092ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ee:	d011      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80092f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092f4:	d818      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d020      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x430>
 80092fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fe:	d113      	bne.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009300:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009304:	3308      	adds	r3, #8
 8009306:	4618      	mov	r0, r3
 8009308:	f004 fd22 	bl	800dd50 <RCCEx_PLL2_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8009312:	e014      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009314:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009318:	3330      	adds	r3, #48	; 0x30
 800931a:	4618      	mov	r0, r3
 800931c:	f004 fdb0 	bl	800de80 <RCCEx_PLL3_Config>
 8009320:	4603      	mov	r3, r0
 8009322:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8009326:	e00a      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800932e:	e006      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8009330:	bf00      	nop
 8009332:	e004      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8009334:	bf00      	nop
 8009336:	e002      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8009338:	bf00      	nop
 800933a:	e000      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800933c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800933e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10c      	bne.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009346:	4b89      	ldr	r3, [pc, #548]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800934c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009350:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009356:	4a85      	ldr	r2, [pc, #532]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009358:	430b      	orrs	r3, r1
 800935a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800935e:	e003      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009360:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009364:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009368:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	f002 0320 	and.w	r3, r2, #32
 8009374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009378:	2300      	movs	r3, #0
 800937a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800937e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8009382:	460b      	mov	r3, r1
 8009384:	4313      	orrs	r3, r2
 8009386:	d053      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8009388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800938c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009392:	d031      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8009394:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009398:	d82a      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800939a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800939e:	d02d      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80093a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093a4:	d824      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80093a6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80093aa:	d029      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80093ac:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80093b0:	d81e      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80093b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b6:	d011      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80093b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093bc:	d818      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d020      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80093c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093c6:	d113      	bne.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80093c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093cc:	3308      	adds	r3, #8
 80093ce:	4618      	mov	r0, r3
 80093d0:	f004 fcbe 	bl	800dd50 <RCCEx_PLL2_Config>
 80093d4:	4603      	mov	r3, r0
 80093d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80093da:	e014      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80093dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093e0:	3330      	adds	r3, #48	; 0x30
 80093e2:	4618      	mov	r0, r3
 80093e4:	f004 fd4c 	bl	800de80 <RCCEx_PLL3_Config>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80093ee:	e00a      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80093f6:	e006      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80093f8:	bf00      	nop
 80093fa:	e004      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80093fc:	bf00      	nop
 80093fe:	e002      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8009404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009406:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10c      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800940e:	4b57      	ldr	r3, [pc, #348]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009414:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8009418:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800941c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941e:	4a53      	ldr	r2, [pc, #332]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009420:	430b      	orrs	r3, r1
 8009422:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009426:	e003      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009428:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800942c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009430:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800943c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009440:	2300      	movs	r3, #0
 8009442:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009446:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800944a:	460b      	mov	r3, r1
 800944c:	4313      	orrs	r3, r2
 800944e:	d053      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8009450:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009456:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800945a:	d031      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800945c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009460:	d82a      	bhi.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009466:	d02d      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8009468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800946c:	d824      	bhi.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800946e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009472:	d029      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009474:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009478:	d81e      	bhi.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800947a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800947e:	d011      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009480:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009484:	d818      	bhi.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009486:	2b00      	cmp	r3, #0
 8009488:	d020      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800948a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800948e:	d113      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009490:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009494:	3308      	adds	r3, #8
 8009496:	4618      	mov	r0, r3
 8009498:	f004 fc5a 	bl	800dd50 <RCCEx_PLL2_Config>
 800949c:	4603      	mov	r3, r0
 800949e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80094a2:	e014      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80094a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094a8:	3330      	adds	r3, #48	; 0x30
 80094aa:	4618      	mov	r0, r3
 80094ac:	f004 fce8 	bl	800de80 <RCCEx_PLL3_Config>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80094b6:	e00a      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80094be:	e006      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80094c0:	bf00      	nop
 80094c2:	e004      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80094c4:	bf00      	nop
 80094c6:	e002      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80094c8:	bf00      	nop
 80094ca:	e000      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80094cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10c      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80094d6:	4b25      	ldr	r3, [pc, #148]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80094d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80094dc:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80094e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e6:	4a21      	ldr	r2, [pc, #132]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80094e8:	430b      	orrs	r3, r1
 80094ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80094ee:	e003      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80094f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80094f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009504:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009508:	2300      	movs	r3, #0
 800950a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800950e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8009512:	460b      	mov	r3, r1
 8009514:	4313      	orrs	r3, r2
 8009516:	d055      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8009518:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800951c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800951e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009522:	d033      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8009524:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009528:	d82c      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800952a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800952e:	d02f      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8009530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009534:	d826      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8009536:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800953a:	d02b      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800953c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009540:	d820      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8009542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009546:	d013      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800954c:	d81a      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d022      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8009552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009556:	d115      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009558:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800955c:	3308      	adds	r3, #8
 800955e:	4618      	mov	r0, r3
 8009560:	f004 fbf6 	bl	800dd50 <RCCEx_PLL2_Config>
 8009564:	4603      	mov	r3, r0
 8009566:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800956a:	e016      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800956c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009570:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009574:	3330      	adds	r3, #48	; 0x30
 8009576:	4618      	mov	r0, r3
 8009578:	f004 fc82 	bl	800de80 <RCCEx_PLL3_Config>
 800957c:	4603      	mov	r3, r0
 800957e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8009582:	e00a      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800958a:	e006      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800958c:	bf00      	nop
 800958e:	e004      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8009590:	bf00      	nop
 8009592:	e002      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8009594:	bf00      	nop
 8009596:	e000      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8009598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800959a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10c      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80095a2:	4bbb      	ldr	r3, [pc, #748]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80095a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80095a8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80095ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095b2:	4ab7      	ldr	r2, [pc, #732]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80095b4:	430b      	orrs	r3, r1
 80095b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80095ba:	e003      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80095c0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80095c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80095d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80095d4:	2300      	movs	r3, #0
 80095d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095da:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80095de:	460b      	mov	r3, r1
 80095e0:	4313      	orrs	r3, r2
 80095e2:	d053      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80095e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80095ee:	d031      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80095f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80095f4:	d82a      	bhi.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x740>
 80095f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095fa:	d02d      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80095fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009600:	d824      	bhi.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8009602:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009606:	d029      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8009608:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800960c:	d81e      	bhi.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800960e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009612:	d011      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8009614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009618:	d818      	bhi.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d020      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800961e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009622:	d113      	bne.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009624:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009628:	3308      	adds	r3, #8
 800962a:	4618      	mov	r0, r3
 800962c:	f004 fb90 	bl	800dd50 <RCCEx_PLL2_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8009636:	e014      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009638:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800963c:	3330      	adds	r3, #48	; 0x30
 800963e:	4618      	mov	r0, r3
 8009640:	f004 fc1e 	bl	800de80 <RCCEx_PLL3_Config>
 8009644:	4603      	mov	r3, r0
 8009646:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800964a:	e00a      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009652:	e006      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8009654:	bf00      	nop
 8009656:	e004      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8009658:	bf00      	nop
 800965a:	e002      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800965c:	bf00      	nop
 800965e:	e000      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8009660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009662:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10c      	bne.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800966a:	4b89      	ldr	r3, [pc, #548]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800966c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009670:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009674:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800967a:	4a85      	ldr	r2, [pc, #532]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800967c:	430b      	orrs	r3, r1
 800967e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009682:	e003      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009684:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009688:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800968c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8009698:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800969c:	2300      	movs	r3, #0
 800969e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80096a2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80096a6:	460b      	mov	r3, r1
 80096a8:	4313      	orrs	r3, r2
 80096aa:	d055      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80096ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80096b8:	d031      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x812>
 80096ba:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80096be:	d82a      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80096c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c4:	d02d      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80096c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ca:	d824      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80096cc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80096d0:	d029      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80096d2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80096d6:	d81e      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80096d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096dc:	d011      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80096de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096e2:	d818      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d020      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80096e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096ec:	d113      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80096ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096f2:	3308      	adds	r3, #8
 80096f4:	4618      	mov	r0, r3
 80096f6:	f004 fb2b 	bl	800dd50 <RCCEx_PLL2_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8009700:	e014      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009702:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009706:	3330      	adds	r3, #48	; 0x30
 8009708:	4618      	mov	r0, r3
 800970a:	f004 fbb9 	bl	800de80 <RCCEx_PLL3_Config>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8009714:	e00a      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800971c:	e006      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800971e:	bf00      	nop
 8009720:	e004      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8009722:	bf00      	nop
 8009724:	e002      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8009726:	bf00      	nop
 8009728:	e000      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800972a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10d      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8009734:	4b56      	ldr	r3, [pc, #344]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8009736:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800973a:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 800973e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009746:	4a52      	ldr	r2, [pc, #328]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8009748:	430b      	orrs	r3, r1
 800974a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800974e:	e003      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009750:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009754:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8009758:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009764:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009768:	2300      	movs	r3, #0
 800976a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800976e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009772:	460b      	mov	r3, r1
 8009774:	4313      	orrs	r3, r2
 8009776:	d044      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8009778:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800977c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009780:	2b05      	cmp	r3, #5
 8009782:	d823      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8009784:	a201      	add	r2, pc, #4	; (adr r2, 800978c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8009786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978a:	bf00      	nop
 800978c:	080097d5 	.word	0x080097d5
 8009790:	080097a5 	.word	0x080097a5
 8009794:	080097b9 	.word	0x080097b9
 8009798:	080097d5 	.word	0x080097d5
 800979c:	080097d5 	.word	0x080097d5
 80097a0:	080097d5 	.word	0x080097d5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80097a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097a8:	3308      	adds	r3, #8
 80097aa:	4618      	mov	r0, r3
 80097ac:	f004 fad0 	bl	800dd50 <RCCEx_PLL2_Config>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80097b6:	e00e      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80097b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097bc:	3330      	adds	r3, #48	; 0x30
 80097be:	4618      	mov	r0, r3
 80097c0:	f004 fb5e 	bl	800de80 <RCCEx_PLL3_Config>
 80097c4:	4603      	mov	r3, r0
 80097c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80097ca:	e004      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80097d2:	e000      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80097d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10d      	bne.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80097de:	4b2c      	ldr	r3, [pc, #176]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80097e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80097e4:	f023 0107 	bic.w	r1, r3, #7
 80097e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097f0:	4a27      	ldr	r2, [pc, #156]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80097f2:	430b      	orrs	r3, r1
 80097f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80097f8:	e003      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80097fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8009802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800980e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009812:	2300      	movs	r3, #0
 8009814:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009818:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800981c:	460b      	mov	r3, r1
 800981e:	4313      	orrs	r3, r2
 8009820:	d04f      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8009822:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982a:	2b50      	cmp	r3, #80	; 0x50
 800982c:	d029      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800982e:	2b50      	cmp	r3, #80	; 0x50
 8009830:	d823      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009832:	2b40      	cmp	r3, #64	; 0x40
 8009834:	d027      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8009836:	2b40      	cmp	r3, #64	; 0x40
 8009838:	d81f      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800983a:	2b30      	cmp	r3, #48	; 0x30
 800983c:	d025      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800983e:	2b30      	cmp	r3, #48	; 0x30
 8009840:	d81b      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009842:	2b20      	cmp	r3, #32
 8009844:	d00f      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8009846:	2b20      	cmp	r3, #32
 8009848:	d817      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d022      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800984e:	2b10      	cmp	r3, #16
 8009850:	d113      	bne.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009852:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009856:	3308      	adds	r3, #8
 8009858:	4618      	mov	r0, r3
 800985a:	f004 fa79 	bl	800dd50 <RCCEx_PLL2_Config>
 800985e:	4603      	mov	r3, r0
 8009860:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8009864:	e017      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009866:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800986a:	3330      	adds	r3, #48	; 0x30
 800986c:	4618      	mov	r0, r3
 800986e:	f004 fb07 	bl	800de80 <RCCEx_PLL3_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8009878:	e00d      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009880:	e009      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8009882:	bf00      	nop
 8009884:	e007      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8009886:	bf00      	nop
 8009888:	e005      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800988a:	bf00      	nop
 800988c:	e003      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800988e:	bf00      	nop
 8009890:	44020c00 	.word	0x44020c00
        break;
 8009894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009896:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10d      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800989e:	4baf      	ldr	r3, [pc, #700]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80098a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80098a4:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80098a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b0:	4aaa      	ldr	r2, [pc, #680]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80098b2:	430b      	orrs	r3, r1
 80098b4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80098b8:	e003      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80098be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80098ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80098d2:	2300      	movs	r3, #0
 80098d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80098d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80098dc:	460b      	mov	r3, r1
 80098de:	4313      	orrs	r3, r2
 80098e0:	d055      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80098e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80098ee:	d031      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80098f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80098f4:	d82a      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80098f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098fa:	d02d      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80098fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009900:	d824      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8009902:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009906:	d029      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8009908:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800990c:	d81e      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800990e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009912:	d011      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8009914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009918:	d818      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d020      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800991e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009922:	d113      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009928:	3308      	adds	r3, #8
 800992a:	4618      	mov	r0, r3
 800992c:	f004 fa10 	bl	800dd50 <RCCEx_PLL2_Config>
 8009930:	4603      	mov	r3, r0
 8009932:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8009936:	e014      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009938:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800993c:	3330      	adds	r3, #48	; 0x30
 800993e:	4618      	mov	r0, r3
 8009940:	f004 fa9e 	bl	800de80 <RCCEx_PLL3_Config>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800994a:	e00a      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009952:	e006      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8009954:	bf00      	nop
 8009956:	e004      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8009958:	bf00      	nop
 800995a:	e002      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800995c:	bf00      	nop
 800995e:	e000      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8009960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009962:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10d      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800996a:	4b7c      	ldr	r3, [pc, #496]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800996c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009970:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009974:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800997c:	4a77      	ldr	r2, [pc, #476]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800997e:	430b      	orrs	r3, r1
 8009980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009984:	e003      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009986:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800998a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800998e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800999a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800999e:	2300      	movs	r3, #0
 80099a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80099a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80099a8:	460b      	mov	r3, r1
 80099aa:	4313      	orrs	r3, r2
 80099ac:	d03d      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80099ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099ba:	d01b      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80099bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099c0:	d814      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80099c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099c6:	d017      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80099c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099cc:	d80e      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d014      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80099d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d6:	d109      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80099d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099dc:	3330      	adds	r3, #48	; 0x30
 80099de:	4618      	mov	r0, r3
 80099e0:	f004 fa4e 	bl	800de80 <RCCEx_PLL3_Config>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80099ea:	e008      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80099f2:	e004      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80099f4:	bf00      	nop
 80099f6:	e002      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80099f8:	bf00      	nop
 80099fa:	e000      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80099fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10d      	bne.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009a06:	4b55      	ldr	r3, [pc, #340]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009a08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a0c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a18:	4a50      	ldr	r2, [pc, #320]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009a1a:	430b      	orrs	r3, r1
 8009a1c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009a20:	e003      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009a36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a40:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4313      	orrs	r3, r2
 8009a48:	d03d      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8009a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009a56:	d01b      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8009a58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009a5c:	d814      	bhi.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8009a5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a62:	d017      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8009a64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a68:	d80e      	bhi.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d014      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8009a6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a72:	d109      	bne.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a78:	3330      	adds	r3, #48	; 0x30
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f004 fa00 	bl	800de80 <RCCEx_PLL3_Config>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8009a86:	e008      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009a8e:	e004      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8009a90:	bf00      	nop
 8009a92:	e002      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8009a94:	bf00      	nop
 8009a96:	e000      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8009a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10d      	bne.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009aa2:	4b2e      	ldr	r3, [pc, #184]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009aa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009aa8:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8009aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ab4:	4a29      	ldr	r2, [pc, #164]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009ab6:	430b      	orrs	r3, r1
 8009ab8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009abc:	e003      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009abe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009ac2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009adc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	d040      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8009ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009af2:	d01b      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8009af4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009af8:	d814      	bhi.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8009afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009afe:	d017      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b04:	d80e      	bhi.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d014      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b0e:	d109      	bne.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b14:	3330      	adds	r3, #48	; 0x30
 8009b16:	4618      	mov	r0, r3
 8009b18:	f004 f9b2 	bl	800de80 <RCCEx_PLL3_Config>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8009b22:	e008      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009b2a:	e004      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8009b2c:	bf00      	nop
 8009b2e:	e002      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8009b30:	bf00      	nop
 8009b32:	e000      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8009b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d110      	bne.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009b3e:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009b40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009b44:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009b48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b50:	4a02      	ldr	r2, [pc, #8]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009b52:	430b      	orrs	r3, r1
 8009b54:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009b58:	e006      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8009b5a:	bf00      	nop
 8009b5c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b64:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	2100      	movs	r1, #0
 8009b72:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8009b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009b7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4313      	orrs	r3, r2
 8009b86:	d03d      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8009b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b94:	d01b      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009b96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b9a:	d814      	bhi.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8009b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ba0:	d017      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8009ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ba6:	d80e      	bhi.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d014      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8009bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bb0:	d109      	bne.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bb6:	3330      	adds	r3, #48	; 0x30
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f004 f961 	bl	800de80 <RCCEx_PLL3_Config>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8009bc4:	e008      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009bcc:	e004      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8009bce:	bf00      	nop
 8009bd0:	e002      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8009bd2:	bf00      	nop
 8009bd4:	e000      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8009bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10d      	bne.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009be0:	4bbe      	ldr	r3, [pc, #760]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009be2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009be6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009bea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bf2:	4aba      	ldr	r2, [pc, #744]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009bfa:	e003      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bfc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c00:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8009c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009c10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c14:	2300      	movs	r3, #0
 8009c16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4313      	orrs	r3, r2
 8009c22:	d035      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8009c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c30:	d015      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8009c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c36:	d80e      	bhi.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d012      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8009c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c40:	d109      	bne.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c46:	3330      	adds	r3, #48	; 0x30
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f004 f919 	bl	800de80 <RCCEx_PLL3_Config>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8009c54:	e006      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009c5c:	e002      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8009c5e:	bf00      	nop
 8009c60:	e000      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8009c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10d      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8009c6c:	4b9b      	ldr	r3, [pc, #620]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009c6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c72:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8009c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c7e:	4a97      	ldr	r2, [pc, #604]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009c80:	430b      	orrs	r3, r1
 8009c82:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009c86:	e003      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c88:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c8c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	2100      	movs	r1, #0
 8009c9a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ca2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ca6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4313      	orrs	r3, r2
 8009cae:	d00e      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8009cb0:	4b8a      	ldr	r3, [pc, #552]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	4a89      	ldr	r2, [pc, #548]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009cb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cba:	61d3      	str	r3, [r2, #28]
 8009cbc:	4b87      	ldr	r3, [pc, #540]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009cbe:	69d9      	ldr	r1, [r3, #28]
 8009cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cc4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009cc8:	4a84      	ldr	r2, [pc, #528]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009cca:	430b      	orrs	r3, r1
 8009ccc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ce4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4313      	orrs	r3, r2
 8009cec:	d055      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8009cee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009cf6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009cfa:	d031      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8009cfc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009d00:	d82a      	bhi.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d06:	d02d      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8009d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d0c:	d824      	bhi.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d12:	d029      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8009d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d18:	d81e      	bhi.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d1e:	d011      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8009d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d24:	d818      	bhi.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d020      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8009d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d2e:	d113      	bne.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d34:	3308      	adds	r3, #8
 8009d36:	4618      	mov	r0, r3
 8009d38:	f004 f80a 	bl	800dd50 <RCCEx_PLL2_Config>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8009d42:	e014      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d48:	3330      	adds	r3, #48	; 0x30
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f004 f898 	bl	800de80 <RCCEx_PLL3_Config>
 8009d50:	4603      	mov	r3, r0
 8009d52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8009d56:	e00a      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009d5e:	e006      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8009d60:	bf00      	nop
 8009d62:	e004      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8009d64:	bf00      	nop
 8009d66:	e002      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8009d68:	bf00      	nop
 8009d6a:	e000      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8009d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10d      	bne.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009d76:	4b59      	ldr	r3, [pc, #356]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009d78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009d7c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8009d80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d88:	4a54      	ldr	r2, [pc, #336]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009d8a:	430b      	orrs	r3, r1
 8009d8c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009d90:	e003      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d96:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009daa:	2300      	movs	r3, #0
 8009dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009db0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4313      	orrs	r3, r2
 8009db8:	d055      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8009dba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009dbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dc2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009dc6:	d031      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8009dc8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009dcc:	d82a      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd2:	d02d      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8009dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd8:	d824      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009dda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009dde:	d029      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8009de0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009de4:	d81e      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dea:	d011      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8009dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009df0:	d818      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d020      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfa:	d113      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e00:	3308      	adds	r3, #8
 8009e02:	4618      	mov	r0, r3
 8009e04:	f003 ffa4 	bl	800dd50 <RCCEx_PLL2_Config>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8009e0e:	e014      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e14:	3330      	adds	r3, #48	; 0x30
 8009e16:	4618      	mov	r0, r3
 8009e18:	f004 f832 	bl	800de80 <RCCEx_PLL3_Config>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8009e22:	e00a      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009e2a:	e006      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009e2c:	bf00      	nop
 8009e2e:	e004      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009e30:	bf00      	nop
 8009e32:	e002      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009e34:	bf00      	nop
 8009e36:	e000      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10d      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009e42:	4b26      	ldr	r3, [pc, #152]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009e44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009e48:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e54:	4a21      	ldr	r2, [pc, #132]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009e56:	430b      	orrs	r3, r1
 8009e58:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009e5c:	e003      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e62:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8009e66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	2100      	movs	r1, #0
 8009e70:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8009e74:	f003 0320 	and.w	r3, r3, #32
 8009e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e80:	460b      	mov	r3, r1
 8009e82:	4313      	orrs	r3, r2
 8009e84:	d057      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8009e86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e92:	d033      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8009e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e98:	d82c      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009e9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e9e:	d02f      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8009ea0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ea4:	d826      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009eaa:	d02b      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8009eac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009eb0:	d820      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb6:	d013      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ebc:	d81a      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d022      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8009ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ec6:	d115      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ecc:	3308      	adds	r3, #8
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f003 ff3e 	bl	800dd50 <RCCEx_PLL2_Config>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8009eda:	e016      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8009edc:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ee4:	3330      	adds	r3, #48	; 0x30
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f003 ffca 	bl	800de80 <RCCEx_PLL3_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8009ef2:	e00a      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009efa:	e006      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009efc:	bf00      	nop
 8009efe:	e004      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009f00:	bf00      	nop
 8009f02:	e002      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009f04:	bf00      	nop
 8009f06:	e000      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10d      	bne.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8009f12:	4bbb      	ldr	r3, [pc, #748]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009f14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009f18:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f24:	4ab6      	ldr	r2, [pc, #728]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009f26:	430b      	orrs	r3, r1
 8009f28:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009f2c:	e003      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f32:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8009f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	2100      	movs	r1, #0
 8009f40:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8009f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4313      	orrs	r3, r2
 8009f54:	d055      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8009f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f5e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009f62:	d031      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8009f64:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009f68:	d82a      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8009f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f6e:	d02d      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8009f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f74:	d824      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8009f76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f7a:	d029      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8009f7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f80:	d81e      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8009f82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f86:	d011      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8009f88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f8c:	d818      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d020      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8009f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f96:	d113      	bne.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f003 fed6 	bl	800dd50 <RCCEx_PLL2_Config>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8009faa:	e014      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009fb0:	3330      	adds	r3, #48	; 0x30
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f003 ff64 	bl	800de80 <RCCEx_PLL3_Config>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8009fbe:	e00a      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009fc6:	e006      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009fc8:	bf00      	nop
 8009fca:	e004      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009fcc:	bf00      	nop
 8009fce:	e002      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009fd0:	bf00      	nop
 8009fd2:	e000      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10d      	bne.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8009fde:	4b88      	ldr	r3, [pc, #544]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009fe0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009fe4:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8009fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ff0:	4a83      	ldr	r2, [pc, #524]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009ff2:	430b      	orrs	r3, r1
 8009ff4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009ff8:	e003      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009ffe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800a002:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	2100      	movs	r1, #0
 800a00c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800a010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a018:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a01c:	460b      	mov	r3, r1
 800a01e:	4313      	orrs	r3, r2
 800a020:	d055      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800a022:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a026:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a02a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a02e:	d031      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800a030:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a034:	d82a      	bhi.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800a036:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a03a:	d02d      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800a03c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a040:	d824      	bhi.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800a042:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a046:	d029      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800a048:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a04c:	d81e      	bhi.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800a04e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a052:	d011      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800a054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a058:	d818      	bhi.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d020      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800a05e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a062:	d113      	bne.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a068:	3308      	adds	r3, #8
 800a06a:	4618      	mov	r0, r3
 800a06c:	f003 fe70 	bl	800dd50 <RCCEx_PLL2_Config>
 800a070:	4603      	mov	r3, r0
 800a072:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800a076:	e014      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a078:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a07c:	3330      	adds	r3, #48	; 0x30
 800a07e:	4618      	mov	r0, r3
 800a080:	f003 fefe 	bl	800de80 <RCCEx_PLL3_Config>
 800a084:	4603      	mov	r3, r0
 800a086:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800a08a:	e00a      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a092:	e006      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800a094:	bf00      	nop
 800a096:	e004      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800a098:	bf00      	nop
 800a09a:	e002      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800a09c:	bf00      	nop
 800a09e:	e000      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800a0a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10d      	bne.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800a0aa:	4b55      	ldr	r3, [pc, #340]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800a0ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a0b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a0b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0bc:	4a50      	ldr	r2, [pc, #320]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800a0c4:	e003      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a0ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800a0ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800a0dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0e4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	d055      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800a0ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a0f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0fa:	d031      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800a0fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a100:	d82a      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800a102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a106:	d02d      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800a108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a10c:	d824      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800a10e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a112:	d029      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800a114:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a118:	d81e      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800a11a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a11e:	d011      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800a120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a124:	d818      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d020      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800a12a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a12e:	d113      	bne.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a134:	3308      	adds	r3, #8
 800a136:	4618      	mov	r0, r3
 800a138:	f003 fe0a 	bl	800dd50 <RCCEx_PLL2_Config>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800a142:	e014      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a144:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a148:	3330      	adds	r3, #48	; 0x30
 800a14a:	4618      	mov	r0, r3
 800a14c:	f003 fe98 	bl	800de80 <RCCEx_PLL3_Config>
 800a150:	4603      	mov	r3, r0
 800a152:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800a156:	e00a      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a15e:	e006      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800a160:	bf00      	nop
 800a162:	e004      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800a164:	bf00      	nop
 800a166:	e002      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800a168:	bf00      	nop
 800a16a:	e000      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800a16c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a16e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10d      	bne.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800a176:	4b22      	ldr	r3, [pc, #136]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800a178:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a17c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a180:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a184:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a188:	4a1d      	ldr	r2, [pc, #116]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800a18a:	430b      	orrs	r3, r1
 800a18c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800a190:	e003      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a192:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a196:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a19a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a1a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a1b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	d055      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800a1ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a1be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a1c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a1c6:	d035      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800a1c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a1cc:	d82e      	bhi.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800a1ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a1d2:	d031      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800a1d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a1d8:	d828      	bhi.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800a1da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1de:	d01b      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800a1e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1e4:	d822      	bhi.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800a1ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ee:	d009      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800a1f0:	e01c      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1f2:	4b03      	ldr	r3, [pc, #12]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f6:	4a02      	ldr	r2, [pc, #8]	; (800a200 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800a1f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1fc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a1fe:	e01c      	b.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800a200:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a204:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a208:	3308      	adds	r3, #8
 800a20a:	4618      	mov	r0, r3
 800a20c:	f003 fda0 	bl	800dd50 <RCCEx_PLL2_Config>
 800a210:	4603      	mov	r3, r0
 800a212:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a216:	e010      	b.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a218:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a21c:	3330      	adds	r3, #48	; 0x30
 800a21e:	4618      	mov	r0, r3
 800a220:	f003 fe2e 	bl	800de80 <RCCEx_PLL3_Config>
 800a224:	4603      	mov	r3, r0
 800a226:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a22a:	e006      	b.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a232:	e002      	b.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800a234:	bf00      	nop
 800a236:	e000      	b.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800a238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a23a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10d      	bne.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800a242:	4bc3      	ldr	r3, [pc, #780]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a248:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a24c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a250:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a254:	4abe      	ldr	r2, [pc, #760]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a256:	430b      	orrs	r3, r1
 800a258:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a25c:	e003      	b.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a25e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a262:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800a266:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a276:	2300      	movs	r3, #0
 800a278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a27c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a280:	460b      	mov	r3, r1
 800a282:	4313      	orrs	r3, r2
 800a284:	d051      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800a286:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a28a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a28e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a292:	d033      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800a294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a298:	d82c      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800a29a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800a29e:	d02d      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800a2a0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800a2a4:	d826      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800a2a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2aa:	d019      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800a2ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2b0:	d820      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800a2b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a2ba:	d007      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800a2bc:	e01a      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2be:	4ba4      	ldr	r3, [pc, #656]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	4aa3      	ldr	r2, [pc, #652]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a2c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2c8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a2ca:	e018      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a2cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2d0:	3308      	adds	r3, #8
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f003 fd3c 	bl	800dd50 <RCCEx_PLL2_Config>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a2de:	e00e      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a2e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2e4:	3330      	adds	r3, #48	; 0x30
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f003 fdca 	bl	800de80 <RCCEx_PLL3_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a2f2:	e004      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a2fa:	e000      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800a2fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10d      	bne.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800a306:	4b92      	ldr	r3, [pc, #584]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a30c:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 800a310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a314:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a318:	4a8d      	ldr	r2, [pc, #564]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a31a:	430b      	orrs	r3, r1
 800a31c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a320:	e003      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a322:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a326:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800a32a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a336:	67bb      	str	r3, [r7, #120]	; 0x78
 800a338:	2300      	movs	r3, #0
 800a33a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a33c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a340:	460b      	mov	r3, r1
 800a342:	4313      	orrs	r3, r2
 800a344:	d032      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800a346:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a34a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a34e:	2b05      	cmp	r3, #5
 800a350:	d80f      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800a352:	2b03      	cmp	r3, #3
 800a354:	d211      	bcs.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800a356:	2b01      	cmp	r3, #1
 800a358:	d911      	bls.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d109      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a35e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a362:	3308      	adds	r3, #8
 800a364:	4618      	mov	r0, r3
 800a366:	f003 fcf3 	bl	800dd50 <RCCEx_PLL2_Config>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a370:	e006      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a378:	e002      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800a37a:	bf00      	nop
 800a37c:	e000      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800a37e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a380:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10d      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800a388:	4b71      	ldr	r3, [pc, #452]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a38a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a38e:	f023 0107 	bic.w	r1, r3, #7
 800a392:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a396:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a39a:	4a6d      	ldr	r2, [pc, #436]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a39c:	430b      	orrs	r3, r1
 800a39e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a3a2:	e003      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a3a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800a3ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	6739      	str	r1, [r7, #112]	; 0x70
 800a3b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3bc:	677b      	str	r3, [r7, #116]	; 0x74
 800a3be:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	d024      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800a3c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a3cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d005      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800a3d4:	2b08      	cmp	r3, #8
 800a3d6:	d005      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a3de:	e002      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800a3e0:	bf00      	nop
 800a3e2:	e000      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800a3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10d      	bne.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800a3ee:	4b58      	ldr	r3, [pc, #352]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a3f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a3f4:	f023 0108 	bic.w	r1, r3, #8
 800a3f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a3fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a400:	4a53      	ldr	r2, [pc, #332]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a402:	430b      	orrs	r3, r1
 800a404:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a408:	e003      	b.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a40a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a40e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a412:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a41e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a420:	2300      	movs	r3, #0
 800a422:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a424:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a428:	460b      	mov	r3, r1
 800a42a:	4313      	orrs	r3, r2
 800a42c:	f000 80b9 	beq.w	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800a430:	4b48      	ldr	r3, [pc, #288]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	4a47      	ldr	r2, [pc, #284]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800a436:	f043 0301 	orr.w	r3, r3, #1
 800a43a:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a43c:	f7fb febc 	bl	80061b8 <HAL_GetTick>
 800a440:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800a444:	e00b      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a446:	f7fb feb7 	bl	80061b8 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	2b02      	cmp	r3, #2
 800a454:	d903      	bls.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800a456:	2303      	movs	r3, #3
 800a458:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a45c:	e005      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800a45e:	4b3d      	ldr	r3, [pc, #244]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0ed      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800a46a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f040 8093 	bne.w	800a59a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a474:	4b36      	ldr	r3, [pc, #216]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a47e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800a482:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a486:	2b00      	cmp	r3, #0
 800a488:	d023      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800a48a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a48e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800a492:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a496:	4293      	cmp	r3, r2
 800a498:	d01b      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a49a:	4b2d      	ldr	r3, [pc, #180]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a49c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4a4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4a8:	4b29      	ldr	r3, [pc, #164]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a4aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4ae:	4a28      	ldr	r2, [pc, #160]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a4b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4b8:	4b25      	ldr	r3, [pc, #148]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a4ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4be:	4a24      	ldr	r2, [pc, #144]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a4c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a4c8:	4a21      	ldr	r2, [pc, #132]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a4ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a4ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a4d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d019      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4de:	f7fb fe6b 	bl	80061b8 <HAL_GetTick>
 800a4e2:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4e6:	e00d      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4e8:	f7fb fe66 	bl	80061b8 <HAL_GetTick>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a4f2:	1ad2      	subs	r2, r2, r3
 800a4f4:	f241 3388 	movw	r3, #5000	; 0x1388
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d903      	bls.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800a502:	e006      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a504:	4b12      	ldr	r3, [pc, #72]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0ea      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800a512:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a516:	2b00      	cmp	r3, #0
 800a518:	d13a      	bne.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a51a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a51e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800a522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a52a:	d115      	bne.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800a52c:	4b08      	ldr	r3, [pc, #32]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a538:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800a53c:	091b      	lsrs	r3, r3, #4
 800a53e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a542:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a546:	4a02      	ldr	r2, [pc, #8]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800a548:	430b      	orrs	r3, r1
 800a54a:	61d3      	str	r3, [r2, #28]
 800a54c:	e00a      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800a54e:	bf00      	nop
 800a550:	44020c00 	.word	0x44020c00
 800a554:	44020800 	.word	0x44020800
 800a558:	4b9f      	ldr	r3, [pc, #636]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	4a9e      	ldr	r2, [pc, #632]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a55e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a562:	61d3      	str	r3, [r2, #28]
 800a564:	4b9c      	ldr	r3, [pc, #624]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a56a:	4a9b      	ldr	r2, [pc, #620]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a56c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a570:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a574:	4b98      	ldr	r3, [pc, #608]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a576:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800a57a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a57e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800a582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a586:	4a94      	ldr	r2, [pc, #592]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a588:	430b      	orrs	r3, r1
 800a58a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a58e:	e008      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a590:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a594:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 800a598:	e003      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a59e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800a5ae:	663b      	str	r3, [r7, #96]	; 0x60
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	667b      	str	r3, [r7, #100]	; 0x64
 800a5b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	d035      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a5be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a5c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a5c6:	2b30      	cmp	r3, #48	; 0x30
 800a5c8:	d014      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800a5ca:	2b30      	cmp	r3, #48	; 0x30
 800a5cc:	d80e      	bhi.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800a5ce:	2b20      	cmp	r3, #32
 800a5d0:	d012      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	d80a      	bhi.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d010      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800a5da:	2b10      	cmp	r3, #16
 800a5dc:	d106      	bne.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5de:	4b7e      	ldr	r3, [pc, #504]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e2:	4a7d      	ldr	r2, [pc, #500]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a5e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5e8:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800a5ea:	e008      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a5f2:	e004      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800a5f4:	bf00      	nop
 800a5f6:	e002      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800a5f8:	bf00      	nop
 800a5fa:	e000      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800a5fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10d      	bne.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a606:	4b74      	ldr	r3, [pc, #464]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a60c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a610:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a614:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a618:	4a6f      	ldr	r2, [pc, #444]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a61a:	430b      	orrs	r3, r1
 800a61c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a620:	e003      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a622:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a626:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a62a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a632:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a636:	65bb      	str	r3, [r7, #88]	; 0x58
 800a638:	2300      	movs	r3, #0
 800a63a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a63c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a640:	460b      	mov	r3, r1
 800a642:	4313      	orrs	r3, r2
 800a644:	d033      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800a646:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a64a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800a652:	2b40      	cmp	r3, #64	; 0x40
 800a654:	d007      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800a656:	e010      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a658:	4b5f      	ldr	r3, [pc, #380]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65c:	4a5e      	ldr	r2, [pc, #376]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a65e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a662:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800a664:	e00d      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a666:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a66a:	3308      	adds	r3, #8
 800a66c:	4618      	mov	r0, r3
 800a66e:	f003 fb6f 	bl	800dd50 <RCCEx_PLL2_Config>
 800a672:	4603      	mov	r3, r0
 800a674:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800a678:	e003      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a680:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a682:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10d      	bne.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800a68a:	4b53      	ldr	r3, [pc, #332]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a68c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a690:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800a694:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a698:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a69c:	4a4e      	ldr	r2, [pc, #312]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a69e:	430b      	orrs	r3, r1
 800a6a0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a6a4:	e003      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a6aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a6ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a6ba:	653b      	str	r3, [r7, #80]	; 0x50
 800a6bc:	2300      	movs	r3, #0
 800a6be:	657b      	str	r3, [r7, #84]	; 0x54
 800a6c0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	d033      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800a6ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a6ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800a6d6:	2b80      	cmp	r3, #128	; 0x80
 800a6d8:	d007      	beq.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800a6da:	e010      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6dc:	4b3e      	ldr	r3, [pc, #248]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e0:	4a3d      	ldr	r2, [pc, #244]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a6e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6e6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800a6e8:	e00d      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a6ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a6ee:	3308      	adds	r3, #8
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f003 fb2d 	bl	800dd50 <RCCEx_PLL2_Config>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800a6fc:	e003      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a704:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a706:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10d      	bne.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800a70e:	4b32      	ldr	r3, [pc, #200]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a710:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a714:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a718:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a71c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a720:	4a2d      	ldr	r2, [pc, #180]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a722:	430b      	orrs	r3, r1
 800a724:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a728:	e003      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a72e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a732:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800a73e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a740:	2300      	movs	r3, #0
 800a742:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a744:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a748:	460b      	mov	r3, r1
 800a74a:	4313      	orrs	r3, r2
 800a74c:	d04a      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800a74e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a756:	2b04      	cmp	r3, #4
 800a758:	d827      	bhi.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a775 	.word	0x0800a775
 800a764:	0800a783 	.word	0x0800a783
 800a768:	0800a797 	.word	0x0800a797
 800a76c:	0800a7b3 	.word	0x0800a7b3
 800a770:	0800a7b3 	.word	0x0800a7b3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a774:	4b18      	ldr	r3, [pc, #96]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a778:	4a17      	ldr	r2, [pc, #92]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a77a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a77e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800a780:	e018      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a782:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a786:	3308      	adds	r3, #8
 800a788:	4618      	mov	r0, r3
 800a78a:	f003 fae1 	bl	800dd50 <RCCEx_PLL2_Config>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800a794:	e00e      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a796:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a79a:	3330      	adds	r3, #48	; 0x30
 800a79c:	4618      	mov	r0, r3
 800a79e:	f003 fb6f 	bl	800de80 <RCCEx_PLL3_Config>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800a7a8:	e004      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a7b0:	e000      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800a7b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10f      	bne.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a7bc:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a7be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7c2:	f023 0107 	bic.w	r1, r3, #7
 800a7c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a7ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7ce:	4a02      	ldr	r2, [pc, #8]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7d6:	e005      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800a7d8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a7e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a7e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a7f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a7f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	f000 8081 	beq.w	800a904 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800a802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a80a:	2b20      	cmp	r3, #32
 800a80c:	d85f      	bhi.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800a80e:	a201      	add	r2, pc, #4	; (adr r2, 800a814 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800a810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a814:	0800a899 	.word	0x0800a899
 800a818:	0800a8cf 	.word	0x0800a8cf
 800a81c:	0800a8cf 	.word	0x0800a8cf
 800a820:	0800a8cf 	.word	0x0800a8cf
 800a824:	0800a8cf 	.word	0x0800a8cf
 800a828:	0800a8cf 	.word	0x0800a8cf
 800a82c:	0800a8cf 	.word	0x0800a8cf
 800a830:	0800a8cf 	.word	0x0800a8cf
 800a834:	0800a8a7 	.word	0x0800a8a7
 800a838:	0800a8cf 	.word	0x0800a8cf
 800a83c:	0800a8cf 	.word	0x0800a8cf
 800a840:	0800a8cf 	.word	0x0800a8cf
 800a844:	0800a8cf 	.word	0x0800a8cf
 800a848:	0800a8cf 	.word	0x0800a8cf
 800a84c:	0800a8cf 	.word	0x0800a8cf
 800a850:	0800a8cf 	.word	0x0800a8cf
 800a854:	0800a8bb 	.word	0x0800a8bb
 800a858:	0800a8cf 	.word	0x0800a8cf
 800a85c:	0800a8cf 	.word	0x0800a8cf
 800a860:	0800a8cf 	.word	0x0800a8cf
 800a864:	0800a8cf 	.word	0x0800a8cf
 800a868:	0800a8cf 	.word	0x0800a8cf
 800a86c:	0800a8cf 	.word	0x0800a8cf
 800a870:	0800a8cf 	.word	0x0800a8cf
 800a874:	0800a8d7 	.word	0x0800a8d7
 800a878:	0800a8cf 	.word	0x0800a8cf
 800a87c:	0800a8cf 	.word	0x0800a8cf
 800a880:	0800a8cf 	.word	0x0800a8cf
 800a884:	0800a8cf 	.word	0x0800a8cf
 800a888:	0800a8cf 	.word	0x0800a8cf
 800a88c:	0800a8cf 	.word	0x0800a8cf
 800a890:	0800a8cf 	.word	0x0800a8cf
 800a894:	0800a8d7 	.word	0x0800a8d7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a898:	4bab      	ldr	r3, [pc, #684]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89c:	4aaa      	ldr	r2, [pc, #680]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a89e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8a2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800a8a4:	e018      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a8a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a8aa:	3308      	adds	r3, #8
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f003 fa4f 	bl	800dd50 <RCCEx_PLL2_Config>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800a8b8:	e00e      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a8ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a8be:	3330      	adds	r3, #48	; 0x30
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f003 fadd 	bl	800de80 <RCCEx_PLL3_Config>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800a8cc:	e004      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a8d4:	e000      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800a8d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10d      	bne.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a8e0:	4b99      	ldr	r3, [pc, #612]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a8e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a8ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a8ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a8f2:	4a95      	ldr	r2, [pc, #596]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a8fa:	e003      	b.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a900:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a904:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a910:	63bb      	str	r3, [r7, #56]	; 0x38
 800a912:	2300      	movs	r3, #0
 800a914:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a916:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a91a:	460b      	mov	r3, r1
 800a91c:	4313      	orrs	r3, r2
 800a91e:	d04e      	beq.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800a920:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a92c:	d02e      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800a92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a932:	d827      	bhi.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800a934:	2bc0      	cmp	r3, #192	; 0xc0
 800a936:	d02b      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800a938:	2bc0      	cmp	r3, #192	; 0xc0
 800a93a:	d823      	bhi.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800a93c:	2b80      	cmp	r3, #128	; 0x80
 800a93e:	d017      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800a940:	2b80      	cmp	r3, #128	; 0x80
 800a942:	d81f      	bhi.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800a948:	2b40      	cmp	r3, #64	; 0x40
 800a94a:	d007      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800a94c:	e01a      	b.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a94e:	4b7e      	ldr	r3, [pc, #504]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a952:	4a7d      	ldr	r2, [pc, #500]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a958:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a95a:	e01a      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a95c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a960:	3308      	adds	r3, #8
 800a962:	4618      	mov	r0, r3
 800a964:	f003 f9f4 	bl	800dd50 <RCCEx_PLL2_Config>
 800a968:	4603      	mov	r3, r0
 800a96a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a96e:	e010      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a974:	3330      	adds	r3, #48	; 0x30
 800a976:	4618      	mov	r0, r3
 800a978:	f003 fa82 	bl	800de80 <RCCEx_PLL3_Config>
 800a97c:	4603      	mov	r3, r0
 800a97e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a982:	e006      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a98a:	e002      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800a98c:	bf00      	nop
 800a98e:	e000      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800a990:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a992:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10d      	bne.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a99a:	4b6b      	ldr	r3, [pc, #428]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a99c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a9a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a9a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a9ac:	4a66      	ldr	r2, [pc, #408]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a9ae:	430b      	orrs	r3, r1
 800a9b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a9b4:	e003      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a9ba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800a9be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a9ca:	633b      	str	r3, [r7, #48]	; 0x30
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	d055      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800a9da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a9de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a9e2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a9e6:	d031      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800a9e8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a9ec:	d82a      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a9ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9f2:	d02d      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800a9f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9f8:	d824      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a9fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a9fe:	d029      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800aa00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aa04:	d81e      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800aa06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa0a:	d011      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800aa0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa10:	d818      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d020      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800aa16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa1a:	d113      	bne.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aa1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800aa20:	3308      	adds	r3, #8
 800aa22:	4618      	mov	r0, r3
 800aa24:	f003 f994 	bl	800dd50 <RCCEx_PLL2_Config>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800aa2e:	e014      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aa30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800aa34:	3330      	adds	r3, #48	; 0x30
 800aa36:	4618      	mov	r0, r3
 800aa38:	f003 fa22 	bl	800de80 <RCCEx_PLL3_Config>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800aa42:	e00a      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800aa4a:	e006      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800aa4c:	bf00      	nop
 800aa4e:	e004      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800aa50:	bf00      	nop
 800aa52:	e002      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800aa54:	bf00      	nop
 800aa56:	e000      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800aa58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa5a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10d      	bne.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800aa62:	4b39      	ldr	r3, [pc, #228]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800aa64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa68:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800aa6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800aa70:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800aa74:	4a34      	ldr	r2, [pc, #208]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800aa76:	430b      	orrs	r3, r1
 800aa78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa7c:	e003      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800aa82:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800aa86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aa92:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa94:	2300      	movs	r3, #0
 800aa96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa98:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	d058      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800aaa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800aaa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aaaa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800aaae:	d031      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800aab0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800aab4:	d82a      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800aab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaba:	d02d      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800aabc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aac0:	d824      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800aac2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aac6:	d029      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800aac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aacc:	d81e      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800aace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aad2:	d011      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800aad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aad8:	d818      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d020      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800aade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aae2:	d113      	bne.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800aae8:	3308      	adds	r3, #8
 800aaea:	4618      	mov	r0, r3
 800aaec:	f003 f930 	bl	800dd50 <RCCEx_PLL2_Config>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800aaf6:	e014      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aaf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800aafc:	3330      	adds	r3, #48	; 0x30
 800aafe:	4618      	mov	r0, r3
 800ab00:	f003 f9be 	bl	800de80 <RCCEx_PLL3_Config>
 800ab04:	4603      	mov	r3, r0
 800ab06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800ab0a:	e00a      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800ab12:	e006      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ab14:	bf00      	nop
 800ab16:	e004      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ab18:	bf00      	nop
 800ab1a:	e002      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ab1c:	bf00      	nop
 800ab1e:	e000      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ab20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d110      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800ab2a:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ab2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab30:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ab34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ab38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab3c:	4902      	ldr	r1, [pc, #8]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800ab44:	e006      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800ab46:	bf00      	nop
 800ab48:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ab50:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ab54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	6239      	str	r1, [r7, #32]
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	627b      	str	r3, [r7, #36]	; 0x24
 800ab66:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	d055      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800ab70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ab74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab78:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800ab7c:	d031      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800ab7e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800ab82:	d82a      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ab84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab88:	d02d      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800ab8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab8e:	d824      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ab90:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800ab94:	d029      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800ab96:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800ab9a:	d81e      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ab9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba0:	d011      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800aba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba6:	d818      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d020      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800abac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abb0:	d113      	bne.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800abb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800abb6:	3308      	adds	r3, #8
 800abb8:	4618      	mov	r0, r3
 800abba:	f003 f8c9 	bl	800dd50 <RCCEx_PLL2_Config>
 800abbe:	4603      	mov	r3, r0
 800abc0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800abc4:	e014      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800abc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800abca:	3330      	adds	r3, #48	; 0x30
 800abcc:	4618      	mov	r0, r3
 800abce:	f003 f957 	bl	800de80 <RCCEx_PLL3_Config>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800abd8:	e00a      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800abe0:	e006      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800abe2:	bf00      	nop
 800abe4:	e004      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800abe6:	bf00      	nop
 800abe8:	e002      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800abea:	bf00      	nop
 800abec:	e000      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800abee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abf0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10d      	bne.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800abf8:	4b88      	ldr	r3, [pc, #544]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800abfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abfe:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800ac02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ac06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac0a:	4984      	ldr	r1, [pc, #528]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800ac12:	e003      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ac18:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ac1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	2100      	movs	r1, #0
 800ac26:	61b9      	str	r1, [r7, #24]
 800ac28:	f003 0302 	and.w	r3, r3, #2
 800ac2c:	61fb      	str	r3, [r7, #28]
 800ac2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ac32:	460b      	mov	r3, r1
 800ac34:	4313      	orrs	r3, r2
 800ac36:	d03d      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800ac38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ac3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d81c      	bhi.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800ac44:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800ac46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4a:	bf00      	nop
 800ac4c:	0800ac87 	.word	0x0800ac87
 800ac50:	0800ac5d 	.word	0x0800ac5d
 800ac54:	0800ac6b 	.word	0x0800ac6b
 800ac58:	0800ac87 	.word	0x0800ac87
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac5c:	4b6f      	ldr	r3, [pc, #444]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	4a6e      	ldr	r2, [pc, #440]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ac62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac66:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800ac68:	e00e      	b.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ac6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ac6e:	3308      	adds	r3, #8
 800ac70:	4618      	mov	r0, r3
 800ac72:	f003 f86d 	bl	800dd50 <RCCEx_PLL2_Config>
 800ac76:	4603      	mov	r3, r0
 800ac78:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800ac7c:	e004      	b.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800ac84:	e000      	b.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800ac86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac88:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10d      	bne.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800ac90:	4b62      	ldr	r3, [pc, #392]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ac92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ac96:	f023 0203 	bic.w	r2, r3, #3
 800ac9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ac9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800aca2:	495e      	ldr	r1, [pc, #376]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800aca4:	4313      	orrs	r3, r2
 800aca6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800acaa:	e003      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800acb0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800acb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	2100      	movs	r1, #0
 800acbe:	6139      	str	r1, [r7, #16]
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	617b      	str	r3, [r7, #20]
 800acc6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800acca:	460b      	mov	r3, r1
 800accc:	4313      	orrs	r3, r2
 800acce:	d03a      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800acd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800acd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800acd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acdc:	d00e      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800acde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ace2:	d815      	bhi.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d017      	beq.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800ace8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acec:	d110      	bne.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acee:	4b4b      	ldr	r3, [pc, #300]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800acf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf2:	4a4a      	ldr	r2, [pc, #296]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800acf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acf8:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800acfa:	e00e      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800acfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ad00:	3308      	adds	r3, #8
 800ad02:	4618      	mov	r0, r3
 800ad04:	f003 f824 	bl	800dd50 <RCCEx_PLL2_Config>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800ad0e:	e004      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800ad16:	e000      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800ad18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10d      	bne.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800ad22:	4b3e      	ldr	r3, [pc, #248]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ad24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ad30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ad34:	4939      	ldr	r1, [pc, #228]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800ad3c:	e003      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ad42:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	2100      	movs	r1, #0
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	f003 0310 	and.w	r3, r3, #16
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	d038      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800ad62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ad66:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ad6a:	2b30      	cmp	r3, #48	; 0x30
 800ad6c:	d01b      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800ad6e:	2b30      	cmp	r3, #48	; 0x30
 800ad70:	d815      	bhi.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800ad72:	2b10      	cmp	r3, #16
 800ad74:	d002      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800ad76:	2b20      	cmp	r3, #32
 800ad78:	d007      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800ad7a:	e010      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad7c:	4b27      	ldr	r3, [pc, #156]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad80:	4a26      	ldr	r2, [pc, #152]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ad82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad86:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad88:	e00e      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ad8e:	3330      	adds	r3, #48	; 0x30
 800ad90:	4618      	mov	r0, r3
 800ad92:	f003 f875 	bl	800de80 <RCCEx_PLL3_Config>
 800ad96:	4603      	mov	r3, r0
 800ad98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800ad9c:	e004      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800ada4:	e000      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800ada6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ada8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10d      	bne.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800adb0:	4b1a      	ldr	r3, [pc, #104]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800adb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800adb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800adba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800adbe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800adc2:	4916      	ldr	r1, [pc, #88]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800adc4:	4313      	orrs	r3, r2
 800adc6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800adca:	e003      	b.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adcc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800add0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800add4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	2100      	movs	r1, #0
 800adde:	6039      	str	r1, [r7, #0]
 800ade0:	f003 0308 	and.w	r3, r3, #8
 800ade4:	607b      	str	r3, [r7, #4]
 800ade6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800adea:	460b      	mov	r3, r1
 800adec:	4313      	orrs	r3, r2
 800adee:	d00c      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800adf0:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800adf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800adf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800adfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800adfe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ae02:	4906      	ldr	r1, [pc, #24]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ae04:	4313      	orrs	r3, r2
 800ae06:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800ae0a:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800ae14:	46bd      	mov	sp, r7
 800ae16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae1a:	bf00      	nop
 800ae1c:	44020c00 	.word	0x44020c00

0800ae20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b08b      	sub	sp, #44	; 0x2c
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800ae28:	4bad      	ldr	r3, [pc, #692]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ae2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae30:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ae32:	4bab      	ldr	r3, [pc, #684]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ae34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800ae3c:	4ba8      	ldr	r3, [pc, #672]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae40:	0a1b      	lsrs	r3, r3, #8
 800ae42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae46:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800ae48:	4ba5      	ldr	r3, [pc, #660]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ae4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4c:	f003 0310 	and.w	r3, r3, #16
 800ae50:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ae52:	4ba3      	ldr	r3, [pc, #652]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ae54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae56:	08db      	lsrs	r3, r3, #3
 800ae58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	fb02 f303 	mul.w	r3, r2, r3
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 8126 	beq.w	800b0c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d053      	beq.n	800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d86f      	bhi.n	800af62 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d003      	beq.n	800ae90 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d02b      	beq.n	800aee6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800ae8e:	e068      	b.n	800af62 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae90:	4b93      	ldr	r3, [pc, #588]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	08db      	lsrs	r3, r3, #3
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	4a92      	ldr	r2, [pc, #584]	; (800b0e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800ae9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aea0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	ee07 3a90 	vmov	s15, r3
 800aea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	ee07 3a90 	vmov	s15, r3
 800aec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec4:	ed97 6a04 	vldr	s12, [r7, #16]
 800aec8:	eddf 5a87 	vldr	s11, [pc, #540]	; 800b0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800aecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aedc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800aee4:	e068      	b.n	800afb8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	ee07 3a90 	vmov	s15, r3
 800aeec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800b0ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800aef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef8:	6a3b      	ldr	r3, [r7, #32]
 800aefa:	ee07 3a90 	vmov	s15, r3
 800aefe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af02:	ed97 6a04 	vldr	s12, [r7, #16]
 800af06:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800af0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af1e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800af22:	e049      	b.n	800afb8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2e:	eddf 6a70 	vldr	s13, [pc, #448]	; 800b0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800af32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af36:	6a3b      	ldr	r3, [r7, #32]
 800af38:	ee07 3a90 	vmov	s15, r3
 800af3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af40:	ed97 6a04 	vldr	s12, [r7, #16]
 800af44:	eddf 5a68 	vldr	s11, [pc, #416]	; 800b0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800af48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800af60:	e02a      	b.n	800afb8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af62:	4b5f      	ldr	r3, [pc, #380]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	08db      	lsrs	r3, r3, #3
 800af68:	f003 0303 	and.w	r3, r3, #3
 800af6c:	4a5d      	ldr	r2, [pc, #372]	; (800b0e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800af6e:	fa22 f303 	lsr.w	r3, r2, r3
 800af72:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	ee07 3a90 	vmov	s15, r3
 800af84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af96:	ed97 6a04 	vldr	s12, [r7, #16]
 800af9a:	eddf 5a53 	vldr	s11, [pc, #332]	; 800b0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800af9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800afb6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afb8:	4b49      	ldr	r3, [pc, #292]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afc4:	d121      	bne.n	800b00a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800afc6:	4b46      	ldr	r3, [pc, #280]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800afc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d017      	beq.n	800b002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800afd2:	4b43      	ldr	r3, [pc, #268]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800afd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd6:	0a5b      	lsrs	r3, r3, #9
 800afd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800afe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800afec:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800aff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	e006      	b.n	800b010 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	e002      	b.n	800b010 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b010:	4b33      	ldr	r3, [pc, #204]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b01c:	d121      	bne.n	800b062 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b01e:	4b30      	ldr	r3, [pc, #192]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b026:	2b00      	cmp	r3, #0
 800b028:	d017      	beq.n	800b05a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b02a:	4b2d      	ldr	r3, [pc, #180]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02e:	0c1b      	lsrs	r3, r3, #16
 800b030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b040:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800b044:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b04c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b050:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	605a      	str	r2, [r3, #4]
 800b058:	e006      	b.n	800b068 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	605a      	str	r2, [r3, #4]
 800b060:	e002      	b.n	800b068 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b068:	4b1d      	ldr	r3, [pc, #116]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b074:	d121      	bne.n	800b0ba <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b076:	4b1a      	ldr	r3, [pc, #104]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d017      	beq.n	800b0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b082:	4b17      	ldr	r3, [pc, #92]	; (800b0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b086:	0e1b      	lsrs	r3, r3, #24
 800b088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b08c:	ee07 3a90 	vmov	s15, r3
 800b090:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800b094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b098:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800b09c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b0a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0a8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b0b0:	e010      	b.n	800b0d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	609a      	str	r2, [r3, #8]
}
 800b0b8:	e00c      	b.n	800b0d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	609a      	str	r2, [r3, #8]
}
 800b0c0:	e008      	b.n	800b0d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	609a      	str	r2, [r3, #8]
}
 800b0d4:	bf00      	nop
 800b0d6:	372c      	adds	r7, #44	; 0x2c
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	44020c00 	.word	0x44020c00
 800b0e4:	03d09000 	.word	0x03d09000
 800b0e8:	46000000 	.word	0x46000000
 800b0ec:	4a742400 	.word	0x4a742400
 800b0f0:	4c3ebc20 	.word	0x4c3ebc20

0800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b08b      	sub	sp, #44	; 0x2c
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b0fc:	4bad      	ldr	r3, [pc, #692]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b104:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b106:	4bab      	ldr	r3, [pc, #684]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	f003 0303 	and.w	r3, r3, #3
 800b10e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800b110:	4ba8      	ldr	r3, [pc, #672]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b114:	0a1b      	lsrs	r3, r3, #8
 800b116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b11a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800b11c:	4ba5      	ldr	r3, [pc, #660]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b120:	f003 0310 	and.w	r3, r3, #16
 800b124:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800b126:	4ba3      	ldr	r3, [pc, #652]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12a:	08db      	lsrs	r3, r3, #3
 800b12c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	fb02 f303 	mul.w	r3, r2, r3
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 8126 	beq.w	800b396 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d053      	beq.n	800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	2b03      	cmp	r3, #3
 800b154:	d86f      	bhi.n	800b236 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d003      	beq.n	800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d02b      	beq.n	800b1ba <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800b162:	e068      	b.n	800b236 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b164:	4b93      	ldr	r3, [pc, #588]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	08db      	lsrs	r3, r3, #3
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	4a92      	ldr	r2, [pc, #584]	; (800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	ee07 3a90 	vmov	s15, r3
 800b17c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	6a3b      	ldr	r3, [r7, #32]
 800b190:	ee07 3a90 	vmov	s15, r3
 800b194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b198:	ed97 6a04 	vldr	s12, [r7, #16]
 800b19c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800b3bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800b1a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800b1b8:	e068      	b.n	800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	ee07 3a90 	vmov	s15, r3
 800b1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800b3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800b1c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d6:	ed97 6a04 	vldr	s12, [r7, #16]
 800b1da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b3bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800b1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800b1f6:	e049      	b.n	800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b202:	eddf 6a70 	vldr	s13, [pc, #448]	; 800b3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800b206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b214:	ed97 6a04 	vldr	s12, [r7, #16]
 800b218:	eddf 5a68 	vldr	s11, [pc, #416]	; 800b3bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800b21c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b230:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800b234:	e02a      	b.n	800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b236:	4b5f      	ldr	r3, [pc, #380]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	08db      	lsrs	r3, r3, #3
 800b23c:	f003 0303 	and.w	r3, r3, #3
 800b240:	4a5d      	ldr	r2, [pc, #372]	; (800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800b242:	fa22 f303 	lsr.w	r3, r2, r3
 800b246:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	ee07 3a90 	vmov	s15, r3
 800b258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	ee07 3a90 	vmov	s15, r3
 800b266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b26a:	ed97 6a04 	vldr	s12, [r7, #16]
 800b26e:	eddf 5a53 	vldr	s11, [pc, #332]	; 800b3bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800b272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b27a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b286:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800b28a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b28c:	4b49      	ldr	r3, [pc, #292]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b298:	d121      	bne.n	800b2de <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800b29a:	4b46      	ldr	r3, [pc, #280]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d017      	beq.n	800b2d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b2a6:	4b43      	ldr	r3, [pc, #268]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2aa:	0a5b      	lsrs	r3, r3, #9
 800b2ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b0:	ee07 3a90 	vmov	s15, r3
 800b2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800b2b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2bc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800b2c0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b2c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2cc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	e006      	b.n	800b2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	e002      	b.n	800b2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2e4:	4b33      	ldr	r3, [pc, #204]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2f0:	d121      	bne.n	800b336 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800b2f2:	4b30      	ldr	r3, [pc, #192]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d017      	beq.n	800b32e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b2fe:	4b2d      	ldr	r3, [pc, #180]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b302:	0c1b      	lsrs	r3, r3, #16
 800b304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b308:	ee07 3a90 	vmov	s15, r3
 800b30c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800b310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b314:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800b318:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b31c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b324:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	605a      	str	r2, [r3, #4]
 800b32c:	e006      	b.n	800b33c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	605a      	str	r2, [r3, #4]
 800b334:	e002      	b.n	800b33c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b33c:	4b1d      	ldr	r3, [pc, #116]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b348:	d121      	bne.n	800b38e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800b34a:	4b1a      	ldr	r3, [pc, #104]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d017      	beq.n	800b386 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b356:	4b17      	ldr	r3, [pc, #92]	; (800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b35a:	0e1b      	lsrs	r3, r3, #24
 800b35c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b360:	ee07 3a90 	vmov	s15, r3
 800b364:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800b368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b36c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800b370:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b37c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b384:	e010      	b.n	800b3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	609a      	str	r2, [r3, #8]
}
 800b38c:	e00c      	b.n	800b3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	609a      	str	r2, [r3, #8]
}
 800b394:	e008      	b.n	800b3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	609a      	str	r2, [r3, #8]
}
 800b3a8:	bf00      	nop
 800b3aa:	372c      	adds	r7, #44	; 0x2c
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	44020c00 	.word	0x44020c00
 800b3b8:	03d09000 	.word	0x03d09000
 800b3bc:	46000000 	.word	0x46000000
 800b3c0:	4a742400 	.word	0x4a742400
 800b3c4:	4c3ebc20 	.word	0x4c3ebc20

0800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b08b      	sub	sp, #44	; 0x2c
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800b3d0:	4bad      	ldr	r3, [pc, #692]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800b3da:	4bab      	ldr	r3, [pc, #684]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3de:	f003 0303 	and.w	r3, r3, #3
 800b3e2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800b3e4:	4ba8      	ldr	r3, [pc, #672]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e8:	0a1b      	lsrs	r3, r3, #8
 800b3ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3ee:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800b3f0:	4ba5      	ldr	r3, [pc, #660]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f4:	f003 0310 	and.w	r3, r3, #16
 800b3f8:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800b3fa:	4ba3      	ldr	r3, [pc, #652]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b3fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3fe:	08db      	lsrs	r3, r3, #3
 800b400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	fb02 f303 	mul.w	r3, r2, r3
 800b40a:	ee07 3a90 	vmov	s15, r3
 800b40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b412:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 8126 	beq.w	800b66a <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	2b03      	cmp	r3, #3
 800b422:	d053      	beq.n	800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	2b03      	cmp	r3, #3
 800b428:	d86f      	bhi.n	800b50a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d003      	beq.n	800b438 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	2b02      	cmp	r3, #2
 800b434:	d02b      	beq.n	800b48e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800b436:	e068      	b.n	800b50a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b438:	4b93      	ldr	r3, [pc, #588]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	08db      	lsrs	r3, r3, #3
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	4a92      	ldr	r2, [pc, #584]	; (800b68c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800b444:	fa22 f303 	lsr.w	r3, r2, r3
 800b448:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	ee07 3a90 	vmov	s15, r3
 800b450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	ee07 3a90 	vmov	s15, r3
 800b45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	ee07 3a90 	vmov	s15, r3
 800b468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b46c:	ed97 6a04 	vldr	s12, [r7, #16]
 800b470:	eddf 5a87 	vldr	s11, [pc, #540]	; 800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b47c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b484:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b488:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800b48c:	e068      	b.n	800b560 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	ee07 3a90 	vmov	s15, r3
 800b494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b498:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800b694 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800b49c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	ee07 3a90 	vmov	s15, r3
 800b4a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4aa:	ed97 6a04 	vldr	s12, [r7, #16]
 800b4ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b4b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800b4ca:	e049      	b.n	800b560 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	ee07 3a90 	vmov	s15, r3
 800b4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d6:	eddf 6a70 	vldr	s13, [pc, #448]	; 800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800b4da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4de:	6a3b      	ldr	r3, [r7, #32]
 800b4e0:	ee07 3a90 	vmov	s15, r3
 800b4e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e8:	ed97 6a04 	vldr	s12, [r7, #16]
 800b4ec:	eddf 5a68 	vldr	s11, [pc, #416]	; 800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b4f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b504:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800b508:	e02a      	b.n	800b560 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b50a:	4b5f      	ldr	r3, [pc, #380]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	08db      	lsrs	r3, r3, #3
 800b510:	f003 0303 	and.w	r3, r3, #3
 800b514:	4a5d      	ldr	r2, [pc, #372]	; (800b68c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800b516:	fa22 f303 	lsr.w	r3, r2, r3
 800b51a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	ee07 3a90 	vmov	s15, r3
 800b522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	ee07 3a90 	vmov	s15, r3
 800b52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	ee07 3a90 	vmov	s15, r3
 800b53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b53e:	ed97 6a04 	vldr	s12, [r7, #16]
 800b542:	eddf 5a53 	vldr	s11, [pc, #332]	; 800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800b55e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b560:	4b49      	ldr	r3, [pc, #292]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b56c:	d121      	bne.n	800b5b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800b56e:	4b46      	ldr	r3, [pc, #280]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b576:	2b00      	cmp	r3, #0
 800b578:	d017      	beq.n	800b5aa <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b57a:	4b43      	ldr	r3, [pc, #268]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57e:	0a5b      	lsrs	r3, r3, #9
 800b580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b584:	ee07 3a90 	vmov	s15, r3
 800b588:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800b58c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b590:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800b594:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b59c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	e006      	b.n	800b5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	601a      	str	r2, [r3, #0]
 800b5b0:	e002      	b.n	800b5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5b8:	4b33      	ldr	r3, [pc, #204]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5c4:	d121      	bne.n	800b60a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800b5c6:	4b30      	ldr	r3, [pc, #192]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d017      	beq.n	800b602 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b5d2:	4b2d      	ldr	r3, [pc, #180]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d6:	0c1b      	lsrs	r3, r3, #16
 800b5d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800b5e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5e8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800b5ec:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b5f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5f8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	605a      	str	r2, [r3, #4]
 800b600:	e006      	b.n	800b610 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	605a      	str	r2, [r3, #4]
 800b608:	e002      	b.n	800b610 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b610:	4b1d      	ldr	r3, [pc, #116]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b61c:	d121      	bne.n	800b662 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800b61e:	4b1a      	ldr	r3, [pc, #104]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d017      	beq.n	800b65a <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b62a:	4b17      	ldr	r3, [pc, #92]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62e:	0e1b      	lsrs	r3, r3, #24
 800b630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800b63c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b640:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800b644:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b64c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b650:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800b658:	e010      	b.n	800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	609a      	str	r2, [r3, #8]
}
 800b660:	e00c      	b.n	800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	609a      	str	r2, [r3, #8]
}
 800b668:	e008      	b.n	800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	609a      	str	r2, [r3, #8]
}
 800b67c:	bf00      	nop
 800b67e:	372c      	adds	r7, #44	; 0x2c
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	44020c00 	.word	0x44020c00
 800b68c:	03d09000 	.word	0x03d09000
 800b690:	46000000 	.word	0x46000000
 800b694:	4a742400 	.word	0x4a742400
 800b698:	4c3ebc20 	.word	0x4c3ebc20

0800b69c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b69c:	b590      	push	{r4, r7, lr}
 800b69e:	b08f      	sub	sp, #60	; 0x3c
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800b6a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b6aa:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800b6ae:	4321      	orrs	r1, r4
 800b6b0:	d150      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b6b2:	4b26      	ldr	r3, [pc, #152]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b6b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b6b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6bc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800b6be:	4b23      	ldr	r3, [pc, #140]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b6c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b6c4:	f003 0302 	and.w	r3, r3, #2
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d108      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6d2:	d104      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800b6d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6da:	f002 bb2a 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800b6de:	4b1b      	ldr	r3, [pc, #108]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b6e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b6e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6ec:	d108      	bne.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6f4:	d104      	bne.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800b6f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b6fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b6fc:	f002 bb19 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800b700:	4b12      	ldr	r3, [pc, #72]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b70c:	d119      	bne.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b714:	d115      	bne.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800b716:	4b0d      	ldr	r3, [pc, #52]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b718:	69db      	ldr	r3, [r3, #28]
 800b71a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b71e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b722:	d30a      	bcc.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800b724:	4b09      	ldr	r3, [pc, #36]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b726:	69db      	ldr	r3, [r3, #28]
 800b728:	0a1b      	lsrs	r3, r3, #8
 800b72a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b72e:	4a08      	ldr	r2, [pc, #32]	; (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800b730:	fbb2 f3f3 	udiv	r3, r2, r3
 800b734:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800b736:	f002 bafc 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800b73a:	2300      	movs	r3, #0
 800b73c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800b73e:	f002 baf8 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800b742:	2300      	movs	r3, #0
 800b744:	637b      	str	r3, [r7, #52]	; 0x34
 800b746:	f002 baf4 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b74a:	bf00      	nop
 800b74c:	44020c00 	.word	0x44020c00
 800b750:	02faf080 	.word	0x02faf080
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800b754:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b758:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800b75c:	ea50 0104 	orrs.w	r1, r0, r4
 800b760:	f001 8275 	beq.w	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800b764:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b768:	2801      	cmp	r0, #1
 800b76a:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800b76e:	f082 82dd 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b772:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b776:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800b77a:	ea50 0104 	orrs.w	r1, r0, r4
 800b77e:	f001 816c 	beq.w	800ca5a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800b782:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b786:	2801      	cmp	r0, #1
 800b788:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800b78c:	f082 82ce 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b790:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b794:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800b798:	ea50 0104 	orrs.w	r1, r0, r4
 800b79c:	f001 8602 	beq.w	800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800b7a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7a4:	2801      	cmp	r0, #1
 800b7a6:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800b7aa:	f082 82bf 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b7ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7b2:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800b7b6:	ea50 0104 	orrs.w	r1, r0, r4
 800b7ba:	f001 854c 	beq.w	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800b7be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7c2:	2801      	cmp	r0, #1
 800b7c4:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800b7c8:	f082 82b0 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b7cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7d0:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800b7d4:	ea50 0104 	orrs.w	r1, r0, r4
 800b7d8:	f001 849e 	beq.w	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800b7dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7e0:	2801      	cmp	r0, #1
 800b7e2:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800b7e6:	f082 82a1 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b7ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7ee:	f1a1 0420 	sub.w	r4, r1, #32
 800b7f2:	ea50 0104 	orrs.w	r1, r0, r4
 800b7f6:	f001 83e8 	beq.w	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800b7fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7fe:	2801      	cmp	r0, #1
 800b800:	f171 0120 	sbcs.w	r1, r1, #32
 800b804:	f082 8292 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b80c:	f1a1 0410 	sub.w	r4, r1, #16
 800b810:	ea50 0104 	orrs.w	r1, r0, r4
 800b814:	f002 8256 	beq.w	800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b81c:	2801      	cmp	r0, #1
 800b81e:	f171 0110 	sbcs.w	r1, r1, #16
 800b822:	f082 8283 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b82a:	f1a1 0408 	sub.w	r4, r1, #8
 800b82e:	ea50 0104 	orrs.w	r1, r0, r4
 800b832:	f002 81cc 	beq.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800b836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b83a:	2801      	cmp	r0, #1
 800b83c:	f171 0108 	sbcs.w	r1, r1, #8
 800b840:	f082 8274 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b844:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b848:	1f0c      	subs	r4, r1, #4
 800b84a:	ea50 0104 	orrs.w	r1, r0, r4
 800b84e:	f001 8648 	beq.w	800d4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800b852:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b856:	2801      	cmp	r0, #1
 800b858:	f171 0104 	sbcs.w	r1, r1, #4
 800b85c:	f082 8266 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b860:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b864:	1e8c      	subs	r4, r1, #2
 800b866:	ea50 0104 	orrs.w	r1, r0, r4
 800b86a:	f002 8143 	beq.w	800daf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800b86e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b872:	2801      	cmp	r0, #1
 800b874:	f171 0102 	sbcs.w	r1, r1, #2
 800b878:	f082 8258 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b87c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b880:	1e4c      	subs	r4, r1, #1
 800b882:	ea50 0104 	orrs.w	r1, r0, r4
 800b886:	f002 80ce 	beq.w	800da26 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800b88a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b88e:	2801      	cmp	r0, #1
 800b890:	f171 0101 	sbcs.w	r1, r1, #1
 800b894:	f082 824a 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b89c:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800b8a0:	4321      	orrs	r1, r4
 800b8a2:	f002 8059 	beq.w	800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800b8a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8aa:	4cd9      	ldr	r4, [pc, #868]	; (800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800b8ac:	42a0      	cmp	r0, r4
 800b8ae:	f171 0100 	sbcs.w	r1, r1, #0
 800b8b2:	f082 823b 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b8b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8ba:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800b8be:	4321      	orrs	r1, r4
 800b8c0:	f001 87d9 	beq.w	800d876 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800b8c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8c8:	4cd2      	ldr	r4, [pc, #840]	; (800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800b8ca:	42a0      	cmp	r0, r4
 800b8cc:	f171 0100 	sbcs.w	r1, r1, #0
 800b8d0:	f082 822c 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b8d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8d8:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800b8dc:	4321      	orrs	r1, r4
 800b8de:	f001 8751 	beq.w	800d784 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800b8e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8e6:	4ccc      	ldr	r4, [pc, #816]	; (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800b8e8:	42a0      	cmp	r0, r4
 800b8ea:	f171 0100 	sbcs.w	r1, r1, #0
 800b8ee:	f082 821d 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b8f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8f6:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800b8fa:	4321      	orrs	r1, r4
 800b8fc:	f001 869a 	beq.w	800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800b900:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b904:	4cc5      	ldr	r4, [pc, #788]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800b906:	42a0      	cmp	r0, r4
 800b908:	f171 0100 	sbcs.w	r1, r1, #0
 800b90c:	f082 820e 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b910:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b914:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800b918:	4321      	orrs	r1, r4
 800b91a:	f001 8612 	beq.w	800d542 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800b91e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b922:	4cbf      	ldr	r4, [pc, #764]	; (800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800b924:	42a0      	cmp	r0, r4
 800b926:	f171 0100 	sbcs.w	r1, r1, #0
 800b92a:	f082 81ff 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b92e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b932:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800b936:	4321      	orrs	r1, r4
 800b938:	f002 817e 	beq.w	800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800b93c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b940:	4cb8      	ldr	r4, [pc, #736]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b942:	42a0      	cmp	r0, r4
 800b944:	f171 0100 	sbcs.w	r1, r1, #0
 800b948:	f082 81f0 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b94c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b950:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 800b954:	4321      	orrs	r1, r4
 800b956:	f000 829e 	beq.w	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800b95a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b95e:	4cb2      	ldr	r4, [pc, #712]	; (800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b960:	42a0      	cmp	r0, r4
 800b962:	f171 0100 	sbcs.w	r1, r1, #0
 800b966:	f082 81e1 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b96a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b96e:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800b972:	4321      	orrs	r1, r4
 800b974:	f000 826d 	beq.w	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800b978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b97c:	4cab      	ldr	r4, [pc, #684]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b97e:	42a0      	cmp	r0, r4
 800b980:	f171 0100 	sbcs.w	r1, r1, #0
 800b984:	f082 81d2 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b98c:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800b990:	4321      	orrs	r1, r4
 800b992:	f001 800d 	beq.w	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800b996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b99a:	4ca5      	ldr	r4, [pc, #660]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b99c:	42a0      	cmp	r0, r4
 800b99e:	f171 0100 	sbcs.w	r1, r1, #0
 800b9a2:	f082 81c3 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b9a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9aa:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800b9ae:	4321      	orrs	r1, r4
 800b9b0:	f000 81d0 	beq.w	800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800b9b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9b8:	4c9e      	ldr	r4, [pc, #632]	; (800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b9ba:	42a0      	cmp	r0, r4
 800b9bc:	f171 0100 	sbcs.w	r1, r1, #0
 800b9c0:	f082 81b4 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b9c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9c8:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 800b9cc:	4321      	orrs	r1, r4
 800b9ce:	f000 8142 	beq.w	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800b9d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9d6:	4c98      	ldr	r4, [pc, #608]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b9d8:	42a0      	cmp	r0, r4
 800b9da:	f171 0100 	sbcs.w	r1, r1, #0
 800b9de:	f082 81a5 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b9e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9e6:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800b9ea:	4321      	orrs	r1, r4
 800b9ec:	f001 824e 	beq.w	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800b9f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9f4:	4c91      	ldr	r4, [pc, #580]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800b9f6:	42a0      	cmp	r0, r4
 800b9f8:	f171 0100 	sbcs.w	r1, r1, #0
 800b9fc:	f082 8196 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ba00:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba04:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800ba08:	4321      	orrs	r1, r4
 800ba0a:	f001 8197 	beq.w	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800ba0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba12:	4c8b      	ldr	r4, [pc, #556]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800ba14:	42a0      	cmp	r0, r4
 800ba16:	f171 0100 	sbcs.w	r1, r1, #0
 800ba1a:	f082 8187 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ba1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba22:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800ba26:	4321      	orrs	r1, r4
 800ba28:	f001 8154 	beq.w	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800ba2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba30:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800ba34:	f171 0100 	sbcs.w	r1, r1, #0
 800ba38:	f082 8178 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ba3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba40:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800ba44:	4321      	orrs	r1, r4
 800ba46:	f001 80b7 	beq.w	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800ba4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba4e:	f248 0401 	movw	r4, #32769	; 0x8001
 800ba52:	42a0      	cmp	r0, r4
 800ba54:	f171 0100 	sbcs.w	r1, r1, #0
 800ba58:	f082 8168 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ba5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba60:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 800ba64:	4321      	orrs	r1, r4
 800ba66:	f001 8064 	beq.w	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800ba6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba6e:	f244 0401 	movw	r4, #16385	; 0x4001
 800ba72:	42a0      	cmp	r0, r4
 800ba74:	f171 0100 	sbcs.w	r1, r1, #0
 800ba78:	f082 8158 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ba7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba80:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 800ba84:	4321      	orrs	r1, r4
 800ba86:	f001 8011 	beq.w	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800ba8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba8e:	f242 0401 	movw	r4, #8193	; 0x2001
 800ba92:	42a0      	cmp	r0, r4
 800ba94:	f171 0100 	sbcs.w	r1, r1, #0
 800ba98:	f082 8148 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ba9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800baa0:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 800baa4:	4321      	orrs	r1, r4
 800baa6:	f000 871e 	beq.w	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800baaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800baae:	f241 0401 	movw	r4, #4097	; 0x1001
 800bab2:	42a0      	cmp	r0, r4
 800bab4:	f171 0100 	sbcs.w	r1, r1, #0
 800bab8:	f082 8138 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800babc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bac0:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800bac4:	4321      	orrs	r1, r4
 800bac6:	f000 86a8 	beq.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800baca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bace:	f640 0401 	movw	r4, #2049	; 0x801
 800bad2:	42a0      	cmp	r0, r4
 800bad4:	f171 0100 	sbcs.w	r1, r1, #0
 800bad8:	f082 8128 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800badc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bae0:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 800bae4:	4321      	orrs	r1, r4
 800bae6:	f000 8632 	beq.w	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800baea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800baee:	f240 4401 	movw	r4, #1025	; 0x401
 800baf2:	42a0      	cmp	r0, r4
 800baf4:	f171 0100 	sbcs.w	r1, r1, #0
 800baf8:	f082 8118 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800bafc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb00:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 800bb04:	4321      	orrs	r1, r4
 800bb06:	f000 85b0 	beq.w	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800bb0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb0e:	f240 2401 	movw	r4, #513	; 0x201
 800bb12:	42a0      	cmp	r0, r4
 800bb14:	f171 0100 	sbcs.w	r1, r1, #0
 800bb18:	f082 8108 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800bb1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb20:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 800bb24:	4321      	orrs	r1, r4
 800bb26:	f000 8535 	beq.w	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800bb2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb2e:	f240 1401 	movw	r4, #257	; 0x101
 800bb32:	42a0      	cmp	r0, r4
 800bb34:	f171 0100 	sbcs.w	r1, r1, #0
 800bb38:	f082 80f8 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800bb3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb40:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800bb44:	4321      	orrs	r1, r4
 800bb46:	f000 84ba 	beq.w	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800bb4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb4e:	2881      	cmp	r0, #129	; 0x81
 800bb50:	f171 0100 	sbcs.w	r1, r1, #0
 800bb54:	f082 80ea 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800bb58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb5c:	2821      	cmp	r0, #33	; 0x21
 800bb5e:	f171 0100 	sbcs.w	r1, r1, #0
 800bb62:	d26f      	bcs.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800bb64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb68:	4301      	orrs	r1, r0
 800bb6a:	f002 80df 	beq.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800bb6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb72:	1e42      	subs	r2, r0, #1
 800bb74:	f141 33ff 	adc.w	r3, r1, #4294967295
 800bb78:	2a20      	cmp	r2, #32
 800bb7a:	f173 0100 	sbcs.w	r1, r3, #0
 800bb7e:	f082 80d5 	bcs.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800bb82:	2a1f      	cmp	r2, #31
 800bb84:	f202 80d2 	bhi.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800bb88:	a101      	add	r1, pc, #4	; (adr r1, 800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800bb8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb8e:	bf00      	nop
 800bb90:	0800bef1 	.word	0x0800bef1
 800bb94:	0800bfbd 	.word	0x0800bfbd
 800bb98:	0800dd2d 	.word	0x0800dd2d
 800bb9c:	0800c07d 	.word	0x0800c07d
 800bba0:	0800dd2d 	.word	0x0800dd2d
 800bba4:	0800dd2d 	.word	0x0800dd2d
 800bba8:	0800dd2d 	.word	0x0800dd2d
 800bbac:	0800c14d 	.word	0x0800c14d
 800bbb0:	0800dd2d 	.word	0x0800dd2d
 800bbb4:	0800dd2d 	.word	0x0800dd2d
 800bbb8:	0800dd2d 	.word	0x0800dd2d
 800bbbc:	0800dd2d 	.word	0x0800dd2d
 800bbc0:	0800dd2d 	.word	0x0800dd2d
 800bbc4:	0800dd2d 	.word	0x0800dd2d
 800bbc8:	0800dd2d 	.word	0x0800dd2d
 800bbcc:	0800c22f 	.word	0x0800c22f
 800bbd0:	0800dd2d 	.word	0x0800dd2d
 800bbd4:	0800dd2d 	.word	0x0800dd2d
 800bbd8:	0800dd2d 	.word	0x0800dd2d
 800bbdc:	0800dd2d 	.word	0x0800dd2d
 800bbe0:	0800dd2d 	.word	0x0800dd2d
 800bbe4:	0800dd2d 	.word	0x0800dd2d
 800bbe8:	0800dd2d 	.word	0x0800dd2d
 800bbec:	0800dd2d 	.word	0x0800dd2d
 800bbf0:	0800dd2d 	.word	0x0800dd2d
 800bbf4:	0800dd2d 	.word	0x0800dd2d
 800bbf8:	0800dd2d 	.word	0x0800dd2d
 800bbfc:	0800dd2d 	.word	0x0800dd2d
 800bc00:	0800dd2d 	.word	0x0800dd2d
 800bc04:	0800dd2d 	.word	0x0800dd2d
 800bc08:	0800dd2d 	.word	0x0800dd2d
 800bc0c:	0800c305 	.word	0x0800c305
 800bc10:	80000001 	.word	0x80000001
 800bc14:	40000001 	.word	0x40000001
 800bc18:	20000001 	.word	0x20000001
 800bc1c:	10000001 	.word	0x10000001
 800bc20:	08000001 	.word	0x08000001
 800bc24:	04000001 	.word	0x04000001
 800bc28:	00800001 	.word	0x00800001
 800bc2c:	00400001 	.word	0x00400001
 800bc30:	00200001 	.word	0x00200001
 800bc34:	00100001 	.word	0x00100001
 800bc38:	00080001 	.word	0x00080001
 800bc3c:	00040001 	.word	0x00040001
 800bc40:	00020001 	.word	0x00020001
 800bc44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc48:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800bc4c:	430b      	orrs	r3, r1
 800bc4e:	f000 83c4 	beq.w	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800bc52:	f002 b86b 	b.w	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800bc56:	4ba1      	ldr	r3, [pc, #644]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bc58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc5c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bc60:	633b      	str	r3, [r7, #48]	; 0x30
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc68:	d036      	beq.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc70:	d86b      	bhi.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc78:	d02b      	beq.n	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc80:	d863      	bhi.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc88:	d01b      	beq.n	800bcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc90:	d85b      	bhi.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800bc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d004      	beq.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800bc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc9e:	d008      	beq.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800bca0:	e053      	b.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bca2:	f107 0320 	add.w	r3, r7, #32
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7ff f8ba 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bcb0:	e04e      	b.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcb2:	f107 0314 	add.w	r3, r7, #20
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7ff fa1c 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bcc0:	e046      	b.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcc2:	f107 0308 	add.w	r3, r7, #8
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7ff fb7e 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bcd0:	e03e      	b.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bcd2:	4b83      	ldr	r3, [pc, #524]	; (800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800bcd4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bcd6:	e03b      	b.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bcd8:	4b80      	ldr	r3, [pc, #512]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bcda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bcde:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800bce2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bce4:	4b7d      	ldr	r3, [pc, #500]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 0302 	and.w	r3, r3, #2
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d10c      	bne.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800bcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d109      	bne.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bcf6:	4b79      	ldr	r3, [pc, #484]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	08db      	lsrs	r3, r3, #3
 800bcfc:	f003 0303 	and.w	r3, r3, #3
 800bd00:	4a78      	ldr	r2, [pc, #480]	; (800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800bd02:	fa22 f303 	lsr.w	r3, r2, r3
 800bd06:	637b      	str	r3, [r7, #52]	; 0x34
 800bd08:	e01e      	b.n	800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd0a:	4b74      	ldr	r3, [pc, #464]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd16:	d106      	bne.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd1e:	d102      	bne.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bd20:	4b71      	ldr	r3, [pc, #452]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800bd22:	637b      	str	r3, [r7, #52]	; 0x34
 800bd24:	e010      	b.n	800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd26:	4b6d      	ldr	r3, [pc, #436]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd32:	d106      	bne.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd3a:	d102      	bne.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bd3c:	4b6b      	ldr	r3, [pc, #428]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800bd3e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd40:	e002      	b.n	800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800bd46:	e003      	b.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800bd48:	e002      	b.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bd4e:	bf00      	nop
          }
        }
        break;
 800bd50:	f001 bfef 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800bd54:	4b61      	ldr	r3, [pc, #388]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bd56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd5a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800bd5e:	633b      	str	r3, [r7, #48]	; 0x30
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd66:	d036      	beq.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd6e:	d86b      	bhi.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800bd76:	d02b      	beq.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800bd7e:	d863      	bhi.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd86:	d01b      	beq.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd8e:	d85b      	bhi.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d004      	beq.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd9c:	d008      	beq.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800bd9e:	e053      	b.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bda0:	f107 0320 	add.w	r3, r7, #32
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7ff f83b 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bdae:	e04e      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdb0:	f107 0314 	add.w	r3, r7, #20
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff f99d 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bdbe:	e046      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdc0:	f107 0308 	add.w	r3, r7, #8
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff faff 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bdce:	e03e      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bdd0:	4b43      	ldr	r3, [pc, #268]	; (800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800bdd2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bdd4:	e03b      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdd6:	4b41      	ldr	r3, [pc, #260]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bdd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bddc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800bde0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bde2:	4b3e      	ldr	r3, [pc, #248]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f003 0302 	and.w	r3, r3, #2
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d10c      	bne.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d109      	bne.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bdf4:	4b39      	ldr	r3, [pc, #228]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	08db      	lsrs	r3, r3, #3
 800bdfa:	f003 0303 	and.w	r3, r3, #3
 800bdfe:	4a39      	ldr	r2, [pc, #228]	; (800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800be00:	fa22 f303 	lsr.w	r3, r2, r3
 800be04:	637b      	str	r3, [r7, #52]	; 0x34
 800be06:	e01e      	b.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be08:	4b34      	ldr	r3, [pc, #208]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be14:	d106      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800be16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be1c:	d102      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800be1e:	4b32      	ldr	r3, [pc, #200]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800be20:	637b      	str	r3, [r7, #52]	; 0x34
 800be22:	e010      	b.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be24:	4b2d      	ldr	r3, [pc, #180]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be30:	d106      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be38:	d102      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800be3a:	4b2c      	ldr	r3, [pc, #176]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800be3c:	637b      	str	r3, [r7, #52]	; 0x34
 800be3e:	e002      	b.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800be40:	2300      	movs	r3, #0
 800be42:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800be44:	e003      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800be46:	e002      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800be48:	2300      	movs	r3, #0
 800be4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800be4c:	bf00      	nop
          }
        }
        break;
 800be4e:	f001 bf70 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800be52:	4b22      	ldr	r3, [pc, #136]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800be54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800be58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be5c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	2b00      	cmp	r3, #0
 800be62:	d108      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be64:	f107 0320 	add.w	r3, r7, #32
 800be68:	4618      	mov	r0, r3
 800be6a:	f7fe ffd9 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800be72:	f001 bf5e 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	2b40      	cmp	r3, #64	; 0x40
 800be7a:	d108      	bne.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be7c:	f107 0314 	add.w	r3, r7, #20
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff f937 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be8a:	f001 bf52 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800be8e:	2300      	movs	r3, #0
 800be90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be92:	f001 bf4e 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800be98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800be9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bea0:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800bea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d108      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bea8:	f107 0320 	add.w	r3, r7, #32
 800beac:	4618      	mov	r0, r3
 800beae:	f7fe ffb7 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800beb6:	f001 bf3c 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	2b80      	cmp	r3, #128	; 0x80
 800bebe:	d108      	bne.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bec0:	f107 0314 	add.w	r3, r7, #20
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff f915 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bece:	f001 bf30 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800bed2:	2300      	movs	r3, #0
 800bed4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bed6:	f001 bf2c 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800beda:	bf00      	nop
 800bedc:	44020c00 	.word	0x44020c00
 800bee0:	00bb8000 	.word	0x00bb8000
 800bee4:	03d09000 	.word	0x03d09000
 800bee8:	003d0900 	.word	0x003d0900
 800beec:	02faf080 	.word	0x02faf080
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800bef0:	4b9d      	ldr	r3, [pc, #628]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800bef2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bef6:	f003 0307 	and.w	r3, r3, #7
 800befa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d104      	bne.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bf02:	f7fc ffd7 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 800bf06:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bf08:	f001 bf13 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800bf0c:	4b96      	ldr	r3, [pc, #600]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf18:	d10a      	bne.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d107      	bne.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf20:	f107 0314 	add.w	r3, r7, #20
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff f8e5 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf2e:	e043      	b.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800bf30:	4b8d      	ldr	r3, [pc, #564]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf3c:	d10a      	bne.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d107      	bne.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf44:	f107 0308 	add.w	r3, r7, #8
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7ff fa3d 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	637b      	str	r3, [r7, #52]	; 0x34
 800bf52:	e031      	b.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800bf54:	4b84      	ldr	r3, [pc, #528]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 0302 	and.w	r3, r3, #2
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d10c      	bne.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	2b03      	cmp	r3, #3
 800bf64:	d109      	bne.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf66:	4b80      	ldr	r3, [pc, #512]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	08db      	lsrs	r3, r3, #3
 800bf6c:	f003 0303 	and.w	r3, r3, #3
 800bf70:	4a7e      	ldr	r2, [pc, #504]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800bf72:	fa22 f303 	lsr.w	r3, r2, r3
 800bf76:	637b      	str	r3, [r7, #52]	; 0x34
 800bf78:	e01e      	b.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800bf7a:	4b7b      	ldr	r3, [pc, #492]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf86:	d105      	bne.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	2b04      	cmp	r3, #4
 800bf8c:	d102      	bne.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800bf8e:	4b78      	ldr	r3, [pc, #480]	; (800c170 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800bf90:	637b      	str	r3, [r7, #52]	; 0x34
 800bf92:	e011      	b.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800bf94:	4b74      	ldr	r3, [pc, #464]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800bf96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf9a:	f003 0302 	and.w	r3, r3, #2
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d106      	bne.n	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	2b05      	cmp	r3, #5
 800bfa6:	d103      	bne.n	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800bfa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfac:	637b      	str	r3, [r7, #52]	; 0x34
 800bfae:	e003      	b.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfb4:	f001 bebd 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bfb8:	f001 bebb 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800bfbc:	4b6a      	ldr	r3, [pc, #424]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800bfbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bfc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bfc6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d104      	bne.n	800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bfce:	f7fc ff5b 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800bfd2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800bfd4:	f001 bead 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800bfd8:	4b63      	ldr	r3, [pc, #396]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfe4:	d10a      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	2b08      	cmp	r3, #8
 800bfea:	d107      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfec:	f107 0314 	add.w	r3, r7, #20
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff f87f 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	637b      	str	r3, [r7, #52]	; 0x34
 800bffa:	e03d      	b.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	2b10      	cmp	r3, #16
 800c000:	d108      	bne.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c002:	f107 0308 	add.w	r3, r7, #8
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff f9de 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c010:	f001 be8f 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c014:	4b54      	ldr	r3, [pc, #336]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 0302 	and.w	r3, r3, #2
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	d10c      	bne.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	2b18      	cmp	r3, #24
 800c024:	d109      	bne.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c026:	4b50      	ldr	r3, [pc, #320]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	08db      	lsrs	r3, r3, #3
 800c02c:	f003 0303 	and.w	r3, r3, #3
 800c030:	4a4e      	ldr	r2, [pc, #312]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800c032:	fa22 f303 	lsr.w	r3, r2, r3
 800c036:	637b      	str	r3, [r7, #52]	; 0x34
 800c038:	e01e      	b.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800c03a:	4b4b      	ldr	r3, [pc, #300]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c046:	d105      	bne.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	2b20      	cmp	r3, #32
 800c04c:	d102      	bne.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800c04e:	4b48      	ldr	r3, [pc, #288]	; (800c170 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800c050:	637b      	str	r3, [r7, #52]	; 0x34
 800c052:	e011      	b.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c054:	4b44      	ldr	r3, [pc, #272]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d106      	bne.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	2b28      	cmp	r3, #40	; 0x28
 800c066:	d103      	bne.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800c068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c06c:	637b      	str	r3, [r7, #52]	; 0x34
 800c06e:	e003      	b.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c074:	f001 be5d 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c078:	f001 be5b 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c07c:	4b3a      	ldr	r3, [pc, #232]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c07e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c082:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c086:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d104      	bne.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c08e:	f7fc fefb 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c092:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800c094:	f001 be4d 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800c098:	4b33      	ldr	r3, [pc, #204]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0a4:	d10a      	bne.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	2b40      	cmp	r3, #64	; 0x40
 800c0aa:	d107      	bne.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0ac:	f107 0314 	add.w	r3, r7, #20
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff f81f 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ba:	e045      	b.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800c0bc:	4b2a      	ldr	r3, [pc, #168]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c8:	d10a      	bne.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	2b80      	cmp	r3, #128	; 0x80
 800c0ce:	d107      	bne.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0d0:	f107 0308 	add.w	r3, r7, #8
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7ff f977 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c0de:	e033      	b.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c0e0:	4b21      	ldr	r3, [pc, #132]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f003 0302 	and.w	r3, r3, #2
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d10c      	bne.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ee:	2bc0      	cmp	r3, #192	; 0xc0
 800c0f0:	d109      	bne.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c0f2:	4b1d      	ldr	r3, [pc, #116]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	08db      	lsrs	r3, r3, #3
 800c0f8:	f003 0303 	and.w	r3, r3, #3
 800c0fc:	4a1b      	ldr	r2, [pc, #108]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800c0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c102:	637b      	str	r3, [r7, #52]	; 0x34
 800c104:	e020      	b.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800c106:	4b18      	ldr	r3, [pc, #96]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c10e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c112:	d106      	bne.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c11a:	d102      	bne.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800c11c:	4b14      	ldr	r3, [pc, #80]	; (800c170 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800c11e:	637b      	str	r3, [r7, #52]	; 0x34
 800c120:	e012      	b.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c122:	4b11      	ldr	r3, [pc, #68]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c128:	f003 0302 	and.w	r3, r3, #2
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d107      	bne.n	800c140 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c136:	d103      	bne.n	800c140 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800c138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c13c:	637b      	str	r3, [r7, #52]	; 0x34
 800c13e:	e003      	b.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800c140:	2300      	movs	r3, #0
 800c142:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c144:	f001 bdf5 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c148:	f001 bdf3 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c14c:	4b06      	ldr	r3, [pc, #24]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c14e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c152:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800c156:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10a      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c15e:	f7fc fe93 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c162:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800c164:	f001 bde5 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c168:	44020c00 	.word	0x44020c00
 800c16c:	03d09000 	.word	0x03d09000
 800c170:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800c174:	4ba0      	ldr	r3, [pc, #640]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c17c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c180:	d10b      	bne.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c188:	d107      	bne.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c18a:	f107 0314 	add.w	r3, r7, #20
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe ffb0 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	637b      	str	r3, [r7, #52]	; 0x34
 800c198:	e047      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800c19a:	4b97      	ldr	r3, [pc, #604]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1a6:	d10b      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1ae:	d107      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1b0:	f107 0308 	add.w	r3, r7, #8
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff f907 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c1be:	e034      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c1c0:	4b8d      	ldr	r3, [pc, #564]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f003 0302 	and.w	r3, r3, #2
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d10d      	bne.n	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800c1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c1d2:	d109      	bne.n	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c1d4:	4b88      	ldr	r3, [pc, #544]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	08db      	lsrs	r3, r3, #3
 800c1da:	f003 0303 	and.w	r3, r3, #3
 800c1de:	4a87      	ldr	r2, [pc, #540]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800c1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1e4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1e6:	e020      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800c1e8:	4b83      	ldr	r3, [pc, #524]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1f4:	d106      	bne.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1fc:	d102      	bne.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800c1fe:	4b80      	ldr	r3, [pc, #512]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800c200:	637b      	str	r3, [r7, #52]	; 0x34
 800c202:	e012      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c204:	4b7c      	ldr	r3, [pc, #496]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c20a:	f003 0302 	and.w	r3, r3, #2
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d107      	bne.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c218:	d103      	bne.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800c21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c21e:	637b      	str	r3, [r7, #52]	; 0x34
 800c220:	e003      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800c222:	2300      	movs	r3, #0
 800c224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c226:	f001 bd84 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c22a:	f001 bd82 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c22e:	4b72      	ldr	r3, [pc, #456]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c234:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c238:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d104      	bne.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c240:	f7fc fe22 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c244:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800c246:	f001 bd74 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800c24a:	4b6b      	ldr	r3, [pc, #428]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c256:	d10b      	bne.n	800c270 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c25e:	d107      	bne.n	800c270 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c260:	f107 0314 	add.w	r3, r7, #20
 800c264:	4618      	mov	r0, r3
 800c266:	f7fe ff45 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	637b      	str	r3, [r7, #52]	; 0x34
 800c26e:	e047      	b.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800c270:	4b61      	ldr	r3, [pc, #388]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c27c:	d10b      	bne.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c284:	d107      	bne.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c286:	f107 0308 	add.w	r3, r7, #8
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff f89c 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	637b      	str	r3, [r7, #52]	; 0x34
 800c294:	e034      	b.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c296:	4b58      	ldr	r3, [pc, #352]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 0302 	and.w	r3, r3, #2
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d10d      	bne.n	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c2a8:	d109      	bne.n	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c2aa:	4b53      	ldr	r3, [pc, #332]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	08db      	lsrs	r3, r3, #3
 800c2b0:	f003 0303 	and.w	r3, r3, #3
 800c2b4:	4a51      	ldr	r2, [pc, #324]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800c2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c2bc:	e020      	b.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800c2be:	4b4e      	ldr	r3, [pc, #312]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2ca:	d106      	bne.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2d2:	d102      	bne.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800c2d4:	4b4a      	ldr	r3, [pc, #296]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800c2d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d8:	e012      	b.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c2da:	4b47      	ldr	r3, [pc, #284]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c2dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2e0:	f003 0302 	and.w	r3, r3, #2
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d107      	bne.n	800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ea:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c2ee:	d103      	bne.n	800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800c2f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c2f6:	e003      	b.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2fc:	f001 bd19 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c300:	f001 bd17 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800c304:	4b3c      	ldr	r3, [pc, #240]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c30a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800c30e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	2b00      	cmp	r3, #0
 800c314:	d104      	bne.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c316:	f7fc fdb7 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c31a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800c31c:	f001 bd09 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800c320:	4b35      	ldr	r3, [pc, #212]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c32c:	d10b      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c334:	d107      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c336:	f107 0314 	add.w	r3, r7, #20
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe feda 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	637b      	str	r3, [r7, #52]	; 0x34
 800c344:	e047      	b.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800c346:	4b2c      	ldr	r3, [pc, #176]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c34e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c352:	d10b      	bne.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800c354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c35a:	d107      	bne.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c35c:	f107 0308 	add.w	r3, r7, #8
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff f831 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	637b      	str	r3, [r7, #52]	; 0x34
 800c36a:	e034      	b.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800c36c:	4b22      	ldr	r3, [pc, #136]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f003 0302 	and.w	r3, r3, #2
 800c374:	2b02      	cmp	r3, #2
 800c376:	d10d      	bne.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800c37e:	d109      	bne.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c380:	4b1d      	ldr	r3, [pc, #116]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	08db      	lsrs	r3, r3, #3
 800c386:	f003 0303 	and.w	r3, r3, #3
 800c38a:	4a1c      	ldr	r2, [pc, #112]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800c38c:	fa22 f303 	lsr.w	r3, r2, r3
 800c390:	637b      	str	r3, [r7, #52]	; 0x34
 800c392:	e020      	b.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800c394:	4b18      	ldr	r3, [pc, #96]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3a0:	d106      	bne.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3a8:	d102      	bne.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800c3aa:	4b15      	ldr	r3, [pc, #84]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800c3ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ae:	e012      	b.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800c3b0:	4b11      	ldr	r3, [pc, #68]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c3b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c3b6:	f003 0302 	and.w	r3, r3, #2
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d107      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800c3c4:	d103      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800c3c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c3cc:	e003      	b.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3d2:	f001 bcae 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c3d6:	f001 bcac 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800c3da:	4b07      	ldr	r3, [pc, #28]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800c3dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c3e0:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800c3e4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10b      	bne.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c3ec:	f7fc fd4c 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c3f0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800c3f2:	f001 bc9e 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c3f6:	bf00      	nop
 800c3f8:	44020c00 	.word	0x44020c00
 800c3fc:	03d09000 	.word	0x03d09000
 800c400:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800c404:	4ba0      	ldr	r3, [pc, #640]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c40c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c410:	d10b      	bne.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c418:	d107      	bne.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c41a:	f107 0314 	add.w	r3, r7, #20
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe fe68 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	637b      	str	r3, [r7, #52]	; 0x34
 800c428:	e047      	b.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800c42a:	4b97      	ldr	r3, [pc, #604]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c436:	d10b      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800c438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c43e:	d107      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c440:	f107 0308 	add.w	r3, r7, #8
 800c444:	4618      	mov	r0, r3
 800c446:	f7fe ffbf 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	637b      	str	r3, [r7, #52]	; 0x34
 800c44e:	e034      	b.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800c450:	4b8d      	ldr	r3, [pc, #564]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 0302 	and.w	r3, r3, #2
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d10d      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c462:	d109      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c464:	4b88      	ldr	r3, [pc, #544]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	08db      	lsrs	r3, r3, #3
 800c46a:	f003 0303 	and.w	r3, r3, #3
 800c46e:	4a87      	ldr	r2, [pc, #540]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800c470:	fa22 f303 	lsr.w	r3, r2, r3
 800c474:	637b      	str	r3, [r7, #52]	; 0x34
 800c476:	e020      	b.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800c478:	4b83      	ldr	r3, [pc, #524]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c484:	d106      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c48c:	d102      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800c48e:	4b80      	ldr	r3, [pc, #512]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800c490:	637b      	str	r3, [r7, #52]	; 0x34
 800c492:	e012      	b.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800c494:	4b7c      	ldr	r3, [pc, #496]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c49a:	f003 0302 	and.w	r3, r3, #2
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d107      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800c4a8:	d103      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800c4aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4ae:	637b      	str	r3, [r7, #52]	; 0x34
 800c4b0:	e003      	b.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c4b6:	f001 bc3c 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c4ba:	f001 bc3a 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800c4be:	4b72      	ldr	r3, [pc, #456]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c4c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c4c4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c4c8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d104      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c4d0:	f7fc fcda 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c4d4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800c4d6:	f001 bc2c 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800c4da:	4b6b      	ldr	r3, [pc, #428]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4e6:	d10b      	bne.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4ee:	d107      	bne.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4f0:	f107 0314 	add.w	r3, r7, #20
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fe fdfd 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c4fe:	e047      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800c500:	4b61      	ldr	r3, [pc, #388]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c50c:	d10b      	bne.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c514:	d107      	bne.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c516:	f107 0308 	add.w	r3, r7, #8
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fe ff54 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	637b      	str	r3, [r7, #52]	; 0x34
 800c524:	e034      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800c526:	4b58      	ldr	r3, [pc, #352]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d10d      	bne.n	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c538:	d109      	bne.n	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c53a:	4b53      	ldr	r3, [pc, #332]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	08db      	lsrs	r3, r3, #3
 800c540:	f003 0303 	and.w	r3, r3, #3
 800c544:	4a51      	ldr	r2, [pc, #324]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800c546:	fa22 f303 	lsr.w	r3, r2, r3
 800c54a:	637b      	str	r3, [r7, #52]	; 0x34
 800c54c:	e020      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800c54e:	4b4e      	ldr	r3, [pc, #312]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c55a:	d106      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800c55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c562:	d102      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800c564:	4b4a      	ldr	r3, [pc, #296]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800c566:	637b      	str	r3, [r7, #52]	; 0x34
 800c568:	e012      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800c56a:	4b47      	ldr	r3, [pc, #284]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c56c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c570:	f003 0302 	and.w	r3, r3, #2
 800c574:	2b02      	cmp	r3, #2
 800c576:	d107      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c57e:	d103      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800c580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c584:	637b      	str	r3, [r7, #52]	; 0x34
 800c586:	e003      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800c588:	2300      	movs	r3, #0
 800c58a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c58c:	f001 bbd1 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c590:	f001 bbcf 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800c594:	4b3c      	ldr	r3, [pc, #240]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c596:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c59a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c59e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d104      	bne.n	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c5a6:	f7fc fc6f 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c5aa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800c5ac:	f001 bbc1 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800c5b0:	4b35      	ldr	r3, [pc, #212]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5bc:	d10b      	bne.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800c5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5c4:	d107      	bne.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5c6:	f107 0314 	add.w	r3, r7, #20
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe fd92 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c5d4:	e047      	b.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800c5d6:	4b2c      	ldr	r3, [pc, #176]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5e2:	d10b      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5ea:	d107      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ec:	f107 0308 	add.w	r3, r7, #8
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fe fee9 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5fa:	e034      	b.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800c5fc:	4b22      	ldr	r3, [pc, #136]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 0302 	and.w	r3, r3, #2
 800c604:	2b02      	cmp	r3, #2
 800c606:	d10d      	bne.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c60e:	d109      	bne.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c610:	4b1d      	ldr	r3, [pc, #116]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	08db      	lsrs	r3, r3, #3
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	4a1c      	ldr	r2, [pc, #112]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800c61c:	fa22 f303 	lsr.w	r3, r2, r3
 800c620:	637b      	str	r3, [r7, #52]	; 0x34
 800c622:	e020      	b.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800c624:	4b18      	ldr	r3, [pc, #96]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c630:	d106      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c638:	d102      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800c63a:	4b15      	ldr	r3, [pc, #84]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800c63c:	637b      	str	r3, [r7, #52]	; 0x34
 800c63e:	e012      	b.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800c640:	4b11      	ldr	r3, [pc, #68]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c646:	f003 0302 	and.w	r3, r3, #2
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d107      	bne.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c654:	d103      	bne.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800c656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c65a:	637b      	str	r3, [r7, #52]	; 0x34
 800c65c:	e003      	b.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c662:	f001 bb66 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c666:	f001 bb64 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800c66a:	4b07      	ldr	r3, [pc, #28]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c66c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c670:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800c674:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10b      	bne.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c67c:	f7fc fc04 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c680:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800c682:	f001 bb56 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c686:	bf00      	nop
 800c688:	44020c00 	.word	0x44020c00
 800c68c:	03d09000 	.word	0x03d09000
 800c690:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800c694:	4ba1      	ldr	r3, [pc, #644]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c69c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6a0:	d10b      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6a8:	d107      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6aa:	f107 0314 	add.w	r3, r7, #20
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe fd20 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c6b8:	e047      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800c6ba:	4b98      	ldr	r3, [pc, #608]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6c6:	d10b      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6ce:	d107      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6d0:	f107 0308 	add.w	r3, r7, #8
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fe fe77 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c6de:	e034      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800c6e0:	4b8e      	ldr	r3, [pc, #568]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f003 0302 	and.w	r3, r3, #2
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d10d      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ee:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800c6f2:	d109      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c6f4:	4b89      	ldr	r3, [pc, #548]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	08db      	lsrs	r3, r3, #3
 800c6fa:	f003 0303 	and.w	r3, r3, #3
 800c6fe:	4a88      	ldr	r2, [pc, #544]	; (800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800c700:	fa22 f303 	lsr.w	r3, r2, r3
 800c704:	637b      	str	r3, [r7, #52]	; 0x34
 800c706:	e020      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800c708:	4b84      	ldr	r3, [pc, #528]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c714:	d106      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c71c:	d102      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800c71e:	4b81      	ldr	r3, [pc, #516]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800c720:	637b      	str	r3, [r7, #52]	; 0x34
 800c722:	e012      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800c724:	4b7d      	ldr	r3, [pc, #500]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c72a:	f003 0302 	and.w	r3, r3, #2
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d107      	bne.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800c738:	d103      	bne.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800c73a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c73e:	637b      	str	r3, [r7, #52]	; 0x34
 800c740:	e003      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800c742:	2300      	movs	r3, #0
 800c744:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c746:	f001 baf4 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c74a:	f001 baf2 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800c74e:	4b73      	ldr	r3, [pc, #460]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c750:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c754:	f003 0307 	and.w	r3, r3, #7
 800c758:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800c75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d104      	bne.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c760:	f7fc fb92 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c764:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800c766:	f001 bae4 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800c76a:	4b6c      	ldr	r3, [pc, #432]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c776:	d10a      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d107      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c77e:	f107 0314 	add.w	r3, r7, #20
 800c782:	4618      	mov	r0, r3
 800c784:	f7fe fcb6 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	637b      	str	r3, [r7, #52]	; 0x34
 800c78c:	e043      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800c78e:	4b63      	ldr	r3, [pc, #396]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c79a:	d10a      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d107      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7a2:	f107 0308 	add.w	r3, r7, #8
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe fe0e 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	637b      	str	r3, [r7, #52]	; 0x34
 800c7b0:	e031      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800c7b2:	4b5a      	ldr	r3, [pc, #360]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f003 0302 	and.w	r3, r3, #2
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	d10c      	bne.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	2b03      	cmp	r3, #3
 800c7c2:	d109      	bne.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c7c4:	4b55      	ldr	r3, [pc, #340]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	08db      	lsrs	r3, r3, #3
 800c7ca:	f003 0303 	and.w	r3, r3, #3
 800c7ce:	4a54      	ldr	r2, [pc, #336]	; (800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800c7d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7d4:	637b      	str	r3, [r7, #52]	; 0x34
 800c7d6:	e01e      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800c7d8:	4b50      	ldr	r3, [pc, #320]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7e4:	d105      	bne.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	2b04      	cmp	r3, #4
 800c7ea:	d102      	bne.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800c7ec:	4b4d      	ldr	r3, [pc, #308]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800c7ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c7f0:	e011      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800c7f2:	4b4a      	ldr	r3, [pc, #296]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c7f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7f8:	f003 0302 	and.w	r3, r3, #2
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d106      	bne.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	2b05      	cmp	r3, #5
 800c804:	d103      	bne.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800c806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c80a:	637b      	str	r3, [r7, #52]	; 0x34
 800c80c:	e003      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800c80e:	2300      	movs	r3, #0
 800c810:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c812:	f001 ba8e 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c816:	f001 ba8c 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800c81a:	4b40      	ldr	r3, [pc, #256]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c81c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c820:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c824:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c82c:	f7fc fb2c 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800c830:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800c832:	f001 ba7e 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800c836:	4b39      	ldr	r3, [pc, #228]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c83e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c842:	d10a      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800c844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c846:	2b10      	cmp	r3, #16
 800c848:	d107      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c84a:	f107 0314 	add.w	r3, r7, #20
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe fc50 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	637b      	str	r3, [r7, #52]	; 0x34
 800c858:	e043      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800c85a:	4b30      	ldr	r3, [pc, #192]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c866:	d10a      	bne.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800c868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86a:	2b20      	cmp	r3, #32
 800c86c:	d107      	bne.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c86e:	f107 0308 	add.w	r3, r7, #8
 800c872:	4618      	mov	r0, r3
 800c874:	f7fe fda8 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	637b      	str	r3, [r7, #52]	; 0x34
 800c87c:	e031      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800c87e:	4b27      	ldr	r3, [pc, #156]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f003 0302 	and.w	r3, r3, #2
 800c886:	2b02      	cmp	r3, #2
 800c888:	d10c      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	2b30      	cmp	r3, #48	; 0x30
 800c88e:	d109      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c890:	4b22      	ldr	r3, [pc, #136]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	08db      	lsrs	r3, r3, #3
 800c896:	f003 0303 	and.w	r3, r3, #3
 800c89a:	4a21      	ldr	r2, [pc, #132]	; (800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800c89c:	fa22 f303 	lsr.w	r3, r2, r3
 800c8a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c8a2:	e01e      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800c8a4:	4b1d      	ldr	r3, [pc, #116]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8b0:	d105      	bne.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b4:	2b40      	cmp	r3, #64	; 0x40
 800c8b6:	d102      	bne.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800c8b8:	4b1a      	ldr	r3, [pc, #104]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800c8ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c8bc:	e011      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800c8be:	4b17      	ldr	r3, [pc, #92]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c8c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c8c4:	f003 0302 	and.w	r3, r3, #2
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d106      	bne.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	2b50      	cmp	r3, #80	; 0x50
 800c8d0:	d103      	bne.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800c8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c8d8:	e003      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c8de:	f001 ba28 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c8e2:	f001 ba26 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c8e6:	4b0d      	ldr	r3, [pc, #52]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c8e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8ec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c8f0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d104      	bne.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c8f8:	f7fc faf2 	bl	8008ee0 <HAL_RCC_GetPCLK3Freq>
 800c8fc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c8fe:	f001 ba18 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800c902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c908:	d10e      	bne.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c90a:	f107 0314 	add.w	r3, r7, #20
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe fbf0 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c918:	f001 ba0b 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c91c:	44020c00 	.word	0x44020c00
 800c920:	03d09000 	.word	0x03d09000
 800c924:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800c928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c92e:	d108      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c930:	f107 0308 	add.w	r3, r7, #8
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe fd47 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c93e:	f001 b9f8 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c942:	4ba4      	ldr	r3, [pc, #656]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 0302 	and.w	r3, r3, #2
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d10d      	bne.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c954:	d109      	bne.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c956:	4b9f      	ldr	r3, [pc, #636]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	08db      	lsrs	r3, r3, #3
 800c95c:	f003 0303 	and.w	r3, r3, #3
 800c960:	4a9d      	ldr	r2, [pc, #628]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c962:	fa22 f303 	lsr.w	r3, r2, r3
 800c966:	637b      	str	r3, [r7, #52]	; 0x34
 800c968:	e020      	b.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800c96a:	4b9a      	ldr	r3, [pc, #616]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c976:	d106      	bne.n	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800c978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c97e:	d102      	bne.n	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800c980:	4b96      	ldr	r3, [pc, #600]	; (800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c982:	637b      	str	r3, [r7, #52]	; 0x34
 800c984:	e012      	b.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c986:	4b93      	ldr	r3, [pc, #588]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c98c:	f003 0302 	and.w	r3, r3, #2
 800c990:	2b02      	cmp	r3, #2
 800c992:	d107      	bne.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800c994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c996:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c99a:	d103      	bne.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800c99c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c9a2:	e003      	b.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c9a8:	f001 b9c3 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c9ac:	f001 b9c1 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c9b0:	4b88      	ldr	r3, [pc, #544]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c9b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c9b6:	f003 0307 	and.w	r3, r3, #7
 800c9ba:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d104      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800c9c2:	f7fc fa45 	bl	8008e50 <HAL_RCC_GetHCLKFreq>
 800c9c6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800c9c8:	f001 b9b3 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d104      	bne.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800c9d2:	f7fc f911 	bl	8008bf8 <HAL_RCC_GetSysClockFreq>
 800c9d6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c9d8:	f001 b9ab 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800c9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d108      	bne.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9e2:	f107 0314 	add.w	r3, r7, #20
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fe fb84 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c9f0:	f001 b99f 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c9f4:	4b77      	ldr	r3, [pc, #476]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca00:	d105      	bne.n	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800ca02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca04:	2b03      	cmp	r3, #3
 800ca06:	d102      	bne.n	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800ca08:	4b75      	ldr	r3, [pc, #468]	; (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800ca0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca0c:	e023      	b.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ca0e:	4b71      	ldr	r3, [pc, #452]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0302 	and.w	r3, r3, #2
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d10c      	bne.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	2b04      	cmp	r3, #4
 800ca1e:	d109      	bne.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ca20:	4b6c      	ldr	r3, [pc, #432]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	08db      	lsrs	r3, r3, #3
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	4a6b      	ldr	r2, [pc, #428]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ca2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca30:	637b      	str	r3, [r7, #52]	; 0x34
 800ca32:	e010      	b.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800ca34:	4b67      	ldr	r3, [pc, #412]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca40:	d105      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	2b05      	cmp	r3, #5
 800ca46:	d102      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800ca48:	4b64      	ldr	r3, [pc, #400]	; (800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ca4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca4c:	e003      	b.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca52:	f001 b96e 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ca56:	f001 b96c 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800ca5a:	4b5e      	ldr	r3, [pc, #376]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ca5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ca60:	f003 0308 	and.w	r3, r3, #8
 800ca64:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800ca66:	4b5b      	ldr	r3, [pc, #364]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ca68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d106      	bne.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800ca74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d103      	bne.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800ca7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ca80:	e012      	b.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800ca82:	4b54      	ldr	r3, [pc, #336]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ca84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca90:	d106      	bne.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca94:	2b08      	cmp	r3, #8
 800ca96:	d103      	bne.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800ca98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ca9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca9e:	e003      	b.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800caa0:	2300      	movs	r3, #0
 800caa2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800caa4:	f001 b945 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800caa8:	f001 b943 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800caac:	4b49      	ldr	r3, [pc, #292]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800caae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cab6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d104      	bne.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800cabe:	f7fc f9e3 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800cac2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800cac4:	f001 b935 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cace:	d108      	bne.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cad0:	f107 0308 	add.w	r3, r7, #8
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fe fc77 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cade:	f001 b928 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800cae2:	4b3c      	ldr	r3, [pc, #240]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 0302 	and.w	r3, r3, #2
 800caea:	2b02      	cmp	r3, #2
 800caec:	d10d      	bne.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caf4:	d109      	bne.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800caf6:	4b37      	ldr	r3, [pc, #220]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	08db      	lsrs	r3, r3, #3
 800cafc:	f003 0303 	and.w	r3, r3, #3
 800cb00:	4a35      	ldr	r2, [pc, #212]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800cb02:	fa22 f303 	lsr.w	r3, r2, r3
 800cb06:	637b      	str	r3, [r7, #52]	; 0x34
 800cb08:	e011      	b.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800cb0a:	4b32      	ldr	r3, [pc, #200]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb16:	d106      	bne.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb1e:	d102      	bne.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800cb20:	4b2e      	ldr	r3, [pc, #184]	; (800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800cb22:	637b      	str	r3, [r7, #52]	; 0x34
 800cb24:	e003      	b.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800cb26:	2300      	movs	r3, #0
 800cb28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cb2a:	f001 b902 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cb2e:	f001 b900 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800cb32:	4b28      	ldr	r3, [pc, #160]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800cb34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cb38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800cb3c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d104      	bne.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800cb44:	f7fc f9a0 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800cb48:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800cb4a:	f001 b8f2 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb54:	d108      	bne.n	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb56:	f107 0308 	add.w	r3, r7, #8
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fc34 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cb64:	f001 b8e5 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800cb68:	4b1a      	ldr	r3, [pc, #104]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 0302 	and.w	r3, r3, #2
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d10d      	bne.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cb7a:	d109      	bne.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cb7c:	4b15      	ldr	r3, [pc, #84]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	08db      	lsrs	r3, r3, #3
 800cb82:	f003 0303 	and.w	r3, r3, #3
 800cb86:	4a14      	ldr	r2, [pc, #80]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800cb88:	fa22 f303 	lsr.w	r3, r2, r3
 800cb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb8e:	e011      	b.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800cb90:	4b10      	ldr	r3, [pc, #64]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb9c:	d106      	bne.n	800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cba4:	d102      	bne.n	800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800cba6:	4b0d      	ldr	r3, [pc, #52]	; (800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800cba8:	637b      	str	r3, [r7, #52]	; 0x34
 800cbaa:	e003      	b.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800cbac:	2300      	movs	r3, #0
 800cbae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cbb0:	f001 b8bf 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cbb4:	f001 b8bd 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cbb8:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800cbba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cbbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cbc2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10c      	bne.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800cbca:	f7fc f989 	bl	8008ee0 <HAL_RCC_GetPCLK3Freq>
 800cbce:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800cbd0:	f001 b8af 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cbd4:	44020c00 	.word	0x44020c00
 800cbd8:	03d09000 	.word	0x03d09000
 800cbdc:	003d0900 	.word	0x003d0900
 800cbe0:	02faf080 	.word	0x02faf080
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbea:	d108      	bne.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbec:	f107 0308 	add.w	r3, r7, #8
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fe fbe9 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cbfa:	f001 b89a 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800cbfe:	4b9f      	ldr	r3, [pc, #636]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d10d      	bne.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc10:	d109      	bne.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cc12:	4b9a      	ldr	r3, [pc, #616]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	08db      	lsrs	r3, r3, #3
 800cc18:	f003 0303 	and.w	r3, r3, #3
 800cc1c:	4a98      	ldr	r2, [pc, #608]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800cc1e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc22:	637b      	str	r3, [r7, #52]	; 0x34
 800cc24:	e011      	b.n	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800cc26:	4b95      	ldr	r3, [pc, #596]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc32:	d106      	bne.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc3a:	d102      	bne.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800cc3c:	4b91      	ldr	r3, [pc, #580]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800cc3e:	637b      	str	r3, [r7, #52]	; 0x34
 800cc40:	e003      	b.n	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800cc42:	2300      	movs	r3, #0
 800cc44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cc46:	f001 b874 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cc4a:	f001 b872 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800cc4e:	4b8b      	ldr	r3, [pc, #556]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cc50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cc54:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800cc58:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d104      	bne.n	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800cc60:	f7fc f93e 	bl	8008ee0 <HAL_RCC_GetPCLK3Freq>
 800cc64:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800cc66:	f001 b864 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc70:	d108      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc72:	f107 0308 	add.w	r3, r7, #8
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fe fba6 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cc80:	f001 b857 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800cc84:	4b7d      	ldr	r3, [pc, #500]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0302 	and.w	r3, r3, #2
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d10d      	bne.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800cc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc96:	d109      	bne.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cc98:	4b78      	ldr	r3, [pc, #480]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	08db      	lsrs	r3, r3, #3
 800cc9e:	f003 0303 	and.w	r3, r3, #3
 800cca2:	4a77      	ldr	r2, [pc, #476]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800cca4:	fa22 f303 	lsr.w	r3, r2, r3
 800cca8:	637b      	str	r3, [r7, #52]	; 0x34
 800ccaa:	e011      	b.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800ccac:	4b73      	ldr	r3, [pc, #460]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ccb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccb8:	d106      	bne.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ccc0:	d102      	bne.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800ccc2:	4b70      	ldr	r3, [pc, #448]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ccc4:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc6:	e003      	b.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cccc:	f001 b831 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ccd0:	f001 b82f 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800ccd4:	4b69      	ldr	r3, [pc, #420]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ccd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ccda:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800ccde:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d104      	bne.n	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800cce6:	f7fc f8cf 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800ccea:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ccec:	f001 b821 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ccf6:	d108      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccf8:	f107 0308 	add.w	r3, r7, #8
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe fb63 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd06:	f001 b814 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800cd0a:	4b5c      	ldr	r3, [pc, #368]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f003 0302 	and.w	r3, r3, #2
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d10e      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800cd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd1c:	d10a      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cd1e:	4b57      	ldr	r3, [pc, #348]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	08db      	lsrs	r3, r3, #3
 800cd24:	f003 0303 	and.w	r3, r3, #3
 800cd28:	4a55      	ldr	r2, [pc, #340]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800cd2a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd30:	f000 bfff 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800cd34:	2300      	movs	r3, #0
 800cd36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd38:	f000 bffb 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cd3c:	4b4f      	ldr	r3, [pc, #316]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cd3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cd42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd46:	633b      	str	r3, [r7, #48]	; 0x30
 800cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cd4e:	d056      	beq.n	800cdfe <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800cd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd52:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cd56:	f200 808b 	bhi.w	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd60:	d03e      	beq.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd68:	f200 8082 	bhi.w	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd72:	d027      	beq.n	800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd7a:	d879      	bhi.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd82:	d017      	beq.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd8a:	d871      	bhi.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d004      	beq.n	800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800cd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd98:	d004      	beq.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800cd9a:	e069      	b.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800cd9c:	f7fc f8a0 	bl	8008ee0 <HAL_RCC_GetPCLK3Freq>
 800cda0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800cda2:	e068      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cda4:	f107 0314 	add.w	r3, r7, #20
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe f9a3 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cdb2:	e060      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdb4:	f107 0308 	add.w	r3, r7, #8
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fe fb05 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cdc2:	e058      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cdc4:	4b2d      	ldr	r3, [pc, #180]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cdc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cdca:	f003 0302 	and.w	r3, r3, #2
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d103      	bne.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800cdd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdd6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cdd8:	e04d      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cdde:	e04a      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800cde0:	4b26      	ldr	r3, [pc, #152]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800cde2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cde6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdee:	d103      	bne.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800cdf0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cdf4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cdf6:	e03e      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cdfc:	e03b      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cdfe:	4b1f      	ldr	r3, [pc, #124]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ce00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce04:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ce08:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce0a:	4b1c      	ldr	r3, [pc, #112]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 0302 	and.w	r3, r3, #2
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	d10c      	bne.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d109      	bne.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ce1c:	4b17      	ldr	r3, [pc, #92]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	08db      	lsrs	r3, r3, #3
 800ce22:	f003 0303 	and.w	r3, r3, #3
 800ce26:	4a16      	ldr	r2, [pc, #88]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ce28:	fa22 f303 	lsr.w	r3, r2, r3
 800ce2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce2e:	e01e      	b.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce30:	4b12      	ldr	r3, [pc, #72]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce3c:	d106      	bne.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800ce3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce44:	d102      	bne.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ce46:	4b0f      	ldr	r3, [pc, #60]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ce48:	637b      	str	r3, [r7, #52]	; 0x34
 800ce4a:	e010      	b.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce4c:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce58:	d106      	bne.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800ce5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce60:	d102      	bne.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ce62:	4b09      	ldr	r3, [pc, #36]	; (800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800ce64:	637b      	str	r3, [r7, #52]	; 0x34
 800ce66:	e002      	b.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ce6c:	e003      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800ce6e:	e002      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800ce70:	2300      	movs	r3, #0
 800ce72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ce74:	bf00      	nop
          }
        }
        break;
 800ce76:	f000 bf5c 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ce7a:	bf00      	nop
 800ce7c:	44020c00 	.word	0x44020c00
 800ce80:	03d09000 	.word	0x03d09000
 800ce84:	003d0900 	.word	0x003d0900
 800ce88:	02faf080 	.word	0x02faf080

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ce8c:	4b9e      	ldr	r3, [pc, #632]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ce8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ce92:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ce96:	633b      	str	r3, [r7, #48]	; 0x30
 800ce98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ce9e:	d056      	beq.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800cea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cea6:	f200 808b 	bhi.w	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ceaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ceb0:	d03e      	beq.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ceb8:	f200 8082 	bhi.w	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cec2:	d027      	beq.n	800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800cec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ceca:	d879      	bhi.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800cecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ced2:	d017      	beq.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800ced4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceda:	d871      	bhi.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800cedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d004      	beq.n	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800cee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cee8:	d004      	beq.n	800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800ceea:	e069      	b.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800ceec:	f7fb ffcc 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800cef0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800cef2:	e068      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cef4:	f107 0314 	add.w	r3, r7, #20
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fe f8fb 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf02:	e060      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf04:	f107 0308 	add.w	r3, r7, #8
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fe fa5d 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf12:	e058      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cf14:	4b7c      	ldr	r3, [pc, #496]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800cf16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf1a:	f003 0302 	and.w	r3, r3, #2
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d103      	bne.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800cf22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf26:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cf28:	e04d      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf2e:	e04a      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800cf30:	4b75      	ldr	r3, [pc, #468]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800cf32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf3e:	d103      	bne.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800cf40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cf44:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cf46:	e03e      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf4c:	e03b      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf4e:	4b6e      	ldr	r3, [pc, #440]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800cf50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf54:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cf58:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf5a:	4b6b      	ldr	r3, [pc, #428]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f003 0302 	and.w	r3, r3, #2
 800cf62:	2b02      	cmp	r3, #2
 800cf64:	d10c      	bne.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d109      	bne.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cf6c:	4b66      	ldr	r3, [pc, #408]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	08db      	lsrs	r3, r3, #3
 800cf72:	f003 0303 	and.w	r3, r3, #3
 800cf76:	4a65      	ldr	r2, [pc, #404]	; (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800cf78:	fa22 f303 	lsr.w	r3, r2, r3
 800cf7c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf7e:	e01e      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf80:	4b61      	ldr	r3, [pc, #388]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf8c:	d106      	bne.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800cf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf94:	d102      	bne.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cf96:	4b5e      	ldr	r3, [pc, #376]	; (800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800cf98:	637b      	str	r3, [r7, #52]	; 0x34
 800cf9a:	e010      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf9c:	4b5a      	ldr	r3, [pc, #360]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfa8:	d106      	bne.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800cfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfb0:	d102      	bne.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cfb2:	4b58      	ldr	r3, [pc, #352]	; (800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800cfb4:	637b      	str	r3, [r7, #52]	; 0x34
 800cfb6:	e002      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cfbc:	e003      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800cfbe:	e002      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cfc4:	bf00      	nop
          }
        }
        break;
 800cfc6:	f000 beb4 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800cfca:	4b4f      	ldr	r3, [pc, #316]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800cfcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cfd0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cfd4:	633b      	str	r3, [r7, #48]	; 0x30
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cfdc:	d056      	beq.n	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cfe4:	f200 808b 	bhi.w	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cfee:	d03e      	beq.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800cff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cff6:	f200 8082 	bhi.w	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800cffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d000:	d027      	beq.n	800d052 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d008:	d879      	bhi.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d010:	d017      	beq.n	800d042 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d018:	d871      	bhi.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800d01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d004      	beq.n	800d02a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800d020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d026:	d004      	beq.n	800d032 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800d028:	e069      	b.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800d02a:	f7fb ff59 	bl	8008ee0 <HAL_RCC_GetPCLK3Freq>
 800d02e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800d030:	e068      	b.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d032:	f107 0314 	add.w	r3, r7, #20
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe f85c 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d040:	e060      	b.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d042:	f107 0308 	add.w	r3, r7, #8
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe f9be 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d050:	e058      	b.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d052:	4b2d      	ldr	r3, [pc, #180]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800d054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d058:	f003 0302 	and.w	r3, r3, #2
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d103      	bne.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800d060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d064:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800d066:	e04d      	b.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d06c:	e04a      	b.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800d06e:	4b26      	ldr	r3, [pc, #152]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800d070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d07c:	d103      	bne.n	800d086 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800d07e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d082:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800d084:	e03e      	b.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800d086:	2300      	movs	r3, #0
 800d088:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d08a:	e03b      	b.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d08c:	4b1e      	ldr	r3, [pc, #120]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800d08e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d092:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d096:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d098:	4b1b      	ldr	r3, [pc, #108]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f003 0302 	and.w	r3, r3, #2
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d10c      	bne.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800d0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d109      	bne.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d0aa:	4b17      	ldr	r3, [pc, #92]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	08db      	lsrs	r3, r3, #3
 800d0b0:	f003 0303 	and.w	r3, r3, #3
 800d0b4:	4a15      	ldr	r2, [pc, #84]	; (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800d0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d0bc:	e01e      	b.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d0be:	4b12      	ldr	r3, [pc, #72]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0ca:	d106      	bne.n	800d0da <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0d2:	d102      	bne.n	800d0da <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d0d4:	4b0e      	ldr	r3, [pc, #56]	; (800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800d0d6:	637b      	str	r3, [r7, #52]	; 0x34
 800d0d8:	e010      	b.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d0da:	4b0b      	ldr	r3, [pc, #44]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0e6:	d106      	bne.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0ee:	d102      	bne.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d0f0:	4b08      	ldr	r3, [pc, #32]	; (800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800d0f2:	637b      	str	r3, [r7, #52]	; 0x34
 800d0f4:	e002      	b.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d0fa:	e003      	b.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800d0fc:	e002      	b.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800d0fe:	2300      	movs	r3, #0
 800d100:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d102:	bf00      	nop
          }
        }
        break;
 800d104:	f000 be15 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d108:	44020c00 	.word	0x44020c00
 800d10c:	03d09000 	.word	0x03d09000
 800d110:	003d0900 	.word	0x003d0900
 800d114:	02faf080 	.word	0x02faf080
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800d118:	4b9e      	ldr	r3, [pc, #632]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d11a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d11e:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800d122:	633b      	str	r3, [r7, #48]	; 0x30
 800d124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d126:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800d12a:	d056      	beq.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800d132:	f200 808b 	bhi.w	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d13c:	d03e      	beq.n	800d1bc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800d13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d144:	f200 8082 	bhi.w	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800d148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d14e:	d027      	beq.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800d150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d152:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d156:	d879      	bhi.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800d158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d15e:	d017      	beq.n	800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d166:	d871      	bhi.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800d168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d004      	beq.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d174:	d004      	beq.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800d176:	e069      	b.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800d178:	f7fb feb2 	bl	8008ee0 <HAL_RCC_GetPCLK3Freq>
 800d17c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800d17e:	e068      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d180:	f107 0314 	add.w	r3, r7, #20
 800d184:	4618      	mov	r0, r3
 800d186:	f7fd ffb5 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d18e:	e060      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d190:	f107 0308 	add.w	r3, r7, #8
 800d194:	4618      	mov	r0, r3
 800d196:	f7fe f917 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d19e:	e058      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d1a0:	4b7c      	ldr	r3, [pc, #496]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d1a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d1a6:	f003 0302 	and.w	r3, r3, #2
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	d103      	bne.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800d1ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1b2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800d1b4:	e04d      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d1ba:	e04a      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800d1bc:	4b75      	ldr	r3, [pc, #468]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d1be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d1c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1ca:	d103      	bne.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800d1cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d1d0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800d1d2:	e03e      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d1d8:	e03b      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d1da:	4b6e      	ldr	r3, [pc, #440]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d1dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d1e0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d1e4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d1e6:	4b6b      	ldr	r3, [pc, #428]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f003 0302 	and.w	r3, r3, #2
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d10c      	bne.n	800d20c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d109      	bne.n	800d20c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d1f8:	4b66      	ldr	r3, [pc, #408]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	08db      	lsrs	r3, r3, #3
 800d1fe:	f003 0303 	and.w	r3, r3, #3
 800d202:	4a65      	ldr	r2, [pc, #404]	; (800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800d204:	fa22 f303 	lsr.w	r3, r2, r3
 800d208:	637b      	str	r3, [r7, #52]	; 0x34
 800d20a:	e01e      	b.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d20c:	4b61      	ldr	r3, [pc, #388]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d218:	d106      	bne.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800d21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d220:	d102      	bne.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d222:	4b5e      	ldr	r3, [pc, #376]	; (800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800d224:	637b      	str	r3, [r7, #52]	; 0x34
 800d226:	e010      	b.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d228:	4b5a      	ldr	r3, [pc, #360]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d234:	d106      	bne.n	800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800d236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d23c:	d102      	bne.n	800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d23e:	4b58      	ldr	r3, [pc, #352]	; (800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800d240:	637b      	str	r3, [r7, #52]	; 0x34
 800d242:	e002      	b.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d248:	e003      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800d24a:	e002      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800d24c:	2300      	movs	r3, #0
 800d24e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d250:	bf00      	nop
          }
        }
        break;
 800d252:	f000 bd6e 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800d256:	4b4f      	ldr	r3, [pc, #316]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d258:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d25c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800d260:	633b      	str	r3, [r7, #48]	; 0x30
 800d262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d264:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800d268:	d056      	beq.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800d270:	f200 808b 	bhi.w	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d27a:	d03e      	beq.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d282:	f200 8082 	bhi.w	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d288:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d28c:	d027      	beq.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d290:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d294:	d879      	bhi.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d29c:	d017      	beq.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800d29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2a4:	d871      	bhi.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d004      	beq.n	800d2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d2b2:	d004      	beq.n	800d2be <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800d2b4:	e069      	b.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800d2b6:	f7fb fe13 	bl	8008ee0 <HAL_RCC_GetPCLK3Freq>
 800d2ba:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800d2bc:	e068      	b.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2be:	f107 0314 	add.w	r3, r7, #20
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fd ff16 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d2cc:	e060      	b.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2ce:	f107 0308 	add.w	r3, r7, #8
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe f878 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d2dc:	e058      	b.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d2de:	4b2d      	ldr	r3, [pc, #180]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d2e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d2e4:	f003 0302 	and.w	r3, r3, #2
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d103      	bne.n	800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800d2ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2f0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800d2f2:	e04d      	b.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d2f8:	e04a      	b.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800d2fa:	4b26      	ldr	r3, [pc, #152]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d2fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d308:	d103      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800d30a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d30e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800d310:	e03e      	b.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d316:	e03b      	b.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d318:	4b1e      	ldr	r3, [pc, #120]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d31a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d31e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d322:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d324:	4b1b      	ldr	r3, [pc, #108]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0302 	and.w	r3, r3, #2
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d10c      	bne.n	800d34a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	2b00      	cmp	r3, #0
 800d334:	d109      	bne.n	800d34a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d336:	4b17      	ldr	r3, [pc, #92]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	08db      	lsrs	r3, r3, #3
 800d33c:	f003 0303 	and.w	r3, r3, #3
 800d340:	4a15      	ldr	r2, [pc, #84]	; (800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800d342:	fa22 f303 	lsr.w	r3, r2, r3
 800d346:	637b      	str	r3, [r7, #52]	; 0x34
 800d348:	e01e      	b.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d34a:	4b12      	ldr	r3, [pc, #72]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d356:	d106      	bne.n	800d366 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d35e:	d102      	bne.n	800d366 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d360:	4b0e      	ldr	r3, [pc, #56]	; (800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800d362:	637b      	str	r3, [r7, #52]	; 0x34
 800d364:	e010      	b.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d366:	4b0b      	ldr	r3, [pc, #44]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d36e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d372:	d106      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d37a:	d102      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d37c:	4b08      	ldr	r3, [pc, #32]	; (800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800d37e:	637b      	str	r3, [r7, #52]	; 0x34
 800d380:	e002      	b.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d386:	e003      	b.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800d388:	e002      	b.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800d38a:	2300      	movs	r3, #0
 800d38c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d38e:	bf00      	nop
          }
        }
        break;
 800d390:	f000 bccf 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d394:	44020c00 	.word	0x44020c00
 800d398:	03d09000 	.word	0x03d09000
 800d39c:	003d0900 	.word	0x003d0900
 800d3a0:	02faf080 	.word	0x02faf080
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800d3a4:	4b9e      	ldr	r3, [pc, #632]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d3a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d3aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d3ae:	633b      	str	r3, [r7, #48]	; 0x30
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d3b6:	d056      	beq.n	800d466 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d3be:	f200 808b 	bhi.w	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3c8:	d03e      	beq.n	800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3d0:	f200 8082 	bhi.w	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800d3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d3da:	d027      	beq.n	800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d3e2:	d879      	bhi.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3ea:	d017      	beq.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3f2:	d871      	bhi.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d004      	beq.n	800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d400:	d004      	beq.n	800d40c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800d402:	e069      	b.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800d404:	f7fb fd6c 	bl	8008ee0 <HAL_RCC_GetPCLK3Freq>
 800d408:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800d40a:	e068      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d40c:	f107 0314 	add.w	r3, r7, #20
 800d410:	4618      	mov	r0, r3
 800d412:	f7fd fe6f 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d41a:	e060      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d41c:	f107 0308 	add.w	r3, r7, #8
 800d420:	4618      	mov	r0, r3
 800d422:	f7fd ffd1 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d42a:	e058      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d42c:	4b7c      	ldr	r3, [pc, #496]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d42e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d432:	f003 0302 	and.w	r3, r3, #2
 800d436:	2b02      	cmp	r3, #2
 800d438:	d103      	bne.n	800d442 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800d43a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d43e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800d440:	e04d      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800d442:	2300      	movs	r3, #0
 800d444:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d446:	e04a      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800d448:	4b75      	ldr	r3, [pc, #468]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d44a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d44e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d456:	d103      	bne.n	800d460 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800d458:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d45c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800d45e:	e03e      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800d460:	2300      	movs	r3, #0
 800d462:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d464:	e03b      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d466:	4b6e      	ldr	r3, [pc, #440]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d46c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d470:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d472:	4b6b      	ldr	r3, [pc, #428]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f003 0302 	and.w	r3, r3, #2
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d10c      	bne.n	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d109      	bne.n	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d484:	4b66      	ldr	r3, [pc, #408]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	08db      	lsrs	r3, r3, #3
 800d48a:	f003 0303 	and.w	r3, r3, #3
 800d48e:	4a65      	ldr	r2, [pc, #404]	; (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800d490:	fa22 f303 	lsr.w	r3, r2, r3
 800d494:	637b      	str	r3, [r7, #52]	; 0x34
 800d496:	e01e      	b.n	800d4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d498:	4b61      	ldr	r3, [pc, #388]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4a4:	d106      	bne.n	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ac:	d102      	bne.n	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d4ae:	4b5e      	ldr	r3, [pc, #376]	; (800d628 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800d4b0:	637b      	str	r3, [r7, #52]	; 0x34
 800d4b2:	e010      	b.n	800d4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d4b4:	4b5a      	ldr	r3, [pc, #360]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4c0:	d106      	bne.n	800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800d4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4c8:	d102      	bne.n	800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d4ca:	4b58      	ldr	r3, [pc, #352]	; (800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800d4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ce:	e002      	b.n	800d4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d4d4:	e003      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800d4d6:	e002      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d4dc:	bf00      	nop
          }
        }
        break;
 800d4de:	f000 bc28 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d4e2:	4b4f      	ldr	r3, [pc, #316]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d4e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d4e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4ec:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800d4ee:	4b4c      	ldr	r3, [pc, #304]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4fa:	d106      	bne.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d103      	bne.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800d502:	4b4a      	ldr	r3, [pc, #296]	; (800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800d504:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800d506:	f000 bc14 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d510:	d108      	bne.n	800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d512:	f107 0320 	add.w	r3, r7, #32
 800d516:	4618      	mov	r0, r3
 800d518:	f7fd fc82 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d520:	f000 bc07 	b.w	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d52a:	d107      	bne.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d52c:	f107 0314 	add.w	r3, r7, #20
 800d530:	4618      	mov	r0, r3
 800d532:	f7fd fddf 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d53a:	e3fa      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800d53c:	2300      	movs	r3, #0
 800d53e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d540:	e3f7      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d542:	4b37      	ldr	r3, [pc, #220]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d548:	f003 0307 	and.w	r3, r3, #7
 800d54c:	633b      	str	r3, [r7, #48]	; 0x30
 800d54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d550:	2b04      	cmp	r3, #4
 800d552:	d861      	bhi.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800d554:	a201      	add	r2, pc, #4	; (adr r2, 800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800d556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55a:	bf00      	nop
 800d55c:	0800d571 	.word	0x0800d571
 800d560:	0800d581 	.word	0x0800d581
 800d564:	0800d591 	.word	0x0800d591
 800d568:	0800d5a1 	.word	0x0800d5a1
 800d56c:	0800d5a7 	.word	0x0800d5a7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d570:	f107 0320 	add.w	r3, r7, #32
 800d574:	4618      	mov	r0, r3
 800d576:	f7fd fc53 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d57e:	e04e      	b.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d580:	f107 0314 	add.w	r3, r7, #20
 800d584:	4618      	mov	r0, r3
 800d586:	f7fd fdb5 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d58e:	e046      	b.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d590:	f107 0308 	add.w	r3, r7, #8
 800d594:	4618      	mov	r0, r3
 800d596:	f7fd ff17 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d59e:	e03e      	b.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800d5a0:	4b23      	ldr	r3, [pc, #140]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800d5a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d5a4:	e03b      	b.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d5a6:	4b1e      	ldr	r3, [pc, #120]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d5a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d5ac:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d5b0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d5b2:	4b1b      	ldr	r3, [pc, #108]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f003 0302 	and.w	r3, r3, #2
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d10c      	bne.n	800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800d5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d109      	bne.n	800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d5c4:	4b16      	ldr	r3, [pc, #88]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	08db      	lsrs	r3, r3, #3
 800d5ca:	f003 0303 	and.w	r3, r3, #3
 800d5ce:	4a15      	ldr	r2, [pc, #84]	; (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800d5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d5d6:	e01e      	b.n	800d616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d5d8:	4b11      	ldr	r3, [pc, #68]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5e4:	d106      	bne.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800d5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5ec:	d102      	bne.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d5ee:	4b0e      	ldr	r3, [pc, #56]	; (800d628 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800d5f0:	637b      	str	r3, [r7, #52]	; 0x34
 800d5f2:	e010      	b.n	800d616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d5f4:	4b0a      	ldr	r3, [pc, #40]	; (800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d600:	d106      	bne.n	800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d608:	d102      	bne.n	800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d60a:	4b08      	ldr	r3, [pc, #32]	; (800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800d60c:	637b      	str	r3, [r7, #52]	; 0x34
 800d60e:	e002      	b.n	800d616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800d610:	2300      	movs	r3, #0
 800d612:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d614:	e003      	b.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800d616:	e002      	b.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800d618:	2300      	movs	r3, #0
 800d61a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d61c:	bf00      	nop
          }
        }
        break;
 800d61e:	e388      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d620:	44020c00 	.word	0x44020c00
 800d624:	03d09000 	.word	0x03d09000
 800d628:	003d0900 	.word	0x003d0900
 800d62c:	02faf080 	.word	0x02faf080
 800d630:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d634:	4ba9      	ldr	r3, [pc, #676]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d63a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d63e:	633b      	str	r3, [r7, #48]	; 0x30
 800d640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d642:	2b20      	cmp	r3, #32
 800d644:	f200 809a 	bhi.w	800d77c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800d648:	a201      	add	r2, pc, #4	; (adr r2, 800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800d64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64e:	bf00      	nop
 800d650:	0800d6d5 	.word	0x0800d6d5
 800d654:	0800d77d 	.word	0x0800d77d
 800d658:	0800d77d 	.word	0x0800d77d
 800d65c:	0800d77d 	.word	0x0800d77d
 800d660:	0800d77d 	.word	0x0800d77d
 800d664:	0800d77d 	.word	0x0800d77d
 800d668:	0800d77d 	.word	0x0800d77d
 800d66c:	0800d77d 	.word	0x0800d77d
 800d670:	0800d6e5 	.word	0x0800d6e5
 800d674:	0800d77d 	.word	0x0800d77d
 800d678:	0800d77d 	.word	0x0800d77d
 800d67c:	0800d77d 	.word	0x0800d77d
 800d680:	0800d77d 	.word	0x0800d77d
 800d684:	0800d77d 	.word	0x0800d77d
 800d688:	0800d77d 	.word	0x0800d77d
 800d68c:	0800d77d 	.word	0x0800d77d
 800d690:	0800d6f5 	.word	0x0800d6f5
 800d694:	0800d77d 	.word	0x0800d77d
 800d698:	0800d77d 	.word	0x0800d77d
 800d69c:	0800d77d 	.word	0x0800d77d
 800d6a0:	0800d77d 	.word	0x0800d77d
 800d6a4:	0800d77d 	.word	0x0800d77d
 800d6a8:	0800d77d 	.word	0x0800d77d
 800d6ac:	0800d77d 	.word	0x0800d77d
 800d6b0:	0800d705 	.word	0x0800d705
 800d6b4:	0800d77d 	.word	0x0800d77d
 800d6b8:	0800d77d 	.word	0x0800d77d
 800d6bc:	0800d77d 	.word	0x0800d77d
 800d6c0:	0800d77d 	.word	0x0800d77d
 800d6c4:	0800d77d 	.word	0x0800d77d
 800d6c8:	0800d77d 	.word	0x0800d77d
 800d6cc:	0800d77d 	.word	0x0800d77d
 800d6d0:	0800d70b 	.word	0x0800d70b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d6d4:	f107 0320 	add.w	r3, r7, #32
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fd fba1 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d6e2:	e04e      	b.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6e4:	f107 0314 	add.w	r3, r7, #20
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fd fd03 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d6f2:	e046      	b.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6f4:	f107 0308 	add.w	r3, r7, #8
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fd fe65 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d702:	e03e      	b.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800d704:	4b76      	ldr	r3, [pc, #472]	; (800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800d706:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d708:	e03b      	b.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d70a:	4b74      	ldr	r3, [pc, #464]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d70c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d710:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d714:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d716:	4b71      	ldr	r3, [pc, #452]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f003 0302 	and.w	r3, r3, #2
 800d71e:	2b02      	cmp	r3, #2
 800d720:	d10c      	bne.n	800d73c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800d722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d724:	2b00      	cmp	r3, #0
 800d726:	d109      	bne.n	800d73c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d728:	4b6c      	ldr	r3, [pc, #432]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	08db      	lsrs	r3, r3, #3
 800d72e:	f003 0303 	and.w	r3, r3, #3
 800d732:	4a6c      	ldr	r2, [pc, #432]	; (800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800d734:	fa22 f303 	lsr.w	r3, r2, r3
 800d738:	637b      	str	r3, [r7, #52]	; 0x34
 800d73a:	e01e      	b.n	800d77a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d73c:	4b67      	ldr	r3, [pc, #412]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d748:	d106      	bne.n	800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d750:	d102      	bne.n	800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d752:	4b65      	ldr	r3, [pc, #404]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800d754:	637b      	str	r3, [r7, #52]	; 0x34
 800d756:	e010      	b.n	800d77a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d758:	4b60      	ldr	r3, [pc, #384]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d764:	d106      	bne.n	800d774 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d76c:	d102      	bne.n	800d774 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d76e:	4b5f      	ldr	r3, [pc, #380]	; (800d8ec <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800d770:	637b      	str	r3, [r7, #52]	; 0x34
 800d772:	e002      	b.n	800d77a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800d774:	2300      	movs	r3, #0
 800d776:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d778:	e003      	b.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800d77a:	e002      	b.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d780:	bf00      	nop
          }
        }
        break;
 800d782:	e2d6      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d784:	4b55      	ldr	r3, [pc, #340]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d78a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800d78e:	633b      	str	r3, [r7, #48]	; 0x30
 800d790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d796:	d031      	beq.n	800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800d798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d79e:	d866      	bhi.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	2bc0      	cmp	r3, #192	; 0xc0
 800d7a4:	d027      	beq.n	800d7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800d7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a8:	2bc0      	cmp	r3, #192	; 0xc0
 800d7aa:	d860      	bhi.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	2b80      	cmp	r3, #128	; 0x80
 800d7b0:	d019      	beq.n	800d7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	2b80      	cmp	r3, #128	; 0x80
 800d7b6:	d85a      	bhi.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	2b40      	cmp	r3, #64	; 0x40
 800d7c2:	d008      	beq.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800d7c4:	e053      	b.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d7c6:	f107 0320 	add.w	r3, r7, #32
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fd fb28 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d7d4:	e04e      	b.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7d6:	f107 0314 	add.w	r3, r7, #20
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fd fc8a 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d7e4:	e046      	b.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7e6:	f107 0308 	add.w	r3, r7, #8
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fd fdec 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d7f4:	e03e      	b.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800d7f6:	4b3a      	ldr	r3, [pc, #232]	; (800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800d7f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d7fa:	e03b      	b.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d7fc:	4b37      	ldr	r3, [pc, #220]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d7fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d802:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d806:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d808:	4b34      	ldr	r3, [pc, #208]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f003 0302 	and.w	r3, r3, #2
 800d810:	2b02      	cmp	r3, #2
 800d812:	d10c      	bne.n	800d82e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	2b00      	cmp	r3, #0
 800d818:	d109      	bne.n	800d82e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d81a:	4b30      	ldr	r3, [pc, #192]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	08db      	lsrs	r3, r3, #3
 800d820:	f003 0303 	and.w	r3, r3, #3
 800d824:	4a2f      	ldr	r2, [pc, #188]	; (800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800d826:	fa22 f303 	lsr.w	r3, r2, r3
 800d82a:	637b      	str	r3, [r7, #52]	; 0x34
 800d82c:	e01e      	b.n	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d82e:	4b2b      	ldr	r3, [pc, #172]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d83a:	d106      	bne.n	800d84a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800d83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d842:	d102      	bne.n	800d84a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d844:	4b28      	ldr	r3, [pc, #160]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800d846:	637b      	str	r3, [r7, #52]	; 0x34
 800d848:	e010      	b.n	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d84a:	4b24      	ldr	r3, [pc, #144]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d856:	d106      	bne.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d85e:	d102      	bne.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d860:	4b22      	ldr	r3, [pc, #136]	; (800d8ec <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800d862:	637b      	str	r3, [r7, #52]	; 0x34
 800d864:	e002      	b.n	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800d866:	2300      	movs	r3, #0
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d86a:	e003      	b.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800d86c:	e002      	b.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d872:	bf00      	nop
          }
        }
        break;
 800d874:	e25d      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800d876:	4b19      	ldr	r3, [pc, #100]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d87c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800d880:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	2b00      	cmp	r3, #0
 800d886:	d103      	bne.n	800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800d888:	f7fb fb14 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 800d88c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d88e:	e250      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800d890:	4b12      	ldr	r3, [pc, #72]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d89c:	d10b      	bne.n	800d8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800d89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8a4:	d107      	bne.n	800d8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8a6:	f107 0314 	add.w	r3, r7, #20
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fd fc22 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	637b      	str	r3, [r7, #52]	; 0x34
 800d8b4:	e04f      	b.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800d8b6:	4b09      	ldr	r3, [pc, #36]	; (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d8c2:	d115      	bne.n	800d8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8ca:	d111      	bne.n	800d8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8cc:	f107 0308 	add.w	r3, r7, #8
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fd fd79 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d8da:	e03c      	b.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800d8dc:	44020c00 	.word	0x44020c00
 800d8e0:	00bb8000 	.word	0x00bb8000
 800d8e4:	03d09000 	.word	0x03d09000
 800d8e8:	003d0900 	.word	0x003d0900
 800d8ec:	02faf080 	.word	0x02faf080
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800d8f0:	4b94      	ldr	r3, [pc, #592]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 0302 	and.w	r3, r3, #2
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d10d      	bne.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d902:	d109      	bne.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d904:	4b8f      	ldr	r3, [pc, #572]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	08db      	lsrs	r3, r3, #3
 800d90a:	f003 0303 	and.w	r3, r3, #3
 800d90e:	4a8e      	ldr	r2, [pc, #568]	; (800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800d910:	fa22 f303 	lsr.w	r3, r2, r3
 800d914:	637b      	str	r3, [r7, #52]	; 0x34
 800d916:	e01e      	b.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800d918:	4b8a      	ldr	r3, [pc, #552]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d924:	d106      	bne.n	800d934 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800d926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d92c:	d102      	bne.n	800d934 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800d92e:	4b87      	ldr	r3, [pc, #540]	; (800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800d930:	637b      	str	r3, [r7, #52]	; 0x34
 800d932:	e010      	b.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800d934:	4b83      	ldr	r3, [pc, #524]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d93c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d940:	d106      	bne.n	800d950 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d948:	d102      	bne.n	800d950 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800d94a:	4b81      	ldr	r3, [pc, #516]	; (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800d94c:	637b      	str	r3, [r7, #52]	; 0x34
 800d94e:	e002      	b.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800d950:	2300      	movs	r3, #0
 800d952:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d954:	e1ed      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d956:	e1ec      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800d958:	4b7a      	ldr	r3, [pc, #488]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d95a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d95e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d962:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800d964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d966:	2b00      	cmp	r3, #0
 800d968:	d103      	bne.n	800d972 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800d96a:	f7fb fab9 	bl	8008ee0 <HAL_RCC_GetPCLK3Freq>
 800d96e:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d970:	e1df      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800d972:	4b74      	ldr	r3, [pc, #464]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d97a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d97e:	d10b      	bne.n	800d998 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800d980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d986:	d107      	bne.n	800d998 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d988:	f107 0314 	add.w	r3, r7, #20
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fd fbb1 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	637b      	str	r3, [r7, #52]	; 0x34
 800d996:	e045      	b.n	800da24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800d998:	4b6a      	ldr	r3, [pc, #424]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d9a4:	d10b      	bne.n	800d9be <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9ac:	d107      	bne.n	800d9be <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9ae:	f107 0308 	add.w	r3, r7, #8
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fd fd08 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d9bc:	e032      	b.n	800da24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800d9be:	4b61      	ldr	r3, [pc, #388]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f003 0302 	and.w	r3, r3, #2
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d10d      	bne.n	800d9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d9d0:	d109      	bne.n	800d9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d9d2:	4b5c      	ldr	r3, [pc, #368]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	08db      	lsrs	r3, r3, #3
 800d9d8:	f003 0303 	and.w	r3, r3, #3
 800d9dc:	4a5a      	ldr	r2, [pc, #360]	; (800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800d9de:	fa22 f303 	lsr.w	r3, r2, r3
 800d9e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d9e4:	e01e      	b.n	800da24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800d9e6:	4b57      	ldr	r3, [pc, #348]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9f2:	d106      	bne.n	800da02 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9fa:	d102      	bne.n	800da02 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800d9fc:	4b53      	ldr	r3, [pc, #332]	; (800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800d9fe:	637b      	str	r3, [r7, #52]	; 0x34
 800da00:	e010      	b.n	800da24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800da02:	4b50      	ldr	r3, [pc, #320]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da0e:	d106      	bne.n	800da1e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800da10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da12:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800da16:	d102      	bne.n	800da1e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800da18:	4b4d      	ldr	r3, [pc, #308]	; (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800da1a:	637b      	str	r3, [r7, #52]	; 0x34
 800da1c:	e002      	b.n	800da24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800da1e:	2300      	movs	r3, #0
 800da20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800da22:	e186      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800da24:	e185      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800da26:	4b47      	ldr	r3, [pc, #284]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800da28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da2c:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800da30:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	2b00      	cmp	r3, #0
 800da36:	d103      	bne.n	800da40 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800da38:	f7fb fa3c 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 800da3c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800da3e:	e178      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800da40:	4b40      	ldr	r3, [pc, #256]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da4c:	d10b      	bne.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da54:	d107      	bne.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da56:	f107 0314 	add.w	r3, r7, #20
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fd fb4a 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	637b      	str	r3, [r7, #52]	; 0x34
 800da64:	e045      	b.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800da66:	4b37      	ldr	r3, [pc, #220]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da72:	d10b      	bne.n	800da8c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800da74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da7a:	d107      	bne.n	800da8c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da7c:	f107 0308 	add.w	r3, r7, #8
 800da80:	4618      	mov	r0, r3
 800da82:	f7fd fca1 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	637b      	str	r3, [r7, #52]	; 0x34
 800da8a:	e032      	b.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800da8c:	4b2d      	ldr	r3, [pc, #180]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f003 0302 	and.w	r3, r3, #2
 800da94:	2b02      	cmp	r3, #2
 800da96:	d10d      	bne.n	800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800da98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800da9e:	d109      	bne.n	800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800daa0:	4b28      	ldr	r3, [pc, #160]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	08db      	lsrs	r3, r3, #3
 800daa6:	f003 0303 	and.w	r3, r3, #3
 800daaa:	4a27      	ldr	r2, [pc, #156]	; (800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800daac:	fa22 f303 	lsr.w	r3, r2, r3
 800dab0:	637b      	str	r3, [r7, #52]	; 0x34
 800dab2:	e01e      	b.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800dab4:	4b23      	ldr	r3, [pc, #140]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dac0:	d106      	bne.n	800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800dac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dac8:	d102      	bne.n	800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800daca:	4b20      	ldr	r3, [pc, #128]	; (800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800dacc:	637b      	str	r3, [r7, #52]	; 0x34
 800dace:	e010      	b.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800dad0:	4b1c      	ldr	r3, [pc, #112]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dadc:	d106      	bne.n	800daec <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800dade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800dae4:	d102      	bne.n	800daec <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800dae6:	4b1a      	ldr	r3, [pc, #104]	; (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800dae8:	637b      	str	r3, [r7, #52]	; 0x34
 800daea:	e002      	b.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800daec:	2300      	movs	r3, #0
 800daee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800daf0:	e11f      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800daf2:	e11e      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800daf4:	4b13      	ldr	r3, [pc, #76]	; (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800daf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dafa:	f003 0303 	and.w	r3, r3, #3
 800dafe:	633b      	str	r3, [r7, #48]	; 0x30
 800db00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db02:	2b03      	cmp	r3, #3
 800db04:	d85f      	bhi.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800db06:	a201      	add	r2, pc, #4	; (adr r2, 800db0c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800db08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db0c:	0800db1d 	.word	0x0800db1d
 800db10:	0800db25 	.word	0x0800db25
 800db14:	0800db35 	.word	0x0800db35
 800db18:	0800db55 	.word	0x0800db55

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800db1c:	f7fb f998 	bl	8008e50 <HAL_RCC_GetHCLKFreq>
 800db20:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800db22:	e053      	b.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db24:	f107 0320 	add.w	r3, r7, #32
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fd f979 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800db32:	e04b      	b.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db34:	f107 0314 	add.w	r3, r7, #20
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fd fadb 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800db42:	e043      	b.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800db44:	44020c00 	.word	0x44020c00
 800db48:	03d09000 	.word	0x03d09000
 800db4c:	003d0900 	.word	0x003d0900
 800db50:	02faf080 	.word	0x02faf080
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800db54:	4b79      	ldr	r3, [pc, #484]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800db56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800db5a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800db5e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800db60:	4b76      	ldr	r3, [pc, #472]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f003 0302 	and.w	r3, r3, #2
 800db68:	2b02      	cmp	r3, #2
 800db6a:	d10c      	bne.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800db6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d109      	bne.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800db72:	4b72      	ldr	r3, [pc, #456]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	08db      	lsrs	r3, r3, #3
 800db78:	f003 0303 	and.w	r3, r3, #3
 800db7c:	4a70      	ldr	r2, [pc, #448]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800db7e:	fa22 f303 	lsr.w	r3, r2, r3
 800db82:	637b      	str	r3, [r7, #52]	; 0x34
 800db84:	e01e      	b.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db86:	4b6d      	ldr	r3, [pc, #436]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db92:	d106      	bne.n	800dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db9a:	d102      	bne.n	800dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800db9c:	4b69      	ldr	r3, [pc, #420]	; (800dd44 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800db9e:	637b      	str	r3, [r7, #52]	; 0x34
 800dba0:	e010      	b.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dba2:	4b66      	ldr	r3, [pc, #408]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dbae:	d106      	bne.n	800dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbb6:	d102      	bne.n	800dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800dbb8:	4b63      	ldr	r3, [pc, #396]	; (800dd48 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800dbba:	637b      	str	r3, [r7, #52]	; 0x34
 800dbbc:	e002      	b.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800dbc2:	e003      	b.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800dbc4:	e002      	b.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800dbca:	bf00      	nop
          }
        }
        break;
 800dbcc:	e0b1      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800dbce:	4b5b      	ldr	r3, [pc, #364]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dbd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dbd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dbd8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800dbda:	4b58      	ldr	r3, [pc, #352]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dbdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dbe0:	f003 0302 	and.w	r3, r3, #2
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d106      	bne.n	800dbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d103      	bne.n	800dbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800dbee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbf2:	637b      	str	r3, [r7, #52]	; 0x34
 800dbf4:	e01f      	b.n	800dc36 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800dbf6:	4b51      	ldr	r3, [pc, #324]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dbf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dbfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc04:	d106      	bne.n	800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	2b40      	cmp	r3, #64	; 0x40
 800dc0a:	d103      	bne.n	800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800dc0c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800dc10:	637b      	str	r3, [r7, #52]	; 0x34
 800dc12:	e010      	b.n	800dc36 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800dc14:	4b49      	ldr	r3, [pc, #292]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc20:	d106      	bne.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	2b80      	cmp	r3, #128	; 0x80
 800dc26:	d103      	bne.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800dc28:	f248 0312 	movw	r3, #32786	; 0x8012
 800dc2c:	637b      	str	r3, [r7, #52]	; 0x34
 800dc2e:	e002      	b.n	800dc36 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800dc30:	2300      	movs	r3, #0
 800dc32:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800dc34:	e07d      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dc36:	e07c      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800dc38:	4b40      	ldr	r3, [pc, #256]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dc3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dc3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dc42:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800dc44:	4b3d      	ldr	r3, [pc, #244]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc50:	d105      	bne.n	800dc5e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800dc58:	4b3c      	ldr	r3, [pc, #240]	; (800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800dc5a:	637b      	str	r3, [r7, #52]	; 0x34
 800dc5c:	e031      	b.n	800dcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800dc5e:	4b37      	ldr	r3, [pc, #220]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc6a:	d10a      	bne.n	800dc82 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800dc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6e:	2b10      	cmp	r3, #16
 800dc70:	d107      	bne.n	800dc82 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc72:	f107 0320 	add.w	r3, r7, #32
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fd f8d2 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	637b      	str	r3, [r7, #52]	; 0x34
 800dc80:	e01f      	b.n	800dcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800dc82:	4b2e      	ldr	r3, [pc, #184]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dc84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dc88:	f003 0302 	and.w	r3, r3, #2
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	d106      	bne.n	800dc9e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800dc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc92:	2b20      	cmp	r3, #32
 800dc94:	d103      	bne.n	800dc9e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800dc96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc9a:	637b      	str	r3, [r7, #52]	; 0x34
 800dc9c:	e011      	b.n	800dcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800dc9e:	4b27      	ldr	r3, [pc, #156]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dcac:	d106      	bne.n	800dcbc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	2b30      	cmp	r3, #48	; 0x30
 800dcb2:	d103      	bne.n	800dcbc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800dcb4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800dcb8:	637b      	str	r3, [r7, #52]	; 0x34
 800dcba:	e002      	b.n	800dcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800dcc0:	e037      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dcc2:	e036      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800dcc4:	4b1d      	ldr	r3, [pc, #116]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dcc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dcca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dcce:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd2:	2b10      	cmp	r3, #16
 800dcd4:	d107      	bne.n	800dce6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dcd6:	f107 0320 	add.w	r3, r7, #32
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fd f8a0 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800dce4:	e025      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800dce6:	4b15      	ldr	r3, [pc, #84]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcf2:	d10a      	bne.n	800dd0a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800dcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf6:	2b20      	cmp	r3, #32
 800dcf8:	d107      	bne.n	800dd0a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcfa:	f107 0308 	add.w	r3, r7, #8
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fd fb62 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	637b      	str	r3, [r7, #52]	; 0x34
 800dd08:	e00f      	b.n	800dd2a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800dd0a:	4b0c      	ldr	r3, [pc, #48]	; (800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd16:	d105      	bne.n	800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1a:	2b30      	cmp	r3, #48	; 0x30
 800dd1c:	d102      	bne.n	800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800dd1e:	4b0b      	ldr	r3, [pc, #44]	; (800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800dd20:	637b      	str	r3, [r7, #52]	; 0x34
 800dd22:	e002      	b.n	800dd2a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800dd24:	2300      	movs	r3, #0
 800dd26:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800dd28:	e003      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dd2a:	e002      	b.n	800dd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dd30:	bf00      	nop
    }
  }

  return (frequency);
 800dd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	373c      	adds	r7, #60	; 0x3c
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd90      	pop	{r4, r7, pc}
 800dd3c:	44020c00 	.word	0x44020c00
 800dd40:	03d09000 	.word	0x03d09000
 800dd44:	003d0900 	.word	0x003d0900
 800dd48:	02faf080 	.word	0x02faf080
 800dd4c:	02dc6c00 	.word	0x02dc6c00

0800dd50 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800dd58:	4b48      	ldr	r3, [pc, #288]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a47      	ldr	r2, [pc, #284]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800dd5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dd62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd64:	f7f8 fa28 	bl	80061b8 <HAL_GetTick>
 800dd68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dd6a:	e008      	b.n	800dd7e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd6c:	f7f8 fa24 	bl	80061b8 <HAL_GetTick>
 800dd70:	4602      	mov	r2, r0
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	d901      	bls.n	800dd7e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dd7a:	2303      	movs	r3, #3
 800dd7c:	e07a      	b.n	800de74 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dd7e:	4b3f      	ldr	r3, [pc, #252]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1f0      	bne.n	800dd6c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dd8a:	4b3c      	ldr	r3, [pc, #240]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800dd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dd92:	f023 0303 	bic.w	r3, r3, #3
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	6811      	ldr	r1, [r2, #0]
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	6852      	ldr	r2, [r2, #4]
 800dd9e:	0212      	lsls	r2, r2, #8
 800dda0:	430a      	orrs	r2, r1
 800dda2:	4936      	ldr	r1, [pc, #216]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800dda4:	4313      	orrs	r3, r2
 800dda6:	62cb      	str	r3, [r1, #44]	; 0x2c
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	3b01      	subs	r3, #1
 800ddae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	025b      	lsls	r3, r3, #9
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	431a      	orrs	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	691b      	ldr	r3, [r3, #16]
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	041b      	lsls	r3, r3, #16
 800ddc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ddca:	431a      	orrs	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	695b      	ldr	r3, [r3, #20]
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	061b      	lsls	r3, r3, #24
 800ddd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ddd8:	4928      	ldr	r1, [pc, #160]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800ddda:	4313      	orrs	r3, r2
 800dddc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800ddde:	4b27      	ldr	r3, [pc, #156]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800dde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde2:	f023 020c 	bic.w	r2, r3, #12
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	699b      	ldr	r3, [r3, #24]
 800ddea:	4924      	ldr	r1, [pc, #144]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800ddec:	4313      	orrs	r3, r2
 800ddee:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800ddf0:	4b22      	ldr	r3, [pc, #136]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	f023 0220 	bic.w	r2, r3, #32
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	69db      	ldr	r3, [r3, #28]
 800ddfc:	491f      	ldr	r1, [pc, #124]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800ddfe:	4313      	orrs	r3, r2
 800de00:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800de02:	4b1e      	ldr	r3, [pc, #120]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0a:	491c      	ldr	r1, [pc, #112]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de0c:	4313      	orrs	r3, r2
 800de0e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800de10:	4b1a      	ldr	r3, [pc, #104]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de14:	4a19      	ldr	r2, [pc, #100]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de16:	f023 0310 	bic.w	r3, r3, #16
 800de1a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800de1c:	4b17      	ldr	r3, [pc, #92]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	6a12      	ldr	r2, [r2, #32]
 800de2c:	00d2      	lsls	r2, r2, #3
 800de2e:	4913      	ldr	r1, [pc, #76]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de30:	4313      	orrs	r3, r2
 800de32:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800de34:	4b11      	ldr	r3, [pc, #68]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de38:	4a10      	ldr	r2, [pc, #64]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de3a:	f043 0310 	orr.w	r3, r3, #16
 800de3e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800de40:	4b0e      	ldr	r3, [pc, #56]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a0d      	ldr	r2, [pc, #52]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de4c:	f7f8 f9b4 	bl	80061b8 <HAL_GetTick>
 800de50:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800de52:	e008      	b.n	800de66 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de54:	f7f8 f9b0 	bl	80061b8 <HAL_GetTick>
 800de58:	4602      	mov	r2, r0
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d901      	bls.n	800de66 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800de62:	2303      	movs	r3, #3
 800de64:	e006      	b.n	800de74 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800de66:	4b05      	ldr	r3, [pc, #20]	; (800de7c <RCCEx_PLL2_Config+0x12c>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d0f0      	beq.n	800de54 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800de72:	2300      	movs	r3, #0

}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	44020c00 	.word	0x44020c00

0800de80 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800de88:	4b48      	ldr	r3, [pc, #288]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a47      	ldr	r2, [pc, #284]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800de8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de94:	f7f8 f990 	bl	80061b8 <HAL_GetTick>
 800de98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de9a:	e008      	b.n	800deae <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de9c:	f7f8 f98c 	bl	80061b8 <HAL_GetTick>
 800dea0:	4602      	mov	r2, r0
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	d901      	bls.n	800deae <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800deaa:	2303      	movs	r3, #3
 800deac:	e07a      	b.n	800dfa4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800deae:	4b3f      	ldr	r3, [pc, #252]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1f0      	bne.n	800de9c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800deba:	4b3c      	ldr	r3, [pc, #240]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800debc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800debe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dec2:	f023 0303 	bic.w	r3, r3, #3
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	6811      	ldr	r1, [r2, #0]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	6852      	ldr	r2, [r2, #4]
 800dece:	0212      	lsls	r2, r2, #8
 800ded0:	430a      	orrs	r2, r1
 800ded2:	4936      	ldr	r1, [pc, #216]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800ded4:	4313      	orrs	r3, r2
 800ded6:	630b      	str	r3, [r1, #48]	; 0x30
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	3b01      	subs	r3, #1
 800dede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	3b01      	subs	r3, #1
 800dee8:	025b      	lsls	r3, r3, #9
 800deea:	b29b      	uxth	r3, r3
 800deec:	431a      	orrs	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	3b01      	subs	r3, #1
 800def4:	041b      	lsls	r3, r3, #16
 800def6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800defa:	431a      	orrs	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	695b      	ldr	r3, [r3, #20]
 800df00:	3b01      	subs	r3, #1
 800df02:	061b      	lsls	r3, r3, #24
 800df04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800df08:	4928      	ldr	r1, [pc, #160]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df0a:	4313      	orrs	r3, r2
 800df0c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800df0e:	4b27      	ldr	r3, [pc, #156]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df12:	f023 020c 	bic.w	r2, r3, #12
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	4924      	ldr	r1, [pc, #144]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df1c:	4313      	orrs	r3, r2
 800df1e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800df20:	4b22      	ldr	r3, [pc, #136]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df24:	f023 0220 	bic.w	r2, r3, #32
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	69db      	ldr	r3, [r3, #28]
 800df2c:	491f      	ldr	r1, [pc, #124]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df2e:	4313      	orrs	r3, r2
 800df30:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800df32:	4b1e      	ldr	r3, [pc, #120]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3a:	491c      	ldr	r1, [pc, #112]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df3c:	4313      	orrs	r3, r2
 800df3e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800df40:	4b1a      	ldr	r3, [pc, #104]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df44:	4a19      	ldr	r2, [pc, #100]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df46:	f023 0310 	bic.w	r3, r3, #16
 800df4a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800df4c:	4b17      	ldr	r3, [pc, #92]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	6a12      	ldr	r2, [r2, #32]
 800df5c:	00d2      	lsls	r2, r2, #3
 800df5e:	4913      	ldr	r1, [pc, #76]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df60:	4313      	orrs	r3, r2
 800df62:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800df64:	4b11      	ldr	r3, [pc, #68]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df68:	4a10      	ldr	r2, [pc, #64]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df6a:	f043 0310 	orr.w	r3, r3, #16
 800df6e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800df70:	4b0e      	ldr	r3, [pc, #56]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a0d      	ldr	r2, [pc, #52]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800df7c:	f7f8 f91c 	bl	80061b8 <HAL_GetTick>
 800df80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df82:	e008      	b.n	800df96 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df84:	f7f8 f918 	bl	80061b8 <HAL_GetTick>
 800df88:	4602      	mov	r2, r0
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	2b02      	cmp	r3, #2
 800df90:	d901      	bls.n	800df96 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800df92:	2303      	movs	r3, #3
 800df94:	e006      	b.n	800dfa4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df96:	4b05      	ldr	r3, [pc, #20]	; (800dfac <RCCEx_PLL3_Config+0x12c>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0f0      	beq.n	800df84 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	44020c00 	.word	0x44020c00

0800dfb0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d071      	beq.n	800e0a6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d106      	bne.n	800dfdc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7f6 ff18 	bl	8004e0c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2202      	movs	r2, #2
 800dfe0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dfe4:	4b32      	ldr	r3, [pc, #200]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	f003 0310 	and.w	r3, r3, #16
 800dfec:	2b10      	cmp	r3, #16
 800dfee:	d051      	beq.n	800e094 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dff0:	4b2f      	ldr	r3, [pc, #188]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800dff2:	22ca      	movs	r2, #202	; 0xca
 800dff4:	625a      	str	r2, [r3, #36]	; 0x24
 800dff6:	4b2e      	ldr	r3, [pc, #184]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800dff8:	2253      	movs	r2, #83	; 0x53
 800dffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 f88b 	bl	800e118 <RTC_EnterInitMode>
 800e002:	4603      	mov	r3, r0
 800e004:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800e006:	7bfb      	ldrb	r3, [r7, #15]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d13f      	bne.n	800e08c <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800e00c:	4b28      	ldr	r3, [pc, #160]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	4a27      	ldr	r2, [pc, #156]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e012:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800e016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e01a:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e01c:	4b24      	ldr	r3, [pc, #144]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e01e:	699a      	ldr	r2, [r3, #24]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6859      	ldr	r1, [r3, #4]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	4319      	orrs	r1, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	699b      	ldr	r3, [r3, #24]
 800e02e:	430b      	orrs	r3, r1
 800e030:	491f      	ldr	r1, [pc, #124]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e032:	4313      	orrs	r3, r2
 800e034:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	68da      	ldr	r2, [r3, #12]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	041b      	lsls	r3, r3, #16
 800e040:	491b      	ldr	r1, [pc, #108]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e042:	4313      	orrs	r3, r2
 800e044:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800e046:	4b1a      	ldr	r3, [pc, #104]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e056:	430b      	orrs	r3, r1
 800e058:	4915      	ldr	r1, [pc, #84]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e05a:	4313      	orrs	r3, r2
 800e05c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f000 f896 	bl	800e190 <RTC_ExitInitMode>
 800e064:	4603      	mov	r3, r0
 800e066:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800e068:	7bfb      	ldrb	r3, [r7, #15]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d10e      	bne.n	800e08c <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800e06e:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e070:	699b      	ldr	r3, [r3, #24]
 800e072:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6a19      	ldr	r1, [r3, #32]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	69db      	ldr	r3, [r3, #28]
 800e07e:	4319      	orrs	r1, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	430b      	orrs	r3, r1
 800e086:	490a      	ldr	r1, [pc, #40]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e088:	4313      	orrs	r3, r2
 800e08a:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e08c:	4b08      	ldr	r3, [pc, #32]	; (800e0b0 <HAL_RTC_Init+0x100>)
 800e08e:	22ff      	movs	r2, #255	; 0xff
 800e090:	625a      	str	r2, [r3, #36]	; 0x24
 800e092:	e001      	b.n	800e098 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800e094:	2300      	movs	r3, #0
 800e096:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e098:	7bfb      	ldrb	r3, [r7, #15]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d103      	bne.n	800e0a6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800e0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	44007800 	.word	0x44007800

0800e0b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800e0bc:	4b15      	ldr	r3, [pc, #84]	; (800e114 <HAL_RTC_WaitForSynchro+0x60>)
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	4a14      	ldr	r2, [pc, #80]	; (800e114 <HAL_RTC_WaitForSynchro+0x60>)
 800e0c2:	f023 0320 	bic.w	r3, r3, #32
 800e0c6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800e0c8:	f7f8 f876 	bl	80061b8 <HAL_GetTick>
 800e0cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e0ce:	e013      	b.n	800e0f8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e0d0:	f7f8 f872 	bl	80061b8 <HAL_GetTick>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	1ad3      	subs	r3, r2, r3
 800e0da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0de:	d90b      	bls.n	800e0f8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e0e0:	4b0c      	ldr	r3, [pc, #48]	; (800e114 <HAL_RTC_WaitForSynchro+0x60>)
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	f003 0320 	and.w	r3, r3, #32
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10c      	bne.n	800e106 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2203      	movs	r2, #3
 800e0f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800e0f4:	2303      	movs	r3, #3
 800e0f6:	e008      	b.n	800e10a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e0f8:	4b06      	ldr	r3, [pc, #24]	; (800e114 <HAL_RTC_WaitForSynchro+0x60>)
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	f003 0320 	and.w	r3, r3, #32
 800e100:	2b00      	cmp	r3, #0
 800e102:	d0e5      	beq.n	800e0d0 <HAL_RTC_WaitForSynchro+0x1c>
 800e104:	e000      	b.n	800e108 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800e106:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800e108:	2300      	movs	r3, #0
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	44007800 	.word	0x44007800

0800e118 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e120:	2300      	movs	r3, #0
 800e122:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e124:	4b19      	ldr	r3, [pc, #100]	; (800e18c <RTC_EnterInitMode+0x74>)
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d128      	bne.n	800e182 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e130:	4b16      	ldr	r3, [pc, #88]	; (800e18c <RTC_EnterInitMode+0x74>)
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	4a15      	ldr	r2, [pc, #84]	; (800e18c <RTC_EnterInitMode+0x74>)
 800e136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e13a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e13c:	f7f8 f83c 	bl	80061b8 <HAL_GetTick>
 800e140:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e142:	e013      	b.n	800e16c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e144:	f7f8 f838 	bl	80061b8 <HAL_GetTick>
 800e148:	4602      	mov	r2, r0
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e152:	d90b      	bls.n	800e16c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e154:	4b0d      	ldr	r3, [pc, #52]	; (800e18c <RTC_EnterInitMode+0x74>)
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10f      	bne.n	800e180 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e160:	2303      	movs	r3, #3
 800e162:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2203      	movs	r2, #3
 800e168:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e16c:	4b07      	ldr	r3, [pc, #28]	; (800e18c <RTC_EnterInitMode+0x74>)
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e174:	2b00      	cmp	r3, #0
 800e176:	d104      	bne.n	800e182 <RTC_EnterInitMode+0x6a>
 800e178:	7bfb      	ldrb	r3, [r7, #15]
 800e17a:	2b03      	cmp	r3, #3
 800e17c:	d1e2      	bne.n	800e144 <RTC_EnterInitMode+0x2c>
 800e17e:	e000      	b.n	800e182 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e180:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e182:	7bfb      	ldrb	r3, [r7, #15]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	44007800 	.word	0x44007800

0800e190 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e198:	2300      	movs	r3, #0
 800e19a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e19c:	4b1a      	ldr	r3, [pc, #104]	; (800e208 <RTC_ExitInitMode+0x78>)
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	4a19      	ldr	r2, [pc, #100]	; (800e208 <RTC_ExitInitMode+0x78>)
 800e1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1a6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e1a8:	4b17      	ldr	r3, [pc, #92]	; (800e208 <RTC_ExitInitMode+0x78>)
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	f003 0320 	and.w	r3, r3, #32
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10c      	bne.n	800e1ce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7ff ff7d 	bl	800e0b4 <HAL_RTC_WaitForSynchro>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d01e      	beq.n	800e1fe <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2203      	movs	r2, #3
 800e1c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	73fb      	strb	r3, [r7, #15]
 800e1cc:	e017      	b.n	800e1fe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e1ce:	4b0e      	ldr	r3, [pc, #56]	; (800e208 <RTC_ExitInitMode+0x78>)
 800e1d0:	699b      	ldr	r3, [r3, #24]
 800e1d2:	4a0d      	ldr	r2, [pc, #52]	; (800e208 <RTC_ExitInitMode+0x78>)
 800e1d4:	f023 0320 	bic.w	r3, r3, #32
 800e1d8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7ff ff6a 	bl	800e0b4 <HAL_RTC_WaitForSynchro>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d005      	beq.n	800e1f2 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2203      	movs	r2, #3
 800e1ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800e1ee:	2303      	movs	r3, #3
 800e1f0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e1f2:	4b05      	ldr	r3, [pc, #20]	; (800e208 <RTC_ExitInitMode+0x78>)
 800e1f4:	699b      	ldr	r3, [r3, #24]
 800e1f6:	4a04      	ldr	r2, [pc, #16]	; (800e208 <RTC_ExitInitMode+0x78>)
 800e1f8:	f043 0320 	orr.w	r3, r3, #32
 800e1fc:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	44007800 	.word	0x44007800

0800e20c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b087      	sub	sp, #28
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800e218:	4b07      	ldr	r3, [pc, #28]	; (800e238 <HAL_RTCEx_BKUPWrite+0x2c>)
 800e21a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	697a      	ldr	r2, [r7, #20]
 800e222:	4413      	add	r3, r2
 800e224:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	601a      	str	r2, [r3, #0]
}
 800e22c:	bf00      	nop
 800e22e:	371c      	adds	r7, #28
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr
 800e238:	44007d00 	.word	0x44007d00

0800e23c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800e246:	4b07      	ldr	r3, [pc, #28]	; (800e264 <HAL_RTCEx_BKUPRead+0x28>)
 800e248:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	4413      	add	r3, r2
 800e252:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3714      	adds	r7, #20
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	44007d00 	.word	0x44007d00

0800e268 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	4910      	ldr	r1, [pc, #64]	; (800e2bc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e27c:	4313      	orrs	r3, r2
 800e27e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	689a      	ldr	r2, [r3, #8]
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	431a      	orrs	r2, r3
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	699b      	ldr	r3, [r3, #24]
 800e28e:	490c      	ldr	r1, [pc, #48]	; (800e2c0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e290:	4313      	orrs	r3, r2
 800e292:	624b      	str	r3, [r1, #36]	; 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800e294:	4b0a      	ldr	r3, [pc, #40]	; (800e2c0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e296:	6a1b      	ldr	r3, [r3, #32]
 800e298:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	6919      	ldr	r1, [r3, #16]
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	695b      	ldr	r3, [r3, #20]
 800e2a4:	041b      	lsls	r3, r3, #16
 800e2a6:	430b      	orrs	r3, r1
 800e2a8:	4905      	ldr	r1, [pc, #20]	; (800e2c0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr
 800e2bc:	44007800 	.word	0x44007800
 800e2c0:	44007c00 	.word	0x44007c00

0800e2c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d101      	bne.n	800e2d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e049      	b.n	800e36a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d106      	bne.n	800e2f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7f6 fdee 	bl	8004ecc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2202      	movs	r2, #2
 800e2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	3304      	adds	r3, #4
 800e300:	4619      	mov	r1, r3
 800e302:	4610      	mov	r0, r2
 800e304:	f000 faaa 	bl	800e85c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2201      	movs	r2, #1
 800e334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
	...

0800e374 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d109      	bne.n	800e398 <HAL_TIM_PWM_Start+0x24>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	bf14      	ite	ne
 800e390:	2301      	movne	r3, #1
 800e392:	2300      	moveq	r3, #0
 800e394:	b2db      	uxtb	r3, r3
 800e396:	e03c      	b.n	800e412 <HAL_TIM_PWM_Start+0x9e>
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	2b04      	cmp	r3, #4
 800e39c:	d109      	bne.n	800e3b2 <HAL_TIM_PWM_Start+0x3e>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	bf14      	ite	ne
 800e3aa:	2301      	movne	r3, #1
 800e3ac:	2300      	moveq	r3, #0
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	e02f      	b.n	800e412 <HAL_TIM_PWM_Start+0x9e>
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	2b08      	cmp	r3, #8
 800e3b6:	d109      	bne.n	800e3cc <HAL_TIM_PWM_Start+0x58>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	bf14      	ite	ne
 800e3c4:	2301      	movne	r3, #1
 800e3c6:	2300      	moveq	r3, #0
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	e022      	b.n	800e412 <HAL_TIM_PWM_Start+0x9e>
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	2b0c      	cmp	r3, #12
 800e3d0:	d109      	bne.n	800e3e6 <HAL_TIM_PWM_Start+0x72>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	bf14      	ite	ne
 800e3de:	2301      	movne	r3, #1
 800e3e0:	2300      	moveq	r3, #0
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	e015      	b.n	800e412 <HAL_TIM_PWM_Start+0x9e>
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	2b10      	cmp	r3, #16
 800e3ea:	d109      	bne.n	800e400 <HAL_TIM_PWM_Start+0x8c>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	bf14      	ite	ne
 800e3f8:	2301      	movne	r3, #1
 800e3fa:	2300      	moveq	r3, #0
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	e008      	b.n	800e412 <HAL_TIM_PWM_Start+0x9e>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e406:	b2db      	uxtb	r3, r3
 800e408:	2b01      	cmp	r3, #1
 800e40a:	bf14      	ite	ne
 800e40c:	2301      	movne	r3, #1
 800e40e:	2300      	moveq	r3, #0
 800e410:	b2db      	uxtb	r3, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e0e2      	b.n	800e5e0 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d104      	bne.n	800e42a <HAL_TIM_PWM_Start+0xb6>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2202      	movs	r2, #2
 800e424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e428:	e023      	b.n	800e472 <HAL_TIM_PWM_Start+0xfe>
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b04      	cmp	r3, #4
 800e42e:	d104      	bne.n	800e43a <HAL_TIM_PWM_Start+0xc6>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2202      	movs	r2, #2
 800e434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e438:	e01b      	b.n	800e472 <HAL_TIM_PWM_Start+0xfe>
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	2b08      	cmp	r3, #8
 800e43e:	d104      	bne.n	800e44a <HAL_TIM_PWM_Start+0xd6>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2202      	movs	r2, #2
 800e444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e448:	e013      	b.n	800e472 <HAL_TIM_PWM_Start+0xfe>
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	2b0c      	cmp	r3, #12
 800e44e:	d104      	bne.n	800e45a <HAL_TIM_PWM_Start+0xe6>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2202      	movs	r2, #2
 800e454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e458:	e00b      	b.n	800e472 <HAL_TIM_PWM_Start+0xfe>
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b10      	cmp	r3, #16
 800e45e:	d104      	bne.n	800e46a <HAL_TIM_PWM_Start+0xf6>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2202      	movs	r2, #2
 800e464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e468:	e003      	b.n	800e472 <HAL_TIM_PWM_Start+0xfe>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2202      	movs	r2, #2
 800e46e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2201      	movs	r2, #1
 800e478:	6839      	ldr	r1, [r7, #0]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 fee2 	bl	800f244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4a58      	ldr	r2, [pc, #352]	; (800e5e8 <HAL_TIM_PWM_Start+0x274>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d02c      	beq.n	800e4e4 <HAL_TIM_PWM_Start+0x170>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4a57      	ldr	r2, [pc, #348]	; (800e5ec <HAL_TIM_PWM_Start+0x278>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d027      	beq.n	800e4e4 <HAL_TIM_PWM_Start+0x170>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a55      	ldr	r2, [pc, #340]	; (800e5f0 <HAL_TIM_PWM_Start+0x27c>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d022      	beq.n	800e4e4 <HAL_TIM_PWM_Start+0x170>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4a54      	ldr	r2, [pc, #336]	; (800e5f4 <HAL_TIM_PWM_Start+0x280>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d01d      	beq.n	800e4e4 <HAL_TIM_PWM_Start+0x170>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a52      	ldr	r2, [pc, #328]	; (800e5f8 <HAL_TIM_PWM_Start+0x284>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d018      	beq.n	800e4e4 <HAL_TIM_PWM_Start+0x170>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4a51      	ldr	r2, [pc, #324]	; (800e5fc <HAL_TIM_PWM_Start+0x288>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d013      	beq.n	800e4e4 <HAL_TIM_PWM_Start+0x170>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a4f      	ldr	r2, [pc, #316]	; (800e600 <HAL_TIM_PWM_Start+0x28c>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d00e      	beq.n	800e4e4 <HAL_TIM_PWM_Start+0x170>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a4e      	ldr	r2, [pc, #312]	; (800e604 <HAL_TIM_PWM_Start+0x290>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d009      	beq.n	800e4e4 <HAL_TIM_PWM_Start+0x170>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a4c      	ldr	r2, [pc, #304]	; (800e608 <HAL_TIM_PWM_Start+0x294>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d004      	beq.n	800e4e4 <HAL_TIM_PWM_Start+0x170>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a4b      	ldr	r2, [pc, #300]	; (800e60c <HAL_TIM_PWM_Start+0x298>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d101      	bne.n	800e4e8 <HAL_TIM_PWM_Start+0x174>
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e000      	b.n	800e4ea <HAL_TIM_PWM_Start+0x176>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d007      	beq.n	800e4fe <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e4fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a39      	ldr	r2, [pc, #228]	; (800e5e8 <HAL_TIM_PWM_Start+0x274>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d04a      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a37      	ldr	r2, [pc, #220]	; (800e5ec <HAL_TIM_PWM_Start+0x278>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d045      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e51a:	d040      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e524:	d03b      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a39      	ldr	r2, [pc, #228]	; (800e610 <HAL_TIM_PWM_Start+0x29c>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d036      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a37      	ldr	r2, [pc, #220]	; (800e614 <HAL_TIM_PWM_Start+0x2a0>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d031      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4a36      	ldr	r2, [pc, #216]	; (800e618 <HAL_TIM_PWM_Start+0x2a4>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d02c      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a34      	ldr	r2, [pc, #208]	; (800e61c <HAL_TIM_PWM_Start+0x2a8>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d027      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4a33      	ldr	r2, [pc, #204]	; (800e620 <HAL_TIM_PWM_Start+0x2ac>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d022      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a31      	ldr	r2, [pc, #196]	; (800e624 <HAL_TIM_PWM_Start+0x2b0>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d01d      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	4a22      	ldr	r2, [pc, #136]	; (800e5f0 <HAL_TIM_PWM_Start+0x27c>)
 800e568:	4293      	cmp	r3, r2
 800e56a:	d018      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a20      	ldr	r2, [pc, #128]	; (800e5f4 <HAL_TIM_PWM_Start+0x280>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d013      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a2b      	ldr	r2, [pc, #172]	; (800e628 <HAL_TIM_PWM_Start+0x2b4>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d00e      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4a29      	ldr	r2, [pc, #164]	; (800e62c <HAL_TIM_PWM_Start+0x2b8>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d009      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4a1a      	ldr	r2, [pc, #104]	; (800e5f8 <HAL_TIM_PWM_Start+0x284>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d004      	beq.n	800e59e <HAL_TIM_PWM_Start+0x22a>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a18      	ldr	r2, [pc, #96]	; (800e5fc <HAL_TIM_PWM_Start+0x288>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d115      	bne.n	800e5ca <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	689a      	ldr	r2, [r3, #8]
 800e5a4:	4b22      	ldr	r3, [pc, #136]	; (800e630 <HAL_TIM_PWM_Start+0x2bc>)
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2b06      	cmp	r3, #6
 800e5ae:	d015      	beq.n	800e5dc <HAL_TIM_PWM_Start+0x268>
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5b6:	d011      	beq.n	800e5dc <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f042 0201 	orr.w	r2, r2, #1
 800e5c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5c8:	e008      	b.n	800e5dc <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f042 0201 	orr.w	r2, r2, #1
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	e000      	b.n	800e5de <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	40012c00 	.word	0x40012c00
 800e5ec:	50012c00 	.word	0x50012c00
 800e5f0:	40013400 	.word	0x40013400
 800e5f4:	50013400 	.word	0x50013400
 800e5f8:	40014000 	.word	0x40014000
 800e5fc:	50014000 	.word	0x50014000
 800e600:	40014400 	.word	0x40014400
 800e604:	50014400 	.word	0x50014400
 800e608:	40014800 	.word	0x40014800
 800e60c:	50014800 	.word	0x50014800
 800e610:	40000400 	.word	0x40000400
 800e614:	50000400 	.word	0x50000400
 800e618:	40000800 	.word	0x40000800
 800e61c:	50000800 	.word	0x50000800
 800e620:	40000c00 	.word	0x40000c00
 800e624:	50000c00 	.word	0x50000c00
 800e628:	40001800 	.word	0x40001800
 800e62c:	50001800 	.word	0x50001800
 800e630:	00010007 	.word	0x00010007

0800e634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e640:	2300      	movs	r3, #0
 800e642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d101      	bne.n	800e652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e64e:	2302      	movs	r3, #2
 800e650:	e0ff      	b.n	800e852 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2201      	movs	r2, #1
 800e656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b14      	cmp	r3, #20
 800e65e:	f200 80f0 	bhi.w	800e842 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e662:	a201      	add	r2, pc, #4	; (adr r2, 800e668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e668:	0800e6bd 	.word	0x0800e6bd
 800e66c:	0800e843 	.word	0x0800e843
 800e670:	0800e843 	.word	0x0800e843
 800e674:	0800e843 	.word	0x0800e843
 800e678:	0800e6fd 	.word	0x0800e6fd
 800e67c:	0800e843 	.word	0x0800e843
 800e680:	0800e843 	.word	0x0800e843
 800e684:	0800e843 	.word	0x0800e843
 800e688:	0800e73f 	.word	0x0800e73f
 800e68c:	0800e843 	.word	0x0800e843
 800e690:	0800e843 	.word	0x0800e843
 800e694:	0800e843 	.word	0x0800e843
 800e698:	0800e77f 	.word	0x0800e77f
 800e69c:	0800e843 	.word	0x0800e843
 800e6a0:	0800e843 	.word	0x0800e843
 800e6a4:	0800e843 	.word	0x0800e843
 800e6a8:	0800e7c1 	.word	0x0800e7c1
 800e6ac:	0800e843 	.word	0x0800e843
 800e6b0:	0800e843 	.word	0x0800e843
 800e6b4:	0800e843 	.word	0x0800e843
 800e6b8:	0800e801 	.word	0x0800e801
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	68b9      	ldr	r1, [r7, #8]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 f9e8 	bl	800ea98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	699a      	ldr	r2, [r3, #24]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f042 0208 	orr.w	r2, r2, #8
 800e6d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	699a      	ldr	r2, [r3, #24]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f022 0204 	bic.w	r2, r2, #4
 800e6e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	6999      	ldr	r1, [r3, #24]
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	691a      	ldr	r2, [r3, #16]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	430a      	orrs	r2, r1
 800e6f8:	619a      	str	r2, [r3, #24]
      break;
 800e6fa:	e0a5      	b.n	800e848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	68b9      	ldr	r1, [r7, #8]
 800e702:	4618      	mov	r0, r3
 800e704:	f000 fa8a 	bl	800ec1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	699a      	ldr	r2, [r3, #24]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	699a      	ldr	r2, [r3, #24]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	6999      	ldr	r1, [r3, #24]
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	021a      	lsls	r2, r3, #8
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	430a      	orrs	r2, r1
 800e73a:	619a      	str	r2, [r3, #24]
      break;
 800e73c:	e084      	b.n	800e848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	68b9      	ldr	r1, [r7, #8]
 800e744:	4618      	mov	r0, r3
 800e746:	f000 fb19 	bl	800ed7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	69da      	ldr	r2, [r3, #28]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f042 0208 	orr.w	r2, r2, #8
 800e758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	69da      	ldr	r2, [r3, #28]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f022 0204 	bic.w	r2, r2, #4
 800e768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	69d9      	ldr	r1, [r3, #28]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	691a      	ldr	r2, [r3, #16]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	430a      	orrs	r2, r1
 800e77a:	61da      	str	r2, [r3, #28]
      break;
 800e77c:	e064      	b.n	800e848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	68b9      	ldr	r1, [r7, #8]
 800e784:	4618      	mov	r0, r3
 800e786:	f000 fba7 	bl	800eed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	69da      	ldr	r2, [r3, #28]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	69da      	ldr	r2, [r3, #28]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	69d9      	ldr	r1, [r3, #28]
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	021a      	lsls	r2, r3, #8
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	430a      	orrs	r2, r1
 800e7bc:	61da      	str	r2, [r3, #28]
      break;
 800e7be:	e043      	b.n	800e848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	68b9      	ldr	r1, [r7, #8]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 fc36 	bl	800f038 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f042 0208 	orr.w	r2, r2, #8
 800e7da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f022 0204 	bic.w	r2, r2, #4
 800e7ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	691a      	ldr	r2, [r3, #16]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	430a      	orrs	r2, r1
 800e7fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e7fe:	e023      	b.n	800e848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	68b9      	ldr	r1, [r7, #8]
 800e806:	4618      	mov	r0, r3
 800e808:	f000 fc98 	bl	800f13c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e81a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e82a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	691b      	ldr	r3, [r3, #16]
 800e836:	021a      	lsls	r2, r3, #8
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	430a      	orrs	r2, r1
 800e83e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e840:	e002      	b.n	800e848 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e842:	2301      	movs	r3, #1
 800e844:	75fb      	strb	r3, [r7, #23]
      break;
 800e846:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e850:	7dfb      	ldrb	r3, [r7, #23]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3718      	adds	r7, #24
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop

0800e85c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a74      	ldr	r2, [pc, #464]	; (800ea40 <TIM_Base_SetConfig+0x1e4>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d02b      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4a73      	ldr	r2, [pc, #460]	; (800ea44 <TIM_Base_SetConfig+0x1e8>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d027      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e882:	d023      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e88a:	d01f      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4a6e      	ldr	r2, [pc, #440]	; (800ea48 <TIM_Base_SetConfig+0x1ec>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d01b      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4a6d      	ldr	r2, [pc, #436]	; (800ea4c <TIM_Base_SetConfig+0x1f0>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d017      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a6c      	ldr	r2, [pc, #432]	; (800ea50 <TIM_Base_SetConfig+0x1f4>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d013      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4a6b      	ldr	r2, [pc, #428]	; (800ea54 <TIM_Base_SetConfig+0x1f8>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d00f      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4a6a      	ldr	r2, [pc, #424]	; (800ea58 <TIM_Base_SetConfig+0x1fc>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d00b      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4a69      	ldr	r2, [pc, #420]	; (800ea5c <TIM_Base_SetConfig+0x200>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d007      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4a68      	ldr	r2, [pc, #416]	; (800ea60 <TIM_Base_SetConfig+0x204>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d003      	beq.n	800e8cc <TIM_Base_SetConfig+0x70>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a67      	ldr	r2, [pc, #412]	; (800ea64 <TIM_Base_SetConfig+0x208>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d108      	bne.n	800e8de <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4a57      	ldr	r2, [pc, #348]	; (800ea40 <TIM_Base_SetConfig+0x1e4>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d05b      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4a56      	ldr	r2, [pc, #344]	; (800ea44 <TIM_Base_SetConfig+0x1e8>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d057      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8f4:	d053      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8fc:	d04f      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4a51      	ldr	r2, [pc, #324]	; (800ea48 <TIM_Base_SetConfig+0x1ec>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d04b      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	4a50      	ldr	r2, [pc, #320]	; (800ea4c <TIM_Base_SetConfig+0x1f0>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d047      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4a4f      	ldr	r2, [pc, #316]	; (800ea50 <TIM_Base_SetConfig+0x1f4>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d043      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4a4e      	ldr	r2, [pc, #312]	; (800ea54 <TIM_Base_SetConfig+0x1f8>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d03f      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4a4d      	ldr	r2, [pc, #308]	; (800ea58 <TIM_Base_SetConfig+0x1fc>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d03b      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4a4c      	ldr	r2, [pc, #304]	; (800ea5c <TIM_Base_SetConfig+0x200>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d037      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4a4b      	ldr	r2, [pc, #300]	; (800ea60 <TIM_Base_SetConfig+0x204>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d033      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4a4a      	ldr	r2, [pc, #296]	; (800ea64 <TIM_Base_SetConfig+0x208>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d02f      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4a49      	ldr	r2, [pc, #292]	; (800ea68 <TIM_Base_SetConfig+0x20c>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d02b      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a48      	ldr	r2, [pc, #288]	; (800ea6c <TIM_Base_SetConfig+0x210>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d027      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a47      	ldr	r2, [pc, #284]	; (800ea70 <TIM_Base_SetConfig+0x214>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d023      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4a46      	ldr	r2, [pc, #280]	; (800ea74 <TIM_Base_SetConfig+0x218>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d01f      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a45      	ldr	r2, [pc, #276]	; (800ea78 <TIM_Base_SetConfig+0x21c>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d01b      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a44      	ldr	r2, [pc, #272]	; (800ea7c <TIM_Base_SetConfig+0x220>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d017      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a43      	ldr	r2, [pc, #268]	; (800ea80 <TIM_Base_SetConfig+0x224>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d013      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4a42      	ldr	r2, [pc, #264]	; (800ea84 <TIM_Base_SetConfig+0x228>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d00f      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4a41      	ldr	r2, [pc, #260]	; (800ea88 <TIM_Base_SetConfig+0x22c>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d00b      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4a40      	ldr	r2, [pc, #256]	; (800ea8c <TIM_Base_SetConfig+0x230>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d007      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4a3f      	ldr	r2, [pc, #252]	; (800ea90 <TIM_Base_SetConfig+0x234>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d003      	beq.n	800e99e <TIM_Base_SetConfig+0x142>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a3e      	ldr	r2, [pc, #248]	; (800ea94 <TIM_Base_SetConfig+0x238>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d108      	bne.n	800e9b0 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	695b      	ldr	r3, [r3, #20]
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	689a      	ldr	r2, [r3, #8]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4a1a      	ldr	r2, [pc, #104]	; (800ea40 <TIM_Base_SetConfig+0x1e4>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d023      	beq.n	800ea24 <TIM_Base_SetConfig+0x1c8>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4a19      	ldr	r2, [pc, #100]	; (800ea44 <TIM_Base_SetConfig+0x1e8>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d01f      	beq.n	800ea24 <TIM_Base_SetConfig+0x1c8>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4a1e      	ldr	r2, [pc, #120]	; (800ea60 <TIM_Base_SetConfig+0x204>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d01b      	beq.n	800ea24 <TIM_Base_SetConfig+0x1c8>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a1d      	ldr	r2, [pc, #116]	; (800ea64 <TIM_Base_SetConfig+0x208>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d017      	beq.n	800ea24 <TIM_Base_SetConfig+0x1c8>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a22      	ldr	r2, [pc, #136]	; (800ea80 <TIM_Base_SetConfig+0x224>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d013      	beq.n	800ea24 <TIM_Base_SetConfig+0x1c8>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a21      	ldr	r2, [pc, #132]	; (800ea84 <TIM_Base_SetConfig+0x228>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d00f      	beq.n	800ea24 <TIM_Base_SetConfig+0x1c8>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4a20      	ldr	r2, [pc, #128]	; (800ea88 <TIM_Base_SetConfig+0x22c>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d00b      	beq.n	800ea24 <TIM_Base_SetConfig+0x1c8>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	4a1f      	ldr	r2, [pc, #124]	; (800ea8c <TIM_Base_SetConfig+0x230>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d007      	beq.n	800ea24 <TIM_Base_SetConfig+0x1c8>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	4a1e      	ldr	r2, [pc, #120]	; (800ea90 <TIM_Base_SetConfig+0x234>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d003      	beq.n	800ea24 <TIM_Base_SetConfig+0x1c8>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4a1d      	ldr	r2, [pc, #116]	; (800ea94 <TIM_Base_SetConfig+0x238>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d103      	bne.n	800ea2c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	691a      	ldr	r2, [r3, #16]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	615a      	str	r2, [r3, #20]
}
 800ea32:	bf00      	nop
 800ea34:	3714      	adds	r7, #20
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr
 800ea3e:	bf00      	nop
 800ea40:	40012c00 	.word	0x40012c00
 800ea44:	50012c00 	.word	0x50012c00
 800ea48:	40000400 	.word	0x40000400
 800ea4c:	50000400 	.word	0x50000400
 800ea50:	40000800 	.word	0x40000800
 800ea54:	50000800 	.word	0x50000800
 800ea58:	40000c00 	.word	0x40000c00
 800ea5c:	50000c00 	.word	0x50000c00
 800ea60:	40013400 	.word	0x40013400
 800ea64:	50013400 	.word	0x50013400
 800ea68:	40001800 	.word	0x40001800
 800ea6c:	50001800 	.word	0x50001800
 800ea70:	40001c00 	.word	0x40001c00
 800ea74:	50001c00 	.word	0x50001c00
 800ea78:	40002000 	.word	0x40002000
 800ea7c:	50002000 	.word	0x50002000
 800ea80:	40014000 	.word	0x40014000
 800ea84:	50014000 	.word	0x50014000
 800ea88:	40014400 	.word	0x40014400
 800ea8c:	50014400 	.word	0x50014400
 800ea90:	40014800 	.word	0x40014800
 800ea94:	50014800 	.word	0x50014800

0800ea98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b087      	sub	sp, #28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a1b      	ldr	r3, [r3, #32]
 800eaa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a1b      	ldr	r3, [r3, #32]
 800eaac:	f023 0201 	bic.w	r2, r3, #1
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	699b      	ldr	r3, [r3, #24]
 800eabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eaca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f023 0303 	bic.w	r3, r3, #3
 800ead2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	4313      	orrs	r3, r2
 800eadc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	f023 0302 	bic.w	r3, r3, #2
 800eae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	697a      	ldr	r2, [r7, #20]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	4a40      	ldr	r2, [pc, #256]	; (800ebf4 <TIM_OC1_SetConfig+0x15c>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d023      	beq.n	800eb40 <TIM_OC1_SetConfig+0xa8>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	4a3f      	ldr	r2, [pc, #252]	; (800ebf8 <TIM_OC1_SetConfig+0x160>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d01f      	beq.n	800eb40 <TIM_OC1_SetConfig+0xa8>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4a3e      	ldr	r2, [pc, #248]	; (800ebfc <TIM_OC1_SetConfig+0x164>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d01b      	beq.n	800eb40 <TIM_OC1_SetConfig+0xa8>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4a3d      	ldr	r2, [pc, #244]	; (800ec00 <TIM_OC1_SetConfig+0x168>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d017      	beq.n	800eb40 <TIM_OC1_SetConfig+0xa8>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4a3c      	ldr	r2, [pc, #240]	; (800ec04 <TIM_OC1_SetConfig+0x16c>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d013      	beq.n	800eb40 <TIM_OC1_SetConfig+0xa8>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a3b      	ldr	r2, [pc, #236]	; (800ec08 <TIM_OC1_SetConfig+0x170>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d00f      	beq.n	800eb40 <TIM_OC1_SetConfig+0xa8>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	4a3a      	ldr	r2, [pc, #232]	; (800ec0c <TIM_OC1_SetConfig+0x174>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d00b      	beq.n	800eb40 <TIM_OC1_SetConfig+0xa8>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4a39      	ldr	r2, [pc, #228]	; (800ec10 <TIM_OC1_SetConfig+0x178>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d007      	beq.n	800eb40 <TIM_OC1_SetConfig+0xa8>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4a38      	ldr	r2, [pc, #224]	; (800ec14 <TIM_OC1_SetConfig+0x17c>)
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d003      	beq.n	800eb40 <TIM_OC1_SetConfig+0xa8>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a37      	ldr	r2, [pc, #220]	; (800ec18 <TIM_OC1_SetConfig+0x180>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d10c      	bne.n	800eb5a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	f023 0308 	bic.w	r3, r3, #8
 800eb46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	f023 0304 	bic.w	r3, r3, #4
 800eb58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	4a25      	ldr	r2, [pc, #148]	; (800ebf4 <TIM_OC1_SetConfig+0x15c>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d023      	beq.n	800ebaa <TIM_OC1_SetConfig+0x112>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4a24      	ldr	r2, [pc, #144]	; (800ebf8 <TIM_OC1_SetConfig+0x160>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d01f      	beq.n	800ebaa <TIM_OC1_SetConfig+0x112>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4a23      	ldr	r2, [pc, #140]	; (800ebfc <TIM_OC1_SetConfig+0x164>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d01b      	beq.n	800ebaa <TIM_OC1_SetConfig+0x112>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4a22      	ldr	r2, [pc, #136]	; (800ec00 <TIM_OC1_SetConfig+0x168>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d017      	beq.n	800ebaa <TIM_OC1_SetConfig+0x112>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4a21      	ldr	r2, [pc, #132]	; (800ec04 <TIM_OC1_SetConfig+0x16c>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d013      	beq.n	800ebaa <TIM_OC1_SetConfig+0x112>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4a20      	ldr	r2, [pc, #128]	; (800ec08 <TIM_OC1_SetConfig+0x170>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d00f      	beq.n	800ebaa <TIM_OC1_SetConfig+0x112>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a1f      	ldr	r2, [pc, #124]	; (800ec0c <TIM_OC1_SetConfig+0x174>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d00b      	beq.n	800ebaa <TIM_OC1_SetConfig+0x112>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4a1e      	ldr	r2, [pc, #120]	; (800ec10 <TIM_OC1_SetConfig+0x178>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d007      	beq.n	800ebaa <TIM_OC1_SetConfig+0x112>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a1d      	ldr	r2, [pc, #116]	; (800ec14 <TIM_OC1_SetConfig+0x17c>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d003      	beq.n	800ebaa <TIM_OC1_SetConfig+0x112>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a1c      	ldr	r2, [pc, #112]	; (800ec18 <TIM_OC1_SetConfig+0x180>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d111      	bne.n	800ebce <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ebb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	695b      	ldr	r3, [r3, #20]
 800ebbe:	693a      	ldr	r2, [r7, #16]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	693a      	ldr	r2, [r7, #16]
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	685a      	ldr	r2, [r3, #4]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	697a      	ldr	r2, [r7, #20]
 800ebe6:	621a      	str	r2, [r3, #32]
}
 800ebe8:	bf00      	nop
 800ebea:	371c      	adds	r7, #28
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	40012c00 	.word	0x40012c00
 800ebf8:	50012c00 	.word	0x50012c00
 800ebfc:	40013400 	.word	0x40013400
 800ec00:	50013400 	.word	0x50013400
 800ec04:	40014000 	.word	0x40014000
 800ec08:	50014000 	.word	0x50014000
 800ec0c:	40014400 	.word	0x40014400
 800ec10:	50014400 	.word	0x50014400
 800ec14:	40014800 	.word	0x40014800
 800ec18:	50014800 	.word	0x50014800

0800ec1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b087      	sub	sp, #28
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6a1b      	ldr	r3, [r3, #32]
 800ec30:	f023 0210 	bic.w	r2, r3, #16
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	021b      	lsls	r3, r3, #8
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	f023 0320 	bic.w	r3, r3, #32
 800ec6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	011b      	lsls	r3, r3, #4
 800ec72:	697a      	ldr	r2, [r7, #20]
 800ec74:	4313      	orrs	r3, r2
 800ec76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a36      	ldr	r2, [pc, #216]	; (800ed54 <TIM_OC2_SetConfig+0x138>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d00b      	beq.n	800ec98 <TIM_OC2_SetConfig+0x7c>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a35      	ldr	r2, [pc, #212]	; (800ed58 <TIM_OC2_SetConfig+0x13c>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d007      	beq.n	800ec98 <TIM_OC2_SetConfig+0x7c>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4a34      	ldr	r2, [pc, #208]	; (800ed5c <TIM_OC2_SetConfig+0x140>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d003      	beq.n	800ec98 <TIM_OC2_SetConfig+0x7c>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4a33      	ldr	r2, [pc, #204]	; (800ed60 <TIM_OC2_SetConfig+0x144>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d10d      	bne.n	800ecb4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	011b      	lsls	r3, r3, #4
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	4a27      	ldr	r2, [pc, #156]	; (800ed54 <TIM_OC2_SetConfig+0x138>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d023      	beq.n	800ed04 <TIM_OC2_SetConfig+0xe8>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a26      	ldr	r2, [pc, #152]	; (800ed58 <TIM_OC2_SetConfig+0x13c>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d01f      	beq.n	800ed04 <TIM_OC2_SetConfig+0xe8>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a25      	ldr	r2, [pc, #148]	; (800ed5c <TIM_OC2_SetConfig+0x140>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d01b      	beq.n	800ed04 <TIM_OC2_SetConfig+0xe8>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a24      	ldr	r2, [pc, #144]	; (800ed60 <TIM_OC2_SetConfig+0x144>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d017      	beq.n	800ed04 <TIM_OC2_SetConfig+0xe8>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a23      	ldr	r2, [pc, #140]	; (800ed64 <TIM_OC2_SetConfig+0x148>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d013      	beq.n	800ed04 <TIM_OC2_SetConfig+0xe8>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a22      	ldr	r2, [pc, #136]	; (800ed68 <TIM_OC2_SetConfig+0x14c>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d00f      	beq.n	800ed04 <TIM_OC2_SetConfig+0xe8>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	4a21      	ldr	r2, [pc, #132]	; (800ed6c <TIM_OC2_SetConfig+0x150>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d00b      	beq.n	800ed04 <TIM_OC2_SetConfig+0xe8>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4a20      	ldr	r2, [pc, #128]	; (800ed70 <TIM_OC2_SetConfig+0x154>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d007      	beq.n	800ed04 <TIM_OC2_SetConfig+0xe8>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4a1f      	ldr	r2, [pc, #124]	; (800ed74 <TIM_OC2_SetConfig+0x158>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d003      	beq.n	800ed04 <TIM_OC2_SetConfig+0xe8>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a1e      	ldr	r2, [pc, #120]	; (800ed78 <TIM_OC2_SetConfig+0x15c>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d113      	bne.n	800ed2c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ed0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ed12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	695b      	ldr	r3, [r3, #20]
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	693a      	ldr	r2, [r7, #16]
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	699b      	ldr	r3, [r3, #24]
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	693a      	ldr	r2, [r7, #16]
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	693a      	ldr	r2, [r7, #16]
 800ed30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	685a      	ldr	r2, [r3, #4]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	697a      	ldr	r2, [r7, #20]
 800ed44:	621a      	str	r2, [r3, #32]
}
 800ed46:	bf00      	nop
 800ed48:	371c      	adds	r7, #28
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	40012c00 	.word	0x40012c00
 800ed58:	50012c00 	.word	0x50012c00
 800ed5c:	40013400 	.word	0x40013400
 800ed60:	50013400 	.word	0x50013400
 800ed64:	40014000 	.word	0x40014000
 800ed68:	50014000 	.word	0x50014000
 800ed6c:	40014400 	.word	0x40014400
 800ed70:	50014400 	.word	0x50014400
 800ed74:	40014800 	.word	0x40014800
 800ed78:	50014800 	.word	0x50014800

0800ed7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b087      	sub	sp, #28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6a1b      	ldr	r3, [r3, #32]
 800ed8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a1b      	ldr	r3, [r3, #32]
 800ed90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	69db      	ldr	r3, [r3, #28]
 800eda2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800edaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f023 0303 	bic.w	r3, r3, #3
 800edb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	4313      	orrs	r3, r2
 800edc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800edc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	689b      	ldr	r3, [r3, #8]
 800edce:	021b      	lsls	r3, r3, #8
 800edd0:	697a      	ldr	r2, [r7, #20]
 800edd2:	4313      	orrs	r3, r2
 800edd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4a35      	ldr	r2, [pc, #212]	; (800eeb0 <TIM_OC3_SetConfig+0x134>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d00b      	beq.n	800edf6 <TIM_OC3_SetConfig+0x7a>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4a34      	ldr	r2, [pc, #208]	; (800eeb4 <TIM_OC3_SetConfig+0x138>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d007      	beq.n	800edf6 <TIM_OC3_SetConfig+0x7a>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4a33      	ldr	r2, [pc, #204]	; (800eeb8 <TIM_OC3_SetConfig+0x13c>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d003      	beq.n	800edf6 <TIM_OC3_SetConfig+0x7a>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4a32      	ldr	r2, [pc, #200]	; (800eebc <TIM_OC3_SetConfig+0x140>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d10d      	bne.n	800ee12 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800edfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	021b      	lsls	r3, r3, #8
 800ee04:	697a      	ldr	r2, [r7, #20]
 800ee06:	4313      	orrs	r3, r2
 800ee08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ee10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4a26      	ldr	r2, [pc, #152]	; (800eeb0 <TIM_OC3_SetConfig+0x134>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d023      	beq.n	800ee62 <TIM_OC3_SetConfig+0xe6>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4a25      	ldr	r2, [pc, #148]	; (800eeb4 <TIM_OC3_SetConfig+0x138>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d01f      	beq.n	800ee62 <TIM_OC3_SetConfig+0xe6>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4a24      	ldr	r2, [pc, #144]	; (800eeb8 <TIM_OC3_SetConfig+0x13c>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d01b      	beq.n	800ee62 <TIM_OC3_SetConfig+0xe6>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4a23      	ldr	r2, [pc, #140]	; (800eebc <TIM_OC3_SetConfig+0x140>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d017      	beq.n	800ee62 <TIM_OC3_SetConfig+0xe6>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4a22      	ldr	r2, [pc, #136]	; (800eec0 <TIM_OC3_SetConfig+0x144>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d013      	beq.n	800ee62 <TIM_OC3_SetConfig+0xe6>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4a21      	ldr	r2, [pc, #132]	; (800eec4 <TIM_OC3_SetConfig+0x148>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d00f      	beq.n	800ee62 <TIM_OC3_SetConfig+0xe6>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4a20      	ldr	r2, [pc, #128]	; (800eec8 <TIM_OC3_SetConfig+0x14c>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d00b      	beq.n	800ee62 <TIM_OC3_SetConfig+0xe6>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a1f      	ldr	r2, [pc, #124]	; (800eecc <TIM_OC3_SetConfig+0x150>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d007      	beq.n	800ee62 <TIM_OC3_SetConfig+0xe6>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4a1e      	ldr	r2, [pc, #120]	; (800eed0 <TIM_OC3_SetConfig+0x154>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d003      	beq.n	800ee62 <TIM_OC3_SetConfig+0xe6>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a1d      	ldr	r2, [pc, #116]	; (800eed4 <TIM_OC3_SetConfig+0x158>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d113      	bne.n	800ee8a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	695b      	ldr	r3, [r3, #20]
 800ee76:	011b      	lsls	r3, r3, #4
 800ee78:	693a      	ldr	r2, [r7, #16]
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	699b      	ldr	r3, [r3, #24]
 800ee82:	011b      	lsls	r3, r3, #4
 800ee84:	693a      	ldr	r2, [r7, #16]
 800ee86:	4313      	orrs	r3, r2
 800ee88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	693a      	ldr	r2, [r7, #16]
 800ee8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	685a      	ldr	r2, [r3, #4]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	697a      	ldr	r2, [r7, #20]
 800eea2:	621a      	str	r2, [r3, #32]
}
 800eea4:	bf00      	nop
 800eea6:	371c      	adds	r7, #28
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr
 800eeb0:	40012c00 	.word	0x40012c00
 800eeb4:	50012c00 	.word	0x50012c00
 800eeb8:	40013400 	.word	0x40013400
 800eebc:	50013400 	.word	0x50013400
 800eec0:	40014000 	.word	0x40014000
 800eec4:	50014000 	.word	0x50014000
 800eec8:	40014400 	.word	0x40014400
 800eecc:	50014400 	.word	0x50014400
 800eed0:	40014800 	.word	0x40014800
 800eed4:	50014800 	.word	0x50014800

0800eed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b087      	sub	sp, #28
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6a1b      	ldr	r3, [r3, #32]
 800eee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6a1b      	ldr	r3, [r3, #32]
 800eeec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	685b      	ldr	r3, [r3, #4]
 800eef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	69db      	ldr	r3, [r3, #28]
 800eefe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ef06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	021b      	lsls	r3, r3, #8
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ef26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	031b      	lsls	r3, r3, #12
 800ef2e:	697a      	ldr	r2, [r7, #20]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	4a36      	ldr	r2, [pc, #216]	; (800f010 <TIM_OC4_SetConfig+0x138>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d00b      	beq.n	800ef54 <TIM_OC4_SetConfig+0x7c>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4a35      	ldr	r2, [pc, #212]	; (800f014 <TIM_OC4_SetConfig+0x13c>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d007      	beq.n	800ef54 <TIM_OC4_SetConfig+0x7c>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	4a34      	ldr	r2, [pc, #208]	; (800f018 <TIM_OC4_SetConfig+0x140>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d003      	beq.n	800ef54 <TIM_OC4_SetConfig+0x7c>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	4a33      	ldr	r2, [pc, #204]	; (800f01c <TIM_OC4_SetConfig+0x144>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d10d      	bne.n	800ef70 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ef5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	031b      	lsls	r3, r3, #12
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	4313      	orrs	r3, r2
 800ef66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4a27      	ldr	r2, [pc, #156]	; (800f010 <TIM_OC4_SetConfig+0x138>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d023      	beq.n	800efc0 <TIM_OC4_SetConfig+0xe8>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4a26      	ldr	r2, [pc, #152]	; (800f014 <TIM_OC4_SetConfig+0x13c>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d01f      	beq.n	800efc0 <TIM_OC4_SetConfig+0xe8>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4a25      	ldr	r2, [pc, #148]	; (800f018 <TIM_OC4_SetConfig+0x140>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d01b      	beq.n	800efc0 <TIM_OC4_SetConfig+0xe8>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4a24      	ldr	r2, [pc, #144]	; (800f01c <TIM_OC4_SetConfig+0x144>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d017      	beq.n	800efc0 <TIM_OC4_SetConfig+0xe8>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4a23      	ldr	r2, [pc, #140]	; (800f020 <TIM_OC4_SetConfig+0x148>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d013      	beq.n	800efc0 <TIM_OC4_SetConfig+0xe8>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a22      	ldr	r2, [pc, #136]	; (800f024 <TIM_OC4_SetConfig+0x14c>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d00f      	beq.n	800efc0 <TIM_OC4_SetConfig+0xe8>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a21      	ldr	r2, [pc, #132]	; (800f028 <TIM_OC4_SetConfig+0x150>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d00b      	beq.n	800efc0 <TIM_OC4_SetConfig+0xe8>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a20      	ldr	r2, [pc, #128]	; (800f02c <TIM_OC4_SetConfig+0x154>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d007      	beq.n	800efc0 <TIM_OC4_SetConfig+0xe8>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4a1f      	ldr	r2, [pc, #124]	; (800f030 <TIM_OC4_SetConfig+0x158>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d003      	beq.n	800efc0 <TIM_OC4_SetConfig+0xe8>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a1e      	ldr	r2, [pc, #120]	; (800f034 <TIM_OC4_SetConfig+0x15c>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d113      	bne.n	800efe8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800efc6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800efce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	695b      	ldr	r3, [r3, #20]
 800efd4:	019b      	lsls	r3, r3, #6
 800efd6:	693a      	ldr	r2, [r7, #16]
 800efd8:	4313      	orrs	r3, r2
 800efda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	699b      	ldr	r3, [r3, #24]
 800efe0:	019b      	lsls	r3, r3, #6
 800efe2:	693a      	ldr	r2, [r7, #16]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	693a      	ldr	r2, [r7, #16]
 800efec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	685a      	ldr	r2, [r3, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	697a      	ldr	r2, [r7, #20]
 800f000:	621a      	str	r2, [r3, #32]
}
 800f002:	bf00      	nop
 800f004:	371c      	adds	r7, #28
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	40012c00 	.word	0x40012c00
 800f014:	50012c00 	.word	0x50012c00
 800f018:	40013400 	.word	0x40013400
 800f01c:	50013400 	.word	0x50013400
 800f020:	40014000 	.word	0x40014000
 800f024:	50014000 	.word	0x50014000
 800f028:	40014400 	.word	0x40014400
 800f02c:	50014400 	.word	0x50014400
 800f030:	40014800 	.word	0x40014800
 800f034:	50014800 	.word	0x50014800

0800f038 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f038:	b480      	push	{r7}
 800f03a:	b087      	sub	sp, #28
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a1b      	ldr	r3, [r3, #32]
 800f046:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a1b      	ldr	r3, [r3, #32]
 800f04c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f06a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	4313      	orrs	r3, r2
 800f074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f07c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	041b      	lsls	r3, r3, #16
 800f084:	693a      	ldr	r2, [r7, #16]
 800f086:	4313      	orrs	r3, r2
 800f088:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a21      	ldr	r2, [pc, #132]	; (800f114 <TIM_OC5_SetConfig+0xdc>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d023      	beq.n	800f0da <TIM_OC5_SetConfig+0xa2>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4a20      	ldr	r2, [pc, #128]	; (800f118 <TIM_OC5_SetConfig+0xe0>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d01f      	beq.n	800f0da <TIM_OC5_SetConfig+0xa2>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4a1f      	ldr	r2, [pc, #124]	; (800f11c <TIM_OC5_SetConfig+0xe4>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d01b      	beq.n	800f0da <TIM_OC5_SetConfig+0xa2>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4a1e      	ldr	r2, [pc, #120]	; (800f120 <TIM_OC5_SetConfig+0xe8>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d017      	beq.n	800f0da <TIM_OC5_SetConfig+0xa2>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4a1d      	ldr	r2, [pc, #116]	; (800f124 <TIM_OC5_SetConfig+0xec>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d013      	beq.n	800f0da <TIM_OC5_SetConfig+0xa2>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4a1c      	ldr	r2, [pc, #112]	; (800f128 <TIM_OC5_SetConfig+0xf0>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d00f      	beq.n	800f0da <TIM_OC5_SetConfig+0xa2>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4a1b      	ldr	r2, [pc, #108]	; (800f12c <TIM_OC5_SetConfig+0xf4>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d00b      	beq.n	800f0da <TIM_OC5_SetConfig+0xa2>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4a1a      	ldr	r2, [pc, #104]	; (800f130 <TIM_OC5_SetConfig+0xf8>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d007      	beq.n	800f0da <TIM_OC5_SetConfig+0xa2>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4a19      	ldr	r2, [pc, #100]	; (800f134 <TIM_OC5_SetConfig+0xfc>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d003      	beq.n	800f0da <TIM_OC5_SetConfig+0xa2>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4a18      	ldr	r2, [pc, #96]	; (800f138 <TIM_OC5_SetConfig+0x100>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d109      	bne.n	800f0ee <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f0e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	695b      	ldr	r3, [r3, #20]
 800f0e6:	021b      	lsls	r3, r3, #8
 800f0e8:	697a      	ldr	r2, [r7, #20]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	697a      	ldr	r2, [r7, #20]
 800f0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	68fa      	ldr	r2, [r7, #12]
 800f0f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	693a      	ldr	r2, [r7, #16]
 800f106:	621a      	str	r2, [r3, #32]
}
 800f108:	bf00      	nop
 800f10a:	371c      	adds	r7, #28
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr
 800f114:	40012c00 	.word	0x40012c00
 800f118:	50012c00 	.word	0x50012c00
 800f11c:	40013400 	.word	0x40013400
 800f120:	50013400 	.word	0x50013400
 800f124:	40014000 	.word	0x40014000
 800f128:	50014000 	.word	0x50014000
 800f12c:	40014400 	.word	0x40014400
 800f130:	50014400 	.word	0x50014400
 800f134:	40014800 	.word	0x40014800
 800f138:	50014800 	.word	0x50014800

0800f13c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b087      	sub	sp, #28
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6a1b      	ldr	r3, [r3, #32]
 800f150:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	021b      	lsls	r3, r3, #8
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	4313      	orrs	r3, r2
 800f17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	051b      	lsls	r3, r3, #20
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a22      	ldr	r2, [pc, #136]	; (800f21c <TIM_OC6_SetConfig+0xe0>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d023      	beq.n	800f1e0 <TIM_OC6_SetConfig+0xa4>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a21      	ldr	r2, [pc, #132]	; (800f220 <TIM_OC6_SetConfig+0xe4>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d01f      	beq.n	800f1e0 <TIM_OC6_SetConfig+0xa4>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a20      	ldr	r2, [pc, #128]	; (800f224 <TIM_OC6_SetConfig+0xe8>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d01b      	beq.n	800f1e0 <TIM_OC6_SetConfig+0xa4>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a1f      	ldr	r2, [pc, #124]	; (800f228 <TIM_OC6_SetConfig+0xec>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d017      	beq.n	800f1e0 <TIM_OC6_SetConfig+0xa4>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a1e      	ldr	r2, [pc, #120]	; (800f22c <TIM_OC6_SetConfig+0xf0>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d013      	beq.n	800f1e0 <TIM_OC6_SetConfig+0xa4>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a1d      	ldr	r2, [pc, #116]	; (800f230 <TIM_OC6_SetConfig+0xf4>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d00f      	beq.n	800f1e0 <TIM_OC6_SetConfig+0xa4>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a1c      	ldr	r2, [pc, #112]	; (800f234 <TIM_OC6_SetConfig+0xf8>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d00b      	beq.n	800f1e0 <TIM_OC6_SetConfig+0xa4>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a1b      	ldr	r2, [pc, #108]	; (800f238 <TIM_OC6_SetConfig+0xfc>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d007      	beq.n	800f1e0 <TIM_OC6_SetConfig+0xa4>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a1a      	ldr	r2, [pc, #104]	; (800f23c <TIM_OC6_SetConfig+0x100>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d003      	beq.n	800f1e0 <TIM_OC6_SetConfig+0xa4>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a19      	ldr	r2, [pc, #100]	; (800f240 <TIM_OC6_SetConfig+0x104>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d109      	bne.n	800f1f4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f1e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	695b      	ldr	r3, [r3, #20]
 800f1ec:	029b      	lsls	r3, r3, #10
 800f1ee:	697a      	ldr	r2, [r7, #20]
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	697a      	ldr	r2, [r7, #20]
 800f1f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	621a      	str	r2, [r3, #32]
}
 800f20e:	bf00      	nop
 800f210:	371c      	adds	r7, #28
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	40012c00 	.word	0x40012c00
 800f220:	50012c00 	.word	0x50012c00
 800f224:	40013400 	.word	0x40013400
 800f228:	50013400 	.word	0x50013400
 800f22c:	40014000 	.word	0x40014000
 800f230:	50014000 	.word	0x50014000
 800f234:	40014400 	.word	0x40014400
 800f238:	50014400 	.word	0x50014400
 800f23c:	40014800 	.word	0x40014800
 800f240:	50014800 	.word	0x50014800

0800f244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f244:	b480      	push	{r7}
 800f246:	b087      	sub	sp, #28
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	f003 031f 	and.w	r3, r3, #31
 800f256:	2201      	movs	r2, #1
 800f258:	fa02 f303 	lsl.w	r3, r2, r3
 800f25c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6a1a      	ldr	r2, [r3, #32]
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	43db      	mvns	r3, r3
 800f266:	401a      	ands	r2, r3
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6a1a      	ldr	r2, [r3, #32]
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	f003 031f 	and.w	r3, r3, #31
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	fa01 f303 	lsl.w	r3, r1, r3
 800f27c:	431a      	orrs	r2, r3
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	621a      	str	r2, [r3, #32]
}
 800f282:	bf00      	nop
 800f284:	371c      	adds	r7, #28
 800f286:	46bd      	mov	sp, r7
 800f288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28c:	4770      	bx	lr
	...

0800f290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d101      	bne.n	800f2a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f2a4:	2302      	movs	r3, #2
 800f2a6:	e0a1      	b.n	800f3ec <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	689b      	ldr	r3, [r3, #8]
 800f2c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a4a      	ldr	r2, [pc, #296]	; (800f3f8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d00e      	beq.n	800f2f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	4a49      	ldr	r2, [pc, #292]	; (800f3fc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d009      	beq.n	800f2f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a47      	ldr	r2, [pc, #284]	; (800f400 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d004      	beq.n	800f2f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	4a46      	ldr	r2, [pc, #280]	; (800f404 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d108      	bne.n	800f302 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f2f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	4313      	orrs	r3, r2
 800f300:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f30c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	4313      	orrs	r3, r2
 800f316:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a34      	ldr	r2, [pc, #208]	; (800f3f8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d04a      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4a33      	ldr	r2, [pc, #204]	; (800f3fc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d045      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f33c:	d040      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f346:	d03b      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a2e      	ldr	r2, [pc, #184]	; (800f408 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d036      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a2d      	ldr	r2, [pc, #180]	; (800f40c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d031      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a2b      	ldr	r2, [pc, #172]	; (800f410 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d02c      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a2a      	ldr	r2, [pc, #168]	; (800f414 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d027      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a28      	ldr	r2, [pc, #160]	; (800f418 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d022      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a27      	ldr	r2, [pc, #156]	; (800f41c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d01d      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a1d      	ldr	r2, [pc, #116]	; (800f400 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d018      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a1c      	ldr	r2, [pc, #112]	; (800f404 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d013      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a20      	ldr	r2, [pc, #128]	; (800f420 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d00e      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a1f      	ldr	r2, [pc, #124]	; (800f424 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d009      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a1d      	ldr	r2, [pc, #116]	; (800f428 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d004      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a1c      	ldr	r2, [pc, #112]	; (800f42c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d10c      	bne.n	800f3da <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	68ba      	ldr	r2, [r7, #8]
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	68ba      	ldr	r2, [r7, #8]
 800f3d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3ea:	2300      	movs	r3, #0
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3714      	adds	r7, #20
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr
 800f3f8:	40012c00 	.word	0x40012c00
 800f3fc:	50012c00 	.word	0x50012c00
 800f400:	40013400 	.word	0x40013400
 800f404:	50013400 	.word	0x50013400
 800f408:	40000400 	.word	0x40000400
 800f40c:	50000400 	.word	0x50000400
 800f410:	40000800 	.word	0x40000800
 800f414:	50000800 	.word	0x50000800
 800f418:	40000c00 	.word	0x40000c00
 800f41c:	50000c00 	.word	0x50000c00
 800f420:	40001800 	.word	0x40001800
 800f424:	50001800 	.word	0x50001800
 800f428:	40014000 	.word	0x40014000
 800f42c:	50014000 	.word	0x50014000

0800f430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d101      	bne.n	800f442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	e042      	b.n	800f4c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d106      	bne.n	800f45a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7f5 fdb7 	bl	8004fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2224      	movs	r2, #36	; 0x24
 800f45e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f022 0201 	bic.w	r2, r2, #1
 800f470:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f476:	2b00      	cmp	r3, #0
 800f478:	d002      	beq.n	800f480 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fe54 	bl	8010128 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fc63 	bl	800fd4c <UART_SetConfig>
 800f486:	4603      	mov	r3, r0
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d101      	bne.n	800f490 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f48c:	2301      	movs	r3, #1
 800f48e:	e01b      	b.n	800f4c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	685a      	ldr	r2, [r3, #4]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f49e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	689a      	ldr	r2, [r3, #8]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f4ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	681a      	ldr	r2, [r3, #0]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f042 0201 	orr.w	r2, r2, #1
 800f4be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 fed3 	bl	801026c <UART_CheckIdleState>
 800f4c6:	4603      	mov	r3, r0
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08a      	sub	sp, #40	; 0x28
 800f4d4:	af02      	add	r7, sp, #8
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	603b      	str	r3, [r7, #0]
 800f4dc:	4613      	mov	r3, r2
 800f4de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4e6:	2b20      	cmp	r3, #32
 800f4e8:	f040 808b 	bne.w	800f602 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <HAL_UART_Transmit+0x28>
 800f4f2:	88fb      	ldrh	r3, [r7, #6]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d101      	bne.n	800f4fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e083      	b.n	800f604 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f506:	2b80      	cmp	r3, #128	; 0x80
 800f508:	d107      	bne.n	800f51a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	689a      	ldr	r2, [r3, #8]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f518:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2200      	movs	r2, #0
 800f51e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2221      	movs	r2, #33	; 0x21
 800f526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f52a:	f7f6 fe45 	bl	80061b8 <HAL_GetTick>
 800f52e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	88fa      	ldrh	r2, [r7, #6]
 800f534:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	88fa      	ldrh	r2, [r7, #6]
 800f53c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f548:	d108      	bne.n	800f55c <HAL_UART_Transmit+0x8c>
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d104      	bne.n	800f55c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800f552:	2300      	movs	r3, #0
 800f554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	61bb      	str	r3, [r7, #24]
 800f55a:	e003      	b.n	800f564 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f560:	2300      	movs	r3, #0
 800f562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f564:	e030      	b.n	800f5c8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	9300      	str	r3, [sp, #0]
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	2200      	movs	r2, #0
 800f56e:	2180      	movs	r1, #128	; 0x80
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	f000 ff25 	bl	80103c0 <UART_WaitOnFlagUntilTimeout>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d005      	beq.n	800f588 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2220      	movs	r2, #32
 800f580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800f584:	2303      	movs	r3, #3
 800f586:	e03d      	b.n	800f604 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d10b      	bne.n	800f5a6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	461a      	mov	r2, r3
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f59c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	3302      	adds	r3, #2
 800f5a2:	61bb      	str	r3, [r7, #24]
 800f5a4:	e007      	b.n	800f5b6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	781a      	ldrb	r2, [r3, #0]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d1c8      	bne.n	800f566 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	2140      	movs	r1, #64	; 0x40
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f000 feee 	bl	80103c0 <UART_WaitOnFlagUntilTimeout>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d005      	beq.n	800f5f6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2220      	movs	r2, #32
 800f5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800f5f2:	2303      	movs	r3, #3
 800f5f4:	e006      	b.n	800f604 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2220      	movs	r2, #32
 800f5fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f5fe:	2300      	movs	r3, #0
 800f600:	e000      	b.n	800f604 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800f602:	2302      	movs	r3, #2
  }
}
 800f604:	4618      	mov	r0, r3
 800f606:	3720      	adds	r7, #32
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b091      	sub	sp, #68	; 0x44
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	4613      	mov	r3, r2
 800f618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f620:	2b20      	cmp	r3, #32
 800f622:	f040 8088 	bne.w	800f736 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d002      	beq.n	800f632 <HAL_UART_Transmit_IT+0x26>
 800f62c:	88fb      	ldrh	r3, [r7, #6]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d101      	bne.n	800f636 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800f632:	2301      	movs	r3, #1
 800f634:	e080      	b.n	800f738 <HAL_UART_Transmit_IT+0x12c>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f640:	2b80      	cmp	r3, #128	; 0x80
 800f642:	d107      	bne.n	800f654 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	689a      	ldr	r2, [r3, #8]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f652:	609a      	str	r2, [r3, #8]
    }

    huart->pTxBuffPtr  = pData;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	88fa      	ldrh	r2, [r7, #6]
 800f65e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	88fa      	ldrh	r2, [r7, #6]
 800f666:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2200      	movs	r2, #0
 800f66e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2200      	movs	r2, #0
 800f674:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2221      	movs	r2, #33	; 0x21
 800f67c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f688:	d12a      	bne.n	800f6e0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	689b      	ldr	r3, [r3, #8]
 800f68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f692:	d107      	bne.n	800f6a4 <HAL_UART_Transmit_IT+0x98>
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	691b      	ldr	r3, [r3, #16]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d103      	bne.n	800f6a4 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	4a29      	ldr	r2, [pc, #164]	; (800f744 <HAL_UART_Transmit_IT+0x138>)
 800f6a0:	679a      	str	r2, [r3, #120]	; 0x78
 800f6a2:	e002      	b.n	800f6aa <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	4a28      	ldr	r2, [pc, #160]	; (800f748 <HAL_UART_Transmit_IT+0x13c>)
 800f6a8:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3308      	adds	r3, #8
 800f6b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b4:	e853 3f00 	ldrex	r3, [r3]
 800f6b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f6c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	3308      	adds	r3, #8
 800f6c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6ca:	637a      	str	r2, [r7, #52]	; 0x34
 800f6cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6d2:	e841 2300 	strex	r3, r2, [r1]
 800f6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1e5      	bne.n	800f6aa <HAL_UART_Transmit_IT+0x9e>
 800f6de:	e028      	b.n	800f732 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6e8:	d107      	bne.n	800f6fa <HAL_UART_Transmit_IT+0xee>
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	691b      	ldr	r3, [r3, #16]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d103      	bne.n	800f6fa <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	4a15      	ldr	r2, [pc, #84]	; (800f74c <HAL_UART_Transmit_IT+0x140>)
 800f6f6:	679a      	str	r2, [r3, #120]	; 0x78
 800f6f8:	e002      	b.n	800f700 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	4a14      	ldr	r2, [pc, #80]	; (800f750 <HAL_UART_Transmit_IT+0x144>)
 800f6fe:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	e853 3f00 	ldrex	r3, [r3]
 800f70c:	613b      	str	r3, [r7, #16]
   return(result);
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f714:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f71e:	623b      	str	r3, [r7, #32]
 800f720:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f722:	69f9      	ldr	r1, [r7, #28]
 800f724:	6a3a      	ldr	r2, [r7, #32]
 800f726:	e841 2300 	strex	r3, r2, [r1]
 800f72a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1e6      	bne.n	800f700 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800f732:	2300      	movs	r3, #0
 800f734:	e000      	b.n	800f738 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800f736:	2302      	movs	r3, #2
  }
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3744      	adds	r7, #68	; 0x44
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr
 800f744:	08010e49 	.word	0x08010e49
 800f748:	08010d69 	.word	0x08010d69
 800f74c:	08010ca7 	.word	0x08010ca7
 800f750:	08010bef 	.word	0x08010bef

0800f754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b0ae      	sub	sp, #184	; 0xb8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	69db      	ldr	r3, [r3, #28]
 800f762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f77a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f77e:	f640 030f 	movw	r3, #2063	; 0x80f
 800f782:	4013      	ands	r3, r2
 800f784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800f788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d11b      	bne.n	800f7c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f794:	f003 0320 	and.w	r3, r3, #32
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d015      	beq.n	800f7c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f79c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f7a0:	f003 0320 	and.w	r3, r3, #32
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d105      	bne.n	800f7b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f7a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d009      	beq.n	800f7c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 8293 	beq.w	800fce4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	4798      	blx	r3
      }
      return;
 800f7c6:	e28d      	b.n	800fce4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f7c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 80fd 	beq.w	800f9cc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f7d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f7d6:	4b7a      	ldr	r3, [pc, #488]	; (800f9c0 <HAL_UART_IRQHandler+0x26c>)
 800f7d8:	4013      	ands	r3, r2
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d106      	bne.n	800f7ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f7de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f7e2:	4b78      	ldr	r3, [pc, #480]	; (800f9c4 <HAL_UART_IRQHandler+0x270>)
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	f000 80f0 	beq.w	800f9cc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f7ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f7f0:	f003 0301 	and.w	r3, r3, #1
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d011      	beq.n	800f81c <HAL_UART_IRQHandler+0xc8>
 800f7f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f7fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00b      	beq.n	800f81c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2201      	movs	r2, #1
 800f80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f812:	f043 0201 	orr.w	r2, r3, #1
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f81c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f820:	f003 0302 	and.w	r3, r3, #2
 800f824:	2b00      	cmp	r3, #0
 800f826:	d011      	beq.n	800f84c <HAL_UART_IRQHandler+0xf8>
 800f828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f82c:	f003 0301 	and.w	r3, r3, #1
 800f830:	2b00      	cmp	r3, #0
 800f832:	d00b      	beq.n	800f84c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2202      	movs	r2, #2
 800f83a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f842:	f043 0204 	orr.w	r2, r3, #4
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f84c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f850:	f003 0304 	and.w	r3, r3, #4
 800f854:	2b00      	cmp	r3, #0
 800f856:	d011      	beq.n	800f87c <HAL_UART_IRQHandler+0x128>
 800f858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f85c:	f003 0301 	and.w	r3, r3, #1
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00b      	beq.n	800f87c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2204      	movs	r2, #4
 800f86a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f872:	f043 0202 	orr.w	r2, r3, #2
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f87c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f880:	f003 0308 	and.w	r3, r3, #8
 800f884:	2b00      	cmp	r3, #0
 800f886:	d017      	beq.n	800f8b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f88c:	f003 0320 	and.w	r3, r3, #32
 800f890:	2b00      	cmp	r3, #0
 800f892:	d105      	bne.n	800f8a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f898:	4b49      	ldr	r3, [pc, #292]	; (800f9c0 <HAL_UART_IRQHandler+0x26c>)
 800f89a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00b      	beq.n	800f8b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2208      	movs	r2, #8
 800f8a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8ae:	f043 0208 	orr.w	r2, r3, #8
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f8b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f8bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d012      	beq.n	800f8ea <HAL_UART_IRQHandler+0x196>
 800f8c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f8c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00c      	beq.n	800f8ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8e0:	f043 0220 	orr.w	r2, r3, #32
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f000 81f9 	beq.w	800fce8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f8f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f8fa:	f003 0320 	and.w	r3, r3, #32
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d013      	beq.n	800f92a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f902:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f906:	f003 0320 	and.w	r3, r3, #32
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d105      	bne.n	800f91a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f90e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f916:	2b00      	cmp	r3, #0
 800f918:	d007      	beq.n	800f92a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d003      	beq.n	800f92a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	689b      	ldr	r3, [r3, #8]
 800f93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f93e:	2b40      	cmp	r3, #64	; 0x40
 800f940:	d005      	beq.n	800f94e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f942:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f946:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d02e      	beq.n	800f9ac <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 fff9 	bl	8010946 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	689b      	ldr	r3, [r3, #8]
 800f95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f95e:	2b40      	cmp	r3, #64	; 0x40
 800f960:	d120      	bne.n	800f9a4 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d017      	beq.n	800f99c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f972:	4a15      	ldr	r2, [pc, #84]	; (800f9c8 <HAL_UART_IRQHandler+0x274>)
 800f974:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7f6 fe68 	bl	8006652 <HAL_DMA_Abort_IT>
 800f982:	4603      	mov	r3, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	d019      	beq.n	800f9bc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800f996:	4610      	mov	r0, r2
 800f998:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f99a:	e00f      	b.n	800f9bc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 f9cb 	bl	800fd38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9a2:	e00b      	b.n	800f9bc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 f9c7 	bl	800fd38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9aa:	e007      	b.n	800f9bc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 f9c3 	bl	800fd38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800f9ba:	e195      	b.n	800fce8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9bc:	bf00      	nop
    return;
 800f9be:	e193      	b.n	800fce8 <HAL_UART_IRQHandler+0x594>
 800f9c0:	10000001 	.word	0x10000001
 800f9c4:	04000120 	.word	0x04000120
 800f9c8:	08010bc3 	.word	0x08010bc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	f040 8129 	bne.w	800fc28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f9d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f9da:	f003 0310 	and.w	r3, r3, #16
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f000 8122 	beq.w	800fc28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f9e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f9e8:	f003 0310 	and.w	r3, r3, #16
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	f000 811b 	beq.w	800fc28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2210      	movs	r2, #16
 800f9f8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa04:	2b40      	cmp	r3, #64	; 0x40
 800fa06:	f040 8091 	bne.w	800fb2c <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa14:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800fa18:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f000 8165 	beq.w	800fcec <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa28:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	f080 815d 	bcs.w	800fcec <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800fa38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa44:	2b81      	cmp	r3, #129	; 0x81
 800fa46:	d060      	beq.n	800fb0a <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa50:	e853 3f00 	ldrex	r3, [r3]
 800fa54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fa56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	461a      	mov	r2, r3
 800fa66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fa6e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fa72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa76:	e841 2300 	strex	r3, r2, [r1]
 800fa7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fa7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d1e2      	bne.n	800fa48 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	3308      	adds	r3, #8
 800fa88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa8c:	e853 3f00 	ldrex	r3, [r3]
 800fa90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fa92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa94:	f023 0301 	bic.w	r3, r3, #1
 800fa98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	3308      	adds	r3, #8
 800faa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800faa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800faa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800faac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800faae:	e841 2300 	strex	r3, r2, [r1]
 800fab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d1e3      	bne.n	800fa82 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2220      	movs	r2, #32
 800fabe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2200      	movs	r2, #0
 800fac6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800face:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fad8:	f023 0310 	bic.w	r3, r3, #16
 800fadc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	461a      	mov	r2, r3
 800fae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800faea:	65bb      	str	r3, [r7, #88]	; 0x58
 800faec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800faf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800faf2:	e841 2300 	strex	r3, r2, [r1]
 800faf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800faf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d1e4      	bne.n	800fac8 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7f6 fd28 	bl	800655a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2202      	movs	r2, #2
 800fb0e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	1ad3      	subs	r3, r2, r3
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	4619      	mov	r1, r3
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7f2 f8df 	bl	8001ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fb2a:	e0df      	b.n	800fcec <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	1ad3      	subs	r3, r2, r3
 800fb3c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f000 80d1 	beq.w	800fcf0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800fb4e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f000 80cc 	beq.w	800fcf0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb60:	e853 3f00 	ldrex	r3, [r3]
 800fb64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	461a      	mov	r2, r3
 800fb76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb7a:	647b      	str	r3, [r7, #68]	; 0x44
 800fb7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb82:	e841 2300 	strex	r3, r2, [r1]
 800fb86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1e4      	bne.n	800fb58 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	3308      	adds	r3, #8
 800fb94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb98:	e853 3f00 	ldrex	r3, [r3]
 800fb9c:	623b      	str	r3, [r7, #32]
   return(result);
 800fb9e:	6a3b      	ldr	r3, [r7, #32]
 800fba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fba4:	f023 0301 	bic.w	r3, r3, #1
 800fba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	3308      	adds	r3, #8
 800fbb2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fbb6:	633a      	str	r2, [r7, #48]	; 0x30
 800fbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbbe:	e841 2300 	strex	r3, r2, [r1]
 800fbc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d1e1      	bne.n	800fb8e <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2220      	movs	r2, #32
 800fbce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	e853 3f00 	ldrex	r3, [r3]
 800fbea:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f023 0310 	bic.w	r3, r3, #16
 800fbf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc00:	61fb      	str	r3, [r7, #28]
 800fc02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc04:	69b9      	ldr	r1, [r7, #24]
 800fc06:	69fa      	ldr	r2, [r7, #28]
 800fc08:	e841 2300 	strex	r3, r2, [r1]
 800fc0c:	617b      	str	r3, [r7, #20]
   return(result);
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d1e4      	bne.n	800fbde <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2202      	movs	r2, #2
 800fc18:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fc1a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800fc1e:	4619      	mov	r1, r3
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f7f2 f861 	bl	8001ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fc26:	e063      	b.n	800fcf0 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fc28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fc2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00e      	beq.n	800fc52 <HAL_UART_IRQHandler+0x4fe>
 800fc34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d008      	beq.n	800fc52 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fc48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f001 fed4 	bl	80119f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc50:	e051      	b.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fc52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fc56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d014      	beq.n	800fc88 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fc5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fc62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d105      	bne.n	800fc76 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fc6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d008      	beq.n	800fc88 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d03a      	beq.n	800fcf4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	4798      	blx	r3
    }
    return;
 800fc86:	e035      	b.n	800fcf4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fc88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d009      	beq.n	800fca8 <HAL_UART_IRQHandler+0x554>
 800fc94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fc98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d003      	beq.n	800fca8 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f001 f946 	bl	8010f32 <UART_EndTransmit_IT>
    return;
 800fca6:	e026      	b.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fca8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fcac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d009      	beq.n	800fcc8 <HAL_UART_IRQHandler+0x574>
 800fcb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fcb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d003      	beq.n	800fcc8 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f001 fead 	bl	8011a20 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fcc6:	e016      	b.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fcc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d010      	beq.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
 800fcd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	da0c      	bge.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f001 fe95 	bl	8011a0c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fce2:	e008      	b.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800fce4:	bf00      	nop
 800fce6:	e006      	b.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
    return;
 800fce8:	bf00      	nop
 800fcea:	e004      	b.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800fcec:	bf00      	nop
 800fcee:	e002      	b.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800fcf0:	bf00      	nop
 800fcf2:	e000      	b.n	800fcf6 <HAL_UART_IRQHandler+0x5a2>
    return;
 800fcf4:	bf00      	nop
  }
}
 800fcf6:	37b8      	adds	r7, #184	; 0xb8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b083      	sub	sp, #12
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fd04:	bf00      	nop
 800fd06:	370c      	adds	r7, #12
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr

0800fd10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b083      	sub	sp, #12
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fd18:	bf00      	nop
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fd2c:	bf00      	nop
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fd40:	bf00      	nop
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd50:	b094      	sub	sp, #80	; 0x50
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fd56:	2300      	movs	r3, #0
 800fd58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800fd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	4b78      	ldr	r3, [pc, #480]	; (800ff44 <UART_SetConfig+0x1f8>)
 800fd62:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd66:	689a      	ldr	r2, [r3, #8]
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	691b      	ldr	r3, [r3, #16]
 800fd6c:	431a      	orrs	r2, r3
 800fd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	431a      	orrs	r2, r3
 800fd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd76:	69db      	ldr	r3, [r3, #28]
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4971      	ldr	r1, [pc, #452]	; (800ff48 <UART_SetConfig+0x1fc>)
 800fd84:	4019      	ands	r1, r3
 800fd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd8c:	430b      	orrs	r3, r1
 800fd8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9c:	68d9      	ldr	r1, [r3, #12]
 800fd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	ea40 0301 	orr.w	r3, r0, r1
 800fda6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdaa:	699b      	ldr	r3, [r3, #24]
 800fdac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	4b64      	ldr	r3, [pc, #400]	; (800ff44 <UART_SetConfig+0x1f8>)
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d009      	beq.n	800fdcc <UART_SetConfig+0x80>
 800fdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	4b63      	ldr	r3, [pc, #396]	; (800ff4c <UART_SetConfig+0x200>)
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d004      	beq.n	800fdcc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc4:	6a1a      	ldr	r2, [r3, #32]
 800fdc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	689b      	ldr	r3, [r3, #8]
 800fdd2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800fdd6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800fdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fde0:	430b      	orrs	r3, r1
 800fde2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdea:	f023 000f 	bic.w	r0, r3, #15
 800fdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	ea40 0301 	orr.w	r3, r0, r1
 800fdfa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	4b53      	ldr	r3, [pc, #332]	; (800ff50 <UART_SetConfig+0x204>)
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d102      	bne.n	800fe0c <UART_SetConfig+0xc0>
 800fe06:	2301      	movs	r3, #1
 800fe08:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe0a:	e066      	b.n	800feda <UART_SetConfig+0x18e>
 800fe0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	4b50      	ldr	r3, [pc, #320]	; (800ff54 <UART_SetConfig+0x208>)
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d102      	bne.n	800fe1c <UART_SetConfig+0xd0>
 800fe16:	2302      	movs	r3, #2
 800fe18:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe1a:	e05e      	b.n	800feda <UART_SetConfig+0x18e>
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	681a      	ldr	r2, [r3, #0]
 800fe20:	4b4d      	ldr	r3, [pc, #308]	; (800ff58 <UART_SetConfig+0x20c>)
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d102      	bne.n	800fe2c <UART_SetConfig+0xe0>
 800fe26:	2304      	movs	r3, #4
 800fe28:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe2a:	e056      	b.n	800feda <UART_SetConfig+0x18e>
 800fe2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2e:	681a      	ldr	r2, [r3, #0]
 800fe30:	4b4a      	ldr	r3, [pc, #296]	; (800ff5c <UART_SetConfig+0x210>)
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d102      	bne.n	800fe3c <UART_SetConfig+0xf0>
 800fe36:	2308      	movs	r3, #8
 800fe38:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe3a:	e04e      	b.n	800feda <UART_SetConfig+0x18e>
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	4b47      	ldr	r3, [pc, #284]	; (800ff60 <UART_SetConfig+0x214>)
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d102      	bne.n	800fe4c <UART_SetConfig+0x100>
 800fe46:	2310      	movs	r3, #16
 800fe48:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe4a:	e046      	b.n	800feda <UART_SetConfig+0x18e>
 800fe4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	4b44      	ldr	r3, [pc, #272]	; (800ff64 <UART_SetConfig+0x218>)
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d102      	bne.n	800fe5c <UART_SetConfig+0x110>
 800fe56:	2320      	movs	r3, #32
 800fe58:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe5a:	e03e      	b.n	800feda <UART_SetConfig+0x18e>
 800fe5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	4b41      	ldr	r3, [pc, #260]	; (800ff68 <UART_SetConfig+0x21c>)
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d102      	bne.n	800fe6c <UART_SetConfig+0x120>
 800fe66:	2340      	movs	r3, #64	; 0x40
 800fe68:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe6a:	e036      	b.n	800feda <UART_SetConfig+0x18e>
 800fe6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	4b3e      	ldr	r3, [pc, #248]	; (800ff6c <UART_SetConfig+0x220>)
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d102      	bne.n	800fe7c <UART_SetConfig+0x130>
 800fe76:	2380      	movs	r3, #128	; 0x80
 800fe78:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe7a:	e02e      	b.n	800feda <UART_SetConfig+0x18e>
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	4b3b      	ldr	r3, [pc, #236]	; (800ff70 <UART_SetConfig+0x224>)
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d103      	bne.n	800fe8e <UART_SetConfig+0x142>
 800fe86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe8c:	e025      	b.n	800feda <UART_SetConfig+0x18e>
 800fe8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	4b38      	ldr	r3, [pc, #224]	; (800ff74 <UART_SetConfig+0x228>)
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d103      	bne.n	800fea0 <UART_SetConfig+0x154>
 800fe98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe9e:	e01c      	b.n	800feda <UART_SetConfig+0x18e>
 800fea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	4b34      	ldr	r3, [pc, #208]	; (800ff78 <UART_SetConfig+0x22c>)
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d103      	bne.n	800feb2 <UART_SetConfig+0x166>
 800feaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feae:	64bb      	str	r3, [r7, #72]	; 0x48
 800feb0:	e013      	b.n	800feda <UART_SetConfig+0x18e>
 800feb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	4b31      	ldr	r3, [pc, #196]	; (800ff7c <UART_SetConfig+0x230>)
 800feb8:	429a      	cmp	r2, r3
 800feba:	d103      	bne.n	800fec4 <UART_SetConfig+0x178>
 800febc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fec0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fec2:	e00a      	b.n	800feda <UART_SetConfig+0x18e>
 800fec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	4b1e      	ldr	r3, [pc, #120]	; (800ff44 <UART_SetConfig+0x1f8>)
 800feca:	429a      	cmp	r2, r3
 800fecc:	d103      	bne.n	800fed6 <UART_SetConfig+0x18a>
 800fece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fed2:	64bb      	str	r3, [r7, #72]	; 0x48
 800fed4:	e001      	b.n	800feda <UART_SetConfig+0x18e>
 800fed6:	2300      	movs	r3, #0
 800fed8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800feda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	4b19      	ldr	r3, [pc, #100]	; (800ff44 <UART_SetConfig+0x1f8>)
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d005      	beq.n	800fef0 <UART_SetConfig+0x1a4>
 800fee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	4b18      	ldr	r3, [pc, #96]	; (800ff4c <UART_SetConfig+0x200>)
 800feea:	429a      	cmp	r2, r3
 800feec:	f040 8094 	bne.w	8010018 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fef2:	2200      	movs	r2, #0
 800fef4:	623b      	str	r3, [r7, #32]
 800fef6:	627a      	str	r2, [r7, #36]	; 0x24
 800fef8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fefc:	f7fb fbce 	bl	800b69c <HAL_RCCEx_GetPeriphCLKFreq>
 800ff00:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ff02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f000 80f7 	beq.w	80100f8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ff0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0e:	4a1c      	ldr	r2, [pc, #112]	; (800ff80 <UART_SetConfig+0x234>)
 800ff10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff14:	461a      	mov	r2, r3
 800ff16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff1c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff20:	685a      	ldr	r2, [r3, #4]
 800ff22:	4613      	mov	r3, r2
 800ff24:	005b      	lsls	r3, r3, #1
 800ff26:	4413      	add	r3, r2
 800ff28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d305      	bcc.n	800ff3a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d924      	bls.n	800ff84 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ff40:	e069      	b.n	8010016 <UART_SetConfig+0x2ca>
 800ff42:	bf00      	nop
 800ff44:	44002400 	.word	0x44002400
 800ff48:	cfff69f3 	.word	0xcfff69f3
 800ff4c:	54002400 	.word	0x54002400
 800ff50:	40013800 	.word	0x40013800
 800ff54:	40004400 	.word	0x40004400
 800ff58:	40004800 	.word	0x40004800
 800ff5c:	40004c00 	.word	0x40004c00
 800ff60:	40005000 	.word	0x40005000
 800ff64:	40006400 	.word	0x40006400
 800ff68:	40007800 	.word	0x40007800
 800ff6c:	40007c00 	.word	0x40007c00
 800ff70:	40008000 	.word	0x40008000
 800ff74:	40006800 	.word	0x40006800
 800ff78:	40006c00 	.word	0x40006c00
 800ff7c:	40008400 	.word	0x40008400
 800ff80:	08017618 	.word	0x08017618
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff86:	2200      	movs	r2, #0
 800ff88:	61bb      	str	r3, [r7, #24]
 800ff8a:	61fa      	str	r2, [r7, #28]
 800ff8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff90:	4a64      	ldr	r2, [pc, #400]	; (8010124 <UART_SetConfig+0x3d8>)
 800ff92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	2200      	movs	r2, #0
 800ff9a:	613b      	str	r3, [r7, #16]
 800ff9c:	617a      	str	r2, [r7, #20]
 800ff9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ffa2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ffa6:	f7f0 fe0f 	bl	8000bc8 <__aeabi_uldivmod>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	460b      	mov	r3, r1
 800ffae:	4610      	mov	r0, r2
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	f04f 0200 	mov.w	r2, #0
 800ffb6:	f04f 0300 	mov.w	r3, #0
 800ffba:	020b      	lsls	r3, r1, #8
 800ffbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ffc0:	0202      	lsls	r2, r0, #8
 800ffc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffc4:	6849      	ldr	r1, [r1, #4]
 800ffc6:	0849      	lsrs	r1, r1, #1
 800ffc8:	2000      	movs	r0, #0
 800ffca:	460c      	mov	r4, r1
 800ffcc:	4605      	mov	r5, r0
 800ffce:	eb12 0804 	adds.w	r8, r2, r4
 800ffd2:	eb43 0905 	adc.w	r9, r3, r5
 800ffd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	60bb      	str	r3, [r7, #8]
 800ffde:	60fa      	str	r2, [r7, #12]
 800ffe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	4649      	mov	r1, r9
 800ffe8:	f7f0 fdee 	bl	8000bc8 <__aeabi_uldivmod>
 800ffec:	4602      	mov	r2, r0
 800ffee:	460b      	mov	r3, r1
 800fff0:	4613      	mov	r3, r2
 800fff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fffa:	d308      	bcc.n	801000e <UART_SetConfig+0x2c2>
 800fffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010002:	d204      	bcs.n	801000e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8010004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801000a:	60da      	str	r2, [r3, #12]
 801000c:	e003      	b.n	8010016 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 801000e:	2301      	movs	r3, #1
 8010010:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8010014:	e070      	b.n	80100f8 <UART_SetConfig+0x3ac>
 8010016:	e06f      	b.n	80100f8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001a:	69db      	ldr	r3, [r3, #28]
 801001c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010020:	d13c      	bne.n	801009c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010024:	2200      	movs	r2, #0
 8010026:	603b      	str	r3, [r7, #0]
 8010028:	607a      	str	r2, [r7, #4]
 801002a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801002e:	f7fb fb35 	bl	800b69c <HAL_RCCEx_GetPeriphCLKFreq>
 8010032:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010036:	2b00      	cmp	r3, #0
 8010038:	d05e      	beq.n	80100f8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801003a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801003e:	4a39      	ldr	r2, [pc, #228]	; (8010124 <UART_SetConfig+0x3d8>)
 8010040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010044:	461a      	mov	r2, r3
 8010046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010048:	fbb3 f3f2 	udiv	r3, r3, r2
 801004c:	005a      	lsls	r2, r3, #1
 801004e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	085b      	lsrs	r3, r3, #1
 8010054:	441a      	add	r2, r3
 8010056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	fbb2 f3f3 	udiv	r3, r2, r3
 801005e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010062:	2b0f      	cmp	r3, #15
 8010064:	d916      	bls.n	8010094 <UART_SetConfig+0x348>
 8010066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801006c:	d212      	bcs.n	8010094 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801006e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010070:	b29b      	uxth	r3, r3
 8010072:	f023 030f 	bic.w	r3, r3, #15
 8010076:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801007a:	085b      	lsrs	r3, r3, #1
 801007c:	b29b      	uxth	r3, r3
 801007e:	f003 0307 	and.w	r3, r3, #7
 8010082:	b29a      	uxth	r2, r3
 8010084:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010086:	4313      	orrs	r3, r2
 8010088:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 801008a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010090:	60da      	str	r2, [r3, #12]
 8010092:	e031      	b.n	80100f8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8010094:	2301      	movs	r3, #1
 8010096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801009a:	e02d      	b.n	80100f8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801009c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801009e:	2200      	movs	r2, #0
 80100a0:	469a      	mov	sl, r3
 80100a2:	4693      	mov	fp, r2
 80100a4:	4650      	mov	r0, sl
 80100a6:	4659      	mov	r1, fp
 80100a8:	f7fb faf8 	bl	800b69c <HAL_RCCEx_GetPeriphCLKFreq>
 80100ac:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80100ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d021      	beq.n	80100f8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80100b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b8:	4a1a      	ldr	r2, [pc, #104]	; (8010124 <UART_SetConfig+0x3d8>)
 80100ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100be:	461a      	mov	r2, r3
 80100c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80100c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	085b      	lsrs	r3, r3, #1
 80100cc:	441a      	add	r2, r3
 80100ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80100d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100da:	2b0f      	cmp	r3, #15
 80100dc:	d909      	bls.n	80100f2 <UART_SetConfig+0x3a6>
 80100de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100e4:	d205      	bcs.n	80100f2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80100e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	60da      	str	r2, [r3, #12]
 80100f0:	e002      	b.n	80100f8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80100f2:	2301      	movs	r3, #1
 80100f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80100f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fa:	2201      	movs	r2, #1
 80100fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010102:	2201      	movs	r2, #1
 8010104:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010a:	2200      	movs	r2, #0
 801010c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801010e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010110:	2200      	movs	r2, #0
 8010112:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010114:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010118:	4618      	mov	r0, r3
 801011a:	3750      	adds	r7, #80	; 0x50
 801011c:	46bd      	mov	sp, r7
 801011e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010122:	bf00      	nop
 8010124:	08017618 	.word	0x08017618

08010128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010134:	f003 0308 	and.w	r3, r3, #8
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00a      	beq.n	8010152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	430a      	orrs	r2, r1
 8010150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010156:	f003 0301 	and.w	r3, r3, #1
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00a      	beq.n	8010174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	430a      	orrs	r2, r1
 8010172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010178:	f003 0302 	and.w	r3, r3, #2
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00a      	beq.n	8010196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	430a      	orrs	r2, r1
 8010194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801019a:	f003 0304 	and.w	r3, r3, #4
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00a      	beq.n	80101b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	430a      	orrs	r2, r1
 80101b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101bc:	f003 0310 	and.w	r3, r3, #16
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d00a      	beq.n	80101da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	430a      	orrs	r2, r1
 80101d8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101de:	f003 0320 	and.w	r3, r3, #32
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00a      	beq.n	80101fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	689b      	ldr	r3, [r3, #8]
 80101ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	430a      	orrs	r2, r1
 80101fa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010204:	2b00      	cmp	r3, #0
 8010206:	d01a      	beq.n	801023e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	430a      	orrs	r2, r1
 801021c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010226:	d10a      	bne.n	801023e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	430a      	orrs	r2, r1
 801023c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00a      	beq.n	8010260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	430a      	orrs	r2, r1
 801025e:	605a      	str	r2, [r3, #4]
  }
}
 8010260:	bf00      	nop
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b098      	sub	sp, #96	; 0x60
 8010270:	af02      	add	r7, sp, #8
 8010272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2200      	movs	r2, #0
 8010278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801027c:	f7f5 ff9c 	bl	80061b8 <HAL_GetTick>
 8010280:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f003 0308 	and.w	r3, r3, #8
 801028c:	2b08      	cmp	r3, #8
 801028e:	d12f      	bne.n	80102f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010294:	9300      	str	r3, [sp, #0]
 8010296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010298:	2200      	movs	r2, #0
 801029a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f000 f88e 	bl	80103c0 <UART_WaitOnFlagUntilTimeout>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d022      	beq.n	80102f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b2:	e853 3f00 	ldrex	r3, [r3]
 80102b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80102b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102be:	653b      	str	r3, [r7, #80]	; 0x50
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	461a      	mov	r2, r3
 80102c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102c8:	647b      	str	r3, [r7, #68]	; 0x44
 80102ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80102ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102d0:	e841 2300 	strex	r3, r2, [r1]
 80102d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80102d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d1e6      	bne.n	80102aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2220      	movs	r2, #32
 80102e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102ec:	2303      	movs	r3, #3
 80102ee:	e063      	b.n	80103b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f003 0304 	and.w	r3, r3, #4
 80102fa:	2b04      	cmp	r3, #4
 80102fc:	d149      	bne.n	8010392 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010306:	2200      	movs	r2, #0
 8010308:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 f857 	bl	80103c0 <UART_WaitOnFlagUntilTimeout>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d03c      	beq.n	8010392 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801031e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010320:	e853 3f00 	ldrex	r3, [r3]
 8010324:	623b      	str	r3, [r7, #32]
   return(result);
 8010326:	6a3b      	ldr	r3, [r7, #32]
 8010328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801032c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	461a      	mov	r2, r3
 8010334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010336:	633b      	str	r3, [r7, #48]	; 0x30
 8010338:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801033a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801033c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801033e:	e841 2300 	strex	r3, r2, [r1]
 8010342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010346:	2b00      	cmp	r3, #0
 8010348:	d1e6      	bne.n	8010318 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	3308      	adds	r3, #8
 8010350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	e853 3f00 	ldrex	r3, [r3]
 8010358:	60fb      	str	r3, [r7, #12]
   return(result);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	f023 0301 	bic.w	r3, r3, #1
 8010360:	64bb      	str	r3, [r7, #72]	; 0x48
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	3308      	adds	r3, #8
 8010368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801036a:	61fa      	str	r2, [r7, #28]
 801036c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801036e:	69b9      	ldr	r1, [r7, #24]
 8010370:	69fa      	ldr	r2, [r7, #28]
 8010372:	e841 2300 	strex	r3, r2, [r1]
 8010376:	617b      	str	r3, [r7, #20]
   return(result);
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1e5      	bne.n	801034a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2220      	movs	r2, #32
 8010382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2200      	movs	r2, #0
 801038a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801038e:	2303      	movs	r3, #3
 8010390:	e012      	b.n	80103b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2220      	movs	r2, #32
 8010396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2220      	movs	r2, #32
 801039e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2200      	movs	r2, #0
 80103a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2200      	movs	r2, #0
 80103b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80103b6:	2300      	movs	r3, #0
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3758      	adds	r7, #88	; 0x58
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	603b      	str	r3, [r7, #0]
 80103cc:	4613      	mov	r3, r2
 80103ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103d0:	e049      	b.n	8010466 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d8:	d045      	beq.n	8010466 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80103da:	f7f5 feed 	bl	80061b8 <HAL_GetTick>
 80103de:	4602      	mov	r2, r0
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	69ba      	ldr	r2, [r7, #24]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d302      	bcc.n	80103f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d101      	bne.n	80103f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80103f0:	2303      	movs	r3, #3
 80103f2:	e048      	b.n	8010486 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f003 0304 	and.w	r3, r3, #4
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d031      	beq.n	8010466 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	69db      	ldr	r3, [r3, #28]
 8010408:	f003 0308 	and.w	r3, r3, #8
 801040c:	2b08      	cmp	r3, #8
 801040e:	d110      	bne.n	8010432 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2208      	movs	r2, #8
 8010416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f000 fa94 	bl	8010946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2208      	movs	r2, #8
 8010422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2200      	movs	r2, #0
 801042a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801042e:	2301      	movs	r3, #1
 8010430:	e029      	b.n	8010486 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	69db      	ldr	r3, [r3, #28]
 8010438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801043c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010440:	d111      	bne.n	8010466 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801044a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801044c:	68f8      	ldr	r0, [r7, #12]
 801044e:	f000 fa7a 	bl	8010946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2220      	movs	r2, #32
 8010456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	2200      	movs	r2, #0
 801045e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010462:	2303      	movs	r3, #3
 8010464:	e00f      	b.n	8010486 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	69da      	ldr	r2, [r3, #28]
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	4013      	ands	r3, r2
 8010470:	68ba      	ldr	r2, [r7, #8]
 8010472:	429a      	cmp	r2, r3
 8010474:	bf0c      	ite	eq
 8010476:	2301      	moveq	r3, #1
 8010478:	2300      	movne	r3, #0
 801047a:	b2db      	uxtb	r3, r3
 801047c:	461a      	mov	r2, r3
 801047e:	79fb      	ldrb	r3, [r7, #7]
 8010480:	429a      	cmp	r2, r3
 8010482:	d0a6      	beq.n	80103d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
	...

08010490 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010490:	b480      	push	{r7}
 8010492:	b0a3      	sub	sp, #140	; 0x8c
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	4613      	mov	r3, r2
 801049c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	68ba      	ldr	r2, [r7, #8]
 80104a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	88fa      	ldrh	r2, [r7, #6]
 80104a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	88fa      	ldrh	r2, [r7, #6]
 80104b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2200      	movs	r2, #0
 80104b8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	689b      	ldr	r3, [r3, #8]
 80104be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104c2:	d10e      	bne.n	80104e2 <UART_Start_Receive_IT+0x52>
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	691b      	ldr	r3, [r3, #16]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d105      	bne.n	80104d8 <UART_Start_Receive_IT+0x48>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80104d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104d6:	e02d      	b.n	8010534 <UART_Start_Receive_IT+0xa4>
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	22ff      	movs	r2, #255	; 0xff
 80104dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104e0:	e028      	b.n	8010534 <UART_Start_Receive_IT+0xa4>
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	689b      	ldr	r3, [r3, #8]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d10d      	bne.n	8010506 <UART_Start_Receive_IT+0x76>
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	691b      	ldr	r3, [r3, #16]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d104      	bne.n	80104fc <UART_Start_Receive_IT+0x6c>
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	22ff      	movs	r2, #255	; 0xff
 80104f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104fa:	e01b      	b.n	8010534 <UART_Start_Receive_IT+0xa4>
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	227f      	movs	r2, #127	; 0x7f
 8010500:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010504:	e016      	b.n	8010534 <UART_Start_Receive_IT+0xa4>
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	689b      	ldr	r3, [r3, #8]
 801050a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801050e:	d10d      	bne.n	801052c <UART_Start_Receive_IT+0x9c>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	691b      	ldr	r3, [r3, #16]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d104      	bne.n	8010522 <UART_Start_Receive_IT+0x92>
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	227f      	movs	r2, #127	; 0x7f
 801051c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010520:	e008      	b.n	8010534 <UART_Start_Receive_IT+0xa4>
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	223f      	movs	r2, #63	; 0x3f
 8010526:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801052a:	e003      	b.n	8010534 <UART_Start_Receive_IT+0xa4>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2200      	movs	r2, #0
 8010530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2200      	movs	r2, #0
 8010538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2222      	movs	r2, #34	; 0x22
 8010540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	3308      	adds	r3, #8
 801054a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801054c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801054e:	e853 3f00 	ldrex	r3, [r3]
 8010552:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010556:	f043 0301 	orr.w	r3, r3, #1
 801055a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3308      	adds	r3, #8
 8010564:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010568:	673a      	str	r2, [r7, #112]	; 0x70
 801056a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801056c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801056e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010570:	e841 2300 	strex	r3, r2, [r1]
 8010574:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1e3      	bne.n	8010544 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010584:	d14f      	bne.n	8010626 <UART_Start_Receive_IT+0x196>
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801058c:	88fa      	ldrh	r2, [r7, #6]
 801058e:	429a      	cmp	r2, r3
 8010590:	d349      	bcc.n	8010626 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	689b      	ldr	r3, [r3, #8]
 8010596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801059a:	d107      	bne.n	80105ac <UART_Start_Receive_IT+0x11c>
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	691b      	ldr	r3, [r3, #16]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d103      	bne.n	80105ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	4a47      	ldr	r2, [pc, #284]	; (80106c4 <UART_Start_Receive_IT+0x234>)
 80105a8:	675a      	str	r2, [r3, #116]	; 0x74
 80105aa:	e002      	b.n	80105b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	4a46      	ldr	r2, [pc, #280]	; (80106c8 <UART_Start_Receive_IT+0x238>)
 80105b0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	691b      	ldr	r3, [r3, #16]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d01a      	beq.n	80105f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c2:	e853 3f00 	ldrex	r3, [r3]
 80105c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80105c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80105ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	461a      	mov	r2, r3
 80105d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80105dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105e4:	e841 2300 	strex	r3, r2, [r1]
 80105e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80105ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d1e4      	bne.n	80105ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3308      	adds	r3, #8
 80105f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105fa:	e853 3f00 	ldrex	r3, [r3]
 80105fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010606:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	3308      	adds	r3, #8
 801060e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010610:	64ba      	str	r2, [r7, #72]	; 0x48
 8010612:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010614:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010618:	e841 2300 	strex	r3, r2, [r1]
 801061c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801061e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1e5      	bne.n	80105f0 <UART_Start_Receive_IT+0x160>
 8010624:	e046      	b.n	80106b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	689b      	ldr	r3, [r3, #8]
 801062a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801062e:	d107      	bne.n	8010640 <UART_Start_Receive_IT+0x1b0>
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	691b      	ldr	r3, [r3, #16]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d103      	bne.n	8010640 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	4a24      	ldr	r2, [pc, #144]	; (80106cc <UART_Start_Receive_IT+0x23c>)
 801063c:	675a      	str	r2, [r3, #116]	; 0x74
 801063e:	e002      	b.n	8010646 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	4a23      	ldr	r2, [pc, #140]	; (80106d0 <UART_Start_Receive_IT+0x240>)
 8010644:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	691b      	ldr	r3, [r3, #16]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d019      	beq.n	8010682 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010656:	e853 3f00 	ldrex	r3, [r3]
 801065a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010662:	677b      	str	r3, [r7, #116]	; 0x74
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	461a      	mov	r2, r3
 801066a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801066c:	637b      	str	r3, [r7, #52]	; 0x34
 801066e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010674:	e841 2300 	strex	r3, r2, [r1]
 8010678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067c:	2b00      	cmp	r3, #0
 801067e:	d1e6      	bne.n	801064e <UART_Start_Receive_IT+0x1be>
 8010680:	e018      	b.n	80106b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	e853 3f00 	ldrex	r3, [r3]
 801068e:	613b      	str	r3, [r7, #16]
   return(result);
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	f043 0320 	orr.w	r3, r3, #32
 8010696:	67bb      	str	r3, [r7, #120]	; 0x78
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	461a      	mov	r2, r3
 801069e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106a0:	623b      	str	r3, [r7, #32]
 80106a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a4:	69f9      	ldr	r1, [r7, #28]
 80106a6:	6a3a      	ldr	r2, [r7, #32]
 80106a8:	e841 2300 	strex	r3, r2, [r1]
 80106ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1e6      	bne.n	8010682 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80106b4:	2300      	movs	r3, #0
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	378c      	adds	r7, #140	; 0x8c
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop
 80106c4:	08011681 	.word	0x08011681
 80106c8:	08011311 	.word	0x08011311
 80106cc:	0801114d 	.word	0x0801114d
 80106d0:	08010f89 	.word	0x08010f89

080106d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b098      	sub	sp, #96	; 0x60
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	4613      	mov	r3, r2
 80106e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 80106e2:	88fb      	ldrh	r3, [r7, #6]
 80106e4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	68ba      	ldr	r2, [r7, #8]
 80106ec:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	88fa      	ldrh	r2, [r7, #6]
 80106f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	2200      	movs	r2, #0
 80106fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2222      	movs	r2, #34	; 0x22
 8010702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801070c:	2b00      	cmp	r3, #0
 801070e:	d07c      	beq.n	801080a <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010716:	4a68      	ldr	r2, [pc, #416]	; (80108b8 <UART_Start_Receive_DMA+0x1e4>)
 8010718:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010720:	4a66      	ldr	r2, [pc, #408]	; (80108bc <UART_Start_Receive_DMA+0x1e8>)
 8010722:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801072a:	4a65      	ldr	r2, [pc, #404]	; (80108c0 <UART_Start_Receive_DMA+0x1ec>)
 801072c:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010734:	2200      	movs	r2, #0
 8010736:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010740:	d107      	bne.n	8010752 <UART_Start_Receive_DMA+0x7e>
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	691b      	ldr	r3, [r3, #16]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d103      	bne.n	8010752 <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 801074a:	88fb      	ldrh	r3, [r7, #6]
 801074c:	005b      	lsls	r3, r3, #1
 801074e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801075e:	2b00      	cmp	r3, #0
 8010760:	d034      	beq.n	80107cc <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801076a:	2b00      	cmp	r3, #0
 801076c:	d02a      	beq.n	80107c4 <UART_Start_Receive_DMA+0xf0>
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d023      	beq.n	80107c4 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801078a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801079a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7f6 fa7c 	bl	8006cb4 <HAL_DMAEx_List_Start_IT>
 80107bc:	4603      	mov	r3, r0
 80107be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80107c2:	e014      	b.n	80107ee <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 80107c4:	2301      	movs	r3, #1
 80107c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80107ca:	e010      	b.n	80107ee <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	3324      	adds	r3, #36	; 0x24
 80107d8:	4619      	mov	r1, r3
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107de:	461a      	mov	r2, r3
 80107e0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80107e4:	f7f5 fe59 	bl	800649a <HAL_DMA_Start_IT>
 80107e8:	4603      	mov	r3, r0
 80107ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 80107ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d009      	beq.n	801080a <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2210      	movs	r2, #16
 80107fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2220      	movs	r2, #32
 8010802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8010806:	2301      	movs	r3, #1
 8010808:	e051      	b.n	80108ae <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	691b      	ldr	r3, [r3, #16]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d018      	beq.n	8010844 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801081a:	e853 3f00 	ldrex	r3, [r3]
 801081e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010826:	65bb      	str	r3, [r7, #88]	; 0x58
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	461a      	mov	r2, r3
 801082e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010832:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010834:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010836:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010838:	e841 2300 	strex	r3, r2, [r1]
 801083c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801083e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1e6      	bne.n	8010812 <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	3308      	adds	r3, #8
 801084a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801084c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084e:	e853 3f00 	ldrex	r3, [r3]
 8010852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010856:	f043 0301 	orr.w	r3, r3, #1
 801085a:	657b      	str	r3, [r7, #84]	; 0x54
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	3308      	adds	r3, #8
 8010862:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010864:	63ba      	str	r2, [r7, #56]	; 0x38
 8010866:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010868:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801086a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801086c:	e841 2300 	strex	r3, r2, [r1]
 8010870:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010874:	2b00      	cmp	r3, #0
 8010876:	d1e5      	bne.n	8010844 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	3308      	adds	r3, #8
 801087e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010880:	69bb      	ldr	r3, [r7, #24]
 8010882:	e853 3f00 	ldrex	r3, [r3]
 8010886:	617b      	str	r3, [r7, #20]
   return(result);
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801088e:	653b      	str	r3, [r7, #80]	; 0x50
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	3308      	adds	r3, #8
 8010896:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010898:	627a      	str	r2, [r7, #36]	; 0x24
 801089a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089c:	6a39      	ldr	r1, [r7, #32]
 801089e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a0:	e841 2300 	strex	r3, r2, [r1]
 80108a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80108a6:	69fb      	ldr	r3, [r7, #28]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1e5      	bne.n	8010878 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 80108ac:	2300      	movs	r3, #0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3760      	adds	r7, #96	; 0x60
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	08010a13 	.word	0x08010a13
 80108bc:	08010b05 	.word	0x08010b05
 80108c0:	08010b43 	.word	0x08010b43

080108c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b08f      	sub	sp, #60	; 0x3c
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d2:	6a3b      	ldr	r3, [r7, #32]
 80108d4:	e853 3f00 	ldrex	r3, [r3]
 80108d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80108e0:	637b      	str	r3, [r7, #52]	; 0x34
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	461a      	mov	r2, r3
 80108e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108ec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108f2:	e841 2300 	strex	r3, r2, [r1]
 80108f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80108f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d1e6      	bne.n	80108cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3308      	adds	r3, #8
 8010904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	e853 3f00 	ldrex	r3, [r3]
 801090c:	60bb      	str	r3, [r7, #8]
   return(result);
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010914:	633b      	str	r3, [r7, #48]	; 0x30
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	3308      	adds	r3, #8
 801091c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801091e:	61ba      	str	r2, [r7, #24]
 8010920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010922:	6979      	ldr	r1, [r7, #20]
 8010924:	69ba      	ldr	r2, [r7, #24]
 8010926:	e841 2300 	strex	r3, r2, [r1]
 801092a:	613b      	str	r3, [r7, #16]
   return(result);
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d1e5      	bne.n	80108fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2220      	movs	r2, #32
 8010936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801093a:	bf00      	nop
 801093c:	373c      	adds	r7, #60	; 0x3c
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010946:	b480      	push	{r7}
 8010948:	b095      	sub	sp, #84	; 0x54
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010956:	e853 3f00 	ldrex	r3, [r3]
 801095a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801095e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	461a      	mov	r2, r3
 801096a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801096c:	643b      	str	r3, [r7, #64]	; 0x40
 801096e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010974:	e841 2300 	strex	r3, r2, [r1]
 8010978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097c:	2b00      	cmp	r3, #0
 801097e:	d1e6      	bne.n	801094e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3308      	adds	r3, #8
 8010986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010988:	6a3b      	ldr	r3, [r7, #32]
 801098a:	e853 3f00 	ldrex	r3, [r3]
 801098e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010990:	69fb      	ldr	r3, [r7, #28]
 8010992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010996:	f023 0301 	bic.w	r3, r3, #1
 801099a:	64bb      	str	r3, [r7, #72]	; 0x48
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	3308      	adds	r3, #8
 80109a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80109a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109ac:	e841 2300 	strex	r3, r2, [r1]
 80109b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1e3      	bne.n	8010980 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d118      	bne.n	80109f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	e853 3f00 	ldrex	r3, [r3]
 80109cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	f023 0310 	bic.w	r3, r3, #16
 80109d4:	647b      	str	r3, [r7, #68]	; 0x44
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	461a      	mov	r2, r3
 80109dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109de:	61bb      	str	r3, [r7, #24]
 80109e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e2:	6979      	ldr	r1, [r7, #20]
 80109e4:	69ba      	ldr	r2, [r7, #24]
 80109e6:	e841 2300 	strex	r3, r2, [r1]
 80109ea:	613b      	str	r3, [r7, #16]
   return(result);
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d1e6      	bne.n	80109c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2220      	movs	r2, #32
 80109f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2200      	movs	r2, #0
 80109fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010a06:	bf00      	nop
 8010a08:	3754      	adds	r7, #84	; 0x54
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b096      	sub	sp, #88	; 0x58
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a1e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a24:	2b81      	cmp	r3, #129	; 0x81
 8010a26:	d057      	beq.n	8010ad8 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 8010a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a38:	e853 3f00 	ldrex	r3, [r3]
 8010a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a44:	653b      	str	r3, [r7, #80]	; 0x50
 8010a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8010a50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a56:	e841 2300 	strex	r3, r2, [r1]
 8010a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d1e6      	bne.n	8010a30 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	3308      	adds	r3, #8
 8010a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6c:	e853 3f00 	ldrex	r3, [r3]
 8010a70:	623b      	str	r3, [r7, #32]
   return(result);
 8010a72:	6a3b      	ldr	r3, [r7, #32]
 8010a74:	f023 0301 	bic.w	r3, r3, #1
 8010a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	3308      	adds	r3, #8
 8010a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a82:	633a      	str	r2, [r7, #48]	; 0x30
 8010a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a8a:	e841 2300 	strex	r3, r2, [r1]
 8010a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1e5      	bne.n	8010a62 <UART_DMAReceiveCplt+0x50>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a98:	2220      	movs	r2, #32
 8010a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d118      	bne.n	8010ad8 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	e853 3f00 	ldrex	r3, [r3]
 8010ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f023 0310 	bic.w	r3, r3, #16
 8010aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8010abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac4:	61fb      	str	r3, [r7, #28]
 8010ac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac8:	69b9      	ldr	r1, [r7, #24]
 8010aca:	69fa      	ldr	r2, [r7, #28]
 8010acc:	e841 2300 	strex	r3, r2, [r1]
 8010ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d1e6      	bne.n	8010aa6 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ada:	2200      	movs	r2, #0
 8010adc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae2:	2b01      	cmp	r3, #1
 8010ae4:	d107      	bne.n	8010af6 <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010aec:	4619      	mov	r1, r3
 8010aee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010af0:	f7f1 f8fa 	bl	8001ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010af4:	e002      	b.n	8010afc <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 8010af6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010af8:	f7ff f90a 	bl	800fd10 <HAL_UART_RxCpltCallback>
}
 8010afc:	bf00      	nop
 8010afe:	3758      	adds	r7, #88	; 0x58
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b10:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	2201      	movs	r2, #1
 8010b16:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d109      	bne.n	8010b34 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b26:	085b      	lsrs	r3, r3, #1
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	68f8      	ldr	r0, [r7, #12]
 8010b2e:	f7f1 f8db 	bl	8001ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010b32:	e002      	b.n	8010b3a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f7ff f8f5 	bl	800fd24 <HAL_UART_RxHalfCpltCallback>
}
 8010b3a:	bf00      	nop
 8010b3c:	3710      	adds	r7, #16
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b086      	sub	sp, #24
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b4e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b6a:	2b80      	cmp	r3, #128	; 0x80
 8010b6c:	d109      	bne.n	8010b82 <UART_DMAError+0x40>
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	2b21      	cmp	r3, #33	; 0x21
 8010b72:	d106      	bne.n	8010b82 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	2200      	movs	r2, #0
 8010b78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010b7c:	6978      	ldr	r0, [r7, #20]
 8010b7e:	f7ff fea1 	bl	80108c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b8c:	2b40      	cmp	r3, #64	; 0x40
 8010b8e:	d109      	bne.n	8010ba4 <UART_DMAError+0x62>
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2b22      	cmp	r3, #34	; 0x22
 8010b94:	d106      	bne.n	8010ba4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010b9e:	6978      	ldr	r0, [r7, #20]
 8010ba0:	f7ff fed1 	bl	8010946 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010baa:	f043 0210 	orr.w	r2, r3, #16
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010bb4:	6978      	ldr	r0, [r7, #20]
 8010bb6:	f7ff f8bf 	bl	800fd38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bba:	bf00      	nop
 8010bbc:	3718      	adds	r7, #24
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b084      	sub	sp, #16
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010bce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f7ff f8a9 	bl	800fd38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010be6:	bf00      	nop
 8010be8:	3710      	adds	r7, #16
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010bee:	b480      	push	{r7}
 8010bf0:	b08f      	sub	sp, #60	; 0x3c
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bfc:	2b21      	cmp	r3, #33	; 0x21
 8010bfe:	d14c      	bne.n	8010c9a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d132      	bne.n	8010c72 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c12:	6a3b      	ldr	r3, [r7, #32]
 8010c14:	e853 3f00 	ldrex	r3, [r3]
 8010c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c20:	637b      	str	r3, [r7, #52]	; 0x34
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	461a      	mov	r2, r3
 8010c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c2c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c32:	e841 2300 	strex	r3, r2, [r1]
 8010c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1e6      	bne.n	8010c0c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	e853 3f00 	ldrex	r3, [r3]
 8010c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c52:	633b      	str	r3, [r7, #48]	; 0x30
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	461a      	mov	r2, r3
 8010c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5c:	61bb      	str	r3, [r7, #24]
 8010c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c60:	6979      	ldr	r1, [r7, #20]
 8010c62:	69ba      	ldr	r2, [r7, #24]
 8010c64:	e841 2300 	strex	r3, r2, [r1]
 8010c68:	613b      	str	r3, [r7, #16]
   return(result);
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d1e6      	bne.n	8010c3e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010c70:	e013      	b.n	8010c9a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c76:	781a      	ldrb	r2, [r3, #0]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c82:	1c5a      	adds	r2, r3, #1
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	3b01      	subs	r3, #1
 8010c92:	b29a      	uxth	r2, r3
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010c9a:	bf00      	nop
 8010c9c:	373c      	adds	r7, #60	; 0x3c
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010ca6:	b480      	push	{r7}
 8010ca8:	b091      	sub	sp, #68	; 0x44
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cb4:	2b21      	cmp	r3, #33	; 0x21
 8010cb6:	d151      	bne.n	8010d5c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d132      	bne.n	8010d2a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	e853 3f00 	ldrex	r3, [r3]
 8010cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	461a      	mov	r2, r3
 8010ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8010ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cea:	e841 2300 	strex	r3, r2, [r1]
 8010cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1e6      	bne.n	8010cc4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	e853 3f00 	ldrex	r3, [r3]
 8010d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	461a      	mov	r2, r3
 8010d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d14:	61fb      	str	r3, [r7, #28]
 8010d16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d18:	69b9      	ldr	r1, [r7, #24]
 8010d1a:	69fa      	ldr	r2, [r7, #28]
 8010d1c:	e841 2300 	strex	r3, r2, [r1]
 8010d20:	617b      	str	r3, [r7, #20]
   return(result);
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d1e6      	bne.n	8010cf6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010d28:	e018      	b.n	8010d5c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	461a      	mov	r2, r3
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010d3e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d44:	1c9a      	adds	r2, r3, #2
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	3b01      	subs	r3, #1
 8010d54:	b29a      	uxth	r2, r3
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010d5c:	bf00      	nop
 8010d5e:	3744      	adds	r7, #68	; 0x44
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr

08010d68 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b091      	sub	sp, #68	; 0x44
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d76:	2b21      	cmp	r3, #33	; 0x21
 8010d78:	d160      	bne.n	8010e3c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d80:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010d82:	e057      	b.n	8010e34 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d133      	bne.n	8010df8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	3308      	adds	r3, #8
 8010d96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9a:	e853 3f00 	ldrex	r3, [r3]
 8010d9e:	623b      	str	r3, [r7, #32]
   return(result);
 8010da0:	6a3b      	ldr	r3, [r7, #32]
 8010da2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	3308      	adds	r3, #8
 8010dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010db0:	633a      	str	r2, [r7, #48]	; 0x30
 8010db2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010db4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010db8:	e841 2300 	strex	r3, r2, [r1]
 8010dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d1e5      	bne.n	8010d90 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	e853 3f00 	ldrex	r3, [r3]
 8010dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	461a      	mov	r2, r3
 8010de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de2:	61fb      	str	r3, [r7, #28]
 8010de4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de6:	69b9      	ldr	r1, [r7, #24]
 8010de8:	69fa      	ldr	r2, [r7, #28]
 8010dea:	e841 2300 	strex	r3, r2, [r1]
 8010dee:	617b      	str	r3, [r7, #20]
   return(result);
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1e6      	bne.n	8010dc4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010df6:	e021      	b.n	8010e3c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	69db      	ldr	r3, [r3, #28]
 8010dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d013      	beq.n	8010e2e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e0a:	781a      	ldrb	r2, [r3, #0]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e16:	1c5a      	adds	r2, r3, #1
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	3b01      	subs	r3, #1
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010e2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010e30:	3b01      	subs	r3, #1
 8010e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010e34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d1a4      	bne.n	8010d84 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010e3a:	e7ff      	b.n	8010e3c <UART_TxISR_8BIT_FIFOEN+0xd4>
 8010e3c:	bf00      	nop
 8010e3e:	3744      	adds	r7, #68	; 0x44
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b091      	sub	sp, #68	; 0x44
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e56:	2b21      	cmp	r3, #33	; 0x21
 8010e58:	d165      	bne.n	8010f26 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010e62:	e05c      	b.n	8010f1e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d133      	bne.n	8010ed8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	3308      	adds	r3, #8
 8010e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e78:	6a3b      	ldr	r3, [r7, #32]
 8010e7a:	e853 3f00 	ldrex	r3, [r3]
 8010e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010e86:	637b      	str	r3, [r7, #52]	; 0x34
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	3308      	adds	r3, #8
 8010e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e98:	e841 2300 	strex	r3, r2, [r1]
 8010e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1e5      	bne.n	8010e70 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	e853 3f00 	ldrex	r3, [r3]
 8010eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec2:	61bb      	str	r3, [r7, #24]
 8010ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec6:	6979      	ldr	r1, [r7, #20]
 8010ec8:	69ba      	ldr	r2, [r7, #24]
 8010eca:	e841 2300 	strex	r3, r2, [r1]
 8010ece:	613b      	str	r3, [r7, #16]
   return(result);
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1e6      	bne.n	8010ea4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010ed6:	e026      	b.n	8010f26 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	69db      	ldr	r3, [r3, #28]
 8010ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d018      	beq.n	8010f18 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010eea:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eee:	881b      	ldrh	r3, [r3, #0]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010efa:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f00:	1c9a      	adds	r2, r3, #2
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	3b01      	subs	r3, #1
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010f18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010f1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d19f      	bne.n	8010e64 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010f24:	e7ff      	b.n	8010f26 <UART_TxISR_16BIT_FIFOEN+0xde>
 8010f26:	bf00      	nop
 8010f28:	3744      	adds	r7, #68	; 0x44
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr

08010f32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b088      	sub	sp, #32
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	e853 3f00 	ldrex	r3, [r3]
 8010f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f4e:	61fb      	str	r3, [r7, #28]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	461a      	mov	r2, r3
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	61bb      	str	r3, [r7, #24]
 8010f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f5c:	6979      	ldr	r1, [r7, #20]
 8010f5e:	69ba      	ldr	r2, [r7, #24]
 8010f60:	e841 2300 	strex	r3, r2, [r1]
 8010f64:	613b      	str	r3, [r7, #16]
   return(result);
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1e6      	bne.n	8010f3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2220      	movs	r2, #32
 8010f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2200      	movs	r2, #0
 8010f78:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f7fe febe 	bl	800fcfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f80:	bf00      	nop
 8010f82:	3720      	adds	r7, #32
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b09c      	sub	sp, #112	; 0x70
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010fa0:	2b22      	cmp	r3, #34	; 0x22
 8010fa2:	f040 80c3 	bne.w	801112c <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010fb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010fb4:	b2d9      	uxtb	r1, r3
 8010fb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010fba:	b2da      	uxtb	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fc0:	400a      	ands	r2, r1
 8010fc2:	b2d2      	uxtb	r2, r2
 8010fc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fca:	1c5a      	adds	r2, r3, #1
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	3b01      	subs	r3, #1
 8010fda:	b29a      	uxth	r2, r3
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f040 80a6 	bne.w	801113c <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ff8:	e853 3f00 	ldrex	r3, [r3]
 8010ffc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011004:	66bb      	str	r3, [r7, #104]	; 0x68
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	461a      	mov	r2, r3
 801100c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801100e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011010:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011012:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011016:	e841 2300 	strex	r3, r2, [r1]
 801101a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801101c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801101e:	2b00      	cmp	r3, #0
 8011020:	d1e6      	bne.n	8010ff0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	3308      	adds	r3, #8
 8011028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102c:	e853 3f00 	ldrex	r3, [r3]
 8011030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011034:	f023 0301 	bic.w	r3, r3, #1
 8011038:	667b      	str	r3, [r7, #100]	; 0x64
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	3308      	adds	r3, #8
 8011040:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011042:	647a      	str	r2, [r7, #68]	; 0x44
 8011044:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011046:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801104a:	e841 2300 	strex	r3, r2, [r1]
 801104e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011052:	2b00      	cmp	r3, #0
 8011054:	d1e5      	bne.n	8011022 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2220      	movs	r2, #32
 801105a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2200      	movs	r2, #0
 8011068:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	4a35      	ldr	r2, [pc, #212]	; (8011144 <UART_RxISR_8BIT+0x1bc>)
 8011070:	4293      	cmp	r3, r2
 8011072:	d024      	beq.n	80110be <UART_RxISR_8BIT+0x136>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4a33      	ldr	r2, [pc, #204]	; (8011148 <UART_RxISR_8BIT+0x1c0>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d01f      	beq.n	80110be <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011088:	2b00      	cmp	r3, #0
 801108a:	d018      	beq.n	80110be <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011094:	e853 3f00 	ldrex	r3, [r3]
 8011098:	623b      	str	r3, [r7, #32]
   return(result);
 801109a:	6a3b      	ldr	r3, [r7, #32]
 801109c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80110a0:	663b      	str	r3, [r7, #96]	; 0x60
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	461a      	mov	r2, r3
 80110a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80110aa:	633b      	str	r3, [r7, #48]	; 0x30
 80110ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110b2:	e841 2300 	strex	r3, r2, [r1]
 80110b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80110b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d1e6      	bne.n	801108c <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	d12e      	bne.n	8011124 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2200      	movs	r2, #0
 80110ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	e853 3f00 	ldrex	r3, [r3]
 80110d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f023 0310 	bic.w	r3, r3, #16
 80110e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	461a      	mov	r2, r3
 80110e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110ea:	61fb      	str	r3, [r7, #28]
 80110ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ee:	69b9      	ldr	r1, [r7, #24]
 80110f0:	69fa      	ldr	r2, [r7, #28]
 80110f2:	e841 2300 	strex	r3, r2, [r1]
 80110f6:	617b      	str	r3, [r7, #20]
   return(result);
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d1e6      	bne.n	80110cc <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	69db      	ldr	r3, [r3, #28]
 8011104:	f003 0310 	and.w	r3, r3, #16
 8011108:	2b10      	cmp	r3, #16
 801110a:	d103      	bne.n	8011114 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2210      	movs	r2, #16
 8011112:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801111a:	4619      	mov	r1, r3
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f7f0 fde3 	bl	8001ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011122:	e00b      	b.n	801113c <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f7fe fdf3 	bl	800fd10 <HAL_UART_RxCpltCallback>
}
 801112a:	e007      	b.n	801113c <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	699a      	ldr	r2, [r3, #24]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f042 0208 	orr.w	r2, r2, #8
 801113a:	619a      	str	r2, [r3, #24]
}
 801113c:	bf00      	nop
 801113e:	3770      	adds	r7, #112	; 0x70
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	44002400 	.word	0x44002400
 8011148:	54002400 	.word	0x54002400

0801114c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b09c      	sub	sp, #112	; 0x70
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801115a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011164:	2b22      	cmp	r3, #34	; 0x22
 8011166:	f040 80c3 	bne.w	80112f0 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011170:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011178:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801117a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801117e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011182:	4013      	ands	r3, r2
 8011184:	b29a      	uxth	r2, r3
 8011186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011188:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801118e:	1c9a      	adds	r2, r3, #2
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801119a:	b29b      	uxth	r3, r3
 801119c:	3b01      	subs	r3, #1
 801119e:	b29a      	uxth	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f040 80a6 	bne.w	8011300 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111bc:	e853 3f00 	ldrex	r3, [r3]
 80111c0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80111c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80111c8:	667b      	str	r3, [r7, #100]	; 0x64
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	461a      	mov	r2, r3
 80111d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111d2:	657b      	str	r3, [r7, #84]	; 0x54
 80111d4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80111d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80111da:	e841 2300 	strex	r3, r2, [r1]
 80111de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80111e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1e6      	bne.n	80111b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	3308      	adds	r3, #8
 80111ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f0:	e853 3f00 	ldrex	r3, [r3]
 80111f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80111f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f8:	f023 0301 	bic.w	r3, r3, #1
 80111fc:	663b      	str	r3, [r7, #96]	; 0x60
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	3308      	adds	r3, #8
 8011204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011206:	643a      	str	r2, [r7, #64]	; 0x40
 8011208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801120a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801120c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801120e:	e841 2300 	strex	r3, r2, [r1]
 8011212:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1e5      	bne.n	80111e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2220      	movs	r2, #32
 801121e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2200      	movs	r2, #0
 8011226:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	4a35      	ldr	r2, [pc, #212]	; (8011308 <UART_RxISR_16BIT+0x1bc>)
 8011234:	4293      	cmp	r3, r2
 8011236:	d024      	beq.n	8011282 <UART_RxISR_16BIT+0x136>
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	4a33      	ldr	r2, [pc, #204]	; (801130c <UART_RxISR_16BIT+0x1c0>)
 801123e:	4293      	cmp	r3, r2
 8011240:	d01f      	beq.n	8011282 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801124c:	2b00      	cmp	r3, #0
 801124e:	d018      	beq.n	8011282 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011256:	6a3b      	ldr	r3, [r7, #32]
 8011258:	e853 3f00 	ldrex	r3, [r3]
 801125c:	61fb      	str	r3, [r7, #28]
   return(result);
 801125e:	69fb      	ldr	r3, [r7, #28]
 8011260:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	461a      	mov	r2, r3
 801126c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801126e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011270:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011276:	e841 2300 	strex	r3, r2, [r1]
 801127a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127e:	2b00      	cmp	r3, #0
 8011280:	d1e6      	bne.n	8011250 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011286:	2b01      	cmp	r3, #1
 8011288:	d12e      	bne.n	80112e8 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2200      	movs	r2, #0
 801128e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	e853 3f00 	ldrex	r3, [r3]
 801129c:	60bb      	str	r3, [r7, #8]
   return(result);
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	f023 0310 	bic.w	r3, r3, #16
 80112a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	461a      	mov	r2, r3
 80112ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112ae:	61bb      	str	r3, [r7, #24]
 80112b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112b2:	6979      	ldr	r1, [r7, #20]
 80112b4:	69ba      	ldr	r2, [r7, #24]
 80112b6:	e841 2300 	strex	r3, r2, [r1]
 80112ba:	613b      	str	r3, [r7, #16]
   return(result);
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d1e6      	bne.n	8011290 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	69db      	ldr	r3, [r3, #28]
 80112c8:	f003 0310 	and.w	r3, r3, #16
 80112cc:	2b10      	cmp	r3, #16
 80112ce:	d103      	bne.n	80112d8 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2210      	movs	r2, #16
 80112d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80112de:	4619      	mov	r1, r3
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7f0 fd01 	bl	8001ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80112e6:	e00b      	b.n	8011300 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7fe fd11 	bl	800fd10 <HAL_UART_RxCpltCallback>
}
 80112ee:	e007      	b.n	8011300 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	699a      	ldr	r2, [r3, #24]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f042 0208 	orr.w	r2, r2, #8
 80112fe:	619a      	str	r2, [r3, #24]
}
 8011300:	bf00      	nop
 8011302:	3770      	adds	r7, #112	; 0x70
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}
 8011308:	44002400 	.word	0x44002400
 801130c:	54002400 	.word	0x54002400

08011310 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b0ac      	sub	sp, #176	; 0xb0
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801131e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	69db      	ldr	r3, [r3, #28]
 8011328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	689b      	ldr	r3, [r3, #8]
 801133c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011346:	2b22      	cmp	r3, #34	; 0x22
 8011348:	f040 8187 	bne.w	801165a <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011352:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011356:	e12a      	b.n	80115ae <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801135e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011362:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011366:	b2d9      	uxtb	r1, r3
 8011368:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801136c:	b2da      	uxtb	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011372:	400a      	ands	r2, r1
 8011374:	b2d2      	uxtb	r2, r2
 8011376:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801137c:	1c5a      	adds	r2, r3, #1
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011388:	b29b      	uxth	r3, r3
 801138a:	3b01      	subs	r3, #1
 801138c:	b29a      	uxth	r2, r3
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	69db      	ldr	r3, [r3, #28]
 801139a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801139e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80113a2:	f003 0307 	and.w	r3, r3, #7
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d053      	beq.n	8011452 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80113aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80113ae:	f003 0301 	and.w	r3, r3, #1
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d011      	beq.n	80113da <UART_RxISR_8BIT_FIFOEN+0xca>
 80113b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80113ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d00b      	beq.n	80113da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2201      	movs	r2, #1
 80113c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113d0:	f043 0201 	orr.w	r2, r3, #1
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80113da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80113de:	f003 0302 	and.w	r3, r3, #2
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d011      	beq.n	801140a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80113e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80113ea:	f003 0301 	and.w	r3, r3, #1
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00b      	beq.n	801140a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	2202      	movs	r2, #2
 80113f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011400:	f043 0204 	orr.w	r2, r3, #4
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801140a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801140e:	f003 0304 	and.w	r3, r3, #4
 8011412:	2b00      	cmp	r3, #0
 8011414:	d011      	beq.n	801143a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801141a:	f003 0301 	and.w	r3, r3, #1
 801141e:	2b00      	cmp	r3, #0
 8011420:	d00b      	beq.n	801143a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2204      	movs	r2, #4
 8011428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011430:	f043 0202 	orr.w	r2, r3, #2
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011440:	2b00      	cmp	r3, #0
 8011442:	d006      	beq.n	8011452 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7fe fc77 	bl	800fd38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2200      	movs	r2, #0
 801144e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011458:	b29b      	uxth	r3, r3
 801145a:	2b00      	cmp	r3, #0
 801145c:	f040 80a7 	bne.w	80115ae <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011468:	e853 3f00 	ldrex	r3, [r3]
 801146c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801146e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	461a      	mov	r2, r3
 801147e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011484:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011486:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011488:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801148a:	e841 2300 	strex	r3, r2, [r1]
 801148e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011492:	2b00      	cmp	r3, #0
 8011494:	d1e4      	bne.n	8011460 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	3308      	adds	r3, #8
 801149c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801149e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114a0:	e853 3f00 	ldrex	r3, [r3]
 80114a4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80114a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80114ac:	f023 0301 	bic.w	r3, r3, #1
 80114b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	3308      	adds	r3, #8
 80114ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80114be:	66ba      	str	r2, [r7, #104]	; 0x68
 80114c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80114c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80114c6:	e841 2300 	strex	r3, r2, [r1]
 80114ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80114cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d1e1      	bne.n	8011496 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2220      	movs	r2, #32
 80114d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2200      	movs	r2, #0
 80114de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2200      	movs	r2, #0
 80114e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	4a62      	ldr	r2, [pc, #392]	; (8011674 <UART_RxISR_8BIT_FIFOEN+0x364>)
 80114ec:	4293      	cmp	r3, r2
 80114ee:	d026      	beq.n	801153e <UART_RxISR_8BIT_FIFOEN+0x22e>
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	4a60      	ldr	r2, [pc, #384]	; (8011678 <UART_RxISR_8BIT_FIFOEN+0x368>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d021      	beq.n	801153e <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011504:	2b00      	cmp	r3, #0
 8011506:	d01a      	beq.n	801153e <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801150e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011510:	e853 3f00 	ldrex	r3, [r3]
 8011514:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011518:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801151c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	461a      	mov	r2, r3
 8011526:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801152a:	657b      	str	r3, [r7, #84]	; 0x54
 801152c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801152e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011530:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011532:	e841 2300 	strex	r3, r2, [r1]
 8011536:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1e4      	bne.n	8011508 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011542:	2b01      	cmp	r3, #1
 8011544:	d130      	bne.n	80115a8 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2200      	movs	r2, #0
 801154a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011554:	e853 3f00 	ldrex	r3, [r3]
 8011558:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155c:	f023 0310 	bic.w	r3, r3, #16
 8011560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	461a      	mov	r2, r3
 801156a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801156e:	643b      	str	r3, [r7, #64]	; 0x40
 8011570:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011572:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011576:	e841 2300 	strex	r3, r2, [r1]
 801157a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801157c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1e4      	bne.n	801154c <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	69db      	ldr	r3, [r3, #28]
 8011588:	f003 0310 	and.w	r3, r3, #16
 801158c:	2b10      	cmp	r3, #16
 801158e:	d103      	bne.n	8011598 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	2210      	movs	r2, #16
 8011596:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801159e:	4619      	mov	r1, r3
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f7f0 fba1 	bl	8001ce8 <HAL_UARTEx_RxEventCallback>
 80115a6:	e002      	b.n	80115ae <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7fe fbb1 	bl	800fd10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80115ae:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d006      	beq.n	80115c4 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 80115b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80115ba:	f003 0320 	and.w	r3, r3, #32
 80115be:	2b00      	cmp	r3, #0
 80115c0:	f47f aeca 	bne.w	8011358 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80115ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80115ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d049      	beq.n	801166a <UART_RxISR_8BIT_FIFOEN+0x35a>
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80115dc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d242      	bcs.n	801166a <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	3308      	adds	r3, #8
 80115ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115ec:	6a3b      	ldr	r3, [r7, #32]
 80115ee:	e853 3f00 	ldrex	r3, [r3]
 80115f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80115fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	3308      	adds	r3, #8
 8011604:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011608:	62fa      	str	r2, [r7, #44]	; 0x2c
 801160a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801160c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801160e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011610:	e841 2300 	strex	r3, r2, [r1]
 8011614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011618:	2b00      	cmp	r3, #0
 801161a:	d1e3      	bne.n	80115e4 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	4a17      	ldr	r2, [pc, #92]	; (801167c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8011620:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	e853 3f00 	ldrex	r3, [r3]
 801162e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	f043 0320 	orr.w	r3, r3, #32
 8011636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	461a      	mov	r2, r3
 8011640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011644:	61bb      	str	r3, [r7, #24]
 8011646:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011648:	6979      	ldr	r1, [r7, #20]
 801164a:	69ba      	ldr	r2, [r7, #24]
 801164c:	e841 2300 	strex	r3, r2, [r1]
 8011650:	613b      	str	r3, [r7, #16]
   return(result);
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d1e4      	bne.n	8011622 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011658:	e007      	b.n	801166a <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	699a      	ldr	r2, [r3, #24]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f042 0208 	orr.w	r2, r2, #8
 8011668:	619a      	str	r2, [r3, #24]
}
 801166a:	bf00      	nop
 801166c:	37b0      	adds	r7, #176	; 0xb0
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	44002400 	.word	0x44002400
 8011678:	54002400 	.word	0x54002400
 801167c:	08010f89 	.word	0x08010f89

08011680 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b0ae      	sub	sp, #184	; 0xb8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801168e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	69db      	ldr	r3, [r3, #28]
 8011698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	689b      	ldr	r3, [r3, #8]
 80116ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116b6:	2b22      	cmp	r3, #34	; 0x22
 80116b8:	f040 818b 	bne.w	80119d2 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80116c2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80116c6:	e12e      	b.n	8011926 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80116da:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80116de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80116e2:	4013      	ands	r3, r2
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80116ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116f0:	1c9a      	adds	r2, r3, #2
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	3b01      	subs	r3, #1
 8011700:	b29a      	uxth	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	69db      	ldr	r3, [r3, #28]
 801170e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011716:	f003 0307 	and.w	r3, r3, #7
 801171a:	2b00      	cmp	r3, #0
 801171c:	d053      	beq.n	80117c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801171e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011722:	f003 0301 	and.w	r3, r3, #1
 8011726:	2b00      	cmp	r3, #0
 8011728:	d011      	beq.n	801174e <UART_RxISR_16BIT_FIFOEN+0xce>
 801172a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00b      	beq.n	801174e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	2201      	movs	r2, #1
 801173c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011744:	f043 0201 	orr.w	r2, r3, #1
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801174e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011752:	f003 0302 	and.w	r3, r3, #2
 8011756:	2b00      	cmp	r3, #0
 8011758:	d011      	beq.n	801177e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801175a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801175e:	f003 0301 	and.w	r3, r3, #1
 8011762:	2b00      	cmp	r3, #0
 8011764:	d00b      	beq.n	801177e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	2202      	movs	r2, #2
 801176c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011774:	f043 0204 	orr.w	r2, r3, #4
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801177e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011782:	f003 0304 	and.w	r3, r3, #4
 8011786:	2b00      	cmp	r3, #0
 8011788:	d011      	beq.n	80117ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 801178a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801178e:	f003 0301 	and.w	r3, r3, #1
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00b      	beq.n	80117ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	2204      	movs	r2, #4
 801179c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117a4:	f043 0202 	orr.w	r2, r3, #2
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d006      	beq.n	80117c6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f7fe fabd 	bl	800fd38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f040 80a9 	bne.w	8011926 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80117dc:	e853 3f00 	ldrex	r3, [r3]
 80117e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80117e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80117e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80117e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	461a      	mov	r2, r3
 80117f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80117f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80117fa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80117fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011802:	e841 2300 	strex	r3, r2, [r1]
 8011806:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801180a:	2b00      	cmp	r3, #0
 801180c:	d1e2      	bne.n	80117d4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	3308      	adds	r3, #8
 8011814:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011818:	e853 3f00 	ldrex	r3, [r3]
 801181c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801181e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011824:	f023 0301 	bic.w	r3, r3, #1
 8011828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	3308      	adds	r3, #8
 8011832:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011838:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801183c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801183e:	e841 2300 	strex	r3, r2, [r1]
 8011842:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1e1      	bne.n	801180e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2220      	movs	r2, #32
 801184e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2200      	movs	r2, #0
 8011856:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	4a62      	ldr	r2, [pc, #392]	; (80119ec <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d026      	beq.n	80118b6 <UART_RxISR_16BIT_FIFOEN+0x236>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a60      	ldr	r2, [pc, #384]	; (80119f0 <UART_RxISR_16BIT_FIFOEN+0x370>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d021      	beq.n	80118b6 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801187c:	2b00      	cmp	r3, #0
 801187e:	d01a      	beq.n	80118b6 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011888:	e853 3f00 	ldrex	r3, [r3]
 801188c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801188e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011890:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011894:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	461a      	mov	r2, r3
 801189e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80118a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80118a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80118a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80118aa:	e841 2300 	strex	r3, r2, [r1]
 80118ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80118b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1e4      	bne.n	8011880 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d130      	bne.n	8011920 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2200      	movs	r2, #0
 80118c2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118cc:	e853 3f00 	ldrex	r3, [r3]
 80118d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80118d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d4:	f023 0310 	bic.w	r3, r3, #16
 80118d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	461a      	mov	r2, r3
 80118e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80118e6:	647b      	str	r3, [r7, #68]	; 0x44
 80118e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118ee:	e841 2300 	strex	r3, r2, [r1]
 80118f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80118f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d1e4      	bne.n	80118c4 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	69db      	ldr	r3, [r3, #28]
 8011900:	f003 0310 	and.w	r3, r3, #16
 8011904:	2b10      	cmp	r3, #16
 8011906:	d103      	bne.n	8011910 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	2210      	movs	r2, #16
 801190e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011916:	4619      	mov	r1, r3
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7f0 f9e5 	bl	8001ce8 <HAL_UARTEx_RxEventCallback>
 801191e:	e002      	b.n	8011926 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7fe f9f5 	bl	800fd10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011926:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801192a:	2b00      	cmp	r3, #0
 801192c:	d006      	beq.n	801193c <UART_RxISR_16BIT_FIFOEN+0x2bc>
 801192e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011932:	f003 0320 	and.w	r3, r3, #32
 8011936:	2b00      	cmp	r3, #0
 8011938:	f47f aec6 	bne.w	80116c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011942:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011946:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801194a:	2b00      	cmp	r3, #0
 801194c:	d049      	beq.n	80119e2 <UART_RxISR_16BIT_FIFOEN+0x362>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011954:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8011958:	429a      	cmp	r2, r3
 801195a:	d242      	bcs.n	80119e2 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3308      	adds	r3, #8
 8011962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011966:	e853 3f00 	ldrex	r3, [r3]
 801196a:	623b      	str	r3, [r7, #32]
   return(result);
 801196c:	6a3b      	ldr	r3, [r7, #32]
 801196e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	3308      	adds	r3, #8
 801197c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011980:	633a      	str	r2, [r7, #48]	; 0x30
 8011982:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011984:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011988:	e841 2300 	strex	r3, r2, [r1]
 801198c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011990:	2b00      	cmp	r3, #0
 8011992:	d1e3      	bne.n	801195c <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	4a17      	ldr	r2, [pc, #92]	; (80119f4 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8011998:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	e853 3f00 	ldrex	r3, [r3]
 80119a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	f043 0320 	orr.w	r3, r3, #32
 80119ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	461a      	mov	r2, r3
 80119b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80119bc:	61fb      	str	r3, [r7, #28]
 80119be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119c0:	69b9      	ldr	r1, [r7, #24]
 80119c2:	69fa      	ldr	r2, [r7, #28]
 80119c4:	e841 2300 	strex	r3, r2, [r1]
 80119c8:	617b      	str	r3, [r7, #20]
   return(result);
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d1e4      	bne.n	801199a <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80119d0:	e007      	b.n	80119e2 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	699a      	ldr	r2, [r3, #24]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	f042 0208 	orr.w	r2, r2, #8
 80119e0:	619a      	str	r2, [r3, #24]
}
 80119e2:	bf00      	nop
 80119e4:	37b8      	adds	r7, #184	; 0xb8
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	44002400 	.word	0x44002400
 80119f0:	54002400 	.word	0x54002400
 80119f4:	0801114d 	.word	0x0801114d

080119f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011a00:	bf00      	nop
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011a14:	bf00      	nop
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011a28:	bf00      	nop
 8011a2a:	370c      	adds	r7, #12
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr

08011a34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d101      	bne.n	8011a4a <HAL_UARTEx_DisableFifoMode+0x16>
 8011a46:	2302      	movs	r3, #2
 8011a48:	e027      	b.n	8011a9a <HAL_UARTEx_DisableFifoMode+0x66>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2224      	movs	r2, #36	; 0x24
 8011a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f022 0201 	bic.w	r2, r2, #1
 8011a70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011a78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2220      	movs	r2, #32
 8011a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2200      	movs	r2, #0
 8011a94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a98:	2300      	movs	r3, #0
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3714      	adds	r7, #20
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr

08011aa6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011aa6:	b580      	push	{r7, lr}
 8011aa8:	b084      	sub	sp, #16
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
 8011aae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d101      	bne.n	8011abe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011aba:	2302      	movs	r3, #2
 8011abc:	e02d      	b.n	8011b1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2201      	movs	r2, #1
 8011ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2224      	movs	r2, #36	; 0x24
 8011aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f022 0201 	bic.w	r2, r2, #1
 8011ae4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	689b      	ldr	r3, [r3, #8]
 8011aec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	683a      	ldr	r2, [r7, #0]
 8011af6:	430a      	orrs	r2, r1
 8011af8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f000 f8f4 	bl	8011ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	68fa      	ldr	r2, [r7, #12]
 8011b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2220      	movs	r2, #32
 8011b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2200      	movs	r2, #0
 8011b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b18:	2300      	movs	r3, #0
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3710      	adds	r7, #16
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}

08011b22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b22:	b580      	push	{r7, lr}
 8011b24:	b084      	sub	sp, #16
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
 8011b2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	d101      	bne.n	8011b3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011b36:	2302      	movs	r3, #2
 8011b38:	e02d      	b.n	8011b96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2224      	movs	r2, #36	; 0x24
 8011b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	f022 0201 	bic.w	r2, r2, #1
 8011b60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	689b      	ldr	r3, [r3, #8]
 8011b68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	683a      	ldr	r2, [r7, #0]
 8011b72:	430a      	orrs	r2, r1
 8011b74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 f8b6 	bl	8011ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	68fa      	ldr	r2, [r7, #12]
 8011b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2220      	movs	r2, #32
 8011b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b94:	2300      	movs	r3, #0
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3710      	adds	r7, #16
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b08c      	sub	sp, #48	; 0x30
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	60f8      	str	r0, [r7, #12]
 8011ba6:	60b9      	str	r1, [r7, #8]
 8011ba8:	4613      	mov	r3, r2
 8011baa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8011bac:	2300      	movs	r3, #0
 8011bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bb8:	2b20      	cmp	r3, #32
 8011bba:	d13b      	bne.n	8011c34 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d002      	beq.n	8011bc8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8011bc2:	88fb      	ldrh	r3, [r7, #6]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d101      	bne.n	8011bcc <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8011bc8:	2301      	movs	r3, #1
 8011bca:	e034      	b.n	8011c36 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2201      	movs	r2, #1
 8011bd0:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8011bd8:	88fb      	ldrh	r3, [r7, #6]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	68b9      	ldr	r1, [r7, #8]
 8011bde:	68f8      	ldr	r0, [r7, #12]
 8011be0:	f7fe fc56 	bl	8010490 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d11d      	bne.n	8011c28 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	2210      	movs	r2, #16
 8011bf2:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	e853 3f00 	ldrex	r3, [r3]
 8011c00:	617b      	str	r3, [r7, #20]
   return(result);
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	f043 0310 	orr.w	r3, r3, #16
 8011c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	461a      	mov	r2, r3
 8011c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c12:	627b      	str	r3, [r7, #36]	; 0x24
 8011c14:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c16:	6a39      	ldr	r1, [r7, #32]
 8011c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c1a:	e841 2300 	strex	r3, r2, [r1]
 8011c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c20:	69fb      	ldr	r3, [r7, #28]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d1e6      	bne.n	8011bf4 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8011c26:	e002      	b.n	8011c2e <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8011c28:	2301      	movs	r3, #1
 8011c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8011c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c32:	e000      	b.n	8011c36 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8011c34:	2302      	movs	r3, #2
  }
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3730      	adds	r7, #48	; 0x30
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b08c      	sub	sp, #48	; 0x30
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	60f8      	str	r0, [r7, #12]
 8011c46:	60b9      	str	r1, [r7, #8]
 8011c48:	4613      	mov	r3, r2
 8011c4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c52:	2b20      	cmp	r3, #32
 8011c54:	d142      	bne.n	8011cdc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d002      	beq.n	8011c62 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8011c5c:	88fb      	ldrh	r3, [r7, #6]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d101      	bne.n	8011c66 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8011c62:	2301      	movs	r3, #1
 8011c64:	e03b      	b.n	8011cde <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8011c72:	88fb      	ldrh	r3, [r7, #6]
 8011c74:	461a      	mov	r2, r3
 8011c76:	68b9      	ldr	r1, [r7, #8]
 8011c78:	68f8      	ldr	r0, [r7, #12]
 8011c7a:	f7fe fd2b 	bl	80106d4 <UART_Start_Receive_DMA>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8011c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d124      	bne.n	8011cd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d11d      	bne.n	8011cd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2210      	movs	r2, #16
 8011c9a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca2:	69bb      	ldr	r3, [r7, #24]
 8011ca4:	e853 3f00 	ldrex	r3, [r3]
 8011ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	f043 0310 	orr.w	r3, r3, #16
 8011cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cba:	627b      	str	r3, [r7, #36]	; 0x24
 8011cbc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cbe:	6a39      	ldr	r1, [r7, #32]
 8011cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cc2:	e841 2300 	strex	r3, r2, [r1]
 8011cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8011cc8:	69fb      	ldr	r3, [r7, #28]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1e6      	bne.n	8011c9c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8011cce:	e002      	b.n	8011cd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8011cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cda:	e000      	b.n	8011cde <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011cdc:	2302      	movs	r3, #2
  }
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3730      	adds	r7, #48	; 0x30
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
	...

08011ce8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b085      	sub	sp, #20
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d108      	bne.n	8011d0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2201      	movs	r2, #1
 8011d04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011d08:	e031      	b.n	8011d6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011d0a:	2308      	movs	r3, #8
 8011d0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011d0e:	2308      	movs	r3, #8
 8011d10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	689b      	ldr	r3, [r3, #8]
 8011d18:	0e5b      	lsrs	r3, r3, #25
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	f003 0307 	and.w	r3, r3, #7
 8011d20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	689b      	ldr	r3, [r3, #8]
 8011d28:	0f5b      	lsrs	r3, r3, #29
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	f003 0307 	and.w	r3, r3, #7
 8011d30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d32:	7bbb      	ldrb	r3, [r7, #14]
 8011d34:	7b3a      	ldrb	r2, [r7, #12]
 8011d36:	4911      	ldr	r1, [pc, #68]	; (8011d7c <UARTEx_SetNbDataToProcess+0x94>)
 8011d38:	5c8a      	ldrb	r2, [r1, r2]
 8011d3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011d3e:	7b3a      	ldrb	r2, [r7, #12]
 8011d40:	490f      	ldr	r1, [pc, #60]	; (8011d80 <UARTEx_SetNbDataToProcess+0x98>)
 8011d42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d50:	7bfb      	ldrb	r3, [r7, #15]
 8011d52:	7b7a      	ldrb	r2, [r7, #13]
 8011d54:	4909      	ldr	r1, [pc, #36]	; (8011d7c <UARTEx_SetNbDataToProcess+0x94>)
 8011d56:	5c8a      	ldrb	r2, [r1, r2]
 8011d58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011d5c:	7b7a      	ldrb	r2, [r7, #13]
 8011d5e:	4908      	ldr	r1, [pc, #32]	; (8011d80 <UARTEx_SetNbDataToProcess+0x98>)
 8011d60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011d6e:	bf00      	nop
 8011d70:	3714      	adds	r7, #20
 8011d72:	46bd      	mov	sp, r7
 8011d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d78:	4770      	bx	lr
 8011d7a:	bf00      	nop
 8011d7c:	08017630 	.word	0x08017630
 8011d80:	08017638 	.word	0x08017638

08011d84 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d101      	bne.n	8011d96 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8011d92:	2301      	movs	r3, #1
 8011d94:	e03c      	b.n	8011e10 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011d9c:	b2db      	uxtb	r3, r3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d106      	bne.n	8011db0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2200      	movs	r2, #0
 8011da6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f7f3 fe88 	bl	8005ac0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2202      	movs	r2, #2
 8011db4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f022 0201 	bic.w	r2, r2, #1
 8011dc6:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f000 f85b 	bl	8011e84 <USART_SetConfig>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d101      	bne.n	8011dd8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	e01b      	b.n	8011e10 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	685a      	ldr	r2, [r3, #4]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011de6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	689a      	ldr	r2, [r3, #8]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011df6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	681a      	ldr	r2, [r3, #0]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f042 0201 	orr.w	r2, r2, #1
 8011e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f000 fd4d 	bl	80128a8 <USART_CheckIdleState>
 8011e0e:	4603      	mov	r3, r0
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3708      	adds	r7, #8
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	603b      	str	r3, [r7, #0]
 8011e24:	4613      	mov	r3, r2
 8011e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8011e28:	e018      	b.n	8011e5c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e30:	d014      	beq.n	8011e5c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e32:	f7f4 f9c1 	bl	80061b8 <HAL_GetTick>
 8011e36:	4602      	mov	r2, r0
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	1ad3      	subs	r3, r2, r3
 8011e3c:	69ba      	ldr	r2, [r7, #24]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d302      	bcc.n	8011e48 <USART_WaitOnFlagUntilTimeout+0x30>
 8011e42:	69bb      	ldr	r3, [r7, #24]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d109      	bne.n	8011e5c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8011e58:	2303      	movs	r3, #3
 8011e5a:	e00f      	b.n	8011e7c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	69da      	ldr	r2, [r3, #28]
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	4013      	ands	r3, r2
 8011e66:	68ba      	ldr	r2, [r7, #8]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	bf0c      	ite	eq
 8011e6c:	2301      	moveq	r3, #1
 8011e6e:	2300      	movne	r3, #0
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	461a      	mov	r2, r3
 8011e74:	79fb      	ldrb	r3, [r7, #7]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d0d7      	beq.n	8011e2a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b08e      	sub	sp, #56	; 0x38
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8011e92:	2300      	movs	r3, #0
 8011e94:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	689a      	ldr	r2, [r3, #8]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	691b      	ldr	r3, [r3, #16]
 8011e9e:	431a      	orrs	r2, r3
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	695b      	ldr	r3, [r3, #20]
 8011ea4:	4313      	orrs	r3, r2
 8011ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	4bb6      	ldr	r3, [pc, #728]	; (801218c <USART_SetConfig+0x308>)
 8011eb4:	4013      	ands	r3, r2
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	6812      	ldr	r2, [r2, #0]
 8011eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ebc:	430b      	orrs	r3, r1
 8011ebe:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8011ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6a1b      	ldr	r3, [r3, #32]
 8011eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	699a      	ldr	r2, [r3, #24]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	69db      	ldr	r3, [r3, #28]
 8011ed8:	4313      	orrs	r3, r2
 8011eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011edc:	4313      	orrs	r3, r2
 8011ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011ef4:	f023 0309 	bic.w	r3, r3, #9
 8011ef8:	687a      	ldr	r2, [r7, #4]
 8011efa:	6812      	ldr	r2, [r2, #0]
 8011efc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011efe:	430b      	orrs	r3, r1
 8011f00:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f08:	f023 010f 	bic.w	r1, r3, #15
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	430a      	orrs	r2, r1
 8011f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	4a9c      	ldr	r2, [pc, #624]	; (8012190 <USART_SetConfig+0x30c>)
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	d132      	bne.n	8011f88 <USART_SetConfig+0x104>
 8011f22:	4b9c      	ldr	r3, [pc, #624]	; (8012194 <USART_SetConfig+0x310>)
 8011f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011f28:	f003 0307 	and.w	r3, r3, #7
 8011f2c:	2b05      	cmp	r3, #5
 8011f2e:	d827      	bhi.n	8011f80 <USART_SetConfig+0xfc>
 8011f30:	a201      	add	r2, pc, #4	; (adr r2, 8011f38 <USART_SetConfig+0xb4>)
 8011f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f36:	bf00      	nop
 8011f38:	08011f51 	.word	0x08011f51
 8011f3c:	08011f71 	.word	0x08011f71
 8011f40:	08011f79 	.word	0x08011f79
 8011f44:	08011f61 	.word	0x08011f61
 8011f48:	08011f59 	.word	0x08011f59
 8011f4c:	08011f69 	.word	0x08011f69
 8011f50:	2301      	movs	r3, #1
 8011f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f56:	e1a4      	b.n	80122a2 <USART_SetConfig+0x41e>
 8011f58:	2304      	movs	r3, #4
 8011f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f5e:	e1a0      	b.n	80122a2 <USART_SetConfig+0x41e>
 8011f60:	2302      	movs	r3, #2
 8011f62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f66:	e19c      	b.n	80122a2 <USART_SetConfig+0x41e>
 8011f68:	2308      	movs	r3, #8
 8011f6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f6e:	e198      	b.n	80122a2 <USART_SetConfig+0x41e>
 8011f70:	2310      	movs	r3, #16
 8011f72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f76:	e194      	b.n	80122a2 <USART_SetConfig+0x41e>
 8011f78:	2320      	movs	r3, #32
 8011f7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f7e:	e190      	b.n	80122a2 <USART_SetConfig+0x41e>
 8011f80:	2340      	movs	r3, #64	; 0x40
 8011f82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f86:	e18c      	b.n	80122a2 <USART_SetConfig+0x41e>
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	4a82      	ldr	r2, [pc, #520]	; (8012198 <USART_SetConfig+0x314>)
 8011f8e:	4293      	cmp	r3, r2
 8011f90:	d178      	bne.n	8012084 <USART_SetConfig+0x200>
 8011f92:	4b80      	ldr	r3, [pc, #512]	; (8012194 <USART_SetConfig+0x310>)
 8011f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011f98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011f9c:	2b28      	cmp	r3, #40	; 0x28
 8011f9e:	d86d      	bhi.n	801207c <USART_SetConfig+0x1f8>
 8011fa0:	a201      	add	r2, pc, #4	; (adr r2, 8011fa8 <USART_SetConfig+0x124>)
 8011fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fa6:	bf00      	nop
 8011fa8:	0801204d 	.word	0x0801204d
 8011fac:	0801207d 	.word	0x0801207d
 8011fb0:	0801207d 	.word	0x0801207d
 8011fb4:	0801207d 	.word	0x0801207d
 8011fb8:	0801207d 	.word	0x0801207d
 8011fbc:	0801207d 	.word	0x0801207d
 8011fc0:	0801207d 	.word	0x0801207d
 8011fc4:	0801207d 	.word	0x0801207d
 8011fc8:	0801206d 	.word	0x0801206d
 8011fcc:	0801207d 	.word	0x0801207d
 8011fd0:	0801207d 	.word	0x0801207d
 8011fd4:	0801207d 	.word	0x0801207d
 8011fd8:	0801207d 	.word	0x0801207d
 8011fdc:	0801207d 	.word	0x0801207d
 8011fe0:	0801207d 	.word	0x0801207d
 8011fe4:	0801207d 	.word	0x0801207d
 8011fe8:	08012075 	.word	0x08012075
 8011fec:	0801207d 	.word	0x0801207d
 8011ff0:	0801207d 	.word	0x0801207d
 8011ff4:	0801207d 	.word	0x0801207d
 8011ff8:	0801207d 	.word	0x0801207d
 8011ffc:	0801207d 	.word	0x0801207d
 8012000:	0801207d 	.word	0x0801207d
 8012004:	0801207d 	.word	0x0801207d
 8012008:	0801205d 	.word	0x0801205d
 801200c:	0801207d 	.word	0x0801207d
 8012010:	0801207d 	.word	0x0801207d
 8012014:	0801207d 	.word	0x0801207d
 8012018:	0801207d 	.word	0x0801207d
 801201c:	0801207d 	.word	0x0801207d
 8012020:	0801207d 	.word	0x0801207d
 8012024:	0801207d 	.word	0x0801207d
 8012028:	08012055 	.word	0x08012055
 801202c:	0801207d 	.word	0x0801207d
 8012030:	0801207d 	.word	0x0801207d
 8012034:	0801207d 	.word	0x0801207d
 8012038:	0801207d 	.word	0x0801207d
 801203c:	0801207d 	.word	0x0801207d
 8012040:	0801207d 	.word	0x0801207d
 8012044:	0801207d 	.word	0x0801207d
 8012048:	08012065 	.word	0x08012065
 801204c:	2300      	movs	r3, #0
 801204e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012052:	e126      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012054:	2304      	movs	r3, #4
 8012056:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801205a:	e122      	b.n	80122a2 <USART_SetConfig+0x41e>
 801205c:	2302      	movs	r3, #2
 801205e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012062:	e11e      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012064:	2308      	movs	r3, #8
 8012066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801206a:	e11a      	b.n	80122a2 <USART_SetConfig+0x41e>
 801206c:	2310      	movs	r3, #16
 801206e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012072:	e116      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012074:	2320      	movs	r3, #32
 8012076:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801207a:	e112      	b.n	80122a2 <USART_SetConfig+0x41e>
 801207c:	2340      	movs	r3, #64	; 0x40
 801207e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012082:	e10e      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4a44      	ldr	r2, [pc, #272]	; (801219c <USART_SetConfig+0x318>)
 801208a:	4293      	cmp	r3, r2
 801208c:	d139      	bne.n	8012102 <USART_SetConfig+0x27e>
 801208e:	4b41      	ldr	r3, [pc, #260]	; (8012194 <USART_SetConfig+0x310>)
 8012090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012094:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8012098:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801209c:	d021      	beq.n	80120e2 <USART_SetConfig+0x25e>
 801209e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80120a2:	d82a      	bhi.n	80120fa <USART_SetConfig+0x276>
 80120a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120a8:	d013      	beq.n	80120d2 <USART_SetConfig+0x24e>
 80120aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120ae:	d824      	bhi.n	80120fa <USART_SetConfig+0x276>
 80120b0:	2bc0      	cmp	r3, #192	; 0xc0
 80120b2:	d012      	beq.n	80120da <USART_SetConfig+0x256>
 80120b4:	2bc0      	cmp	r3, #192	; 0xc0
 80120b6:	d820      	bhi.n	80120fa <USART_SetConfig+0x276>
 80120b8:	2b80      	cmp	r3, #128	; 0x80
 80120ba:	d01a      	beq.n	80120f2 <USART_SetConfig+0x26e>
 80120bc:	2b80      	cmp	r3, #128	; 0x80
 80120be:	d81c      	bhi.n	80120fa <USART_SetConfig+0x276>
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d002      	beq.n	80120ca <USART_SetConfig+0x246>
 80120c4:	2b40      	cmp	r3, #64	; 0x40
 80120c6:	d010      	beq.n	80120ea <USART_SetConfig+0x266>
 80120c8:	e017      	b.n	80120fa <USART_SetConfig+0x276>
 80120ca:	2300      	movs	r3, #0
 80120cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120d0:	e0e7      	b.n	80122a2 <USART_SetConfig+0x41e>
 80120d2:	2304      	movs	r3, #4
 80120d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120d8:	e0e3      	b.n	80122a2 <USART_SetConfig+0x41e>
 80120da:	2302      	movs	r3, #2
 80120dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120e0:	e0df      	b.n	80122a2 <USART_SetConfig+0x41e>
 80120e2:	2308      	movs	r3, #8
 80120e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120e8:	e0db      	b.n	80122a2 <USART_SetConfig+0x41e>
 80120ea:	2310      	movs	r3, #16
 80120ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120f0:	e0d7      	b.n	80122a2 <USART_SetConfig+0x41e>
 80120f2:	2320      	movs	r3, #32
 80120f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120f8:	e0d3      	b.n	80122a2 <USART_SetConfig+0x41e>
 80120fa:	2340      	movs	r3, #64	; 0x40
 80120fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012100:	e0cf      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4a26      	ldr	r2, [pc, #152]	; (80121a0 <USART_SetConfig+0x31c>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d14b      	bne.n	80121a4 <USART_SetConfig+0x320>
 801210c:	4b21      	ldr	r3, [pc, #132]	; (8012194 <USART_SetConfig+0x310>)
 801210e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012112:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8012116:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 801211a:	d026      	beq.n	801216a <USART_SetConfig+0x2e6>
 801211c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8012120:	d82f      	bhi.n	8012182 <USART_SetConfig+0x2fe>
 8012122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012126:	d018      	beq.n	801215a <USART_SetConfig+0x2d6>
 8012128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801212c:	d829      	bhi.n	8012182 <USART_SetConfig+0x2fe>
 801212e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8012132:	d016      	beq.n	8012162 <USART_SetConfig+0x2de>
 8012134:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8012138:	d823      	bhi.n	8012182 <USART_SetConfig+0x2fe>
 801213a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801213e:	d01c      	beq.n	801217a <USART_SetConfig+0x2f6>
 8012140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012144:	d81d      	bhi.n	8012182 <USART_SetConfig+0x2fe>
 8012146:	2b00      	cmp	r3, #0
 8012148:	d003      	beq.n	8012152 <USART_SetConfig+0x2ce>
 801214a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801214e:	d010      	beq.n	8012172 <USART_SetConfig+0x2ee>
 8012150:	e017      	b.n	8012182 <USART_SetConfig+0x2fe>
 8012152:	2300      	movs	r3, #0
 8012154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012158:	e0a3      	b.n	80122a2 <USART_SetConfig+0x41e>
 801215a:	2304      	movs	r3, #4
 801215c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012160:	e09f      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012162:	2302      	movs	r3, #2
 8012164:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012168:	e09b      	b.n	80122a2 <USART_SetConfig+0x41e>
 801216a:	2308      	movs	r3, #8
 801216c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012170:	e097      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012172:	2310      	movs	r3, #16
 8012174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012178:	e093      	b.n	80122a2 <USART_SetConfig+0x41e>
 801217a:	2320      	movs	r3, #32
 801217c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012180:	e08f      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012182:	2340      	movs	r3, #64	; 0x40
 8012184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012188:	e08b      	b.n	80122a2 <USART_SetConfig+0x41e>
 801218a:	bf00      	nop
 801218c:	cfff69f3 	.word	0xcfff69f3
 8012190:	40013800 	.word	0x40013800
 8012194:	44020c00 	.word	0x44020c00
 8012198:	40004400 	.word	0x40004400
 801219c:	40004800 	.word	0x40004800
 80121a0:	40006400 	.word	0x40006400
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	4a91      	ldr	r2, [pc, #580]	; (80123f0 <USART_SetConfig+0x56c>)
 80121aa:	4293      	cmp	r3, r2
 80121ac:	d13e      	bne.n	801222c <USART_SetConfig+0x3a8>
 80121ae:	4b91      	ldr	r3, [pc, #580]	; (80123f4 <USART_SetConfig+0x570>)
 80121b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80121b4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80121b8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80121bc:	d026      	beq.n	801220c <USART_SetConfig+0x388>
 80121be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80121c2:	d82f      	bhi.n	8012224 <USART_SetConfig+0x3a0>
 80121c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80121c8:	d018      	beq.n	80121fc <USART_SetConfig+0x378>
 80121ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80121ce:	d829      	bhi.n	8012224 <USART_SetConfig+0x3a0>
 80121d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80121d4:	d016      	beq.n	8012204 <USART_SetConfig+0x380>
 80121d6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80121da:	d823      	bhi.n	8012224 <USART_SetConfig+0x3a0>
 80121dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80121e0:	d01c      	beq.n	801221c <USART_SetConfig+0x398>
 80121e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80121e6:	d81d      	bhi.n	8012224 <USART_SetConfig+0x3a0>
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d003      	beq.n	80121f4 <USART_SetConfig+0x370>
 80121ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80121f0:	d010      	beq.n	8012214 <USART_SetConfig+0x390>
 80121f2:	e017      	b.n	8012224 <USART_SetConfig+0x3a0>
 80121f4:	2300      	movs	r3, #0
 80121f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80121fa:	e052      	b.n	80122a2 <USART_SetConfig+0x41e>
 80121fc:	2304      	movs	r3, #4
 80121fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012202:	e04e      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012204:	2302      	movs	r3, #2
 8012206:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801220a:	e04a      	b.n	80122a2 <USART_SetConfig+0x41e>
 801220c:	2308      	movs	r3, #8
 801220e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012212:	e046      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012214:	2310      	movs	r3, #16
 8012216:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801221a:	e042      	b.n	80122a2 <USART_SetConfig+0x41e>
 801221c:	2320      	movs	r3, #32
 801221e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012222:	e03e      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012224:	2340      	movs	r3, #64	; 0x40
 8012226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801222a:	e03a      	b.n	80122a2 <USART_SetConfig+0x41e>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	4a71      	ldr	r2, [pc, #452]	; (80123f8 <USART_SetConfig+0x574>)
 8012232:	4293      	cmp	r3, r2
 8012234:	d132      	bne.n	801229c <USART_SetConfig+0x418>
 8012236:	4b6f      	ldr	r3, [pc, #444]	; (80123f4 <USART_SetConfig+0x570>)
 8012238:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801223c:	f003 0307 	and.w	r3, r3, #7
 8012240:	2b05      	cmp	r3, #5
 8012242:	d827      	bhi.n	8012294 <USART_SetConfig+0x410>
 8012244:	a201      	add	r2, pc, #4	; (adr r2, 801224c <USART_SetConfig+0x3c8>)
 8012246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801224a:	bf00      	nop
 801224c:	08012265 	.word	0x08012265
 8012250:	08012285 	.word	0x08012285
 8012254:	0801228d 	.word	0x0801228d
 8012258:	08012275 	.word	0x08012275
 801225c:	0801226d 	.word	0x0801226d
 8012260:	0801227d 	.word	0x0801227d
 8012264:	2300      	movs	r3, #0
 8012266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801226a:	e01a      	b.n	80122a2 <USART_SetConfig+0x41e>
 801226c:	2304      	movs	r3, #4
 801226e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012272:	e016      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012274:	2302      	movs	r3, #2
 8012276:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801227a:	e012      	b.n	80122a2 <USART_SetConfig+0x41e>
 801227c:	2308      	movs	r3, #8
 801227e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012282:	e00e      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012284:	2310      	movs	r3, #16
 8012286:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801228a:	e00a      	b.n	80122a2 <USART_SetConfig+0x41e>
 801228c:	2320      	movs	r3, #32
 801228e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012292:	e006      	b.n	80122a2 <USART_SetConfig+0x41e>
 8012294:	2340      	movs	r3, #64	; 0x40
 8012296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801229a:	e002      	b.n	80122a2 <USART_SetConfig+0x41e>
 801229c:	2340      	movs	r3, #64	; 0x40
 801229e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 80122a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122a6:	2b20      	cmp	r3, #32
 80122a8:	f200 82c6 	bhi.w	8012838 <USART_SetConfig+0x9b4>
 80122ac:	a201      	add	r2, pc, #4	; (adr r2, 80122b4 <USART_SetConfig+0x430>)
 80122ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122b2:	bf00      	nop
 80122b4:	08012339 	.word	0x08012339
 80122b8:	080123fd 	.word	0x080123fd
 80122bc:	08012627 	.word	0x08012627
 80122c0:	08012839 	.word	0x08012839
 80122c4:	080126d7 	.word	0x080126d7
 80122c8:	08012839 	.word	0x08012839
 80122cc:	08012839 	.word	0x08012839
 80122d0:	08012839 	.word	0x08012839
 80122d4:	08012787 	.word	0x08012787
 80122d8:	08012839 	.word	0x08012839
 80122dc:	08012839 	.word	0x08012839
 80122e0:	08012839 	.word	0x08012839
 80122e4:	08012839 	.word	0x08012839
 80122e8:	08012839 	.word	0x08012839
 80122ec:	08012839 	.word	0x08012839
 80122f0:	08012839 	.word	0x08012839
 80122f4:	080124b3 	.word	0x080124b3
 80122f8:	08012839 	.word	0x08012839
 80122fc:	08012839 	.word	0x08012839
 8012300:	08012839 	.word	0x08012839
 8012304:	08012839 	.word	0x08012839
 8012308:	08012839 	.word	0x08012839
 801230c:	08012839 	.word	0x08012839
 8012310:	08012839 	.word	0x08012839
 8012314:	08012839 	.word	0x08012839
 8012318:	08012839 	.word	0x08012839
 801231c:	08012839 	.word	0x08012839
 8012320:	08012839 	.word	0x08012839
 8012324:	08012839 	.word	0x08012839
 8012328:	08012839 	.word	0x08012839
 801232c:	08012839 	.word	0x08012839
 8012330:	08012839 	.word	0x08012839
 8012334:	0801256d 	.word	0x0801256d
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8012338:	f7f6 fda6 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 801233c:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012342:	2b00      	cmp	r3, #0
 8012344:	d044      	beq.n	80123d0 <USART_SetConfig+0x54c>
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801234a:	2b01      	cmp	r3, #1
 801234c:	d03e      	beq.n	80123cc <USART_SetConfig+0x548>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012352:	2b02      	cmp	r3, #2
 8012354:	d038      	beq.n	80123c8 <USART_SetConfig+0x544>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235a:	2b03      	cmp	r3, #3
 801235c:	d032      	beq.n	80123c4 <USART_SetConfig+0x540>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012362:	2b04      	cmp	r3, #4
 8012364:	d02c      	beq.n	80123c0 <USART_SetConfig+0x53c>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801236a:	2b05      	cmp	r3, #5
 801236c:	d026      	beq.n	80123bc <USART_SetConfig+0x538>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012372:	2b06      	cmp	r3, #6
 8012374:	d020      	beq.n	80123b8 <USART_SetConfig+0x534>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801237a:	2b07      	cmp	r3, #7
 801237c:	d01a      	beq.n	80123b4 <USART_SetConfig+0x530>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012382:	2b08      	cmp	r3, #8
 8012384:	d014      	beq.n	80123b0 <USART_SetConfig+0x52c>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801238a:	2b09      	cmp	r3, #9
 801238c:	d00e      	beq.n	80123ac <USART_SetConfig+0x528>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012392:	2b0a      	cmp	r3, #10
 8012394:	d008      	beq.n	80123a8 <USART_SetConfig+0x524>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239a:	2b0b      	cmp	r3, #11
 801239c:	d102      	bne.n	80123a4 <USART_SetConfig+0x520>
 801239e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123a2:	e016      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123a4:	2301      	movs	r3, #1
 80123a6:	e014      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123a8:	2380      	movs	r3, #128	; 0x80
 80123aa:	e012      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123ac:	2340      	movs	r3, #64	; 0x40
 80123ae:	e010      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123b0:	2320      	movs	r3, #32
 80123b2:	e00e      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123b4:	2310      	movs	r3, #16
 80123b6:	e00c      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123b8:	230c      	movs	r3, #12
 80123ba:	e00a      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123bc:	230a      	movs	r3, #10
 80123be:	e008      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123c0:	2308      	movs	r3, #8
 80123c2:	e006      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123c4:	2306      	movs	r3, #6
 80123c6:	e004      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123c8:	2304      	movs	r3, #4
 80123ca:	e002      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123cc:	2302      	movs	r3, #2
 80123ce:	e000      	b.n	80123d2 <USART_SetConfig+0x54e>
 80123d0:	2301      	movs	r3, #1
 80123d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80123d8:	005a      	lsls	r2, r3, #1
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	085b      	lsrs	r3, r3, #1
 80123e0:	441a      	add	r2, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80123ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80123ec:	e228      	b.n	8012840 <USART_SetConfig+0x9bc>
 80123ee:	bf00      	nop
 80123f0:	40006800 	.word	0x40006800
 80123f4:	44020c00 	.word	0x44020c00
 80123f8:	40006c00 	.word	0x40006c00
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80123fc:	f7f6 fd5a 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 8012400:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012406:	2b00      	cmp	r3, #0
 8012408:	d044      	beq.n	8012494 <USART_SetConfig+0x610>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801240e:	2b01      	cmp	r3, #1
 8012410:	d03e      	beq.n	8012490 <USART_SetConfig+0x60c>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012416:	2b02      	cmp	r3, #2
 8012418:	d038      	beq.n	801248c <USART_SetConfig+0x608>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801241e:	2b03      	cmp	r3, #3
 8012420:	d032      	beq.n	8012488 <USART_SetConfig+0x604>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012426:	2b04      	cmp	r3, #4
 8012428:	d02c      	beq.n	8012484 <USART_SetConfig+0x600>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801242e:	2b05      	cmp	r3, #5
 8012430:	d026      	beq.n	8012480 <USART_SetConfig+0x5fc>
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012436:	2b06      	cmp	r3, #6
 8012438:	d020      	beq.n	801247c <USART_SetConfig+0x5f8>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801243e:	2b07      	cmp	r3, #7
 8012440:	d01a      	beq.n	8012478 <USART_SetConfig+0x5f4>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012446:	2b08      	cmp	r3, #8
 8012448:	d014      	beq.n	8012474 <USART_SetConfig+0x5f0>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244e:	2b09      	cmp	r3, #9
 8012450:	d00e      	beq.n	8012470 <USART_SetConfig+0x5ec>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012456:	2b0a      	cmp	r3, #10
 8012458:	d008      	beq.n	801246c <USART_SetConfig+0x5e8>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801245e:	2b0b      	cmp	r3, #11
 8012460:	d102      	bne.n	8012468 <USART_SetConfig+0x5e4>
 8012462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012466:	e016      	b.n	8012496 <USART_SetConfig+0x612>
 8012468:	2301      	movs	r3, #1
 801246a:	e014      	b.n	8012496 <USART_SetConfig+0x612>
 801246c:	2380      	movs	r3, #128	; 0x80
 801246e:	e012      	b.n	8012496 <USART_SetConfig+0x612>
 8012470:	2340      	movs	r3, #64	; 0x40
 8012472:	e010      	b.n	8012496 <USART_SetConfig+0x612>
 8012474:	2320      	movs	r3, #32
 8012476:	e00e      	b.n	8012496 <USART_SetConfig+0x612>
 8012478:	2310      	movs	r3, #16
 801247a:	e00c      	b.n	8012496 <USART_SetConfig+0x612>
 801247c:	230c      	movs	r3, #12
 801247e:	e00a      	b.n	8012496 <USART_SetConfig+0x612>
 8012480:	230a      	movs	r3, #10
 8012482:	e008      	b.n	8012496 <USART_SetConfig+0x612>
 8012484:	2308      	movs	r3, #8
 8012486:	e006      	b.n	8012496 <USART_SetConfig+0x612>
 8012488:	2306      	movs	r3, #6
 801248a:	e004      	b.n	8012496 <USART_SetConfig+0x612>
 801248c:	2304      	movs	r3, #4
 801248e:	e002      	b.n	8012496 <USART_SetConfig+0x612>
 8012490:	2302      	movs	r3, #2
 8012492:	e000      	b.n	8012496 <USART_SetConfig+0x612>
 8012494:	2301      	movs	r3, #1
 8012496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012498:	fbb2 f3f3 	udiv	r3, r2, r3
 801249c:	005a      	lsls	r2, r3, #1
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	085b      	lsrs	r3, r3, #1
 80124a4:	441a      	add	r2, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	685b      	ldr	r3, [r3, #4]
 80124aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80124ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80124b0:	e1c6      	b.n	8012840 <USART_SetConfig+0x9bc>
    case USART_CLOCKSOURCE_PLL2Q:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80124b2:	f107 0318 	add.w	r3, r7, #24
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7f8 fe1c 	bl	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 80124bc:	69fa      	ldr	r2, [r7, #28]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d044      	beq.n	8012550 <USART_SetConfig+0x6cc>
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ca:	2b01      	cmp	r3, #1
 80124cc:	d03e      	beq.n	801254c <USART_SetConfig+0x6c8>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d2:	2b02      	cmp	r3, #2
 80124d4:	d038      	beq.n	8012548 <USART_SetConfig+0x6c4>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124da:	2b03      	cmp	r3, #3
 80124dc:	d032      	beq.n	8012544 <USART_SetConfig+0x6c0>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e2:	2b04      	cmp	r3, #4
 80124e4:	d02c      	beq.n	8012540 <USART_SetConfig+0x6bc>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ea:	2b05      	cmp	r3, #5
 80124ec:	d026      	beq.n	801253c <USART_SetConfig+0x6b8>
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f2:	2b06      	cmp	r3, #6
 80124f4:	d020      	beq.n	8012538 <USART_SetConfig+0x6b4>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124fa:	2b07      	cmp	r3, #7
 80124fc:	d01a      	beq.n	8012534 <USART_SetConfig+0x6b0>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012502:	2b08      	cmp	r3, #8
 8012504:	d014      	beq.n	8012530 <USART_SetConfig+0x6ac>
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801250a:	2b09      	cmp	r3, #9
 801250c:	d00e      	beq.n	801252c <USART_SetConfig+0x6a8>
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012512:	2b0a      	cmp	r3, #10
 8012514:	d008      	beq.n	8012528 <USART_SetConfig+0x6a4>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801251a:	2b0b      	cmp	r3, #11
 801251c:	d102      	bne.n	8012524 <USART_SetConfig+0x6a0>
 801251e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012522:	e016      	b.n	8012552 <USART_SetConfig+0x6ce>
 8012524:	2301      	movs	r3, #1
 8012526:	e014      	b.n	8012552 <USART_SetConfig+0x6ce>
 8012528:	2380      	movs	r3, #128	; 0x80
 801252a:	e012      	b.n	8012552 <USART_SetConfig+0x6ce>
 801252c:	2340      	movs	r3, #64	; 0x40
 801252e:	e010      	b.n	8012552 <USART_SetConfig+0x6ce>
 8012530:	2320      	movs	r3, #32
 8012532:	e00e      	b.n	8012552 <USART_SetConfig+0x6ce>
 8012534:	2310      	movs	r3, #16
 8012536:	e00c      	b.n	8012552 <USART_SetConfig+0x6ce>
 8012538:	230c      	movs	r3, #12
 801253a:	e00a      	b.n	8012552 <USART_SetConfig+0x6ce>
 801253c:	230a      	movs	r3, #10
 801253e:	e008      	b.n	8012552 <USART_SetConfig+0x6ce>
 8012540:	2308      	movs	r3, #8
 8012542:	e006      	b.n	8012552 <USART_SetConfig+0x6ce>
 8012544:	2306      	movs	r3, #6
 8012546:	e004      	b.n	8012552 <USART_SetConfig+0x6ce>
 8012548:	2304      	movs	r3, #4
 801254a:	e002      	b.n	8012552 <USART_SetConfig+0x6ce>
 801254c:	2302      	movs	r3, #2
 801254e:	e000      	b.n	8012552 <USART_SetConfig+0x6ce>
 8012550:	2301      	movs	r3, #1
 8012552:	fbb2 f3f3 	udiv	r3, r2, r3
 8012556:	005a      	lsls	r2, r3, #1
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	085b      	lsrs	r3, r3, #1
 801255e:	441a      	add	r2, r3
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	fbb2 f3f3 	udiv	r3, r2, r3
 8012568:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 801256a:	e169      	b.n	8012840 <USART_SetConfig+0x9bc>
#if defined(RCC_CR_PLL3ON)
    case USART_CLOCKSOURCE_PLL3Q:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801256c:	f107 030c 	add.w	r3, r7, #12
 8012570:	4618      	mov	r0, r3
 8012572:	f7f8 ff29 	bl	800b3c8 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8012576:	693a      	ldr	r2, [r7, #16]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801257c:	2b00      	cmp	r3, #0
 801257e:	d044      	beq.n	801260a <USART_SetConfig+0x786>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012584:	2b01      	cmp	r3, #1
 8012586:	d03e      	beq.n	8012606 <USART_SetConfig+0x782>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258c:	2b02      	cmp	r3, #2
 801258e:	d038      	beq.n	8012602 <USART_SetConfig+0x77e>
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012594:	2b03      	cmp	r3, #3
 8012596:	d032      	beq.n	80125fe <USART_SetConfig+0x77a>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801259c:	2b04      	cmp	r3, #4
 801259e:	d02c      	beq.n	80125fa <USART_SetConfig+0x776>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125a4:	2b05      	cmp	r3, #5
 80125a6:	d026      	beq.n	80125f6 <USART_SetConfig+0x772>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ac:	2b06      	cmp	r3, #6
 80125ae:	d020      	beq.n	80125f2 <USART_SetConfig+0x76e>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b4:	2b07      	cmp	r3, #7
 80125b6:	d01a      	beq.n	80125ee <USART_SetConfig+0x76a>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125bc:	2b08      	cmp	r3, #8
 80125be:	d014      	beq.n	80125ea <USART_SetConfig+0x766>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125c4:	2b09      	cmp	r3, #9
 80125c6:	d00e      	beq.n	80125e6 <USART_SetConfig+0x762>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125cc:	2b0a      	cmp	r3, #10
 80125ce:	d008      	beq.n	80125e2 <USART_SetConfig+0x75e>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125d4:	2b0b      	cmp	r3, #11
 80125d6:	d102      	bne.n	80125de <USART_SetConfig+0x75a>
 80125d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125dc:	e016      	b.n	801260c <USART_SetConfig+0x788>
 80125de:	2301      	movs	r3, #1
 80125e0:	e014      	b.n	801260c <USART_SetConfig+0x788>
 80125e2:	2380      	movs	r3, #128	; 0x80
 80125e4:	e012      	b.n	801260c <USART_SetConfig+0x788>
 80125e6:	2340      	movs	r3, #64	; 0x40
 80125e8:	e010      	b.n	801260c <USART_SetConfig+0x788>
 80125ea:	2320      	movs	r3, #32
 80125ec:	e00e      	b.n	801260c <USART_SetConfig+0x788>
 80125ee:	2310      	movs	r3, #16
 80125f0:	e00c      	b.n	801260c <USART_SetConfig+0x788>
 80125f2:	230c      	movs	r3, #12
 80125f4:	e00a      	b.n	801260c <USART_SetConfig+0x788>
 80125f6:	230a      	movs	r3, #10
 80125f8:	e008      	b.n	801260c <USART_SetConfig+0x788>
 80125fa:	2308      	movs	r3, #8
 80125fc:	e006      	b.n	801260c <USART_SetConfig+0x788>
 80125fe:	2306      	movs	r3, #6
 8012600:	e004      	b.n	801260c <USART_SetConfig+0x788>
 8012602:	2304      	movs	r3, #4
 8012604:	e002      	b.n	801260c <USART_SetConfig+0x788>
 8012606:	2302      	movs	r3, #2
 8012608:	e000      	b.n	801260c <USART_SetConfig+0x788>
 801260a:	2301      	movs	r3, #1
 801260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012610:	005a      	lsls	r2, r3, #1
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	085b      	lsrs	r3, r3, #1
 8012618:	441a      	add	r2, r3
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012622:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8012624:	e10c      	b.n	8012840 <USART_SetConfig+0x9bc>
#endif /* RCC_CR_PLL3ON */
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801262a:	2b00      	cmp	r3, #0
 801262c:	d044      	beq.n	80126b8 <USART_SetConfig+0x834>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012632:	2b01      	cmp	r3, #1
 8012634:	d03e      	beq.n	80126b4 <USART_SetConfig+0x830>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801263a:	2b02      	cmp	r3, #2
 801263c:	d038      	beq.n	80126b0 <USART_SetConfig+0x82c>
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012642:	2b03      	cmp	r3, #3
 8012644:	d032      	beq.n	80126ac <USART_SetConfig+0x828>
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801264a:	2b04      	cmp	r3, #4
 801264c:	d02c      	beq.n	80126a8 <USART_SetConfig+0x824>
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012652:	2b05      	cmp	r3, #5
 8012654:	d026      	beq.n	80126a4 <USART_SetConfig+0x820>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265a:	2b06      	cmp	r3, #6
 801265c:	d020      	beq.n	80126a0 <USART_SetConfig+0x81c>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012662:	2b07      	cmp	r3, #7
 8012664:	d01a      	beq.n	801269c <USART_SetConfig+0x818>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801266a:	2b08      	cmp	r3, #8
 801266c:	d014      	beq.n	8012698 <USART_SetConfig+0x814>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012672:	2b09      	cmp	r3, #9
 8012674:	d00e      	beq.n	8012694 <USART_SetConfig+0x810>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801267a:	2b0a      	cmp	r3, #10
 801267c:	d008      	beq.n	8012690 <USART_SetConfig+0x80c>
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012682:	2b0b      	cmp	r3, #11
 8012684:	d102      	bne.n	801268c <USART_SetConfig+0x808>
 8012686:	f44f 7380 	mov.w	r3, #256	; 0x100
 801268a:	e016      	b.n	80126ba <USART_SetConfig+0x836>
 801268c:	2301      	movs	r3, #1
 801268e:	e014      	b.n	80126ba <USART_SetConfig+0x836>
 8012690:	2380      	movs	r3, #128	; 0x80
 8012692:	e012      	b.n	80126ba <USART_SetConfig+0x836>
 8012694:	2340      	movs	r3, #64	; 0x40
 8012696:	e010      	b.n	80126ba <USART_SetConfig+0x836>
 8012698:	2320      	movs	r3, #32
 801269a:	e00e      	b.n	80126ba <USART_SetConfig+0x836>
 801269c:	2310      	movs	r3, #16
 801269e:	e00c      	b.n	80126ba <USART_SetConfig+0x836>
 80126a0:	230c      	movs	r3, #12
 80126a2:	e00a      	b.n	80126ba <USART_SetConfig+0x836>
 80126a4:	230a      	movs	r3, #10
 80126a6:	e008      	b.n	80126ba <USART_SetConfig+0x836>
 80126a8:	2308      	movs	r3, #8
 80126aa:	e006      	b.n	80126ba <USART_SetConfig+0x836>
 80126ac:	2306      	movs	r3, #6
 80126ae:	e004      	b.n	80126ba <USART_SetConfig+0x836>
 80126b0:	2304      	movs	r3, #4
 80126b2:	e002      	b.n	80126ba <USART_SetConfig+0x836>
 80126b4:	2302      	movs	r3, #2
 80126b6:	e000      	b.n	80126ba <USART_SetConfig+0x836>
 80126b8:	2301      	movs	r3, #1
 80126ba:	4a79      	ldr	r2, [pc, #484]	; (80128a0 <USART_SetConfig+0xa1c>)
 80126bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80126c0:	005a      	lsls	r2, r3, #1
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	085b      	lsrs	r3, r3, #1
 80126c8:	441a      	add	r2, r3
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80126d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80126d4:	e0b4      	b.n	8012840 <USART_SetConfig+0x9bc>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d044      	beq.n	8012768 <USART_SetConfig+0x8e4>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e2:	2b01      	cmp	r3, #1
 80126e4:	d03e      	beq.n	8012764 <USART_SetConfig+0x8e0>
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ea:	2b02      	cmp	r3, #2
 80126ec:	d038      	beq.n	8012760 <USART_SetConfig+0x8dc>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126f2:	2b03      	cmp	r3, #3
 80126f4:	d032      	beq.n	801275c <USART_SetConfig+0x8d8>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126fa:	2b04      	cmp	r3, #4
 80126fc:	d02c      	beq.n	8012758 <USART_SetConfig+0x8d4>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012702:	2b05      	cmp	r3, #5
 8012704:	d026      	beq.n	8012754 <USART_SetConfig+0x8d0>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801270a:	2b06      	cmp	r3, #6
 801270c:	d020      	beq.n	8012750 <USART_SetConfig+0x8cc>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012712:	2b07      	cmp	r3, #7
 8012714:	d01a      	beq.n	801274c <USART_SetConfig+0x8c8>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271a:	2b08      	cmp	r3, #8
 801271c:	d014      	beq.n	8012748 <USART_SetConfig+0x8c4>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012722:	2b09      	cmp	r3, #9
 8012724:	d00e      	beq.n	8012744 <USART_SetConfig+0x8c0>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801272a:	2b0a      	cmp	r3, #10
 801272c:	d008      	beq.n	8012740 <USART_SetConfig+0x8bc>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012732:	2b0b      	cmp	r3, #11
 8012734:	d102      	bne.n	801273c <USART_SetConfig+0x8b8>
 8012736:	f44f 7380 	mov.w	r3, #256	; 0x100
 801273a:	e016      	b.n	801276a <USART_SetConfig+0x8e6>
 801273c:	2301      	movs	r3, #1
 801273e:	e014      	b.n	801276a <USART_SetConfig+0x8e6>
 8012740:	2380      	movs	r3, #128	; 0x80
 8012742:	e012      	b.n	801276a <USART_SetConfig+0x8e6>
 8012744:	2340      	movs	r3, #64	; 0x40
 8012746:	e010      	b.n	801276a <USART_SetConfig+0x8e6>
 8012748:	2320      	movs	r3, #32
 801274a:	e00e      	b.n	801276a <USART_SetConfig+0x8e6>
 801274c:	2310      	movs	r3, #16
 801274e:	e00c      	b.n	801276a <USART_SetConfig+0x8e6>
 8012750:	230c      	movs	r3, #12
 8012752:	e00a      	b.n	801276a <USART_SetConfig+0x8e6>
 8012754:	230a      	movs	r3, #10
 8012756:	e008      	b.n	801276a <USART_SetConfig+0x8e6>
 8012758:	2308      	movs	r3, #8
 801275a:	e006      	b.n	801276a <USART_SetConfig+0x8e6>
 801275c:	2306      	movs	r3, #6
 801275e:	e004      	b.n	801276a <USART_SetConfig+0x8e6>
 8012760:	2304      	movs	r3, #4
 8012762:	e002      	b.n	801276a <USART_SetConfig+0x8e6>
 8012764:	2302      	movs	r3, #2
 8012766:	e000      	b.n	801276a <USART_SetConfig+0x8e6>
 8012768:	2301      	movs	r3, #1
 801276a:	4a4e      	ldr	r2, [pc, #312]	; (80128a4 <USART_SetConfig+0xa20>)
 801276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012770:	005a      	lsls	r2, r3, #1
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	685b      	ldr	r3, [r3, #4]
 8012776:	085b      	lsrs	r3, r3, #1
 8012778:	441a      	add	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	685b      	ldr	r3, [r3, #4]
 801277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012782:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8012784:	e05c      	b.n	8012840 <USART_SetConfig+0x9bc>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801278a:	2b00      	cmp	r3, #0
 801278c:	d044      	beq.n	8012818 <USART_SetConfig+0x994>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012792:	2b01      	cmp	r3, #1
 8012794:	d03e      	beq.n	8012814 <USART_SetConfig+0x990>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801279a:	2b02      	cmp	r3, #2
 801279c:	d038      	beq.n	8012810 <USART_SetConfig+0x98c>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127a2:	2b03      	cmp	r3, #3
 80127a4:	d032      	beq.n	801280c <USART_SetConfig+0x988>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127aa:	2b04      	cmp	r3, #4
 80127ac:	d02c      	beq.n	8012808 <USART_SetConfig+0x984>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b2:	2b05      	cmp	r3, #5
 80127b4:	d026      	beq.n	8012804 <USART_SetConfig+0x980>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ba:	2b06      	cmp	r3, #6
 80127bc:	d020      	beq.n	8012800 <USART_SetConfig+0x97c>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127c2:	2b07      	cmp	r3, #7
 80127c4:	d01a      	beq.n	80127fc <USART_SetConfig+0x978>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ca:	2b08      	cmp	r3, #8
 80127cc:	d014      	beq.n	80127f8 <USART_SetConfig+0x974>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d2:	2b09      	cmp	r3, #9
 80127d4:	d00e      	beq.n	80127f4 <USART_SetConfig+0x970>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127da:	2b0a      	cmp	r3, #10
 80127dc:	d008      	beq.n	80127f0 <USART_SetConfig+0x96c>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e2:	2b0b      	cmp	r3, #11
 80127e4:	d102      	bne.n	80127ec <USART_SetConfig+0x968>
 80127e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127ea:	e016      	b.n	801281a <USART_SetConfig+0x996>
 80127ec:	2301      	movs	r3, #1
 80127ee:	e014      	b.n	801281a <USART_SetConfig+0x996>
 80127f0:	2380      	movs	r3, #128	; 0x80
 80127f2:	e012      	b.n	801281a <USART_SetConfig+0x996>
 80127f4:	2340      	movs	r3, #64	; 0x40
 80127f6:	e010      	b.n	801281a <USART_SetConfig+0x996>
 80127f8:	2320      	movs	r3, #32
 80127fa:	e00e      	b.n	801281a <USART_SetConfig+0x996>
 80127fc:	2310      	movs	r3, #16
 80127fe:	e00c      	b.n	801281a <USART_SetConfig+0x996>
 8012800:	230c      	movs	r3, #12
 8012802:	e00a      	b.n	801281a <USART_SetConfig+0x996>
 8012804:	230a      	movs	r3, #10
 8012806:	e008      	b.n	801281a <USART_SetConfig+0x996>
 8012808:	2308      	movs	r3, #8
 801280a:	e006      	b.n	801281a <USART_SetConfig+0x996>
 801280c:	2306      	movs	r3, #6
 801280e:	e004      	b.n	801281a <USART_SetConfig+0x996>
 8012810:	2304      	movs	r3, #4
 8012812:	e002      	b.n	801281a <USART_SetConfig+0x996>
 8012814:	2302      	movs	r3, #2
 8012816:	e000      	b.n	801281a <USART_SetConfig+0x996>
 8012818:	2301      	movs	r3, #1
 801281a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012822:	005a      	lsls	r2, r3, #1
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	085b      	lsrs	r3, r3, #1
 801282a:	441a      	add	r2, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	fbb2 f3f3 	udiv	r3, r2, r3
 8012834:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8012836:	e003      	b.n	8012840 <USART_SetConfig+0x9bc>
    default:
      ret = HAL_ERROR;
 8012838:	2301      	movs	r3, #1
 801283a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 801283e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8012840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012842:	2b0f      	cmp	r3, #15
 8012844:	d916      	bls.n	8012874 <USART_SetConfig+0x9f0>
 8012846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801284c:	d212      	bcs.n	8012874 <USART_SetConfig+0x9f0>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012850:	b29b      	uxth	r3, r3
 8012852:	f023 030f 	bic.w	r3, r3, #15
 8012856:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285a:	085b      	lsrs	r3, r3, #1
 801285c:	b29b      	uxth	r3, r3
 801285e:	f003 0307 	and.w	r3, r3, #7
 8012862:	b29a      	uxth	r2, r3
 8012864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012866:	4313      	orrs	r3, r2
 8012868:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012870:	60da      	str	r2, [r3, #12]
 8012872:	e002      	b.n	801287a <USART_SetConfig+0x9f6>
  }
  else
  {
    ret = HAL_ERROR;
 8012874:	2301      	movs	r3, #1
 8012876:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2201      	movs	r2, #1
 801287e:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2201      	movs	r2, #1
 8012884:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2200      	movs	r2, #0
 801288a:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2200      	movs	r2, #0
 8012890:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8012892:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8012896:	4618      	mov	r0, r3
 8012898:	3738      	adds	r7, #56	; 0x38
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	03d09000 	.word	0x03d09000
 80128a4:	003d0900 	.word	0x003d0900

080128a8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b086      	sub	sp, #24
 80128ac:	af02      	add	r7, sp, #8
 80128ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2200      	movs	r2, #0
 80128b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80128b6:	f7f3 fc7f 	bl	80061b8 <HAL_GetTick>
 80128ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f003 0308 	and.w	r3, r3, #8
 80128c6:	2b08      	cmp	r3, #8
 80128c8:	d10e      	bne.n	80128e8 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80128ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2200      	movs	r2, #0
 80128d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f7ff fa9d 	bl	8011e18 <USART_WaitOnFlagUntilTimeout>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d001      	beq.n	80128e8 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80128e4:	2303      	movs	r3, #3
 80128e6:	e01e      	b.n	8012926 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f003 0304 	and.w	r3, r3, #4
 80128f2:	2b04      	cmp	r3, #4
 80128f4:	d10e      	bne.n	8012914 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80128f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80128fa:	9300      	str	r3, [sp, #0]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	2200      	movs	r2, #0
 8012900:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f7ff fa87 	bl	8011e18 <USART_WaitOnFlagUntilTimeout>
 801290a:	4603      	mov	r3, r0
 801290c:	2b00      	cmp	r3, #0
 801290e:	d001      	beq.n	8012914 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012910:	2303      	movs	r3, #3
 8012912:	e008      	b.n	8012926 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2201      	movs	r2, #1
 8012918:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8012924:	2300      	movs	r3, #0
}
 8012926:	4618      	mov	r0, r3
 8012928:	3710      	adds	r7, #16
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}

0801292e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 801292e:	b480      	push	{r7}
 8012930:	b085      	sub	sp, #20
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801293c:	2b01      	cmp	r3, #1
 801293e:	d101      	bne.n	8012944 <HAL_USARTEx_DisableFifoMode+0x16>
 8012940:	2302      	movs	r3, #2
 8012942:	e027      	b.n	8012994 <HAL_USARTEx_DisableFifoMode+0x66>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2201      	movs	r2, #1
 8012948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2202      	movs	r2, #2
 8012950:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f022 0201 	bic.w	r2, r2, #1
 801296a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012972:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2200      	movs	r2, #0
 8012978:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	68fa      	ldr	r2, [r7, #12]
 8012980:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2201      	movs	r2, #1
 8012986:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2200      	movs	r2, #0
 801298e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8012992:	2300      	movs	r3, #0
}
 8012994:	4618      	mov	r0, r3
 8012996:	3714      	adds	r7, #20
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr

080129a0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d101      	bne.n	80129b8 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80129b4:	2302      	movs	r3, #2
 80129b6:	e02d      	b.n	8012a14 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2201      	movs	r2, #1
 80129bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2202      	movs	r2, #2
 80129c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f022 0201 	bic.w	r2, r2, #1
 80129de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	689b      	ldr	r3, [r3, #8]
 80129e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	683a      	ldr	r2, [r7, #0]
 80129f0:	430a      	orrs	r2, r1
 80129f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 f84f 	bl	8012a98 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2201      	movs	r2, #1
 8012a06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8012a12:	2300      	movs	r3, #0
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3710      	adds	r7, #16
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012a2c:	2b01      	cmp	r3, #1
 8012a2e:	d101      	bne.n	8012a34 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8012a30:	2302      	movs	r3, #2
 8012a32:	e02d      	b.n	8012a90 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2201      	movs	r2, #1
 8012a38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2202      	movs	r2, #2
 8012a40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	681a      	ldr	r2, [r3, #0]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f022 0201 	bic.w	r2, r2, #1
 8012a5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	689b      	ldr	r3, [r3, #8]
 8012a62:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	683a      	ldr	r2, [r7, #0]
 8012a6c:	430a      	orrs	r2, r1
 8012a6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f000 f811 	bl	8012a98 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	68fa      	ldr	r2, [r7, #12]
 8012a7c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2201      	movs	r2, #1
 8012a82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3710      	adds	r7, #16
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8012a98:	b480      	push	{r7}
 8012a9a:	b085      	sub	sp, #20
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d106      	bne.n	8012ab6 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2201      	movs	r2, #1
 8012aac:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2201      	movs	r2, #1
 8012ab2:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ab4:	e02f      	b.n	8012b16 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012ab6:	2308      	movs	r3, #8
 8012ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012aba:	2308      	movs	r3, #8
 8012abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8012ac4:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8012ac6:	b2db      	uxtb	r3, r3
 8012ac8:	f003 0307 	and.w	r3, r3, #7
 8012acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8012ad4:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8012ad6:	b2db      	uxtb	r3, r3
 8012ad8:	f003 0307 	and.w	r3, r3, #7
 8012adc:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012ade:	7bbb      	ldrb	r3, [r7, #14]
 8012ae0:	7b3a      	ldrb	r2, [r7, #12]
 8012ae2:	4910      	ldr	r1, [pc, #64]	; (8012b24 <USARTEx_SetNbDataToProcess+0x8c>)
 8012ae4:	5c8a      	ldrb	r2, [r1, r2]
 8012ae6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8012aea:	7b3a      	ldrb	r2, [r7, #12]
 8012aec:	490e      	ldr	r1, [pc, #56]	; (8012b28 <USARTEx_SetNbDataToProcess+0x90>)
 8012aee:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8012af4:	b29a      	uxth	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012afa:	7bfb      	ldrb	r3, [r7, #15]
 8012afc:	7b7a      	ldrb	r2, [r7, #13]
 8012afe:	4909      	ldr	r1, [pc, #36]	; (8012b24 <USARTEx_SetNbDataToProcess+0x8c>)
 8012b00:	5c8a      	ldrb	r2, [r1, r2]
 8012b02:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8012b06:	7b7a      	ldrb	r2, [r7, #13]
 8012b08:	4907      	ldr	r1, [pc, #28]	; (8012b28 <USARTEx_SetNbDataToProcess+0x90>)
 8012b0a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b10:	b29a      	uxth	r2, r3
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8012b16:	bf00      	nop
 8012b18:	3714      	adds	r7, #20
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop
 8012b24:	08017640 	.word	0x08017640
 8012b28:	08017648 	.word	0x08017648

08012b2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b085      	sub	sp, #20
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012b34:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012b38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	43db      	mvns	r3, r3
 8012b42:	401a      	ands	r2, r3
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3714      	adds	r7, #20
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr

08012b56 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8012b56:	b480      	push	{r7}
 8012b58:	b083      	sub	sp, #12
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	6078      	str	r0, [r7, #4]
 8012b5e:	460b      	mov	r3, r1
 8012b60:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8012b62:	78fb      	ldrb	r3, [r7, #3]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d106      	bne.n	8012b76 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	641a      	str	r2, [r3, #64]	; 0x40
 8012b74:	e00b      	b.n	8012b8e <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8012b76:	78fb      	ldrb	r3, [r7, #3]
 8012b78:	2b01      	cmp	r3, #1
 8012b7a:	d106      	bne.n	8012b8a <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	641a      	str	r2, [r3, #64]	; 0x40
 8012b88:	e001      	b.n	8012b8e <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e000      	b.n	8012b90 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8012b8e:	2300      	movs	r3, #0
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	370c      	adds	r7, #12
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8012b9c:	b084      	sub	sp, #16
 8012b9e:	b580      	push	{r7, lr}
 8012ba0:	b084      	sub	sp, #16
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
 8012ba6:	f107 001c 	add.w	r0, r7, #28
 8012baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bb8:	f023 0201 	bic.w	r2, r3, #1
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8012bc0:	2100      	movs	r1, #0
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f7ff ffc7 	bl	8012b56 <USB_SetCurrentMode>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8012bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3710      	adds	r7, #16
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012bde:	b004      	add	sp, #16
 8012be0:	4770      	bx	lr

08012be2 <powl>:
 8012be2:	f000 b801 	b.w	8012be8 <pow>
	...

08012be8 <pow>:
 8012be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bea:	ec55 4b11 	vmov	r4, r5, d1
 8012bee:	ed2d 8b02 	vpush	{d8}
 8012bf2:	eeb0 8a40 	vmov.f32	s16, s0
 8012bf6:	eef0 8a60 	vmov.f32	s17, s1
 8012bfa:	f000 fcc1 	bl	8013580 <__ieee754_pow>
 8012bfe:	4622      	mov	r2, r4
 8012c00:	462b      	mov	r3, r5
 8012c02:	4620      	mov	r0, r4
 8012c04:	4629      	mov	r1, r5
 8012c06:	ec57 6b10 	vmov	r6, r7, d0
 8012c0a:	f7ed ff9f 	bl	8000b4c <__aeabi_dcmpun>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	d13b      	bne.n	8012c8a <pow+0xa2>
 8012c12:	2200      	movs	r2, #0
 8012c14:	2300      	movs	r3, #0
 8012c16:	ec51 0b18 	vmov	r0, r1, d8
 8012c1a:	f7ed ff65 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c1e:	b1b8      	cbz	r0, 8012c50 <pow+0x68>
 8012c20:	2200      	movs	r2, #0
 8012c22:	2300      	movs	r3, #0
 8012c24:	4620      	mov	r0, r4
 8012c26:	4629      	mov	r1, r5
 8012c28:	f7ed ff5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	d146      	bne.n	8012cbe <pow+0xd6>
 8012c30:	ec45 4b10 	vmov	d0, r4, r5
 8012c34:	f000 f900 	bl	8012e38 <finite>
 8012c38:	b338      	cbz	r0, 8012c8a <pow+0xa2>
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	4620      	mov	r0, r4
 8012c40:	4629      	mov	r1, r5
 8012c42:	f7ed ff5b 	bl	8000afc <__aeabi_dcmplt>
 8012c46:	b300      	cbz	r0, 8012c8a <pow+0xa2>
 8012c48:	f002 fcf6 	bl	8015638 <__errno>
 8012c4c:	2322      	movs	r3, #34	; 0x22
 8012c4e:	e01b      	b.n	8012c88 <pow+0xa0>
 8012c50:	ec47 6b10 	vmov	d0, r6, r7
 8012c54:	f000 f8f0 	bl	8012e38 <finite>
 8012c58:	b9e0      	cbnz	r0, 8012c94 <pow+0xac>
 8012c5a:	eeb0 0a48 	vmov.f32	s0, s16
 8012c5e:	eef0 0a68 	vmov.f32	s1, s17
 8012c62:	f000 f8e9 	bl	8012e38 <finite>
 8012c66:	b1a8      	cbz	r0, 8012c94 <pow+0xac>
 8012c68:	ec45 4b10 	vmov	d0, r4, r5
 8012c6c:	f000 f8e4 	bl	8012e38 <finite>
 8012c70:	b180      	cbz	r0, 8012c94 <pow+0xac>
 8012c72:	4632      	mov	r2, r6
 8012c74:	463b      	mov	r3, r7
 8012c76:	4630      	mov	r0, r6
 8012c78:	4639      	mov	r1, r7
 8012c7a:	f7ed ff67 	bl	8000b4c <__aeabi_dcmpun>
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	d0e2      	beq.n	8012c48 <pow+0x60>
 8012c82:	f002 fcd9 	bl	8015638 <__errno>
 8012c86:	2321      	movs	r3, #33	; 0x21
 8012c88:	6003      	str	r3, [r0, #0]
 8012c8a:	ecbd 8b02 	vpop	{d8}
 8012c8e:	ec47 6b10 	vmov	d0, r6, r7
 8012c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c94:	2200      	movs	r2, #0
 8012c96:	2300      	movs	r3, #0
 8012c98:	4630      	mov	r0, r6
 8012c9a:	4639      	mov	r1, r7
 8012c9c:	f7ed ff24 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	d0f2      	beq.n	8012c8a <pow+0xa2>
 8012ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8012ca8:	eef0 0a68 	vmov.f32	s1, s17
 8012cac:	f000 f8c4 	bl	8012e38 <finite>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d0ea      	beq.n	8012c8a <pow+0xa2>
 8012cb4:	ec45 4b10 	vmov	d0, r4, r5
 8012cb8:	f000 f8be 	bl	8012e38 <finite>
 8012cbc:	e7c3      	b.n	8012c46 <pow+0x5e>
 8012cbe:	2600      	movs	r6, #0
 8012cc0:	4f00      	ldr	r7, [pc, #0]	; (8012cc4 <pow+0xdc>)
 8012cc2:	e7e2      	b.n	8012c8a <pow+0xa2>
 8012cc4:	3ff00000 	.word	0x3ff00000

08012cc8 <cos>:
 8012cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cca:	ec53 2b10 	vmov	r2, r3, d0
 8012cce:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012cd2:	4825      	ldr	r0, [pc, #148]	; (8012d68 <cos+0xa0>)
 8012cd4:	4281      	cmp	r1, r0
 8012cd6:	dc06      	bgt.n	8012ce6 <cos+0x1e>
 8012cd8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012d60 <cos+0x98>
 8012cdc:	b005      	add	sp, #20
 8012cde:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ce2:	f000 bac5 	b.w	8013270 <__kernel_cos>
 8012ce6:	4821      	ldr	r0, [pc, #132]	; (8012d6c <cos+0xa4>)
 8012ce8:	4281      	cmp	r1, r0
 8012cea:	dd09      	ble.n	8012d00 <cos+0x38>
 8012cec:	ee10 0a10 	vmov	r0, s0
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	f7ed fad9 	bl	80002a8 <__aeabi_dsub>
 8012cf6:	ec41 0b10 	vmov	d0, r0, r1
 8012cfa:	b005      	add	sp, #20
 8012cfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d00:	4668      	mov	r0, sp
 8012d02:	f001 f96d 	bl	8013fe0 <__ieee754_rem_pio2>
 8012d06:	f000 0003 	and.w	r0, r0, #3
 8012d0a:	2801      	cmp	r0, #1
 8012d0c:	d00b      	beq.n	8012d26 <cos+0x5e>
 8012d0e:	2802      	cmp	r0, #2
 8012d10:	d016      	beq.n	8012d40 <cos+0x78>
 8012d12:	b9e0      	cbnz	r0, 8012d4e <cos+0x86>
 8012d14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d18:	ed9d 0b00 	vldr	d0, [sp]
 8012d1c:	f000 faa8 	bl	8013270 <__kernel_cos>
 8012d20:	ec51 0b10 	vmov	r0, r1, d0
 8012d24:	e7e7      	b.n	8012cf6 <cos+0x2e>
 8012d26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d2a:	ed9d 0b00 	vldr	d0, [sp]
 8012d2e:	f000 fb67 	bl	8013400 <__kernel_sin>
 8012d32:	ee10 0a10 	vmov	r0, s0
 8012d36:	ec53 2b10 	vmov	r2, r3, d0
 8012d3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012d3e:	e7da      	b.n	8012cf6 <cos+0x2e>
 8012d40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d44:	ed9d 0b00 	vldr	d0, [sp]
 8012d48:	f000 fa92 	bl	8013270 <__kernel_cos>
 8012d4c:	e7f1      	b.n	8012d32 <cos+0x6a>
 8012d4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d52:	ed9d 0b00 	vldr	d0, [sp]
 8012d56:	2001      	movs	r0, #1
 8012d58:	f000 fb52 	bl	8013400 <__kernel_sin>
 8012d5c:	e7e0      	b.n	8012d20 <cos+0x58>
 8012d5e:	bf00      	nop
	...
 8012d68:	3fe921fb 	.word	0x3fe921fb
 8012d6c:	7fefffff 	.word	0x7fefffff

08012d70 <fabs>:
 8012d70:	ec51 0b10 	vmov	r0, r1, d0
 8012d74:	ee10 2a10 	vmov	r2, s0
 8012d78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012d7c:	ec43 2b10 	vmov	d0, r2, r3
 8012d80:	4770      	bx	lr
 8012d82:	0000      	movs	r0, r0
 8012d84:	0000      	movs	r0, r0
	...

08012d88 <sin>:
 8012d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d8a:	ec53 2b10 	vmov	r2, r3, d0
 8012d8e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012d92:	4827      	ldr	r0, [pc, #156]	; (8012e30 <sin+0xa8>)
 8012d94:	4281      	cmp	r1, r0
 8012d96:	dc07      	bgt.n	8012da8 <sin+0x20>
 8012d98:	2000      	movs	r0, #0
 8012d9a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8012e28 <sin+0xa0>
 8012d9e:	b005      	add	sp, #20
 8012da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012da4:	f000 bb2c 	b.w	8013400 <__kernel_sin>
 8012da8:	4822      	ldr	r0, [pc, #136]	; (8012e34 <sin+0xac>)
 8012daa:	4281      	cmp	r1, r0
 8012dac:	dd09      	ble.n	8012dc2 <sin+0x3a>
 8012dae:	ee10 0a10 	vmov	r0, s0
 8012db2:	4619      	mov	r1, r3
 8012db4:	f7ed fa78 	bl	80002a8 <__aeabi_dsub>
 8012db8:	ec41 0b10 	vmov	d0, r0, r1
 8012dbc:	b005      	add	sp, #20
 8012dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8012dc2:	4668      	mov	r0, sp
 8012dc4:	f001 f90c 	bl	8013fe0 <__ieee754_rem_pio2>
 8012dc8:	f000 0003 	and.w	r0, r0, #3
 8012dcc:	2801      	cmp	r0, #1
 8012dce:	d00c      	beq.n	8012dea <sin+0x62>
 8012dd0:	2802      	cmp	r0, #2
 8012dd2:	d011      	beq.n	8012df8 <sin+0x70>
 8012dd4:	b9f0      	cbnz	r0, 8012e14 <sin+0x8c>
 8012dd6:	2001      	movs	r0, #1
 8012dd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ddc:	ed9d 0b00 	vldr	d0, [sp]
 8012de0:	f000 fb0e 	bl	8013400 <__kernel_sin>
 8012de4:	ec51 0b10 	vmov	r0, r1, d0
 8012de8:	e7e6      	b.n	8012db8 <sin+0x30>
 8012dea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dee:	ed9d 0b00 	vldr	d0, [sp]
 8012df2:	f000 fa3d 	bl	8013270 <__kernel_cos>
 8012df6:	e7f5      	b.n	8012de4 <sin+0x5c>
 8012df8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dfc:	ed9d 0b00 	vldr	d0, [sp]
 8012e00:	2001      	movs	r0, #1
 8012e02:	f000 fafd 	bl	8013400 <__kernel_sin>
 8012e06:	ee10 0a10 	vmov	r0, s0
 8012e0a:	ec53 2b10 	vmov	r2, r3, d0
 8012e0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012e12:	e7d1      	b.n	8012db8 <sin+0x30>
 8012e14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e18:	ed9d 0b00 	vldr	d0, [sp]
 8012e1c:	f000 fa28 	bl	8013270 <__kernel_cos>
 8012e20:	e7f1      	b.n	8012e06 <sin+0x7e>
 8012e22:	bf00      	nop
 8012e24:	f3af 8000 	nop.w
	...
 8012e30:	3fe921fb 	.word	0x3fe921fb
 8012e34:	7fefffff 	.word	0x7fefffff

08012e38 <finite>:
 8012e38:	b082      	sub	sp, #8
 8012e3a:	ed8d 0b00 	vstr	d0, [sp]
 8012e3e:	9801      	ldr	r0, [sp, #4]
 8012e40:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012e44:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012e48:	0fc0      	lsrs	r0, r0, #31
 8012e4a:	b002      	add	sp, #8
 8012e4c:	4770      	bx	lr
	...

08012e50 <scalbn>:
 8012e50:	b570      	push	{r4, r5, r6, lr}
 8012e52:	ec55 4b10 	vmov	r4, r5, d0
 8012e56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012e5a:	4606      	mov	r6, r0
 8012e5c:	462b      	mov	r3, r5
 8012e5e:	b999      	cbnz	r1, 8012e88 <scalbn+0x38>
 8012e60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012e64:	4323      	orrs	r3, r4
 8012e66:	d03f      	beq.n	8012ee8 <scalbn+0x98>
 8012e68:	4b35      	ldr	r3, [pc, #212]	; (8012f40 <scalbn+0xf0>)
 8012e6a:	4629      	mov	r1, r5
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	ee10 0a10 	vmov	r0, s0
 8012e72:	f7ed fbd1 	bl	8000618 <__aeabi_dmul>
 8012e76:	4b33      	ldr	r3, [pc, #204]	; (8012f44 <scalbn+0xf4>)
 8012e78:	4604      	mov	r4, r0
 8012e7a:	460d      	mov	r5, r1
 8012e7c:	429e      	cmp	r6, r3
 8012e7e:	da10      	bge.n	8012ea2 <scalbn+0x52>
 8012e80:	a327      	add	r3, pc, #156	; (adr r3, 8012f20 <scalbn+0xd0>)
 8012e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e86:	e01f      	b.n	8012ec8 <scalbn+0x78>
 8012e88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012e8c:	4291      	cmp	r1, r2
 8012e8e:	d10c      	bne.n	8012eaa <scalbn+0x5a>
 8012e90:	ee10 2a10 	vmov	r2, s0
 8012e94:	4620      	mov	r0, r4
 8012e96:	4629      	mov	r1, r5
 8012e98:	f7ed fa08 	bl	80002ac <__adddf3>
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	460d      	mov	r5, r1
 8012ea0:	e022      	b.n	8012ee8 <scalbn+0x98>
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012ea8:	3936      	subs	r1, #54	; 0x36
 8012eaa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8012eae:	4296      	cmp	r6, r2
 8012eb0:	dd0d      	ble.n	8012ece <scalbn+0x7e>
 8012eb2:	2d00      	cmp	r5, #0
 8012eb4:	a11c      	add	r1, pc, #112	; (adr r1, 8012f28 <scalbn+0xd8>)
 8012eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012eba:	da02      	bge.n	8012ec2 <scalbn+0x72>
 8012ebc:	a11c      	add	r1, pc, #112	; (adr r1, 8012f30 <scalbn+0xe0>)
 8012ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ec2:	a319      	add	r3, pc, #100	; (adr r3, 8012f28 <scalbn+0xd8>)
 8012ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec8:	f7ed fba6 	bl	8000618 <__aeabi_dmul>
 8012ecc:	e7e6      	b.n	8012e9c <scalbn+0x4c>
 8012ece:	1872      	adds	r2, r6, r1
 8012ed0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012ed4:	428a      	cmp	r2, r1
 8012ed6:	dcec      	bgt.n	8012eb2 <scalbn+0x62>
 8012ed8:	2a00      	cmp	r2, #0
 8012eda:	dd08      	ble.n	8012eee <scalbn+0x9e>
 8012edc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ee0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012ee8:	ec45 4b10 	vmov	d0, r4, r5
 8012eec:	bd70      	pop	{r4, r5, r6, pc}
 8012eee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012ef2:	da08      	bge.n	8012f06 <scalbn+0xb6>
 8012ef4:	2d00      	cmp	r5, #0
 8012ef6:	a10a      	add	r1, pc, #40	; (adr r1, 8012f20 <scalbn+0xd0>)
 8012ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012efc:	dac0      	bge.n	8012e80 <scalbn+0x30>
 8012efe:	a10e      	add	r1, pc, #56	; (adr r1, 8012f38 <scalbn+0xe8>)
 8012f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f04:	e7bc      	b.n	8012e80 <scalbn+0x30>
 8012f06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f0a:	3236      	adds	r2, #54	; 0x36
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f12:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012f16:	2200      	movs	r2, #0
 8012f18:	4b0b      	ldr	r3, [pc, #44]	; (8012f48 <scalbn+0xf8>)
 8012f1a:	e7d5      	b.n	8012ec8 <scalbn+0x78>
 8012f1c:	f3af 8000 	nop.w
 8012f20:	c2f8f359 	.word	0xc2f8f359
 8012f24:	01a56e1f 	.word	0x01a56e1f
 8012f28:	8800759c 	.word	0x8800759c
 8012f2c:	7e37e43c 	.word	0x7e37e43c
 8012f30:	8800759c 	.word	0x8800759c
 8012f34:	fe37e43c 	.word	0xfe37e43c
 8012f38:	c2f8f359 	.word	0xc2f8f359
 8012f3c:	81a56e1f 	.word	0x81a56e1f
 8012f40:	43500000 	.word	0x43500000
 8012f44:	ffff3cb0 	.word	0xffff3cb0
 8012f48:	3c900000 	.word	0x3c900000

08012f4c <with_errno>:
 8012f4c:	b570      	push	{r4, r5, r6, lr}
 8012f4e:	4604      	mov	r4, r0
 8012f50:	460d      	mov	r5, r1
 8012f52:	4616      	mov	r6, r2
 8012f54:	f002 fb70 	bl	8015638 <__errno>
 8012f58:	4629      	mov	r1, r5
 8012f5a:	6006      	str	r6, [r0, #0]
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	bd70      	pop	{r4, r5, r6, pc}

08012f60 <xflow>:
 8012f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f62:	4614      	mov	r4, r2
 8012f64:	461d      	mov	r5, r3
 8012f66:	b108      	cbz	r0, 8012f6c <xflow+0xc>
 8012f68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	4629      	mov	r1, r5
 8012f70:	e9cd 2300 	strd	r2, r3, [sp]
 8012f74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f78:	f7ed fb4e 	bl	8000618 <__aeabi_dmul>
 8012f7c:	2222      	movs	r2, #34	; 0x22
 8012f7e:	b003      	add	sp, #12
 8012f80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f84:	f7ff bfe2 	b.w	8012f4c <with_errno>

08012f88 <__math_uflow>:
 8012f88:	b508      	push	{r3, lr}
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012f90:	f7ff ffe6 	bl	8012f60 <xflow>
 8012f94:	ec41 0b10 	vmov	d0, r0, r1
 8012f98:	bd08      	pop	{r3, pc}

08012f9a <__math_oflow>:
 8012f9a:	b508      	push	{r3, lr}
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012fa2:	f7ff ffdd 	bl	8012f60 <xflow>
 8012fa6:	ec41 0b10 	vmov	d0, r0, r1
 8012faa:	bd08      	pop	{r3, pc}

08012fac <__ieee754_sqrt>:
 8012fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb0:	4e6b      	ldr	r6, [pc, #428]	; (8013160 <__ieee754_sqrt+0x1b4>)
 8012fb2:	ee10 0a10 	vmov	r0, s0
 8012fb6:	ee10 2a10 	vmov	r2, s0
 8012fba:	ec55 4b10 	vmov	r4, r5, d0
 8012fbe:	43ae      	bics	r6, r5
 8012fc0:	4629      	mov	r1, r5
 8012fc2:	462b      	mov	r3, r5
 8012fc4:	d10d      	bne.n	8012fe2 <__ieee754_sqrt+0x36>
 8012fc6:	f7ed fb27 	bl	8000618 <__aeabi_dmul>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	460b      	mov	r3, r1
 8012fce:	4620      	mov	r0, r4
 8012fd0:	4629      	mov	r1, r5
 8012fd2:	f7ed f96b 	bl	80002ac <__adddf3>
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	460d      	mov	r5, r1
 8012fda:	ec45 4b10 	vmov	d0, r4, r5
 8012fde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe2:	2d00      	cmp	r5, #0
 8012fe4:	dc0b      	bgt.n	8012ffe <__ieee754_sqrt+0x52>
 8012fe6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012fea:	4326      	orrs	r6, r4
 8012fec:	d0f5      	beq.n	8012fda <__ieee754_sqrt+0x2e>
 8012fee:	b135      	cbz	r5, 8012ffe <__ieee754_sqrt+0x52>
 8012ff0:	f7ed f95a 	bl	80002a8 <__aeabi_dsub>
 8012ff4:	4602      	mov	r2, r0
 8012ff6:	460b      	mov	r3, r1
 8012ff8:	f7ed fc38 	bl	800086c <__aeabi_ddiv>
 8012ffc:	e7eb      	b.n	8012fd6 <__ieee754_sqrt+0x2a>
 8012ffe:	1509      	asrs	r1, r1, #20
 8013000:	f000 8091 	beq.w	8013126 <__ieee754_sqrt+0x17a>
 8013004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013008:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801300c:	07c9      	lsls	r1, r1, #31
 801300e:	f04f 0500 	mov.w	r5, #0
 8013012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013016:	ea4f 0666 	mov.w	r6, r6, asr #1
 801301a:	f04f 0e16 	mov.w	lr, #22
 801301e:	46ac      	mov	ip, r5
 8013020:	bf58      	it	pl
 8013022:	005b      	lslpl	r3, r3, #1
 8013024:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013028:	bf5c      	itt	pl
 801302a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801302e:	0052      	lslpl	r2, r2, #1
 8013030:	005b      	lsls	r3, r3, #1
 8013032:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013036:	0052      	lsls	r2, r2, #1
 8013038:	eb0c 0001 	add.w	r0, ip, r1
 801303c:	4298      	cmp	r0, r3
 801303e:	bfde      	ittt	le
 8013040:	1a1b      	suble	r3, r3, r0
 8013042:	eb00 0c01 	addle.w	ip, r0, r1
 8013046:	186d      	addle	r5, r5, r1
 8013048:	f1be 0e01 	subs.w	lr, lr, #1
 801304c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013050:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013054:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013058:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801305c:	d1ec      	bne.n	8013038 <__ieee754_sqrt+0x8c>
 801305e:	4674      	mov	r4, lr
 8013060:	2720      	movs	r7, #32
 8013062:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013066:	4563      	cmp	r3, ip
 8013068:	eb01 000e 	add.w	r0, r1, lr
 801306c:	dc02      	bgt.n	8013074 <__ieee754_sqrt+0xc8>
 801306e:	d114      	bne.n	801309a <__ieee754_sqrt+0xee>
 8013070:	4290      	cmp	r0, r2
 8013072:	d812      	bhi.n	801309a <__ieee754_sqrt+0xee>
 8013074:	2800      	cmp	r0, #0
 8013076:	eb00 0e01 	add.w	lr, r0, r1
 801307a:	da59      	bge.n	8013130 <__ieee754_sqrt+0x184>
 801307c:	f1be 0f00 	cmp.w	lr, #0
 8013080:	db56      	blt.n	8013130 <__ieee754_sqrt+0x184>
 8013082:	f10c 0801 	add.w	r8, ip, #1
 8013086:	eba3 030c 	sub.w	r3, r3, ip
 801308a:	4290      	cmp	r0, r2
 801308c:	440c      	add	r4, r1
 801308e:	eba2 0200 	sub.w	r2, r2, r0
 8013092:	bf88      	it	hi
 8013094:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013098:	46c4      	mov	ip, r8
 801309a:	005b      	lsls	r3, r3, #1
 801309c:	3f01      	subs	r7, #1
 801309e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80130a2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80130a6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80130aa:	d1dc      	bne.n	8013066 <__ieee754_sqrt+0xba>
 80130ac:	4313      	orrs	r3, r2
 80130ae:	d01b      	beq.n	80130e8 <__ieee754_sqrt+0x13c>
 80130b0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8013164 <__ieee754_sqrt+0x1b8>
 80130b4:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8013168 <__ieee754_sqrt+0x1bc>
 80130b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80130bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80130c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80130c4:	f7ed f8f0 	bl	80002a8 <__aeabi_dsub>
 80130c8:	4602      	mov	r2, r0
 80130ca:	460b      	mov	r3, r1
 80130cc:	4640      	mov	r0, r8
 80130ce:	4649      	mov	r1, r9
 80130d0:	f7ed fd1e 	bl	8000b10 <__aeabi_dcmple>
 80130d4:	b140      	cbz	r0, 80130e8 <__ieee754_sqrt+0x13c>
 80130d6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80130da:	e9da 0100 	ldrd	r0, r1, [sl]
 80130de:	e9db 2300 	ldrd	r2, r3, [fp]
 80130e2:	d127      	bne.n	8013134 <__ieee754_sqrt+0x188>
 80130e4:	3501      	adds	r5, #1
 80130e6:	463c      	mov	r4, r7
 80130e8:	106a      	asrs	r2, r5, #1
 80130ea:	07e9      	lsls	r1, r5, #31
 80130ec:	ea4f 0354 	mov.w	r3, r4, lsr #1
 80130f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80130f4:	bf48      	it	mi
 80130f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80130fa:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80130fe:	461c      	mov	r4, r3
 8013100:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8013104:	e769      	b.n	8012fda <__ieee754_sqrt+0x2e>
 8013106:	0ad3      	lsrs	r3, r2, #11
 8013108:	3815      	subs	r0, #21
 801310a:	0552      	lsls	r2, r2, #21
 801310c:	2b00      	cmp	r3, #0
 801310e:	d0fa      	beq.n	8013106 <__ieee754_sqrt+0x15a>
 8013110:	02dc      	lsls	r4, r3, #11
 8013112:	d50a      	bpl.n	801312a <__ieee754_sqrt+0x17e>
 8013114:	f1c1 0420 	rsb	r4, r1, #32
 8013118:	1e4d      	subs	r5, r1, #1
 801311a:	fa22 f404 	lsr.w	r4, r2, r4
 801311e:	408a      	lsls	r2, r1
 8013120:	1b41      	subs	r1, r0, r5
 8013122:	4323      	orrs	r3, r4
 8013124:	e76e      	b.n	8013004 <__ieee754_sqrt+0x58>
 8013126:	4608      	mov	r0, r1
 8013128:	e7f0      	b.n	801310c <__ieee754_sqrt+0x160>
 801312a:	005b      	lsls	r3, r3, #1
 801312c:	3101      	adds	r1, #1
 801312e:	e7ef      	b.n	8013110 <__ieee754_sqrt+0x164>
 8013130:	46e0      	mov	r8, ip
 8013132:	e7a8      	b.n	8013086 <__ieee754_sqrt+0xda>
 8013134:	e9da 8900 	ldrd	r8, r9, [sl]
 8013138:	f7ed f8b8 	bl	80002ac <__adddf3>
 801313c:	4602      	mov	r2, r0
 801313e:	460b      	mov	r3, r1
 8013140:	4640      	mov	r0, r8
 8013142:	4649      	mov	r1, r9
 8013144:	f7ed fcda 	bl	8000afc <__aeabi_dcmplt>
 8013148:	b128      	cbz	r0, 8013156 <__ieee754_sqrt+0x1aa>
 801314a:	1ca0      	adds	r0, r4, #2
 801314c:	f104 0402 	add.w	r4, r4, #2
 8013150:	bf08      	it	eq
 8013152:	3501      	addeq	r5, #1
 8013154:	e7c8      	b.n	80130e8 <__ieee754_sqrt+0x13c>
 8013156:	3401      	adds	r4, #1
 8013158:	f024 0401 	bic.w	r4, r4, #1
 801315c:	e7c4      	b.n	80130e8 <__ieee754_sqrt+0x13c>
 801315e:	bf00      	nop
 8013160:	7ff00000 	.word	0x7ff00000
 8013164:	20000070 	.word	0x20000070
 8013168:	20000078 	.word	0x20000078
 801316c:	00000000 	.word	0x00000000

08013170 <floor>:
 8013170:	ec51 0b10 	vmov	r0, r1, d0
 8013174:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801317c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8013180:	460c      	mov	r4, r1
 8013182:	ee10 5a10 	vmov	r5, s0
 8013186:	ee10 8a10 	vmov	r8, s0
 801318a:	2e13      	cmp	r6, #19
 801318c:	dc32      	bgt.n	80131f4 <floor+0x84>
 801318e:	2e00      	cmp	r6, #0
 8013190:	da14      	bge.n	80131bc <floor+0x4c>
 8013192:	a333      	add	r3, pc, #204	; (adr r3, 8013260 <floor+0xf0>)
 8013194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013198:	f7ed f888 	bl	80002ac <__adddf3>
 801319c:	2200      	movs	r2, #0
 801319e:	2300      	movs	r3, #0
 80131a0:	f7ed fcca 	bl	8000b38 <__aeabi_dcmpgt>
 80131a4:	b138      	cbz	r0, 80131b6 <floor+0x46>
 80131a6:	2c00      	cmp	r4, #0
 80131a8:	da54      	bge.n	8013254 <floor+0xe4>
 80131aa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80131ae:	4325      	orrs	r5, r4
 80131b0:	d053      	beq.n	801325a <floor+0xea>
 80131b2:	2500      	movs	r5, #0
 80131b4:	4c2c      	ldr	r4, [pc, #176]	; (8013268 <floor+0xf8>)
 80131b6:	4621      	mov	r1, r4
 80131b8:	4628      	mov	r0, r5
 80131ba:	e025      	b.n	8013208 <floor+0x98>
 80131bc:	4f2b      	ldr	r7, [pc, #172]	; (801326c <floor+0xfc>)
 80131be:	4137      	asrs	r7, r6
 80131c0:	ea01 0307 	and.w	r3, r1, r7
 80131c4:	4303      	orrs	r3, r0
 80131c6:	d01f      	beq.n	8013208 <floor+0x98>
 80131c8:	a325      	add	r3, pc, #148	; (adr r3, 8013260 <floor+0xf0>)
 80131ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ce:	f7ed f86d 	bl	80002ac <__adddf3>
 80131d2:	2200      	movs	r2, #0
 80131d4:	2300      	movs	r3, #0
 80131d6:	f7ed fcaf 	bl	8000b38 <__aeabi_dcmpgt>
 80131da:	2800      	cmp	r0, #0
 80131dc:	d0eb      	beq.n	80131b6 <floor+0x46>
 80131de:	2c00      	cmp	r4, #0
 80131e0:	f04f 0500 	mov.w	r5, #0
 80131e4:	bfbe      	ittt	lt
 80131e6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80131ea:	4133      	asrlt	r3, r6
 80131ec:	18e4      	addlt	r4, r4, r3
 80131ee:	ea24 0407 	bic.w	r4, r4, r7
 80131f2:	e7e0      	b.n	80131b6 <floor+0x46>
 80131f4:	2e33      	cmp	r6, #51	; 0x33
 80131f6:	dd0b      	ble.n	8013210 <floor+0xa0>
 80131f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80131fc:	d104      	bne.n	8013208 <floor+0x98>
 80131fe:	ee10 2a10 	vmov	r2, s0
 8013202:	460b      	mov	r3, r1
 8013204:	f7ed f852 	bl	80002ac <__adddf3>
 8013208:	ec41 0b10 	vmov	d0, r0, r1
 801320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013210:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8013214:	f04f 37ff 	mov.w	r7, #4294967295
 8013218:	40df      	lsrs	r7, r3
 801321a:	4238      	tst	r0, r7
 801321c:	d0f4      	beq.n	8013208 <floor+0x98>
 801321e:	a310      	add	r3, pc, #64	; (adr r3, 8013260 <floor+0xf0>)
 8013220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013224:	f7ed f842 	bl	80002ac <__adddf3>
 8013228:	2200      	movs	r2, #0
 801322a:	2300      	movs	r3, #0
 801322c:	f7ed fc84 	bl	8000b38 <__aeabi_dcmpgt>
 8013230:	2800      	cmp	r0, #0
 8013232:	d0c0      	beq.n	80131b6 <floor+0x46>
 8013234:	2c00      	cmp	r4, #0
 8013236:	da0a      	bge.n	801324e <floor+0xde>
 8013238:	2e14      	cmp	r6, #20
 801323a:	d101      	bne.n	8013240 <floor+0xd0>
 801323c:	3401      	adds	r4, #1
 801323e:	e006      	b.n	801324e <floor+0xde>
 8013240:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013244:	2301      	movs	r3, #1
 8013246:	40b3      	lsls	r3, r6
 8013248:	441d      	add	r5, r3
 801324a:	45a8      	cmp	r8, r5
 801324c:	d8f6      	bhi.n	801323c <floor+0xcc>
 801324e:	ea25 0507 	bic.w	r5, r5, r7
 8013252:	e7b0      	b.n	80131b6 <floor+0x46>
 8013254:	2500      	movs	r5, #0
 8013256:	462c      	mov	r4, r5
 8013258:	e7ad      	b.n	80131b6 <floor+0x46>
 801325a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801325e:	e7aa      	b.n	80131b6 <floor+0x46>
 8013260:	8800759c 	.word	0x8800759c
 8013264:	7e37e43c 	.word	0x7e37e43c
 8013268:	bff00000 	.word	0xbff00000
 801326c:	000fffff 	.word	0x000fffff

08013270 <__kernel_cos>:
 8013270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013274:	ec57 6b10 	vmov	r6, r7, d0
 8013278:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801327c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013280:	ed8d 1b00 	vstr	d1, [sp]
 8013284:	da07      	bge.n	8013296 <__kernel_cos+0x26>
 8013286:	ee10 0a10 	vmov	r0, s0
 801328a:	4639      	mov	r1, r7
 801328c:	f7ed fc74 	bl	8000b78 <__aeabi_d2iz>
 8013290:	2800      	cmp	r0, #0
 8013292:	f000 8088 	beq.w	80133a6 <__kernel_cos+0x136>
 8013296:	4632      	mov	r2, r6
 8013298:	463b      	mov	r3, r7
 801329a:	4630      	mov	r0, r6
 801329c:	4639      	mov	r1, r7
 801329e:	f7ed f9bb 	bl	8000618 <__aeabi_dmul>
 80132a2:	4604      	mov	r4, r0
 80132a4:	460d      	mov	r5, r1
 80132a6:	2200      	movs	r2, #0
 80132a8:	4b4f      	ldr	r3, [pc, #316]	; (80133e8 <__kernel_cos+0x178>)
 80132aa:	f7ed f9b5 	bl	8000618 <__aeabi_dmul>
 80132ae:	4682      	mov	sl, r0
 80132b0:	468b      	mov	fp, r1
 80132b2:	4620      	mov	r0, r4
 80132b4:	4629      	mov	r1, r5
 80132b6:	a33e      	add	r3, pc, #248	; (adr r3, 80133b0 <__kernel_cos+0x140>)
 80132b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132bc:	f7ed f9ac 	bl	8000618 <__aeabi_dmul>
 80132c0:	a33d      	add	r3, pc, #244	; (adr r3, 80133b8 <__kernel_cos+0x148>)
 80132c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c6:	f7ec fff1 	bl	80002ac <__adddf3>
 80132ca:	4622      	mov	r2, r4
 80132cc:	462b      	mov	r3, r5
 80132ce:	f7ed f9a3 	bl	8000618 <__aeabi_dmul>
 80132d2:	a33b      	add	r3, pc, #236	; (adr r3, 80133c0 <__kernel_cos+0x150>)
 80132d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d8:	f7ec ffe6 	bl	80002a8 <__aeabi_dsub>
 80132dc:	4622      	mov	r2, r4
 80132de:	462b      	mov	r3, r5
 80132e0:	f7ed f99a 	bl	8000618 <__aeabi_dmul>
 80132e4:	a338      	add	r3, pc, #224	; (adr r3, 80133c8 <__kernel_cos+0x158>)
 80132e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ea:	f7ec ffdf 	bl	80002ac <__adddf3>
 80132ee:	4622      	mov	r2, r4
 80132f0:	462b      	mov	r3, r5
 80132f2:	f7ed f991 	bl	8000618 <__aeabi_dmul>
 80132f6:	a336      	add	r3, pc, #216	; (adr r3, 80133d0 <__kernel_cos+0x160>)
 80132f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fc:	f7ec ffd4 	bl	80002a8 <__aeabi_dsub>
 8013300:	4622      	mov	r2, r4
 8013302:	462b      	mov	r3, r5
 8013304:	f7ed f988 	bl	8000618 <__aeabi_dmul>
 8013308:	a333      	add	r3, pc, #204	; (adr r3, 80133d8 <__kernel_cos+0x168>)
 801330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330e:	f7ec ffcd 	bl	80002ac <__adddf3>
 8013312:	4622      	mov	r2, r4
 8013314:	462b      	mov	r3, r5
 8013316:	f7ed f97f 	bl	8000618 <__aeabi_dmul>
 801331a:	4622      	mov	r2, r4
 801331c:	462b      	mov	r3, r5
 801331e:	f7ed f97b 	bl	8000618 <__aeabi_dmul>
 8013322:	4604      	mov	r4, r0
 8013324:	460d      	mov	r5, r1
 8013326:	4630      	mov	r0, r6
 8013328:	4639      	mov	r1, r7
 801332a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801332e:	f7ed f973 	bl	8000618 <__aeabi_dmul>
 8013332:	460b      	mov	r3, r1
 8013334:	4602      	mov	r2, r0
 8013336:	4629      	mov	r1, r5
 8013338:	4620      	mov	r0, r4
 801333a:	f7ec ffb5 	bl	80002a8 <__aeabi_dsub>
 801333e:	4b2b      	ldr	r3, [pc, #172]	; (80133ec <__kernel_cos+0x17c>)
 8013340:	4606      	mov	r6, r0
 8013342:	460f      	mov	r7, r1
 8013344:	4598      	cmp	r8, r3
 8013346:	dc10      	bgt.n	801336a <__kernel_cos+0xfa>
 8013348:	4602      	mov	r2, r0
 801334a:	460b      	mov	r3, r1
 801334c:	4650      	mov	r0, sl
 801334e:	4659      	mov	r1, fp
 8013350:	f7ec ffaa 	bl	80002a8 <__aeabi_dsub>
 8013354:	4602      	mov	r2, r0
 8013356:	460b      	mov	r3, r1
 8013358:	2000      	movs	r0, #0
 801335a:	4925      	ldr	r1, [pc, #148]	; (80133f0 <__kernel_cos+0x180>)
 801335c:	f7ec ffa4 	bl	80002a8 <__aeabi_dsub>
 8013360:	ec41 0b10 	vmov	d0, r0, r1
 8013364:	b003      	add	sp, #12
 8013366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801336a:	4b22      	ldr	r3, [pc, #136]	; (80133f4 <__kernel_cos+0x184>)
 801336c:	2400      	movs	r4, #0
 801336e:	2000      	movs	r0, #0
 8013370:	491f      	ldr	r1, [pc, #124]	; (80133f0 <__kernel_cos+0x180>)
 8013372:	4598      	cmp	r8, r3
 8013374:	4622      	mov	r2, r4
 8013376:	bfd4      	ite	le
 8013378:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801337c:	4d1e      	ldrgt	r5, [pc, #120]	; (80133f8 <__kernel_cos+0x188>)
 801337e:	462b      	mov	r3, r5
 8013380:	f7ec ff92 	bl	80002a8 <__aeabi_dsub>
 8013384:	4622      	mov	r2, r4
 8013386:	4680      	mov	r8, r0
 8013388:	4689      	mov	r9, r1
 801338a:	462b      	mov	r3, r5
 801338c:	4650      	mov	r0, sl
 801338e:	4659      	mov	r1, fp
 8013390:	f7ec ff8a 	bl	80002a8 <__aeabi_dsub>
 8013394:	4632      	mov	r2, r6
 8013396:	463b      	mov	r3, r7
 8013398:	f7ec ff86 	bl	80002a8 <__aeabi_dsub>
 801339c:	4602      	mov	r2, r0
 801339e:	460b      	mov	r3, r1
 80133a0:	4640      	mov	r0, r8
 80133a2:	4649      	mov	r1, r9
 80133a4:	e7da      	b.n	801335c <__kernel_cos+0xec>
 80133a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80133e0 <__kernel_cos+0x170>
 80133aa:	e7db      	b.n	8013364 <__kernel_cos+0xf4>
 80133ac:	f3af 8000 	nop.w
 80133b0:	be8838d4 	.word	0xbe8838d4
 80133b4:	bda8fae9 	.word	0xbda8fae9
 80133b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80133bc:	3e21ee9e 	.word	0x3e21ee9e
 80133c0:	809c52ad 	.word	0x809c52ad
 80133c4:	3e927e4f 	.word	0x3e927e4f
 80133c8:	19cb1590 	.word	0x19cb1590
 80133cc:	3efa01a0 	.word	0x3efa01a0
 80133d0:	16c15177 	.word	0x16c15177
 80133d4:	3f56c16c 	.word	0x3f56c16c
 80133d8:	5555554c 	.word	0x5555554c
 80133dc:	3fa55555 	.word	0x3fa55555
 80133e0:	00000000 	.word	0x00000000
 80133e4:	3ff00000 	.word	0x3ff00000
 80133e8:	3fe00000 	.word	0x3fe00000
 80133ec:	3fd33332 	.word	0x3fd33332
 80133f0:	3ff00000 	.word	0x3ff00000
 80133f4:	3fe90000 	.word	0x3fe90000
 80133f8:	3fd20000 	.word	0x3fd20000
 80133fc:	00000000 	.word	0x00000000

08013400 <__kernel_sin>:
 8013400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013404:	ec55 4b10 	vmov	r4, r5, d0
 8013408:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801340c:	ed2d 8b04 	vpush	{d8-d9}
 8013410:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013414:	b083      	sub	sp, #12
 8013416:	eeb0 8a41 	vmov.f32	s16, s2
 801341a:	eef0 8a61 	vmov.f32	s17, s3
 801341e:	9001      	str	r0, [sp, #4]
 8013420:	da06      	bge.n	8013430 <__kernel_sin+0x30>
 8013422:	ee10 0a10 	vmov	r0, s0
 8013426:	4629      	mov	r1, r5
 8013428:	f7ed fba6 	bl	8000b78 <__aeabi_d2iz>
 801342c:	2800      	cmp	r0, #0
 801342e:	d051      	beq.n	80134d4 <__kernel_sin+0xd4>
 8013430:	4622      	mov	r2, r4
 8013432:	462b      	mov	r3, r5
 8013434:	4620      	mov	r0, r4
 8013436:	4629      	mov	r1, r5
 8013438:	f7ed f8ee 	bl	8000618 <__aeabi_dmul>
 801343c:	4682      	mov	sl, r0
 801343e:	468b      	mov	fp, r1
 8013440:	4602      	mov	r2, r0
 8013442:	460b      	mov	r3, r1
 8013444:	4620      	mov	r0, r4
 8013446:	4629      	mov	r1, r5
 8013448:	f7ed f8e6 	bl	8000618 <__aeabi_dmul>
 801344c:	4680      	mov	r8, r0
 801344e:	4689      	mov	r9, r1
 8013450:	4650      	mov	r0, sl
 8013452:	4659      	mov	r1, fp
 8013454:	a33f      	add	r3, pc, #252	; (adr r3, 8013554 <__kernel_sin+0x154>)
 8013456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801345a:	f7ed f8dd 	bl	8000618 <__aeabi_dmul>
 801345e:	a33f      	add	r3, pc, #252	; (adr r3, 801355c <__kernel_sin+0x15c>)
 8013460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013464:	f7ec ff20 	bl	80002a8 <__aeabi_dsub>
 8013468:	4652      	mov	r2, sl
 801346a:	465b      	mov	r3, fp
 801346c:	f7ed f8d4 	bl	8000618 <__aeabi_dmul>
 8013470:	a33c      	add	r3, pc, #240	; (adr r3, 8013564 <__kernel_sin+0x164>)
 8013472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013476:	f7ec ff19 	bl	80002ac <__adddf3>
 801347a:	4652      	mov	r2, sl
 801347c:	465b      	mov	r3, fp
 801347e:	f7ed f8cb 	bl	8000618 <__aeabi_dmul>
 8013482:	a33a      	add	r3, pc, #232	; (adr r3, 801356c <__kernel_sin+0x16c>)
 8013484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013488:	f7ec ff0e 	bl	80002a8 <__aeabi_dsub>
 801348c:	4652      	mov	r2, sl
 801348e:	465b      	mov	r3, fp
 8013490:	f7ed f8c2 	bl	8000618 <__aeabi_dmul>
 8013494:	a337      	add	r3, pc, #220	; (adr r3, 8013574 <__kernel_sin+0x174>)
 8013496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801349a:	f7ec ff07 	bl	80002ac <__adddf3>
 801349e:	9b01      	ldr	r3, [sp, #4]
 80134a0:	4606      	mov	r6, r0
 80134a2:	460f      	mov	r7, r1
 80134a4:	b9eb      	cbnz	r3, 80134e2 <__kernel_sin+0xe2>
 80134a6:	4602      	mov	r2, r0
 80134a8:	460b      	mov	r3, r1
 80134aa:	4650      	mov	r0, sl
 80134ac:	4659      	mov	r1, fp
 80134ae:	f7ed f8b3 	bl	8000618 <__aeabi_dmul>
 80134b2:	a325      	add	r3, pc, #148	; (adr r3, 8013548 <__kernel_sin+0x148>)
 80134b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b8:	f7ec fef6 	bl	80002a8 <__aeabi_dsub>
 80134bc:	4642      	mov	r2, r8
 80134be:	464b      	mov	r3, r9
 80134c0:	f7ed f8aa 	bl	8000618 <__aeabi_dmul>
 80134c4:	4602      	mov	r2, r0
 80134c6:	460b      	mov	r3, r1
 80134c8:	4620      	mov	r0, r4
 80134ca:	4629      	mov	r1, r5
 80134cc:	f7ec feee 	bl	80002ac <__adddf3>
 80134d0:	4604      	mov	r4, r0
 80134d2:	460d      	mov	r5, r1
 80134d4:	ec45 4b10 	vmov	d0, r4, r5
 80134d8:	b003      	add	sp, #12
 80134da:	ecbd 8b04 	vpop	{d8-d9}
 80134de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e2:	2200      	movs	r2, #0
 80134e4:	4b1a      	ldr	r3, [pc, #104]	; (8013550 <__kernel_sin+0x150>)
 80134e6:	ec51 0b18 	vmov	r0, r1, d8
 80134ea:	f7ed f895 	bl	8000618 <__aeabi_dmul>
 80134ee:	4632      	mov	r2, r6
 80134f0:	463b      	mov	r3, r7
 80134f2:	ec41 0b19 	vmov	d9, r0, r1
 80134f6:	4640      	mov	r0, r8
 80134f8:	4649      	mov	r1, r9
 80134fa:	f7ed f88d 	bl	8000618 <__aeabi_dmul>
 80134fe:	4602      	mov	r2, r0
 8013500:	460b      	mov	r3, r1
 8013502:	ec51 0b19 	vmov	r0, r1, d9
 8013506:	f7ec fecf 	bl	80002a8 <__aeabi_dsub>
 801350a:	4652      	mov	r2, sl
 801350c:	465b      	mov	r3, fp
 801350e:	f7ed f883 	bl	8000618 <__aeabi_dmul>
 8013512:	ec53 2b18 	vmov	r2, r3, d8
 8013516:	f7ec fec7 	bl	80002a8 <__aeabi_dsub>
 801351a:	4606      	mov	r6, r0
 801351c:	460f      	mov	r7, r1
 801351e:	4640      	mov	r0, r8
 8013520:	4649      	mov	r1, r9
 8013522:	a309      	add	r3, pc, #36	; (adr r3, 8013548 <__kernel_sin+0x148>)
 8013524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013528:	f7ed f876 	bl	8000618 <__aeabi_dmul>
 801352c:	4602      	mov	r2, r0
 801352e:	460b      	mov	r3, r1
 8013530:	4630      	mov	r0, r6
 8013532:	4639      	mov	r1, r7
 8013534:	f7ec feba 	bl	80002ac <__adddf3>
 8013538:	4602      	mov	r2, r0
 801353a:	460b      	mov	r3, r1
 801353c:	4620      	mov	r0, r4
 801353e:	4629      	mov	r1, r5
 8013540:	f7ec feb2 	bl	80002a8 <__aeabi_dsub>
 8013544:	e7c4      	b.n	80134d0 <__kernel_sin+0xd0>
 8013546:	bf00      	nop
 8013548:	55555549 	.word	0x55555549
 801354c:	3fc55555 	.word	0x3fc55555
 8013550:	3fe00000 	.word	0x3fe00000
 8013554:	5acfd57c 	.word	0x5acfd57c
 8013558:	3de5d93a 	.word	0x3de5d93a
 801355c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013560:	3e5ae5e6 	.word	0x3e5ae5e6
 8013564:	57b1fe7d 	.word	0x57b1fe7d
 8013568:	3ec71de3 	.word	0x3ec71de3
 801356c:	19c161d5 	.word	0x19c161d5
 8013570:	3f2a01a0 	.word	0x3f2a01a0
 8013574:	1110f8a6 	.word	0x1110f8a6
 8013578:	3f811111 	.word	0x3f811111
 801357c:	00000000 	.word	0x00000000

08013580 <__ieee754_pow>:
 8013580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013584:	ed2d 8b06 	vpush	{d8-d10}
 8013588:	b089      	sub	sp, #36	; 0x24
 801358a:	ed8d 1b00 	vstr	d1, [sp]
 801358e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013592:	ec57 6b10 	vmov	r6, r7, d0
 8013596:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801359a:	ea58 0102 	orrs.w	r1, r8, r2
 801359e:	d115      	bne.n	80135cc <__ieee754_pow+0x4c>
 80135a0:	19b3      	adds	r3, r6, r6
 80135a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80135a6:	4152      	adcs	r2, r2
 80135a8:	4299      	cmp	r1, r3
 80135aa:	4b89      	ldr	r3, [pc, #548]	; (80137d0 <__ieee754_pow+0x250>)
 80135ac:	4193      	sbcs	r3, r2
 80135ae:	f080 84d2 	bcs.w	8013f56 <__ieee754_pow+0x9d6>
 80135b2:	4630      	mov	r0, r6
 80135b4:	4639      	mov	r1, r7
 80135b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135ba:	f7ec fe77 	bl	80002ac <__adddf3>
 80135be:	ec41 0b10 	vmov	d0, r0, r1
 80135c2:	b009      	add	sp, #36	; 0x24
 80135c4:	ecbd 8b06 	vpop	{d8-d10}
 80135c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135cc:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80135d0:	4b80      	ldr	r3, [pc, #512]	; (80137d4 <__ieee754_pow+0x254>)
 80135d2:	463d      	mov	r5, r7
 80135d4:	ee10 aa10 	vmov	sl, s0
 80135d8:	429c      	cmp	r4, r3
 80135da:	dc06      	bgt.n	80135ea <__ieee754_pow+0x6a>
 80135dc:	d101      	bne.n	80135e2 <__ieee754_pow+0x62>
 80135de:	2e00      	cmp	r6, #0
 80135e0:	d1e7      	bne.n	80135b2 <__ieee754_pow+0x32>
 80135e2:	4598      	cmp	r8, r3
 80135e4:	dc01      	bgt.n	80135ea <__ieee754_pow+0x6a>
 80135e6:	d10f      	bne.n	8013608 <__ieee754_pow+0x88>
 80135e8:	b172      	cbz	r2, 8013608 <__ieee754_pow+0x88>
 80135ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80135ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80135f2:	ea55 050a 	orrs.w	r5, r5, sl
 80135f6:	d1dc      	bne.n	80135b2 <__ieee754_pow+0x32>
 80135f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80135fc:	18db      	adds	r3, r3, r3
 80135fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013602:	4152      	adcs	r2, r2
 8013604:	429d      	cmp	r5, r3
 8013606:	e7d0      	b.n	80135aa <__ieee754_pow+0x2a>
 8013608:	2d00      	cmp	r5, #0
 801360a:	da3b      	bge.n	8013684 <__ieee754_pow+0x104>
 801360c:	4b72      	ldr	r3, [pc, #456]	; (80137d8 <__ieee754_pow+0x258>)
 801360e:	4598      	cmp	r8, r3
 8013610:	dc51      	bgt.n	80136b6 <__ieee754_pow+0x136>
 8013612:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013616:	4598      	cmp	r8, r3
 8013618:	f340 84ac 	ble.w	8013f74 <__ieee754_pow+0x9f4>
 801361c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013620:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013624:	2b14      	cmp	r3, #20
 8013626:	dd0f      	ble.n	8013648 <__ieee754_pow+0xc8>
 8013628:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801362c:	fa22 f103 	lsr.w	r1, r2, r3
 8013630:	fa01 f303 	lsl.w	r3, r1, r3
 8013634:	4293      	cmp	r3, r2
 8013636:	f040 849d 	bne.w	8013f74 <__ieee754_pow+0x9f4>
 801363a:	f001 0101 	and.w	r1, r1, #1
 801363e:	f1c1 0302 	rsb	r3, r1, #2
 8013642:	9304      	str	r3, [sp, #16]
 8013644:	b182      	cbz	r2, 8013668 <__ieee754_pow+0xe8>
 8013646:	e05f      	b.n	8013708 <__ieee754_pow+0x188>
 8013648:	2a00      	cmp	r2, #0
 801364a:	d15b      	bne.n	8013704 <__ieee754_pow+0x184>
 801364c:	f1c3 0314 	rsb	r3, r3, #20
 8013650:	fa48 f103 	asr.w	r1, r8, r3
 8013654:	fa01 f303 	lsl.w	r3, r1, r3
 8013658:	4543      	cmp	r3, r8
 801365a:	f040 8488 	bne.w	8013f6e <__ieee754_pow+0x9ee>
 801365e:	f001 0101 	and.w	r1, r1, #1
 8013662:	f1c1 0302 	rsb	r3, r1, #2
 8013666:	9304      	str	r3, [sp, #16]
 8013668:	4b5c      	ldr	r3, [pc, #368]	; (80137dc <__ieee754_pow+0x25c>)
 801366a:	4598      	cmp	r8, r3
 801366c:	d132      	bne.n	80136d4 <__ieee754_pow+0x154>
 801366e:	f1b9 0f00 	cmp.w	r9, #0
 8013672:	f280 8478 	bge.w	8013f66 <__ieee754_pow+0x9e6>
 8013676:	4632      	mov	r2, r6
 8013678:	463b      	mov	r3, r7
 801367a:	2000      	movs	r0, #0
 801367c:	4957      	ldr	r1, [pc, #348]	; (80137dc <__ieee754_pow+0x25c>)
 801367e:	f7ed f8f5 	bl	800086c <__aeabi_ddiv>
 8013682:	e79c      	b.n	80135be <__ieee754_pow+0x3e>
 8013684:	2300      	movs	r3, #0
 8013686:	9304      	str	r3, [sp, #16]
 8013688:	2a00      	cmp	r2, #0
 801368a:	d13d      	bne.n	8013708 <__ieee754_pow+0x188>
 801368c:	4b51      	ldr	r3, [pc, #324]	; (80137d4 <__ieee754_pow+0x254>)
 801368e:	4598      	cmp	r8, r3
 8013690:	d1ea      	bne.n	8013668 <__ieee754_pow+0xe8>
 8013692:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013696:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801369a:	ea53 030a 	orrs.w	r3, r3, sl
 801369e:	f000 845a 	beq.w	8013f56 <__ieee754_pow+0x9d6>
 80136a2:	4b4f      	ldr	r3, [pc, #316]	; (80137e0 <__ieee754_pow+0x260>)
 80136a4:	429c      	cmp	r4, r3
 80136a6:	dd08      	ble.n	80136ba <__ieee754_pow+0x13a>
 80136a8:	f1b9 0f00 	cmp.w	r9, #0
 80136ac:	f2c0 8457 	blt.w	8013f5e <__ieee754_pow+0x9de>
 80136b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136b4:	e783      	b.n	80135be <__ieee754_pow+0x3e>
 80136b6:	2302      	movs	r3, #2
 80136b8:	e7e5      	b.n	8013686 <__ieee754_pow+0x106>
 80136ba:	f1b9 0f00 	cmp.w	r9, #0
 80136be:	f04f 0000 	mov.w	r0, #0
 80136c2:	f04f 0100 	mov.w	r1, #0
 80136c6:	f6bf af7a 	bge.w	80135be <__ieee754_pow+0x3e>
 80136ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80136ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80136d2:	e774      	b.n	80135be <__ieee754_pow+0x3e>
 80136d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80136d8:	d106      	bne.n	80136e8 <__ieee754_pow+0x168>
 80136da:	4632      	mov	r2, r6
 80136dc:	463b      	mov	r3, r7
 80136de:	4630      	mov	r0, r6
 80136e0:	4639      	mov	r1, r7
 80136e2:	f7ec ff99 	bl	8000618 <__aeabi_dmul>
 80136e6:	e76a      	b.n	80135be <__ieee754_pow+0x3e>
 80136e8:	4b3e      	ldr	r3, [pc, #248]	; (80137e4 <__ieee754_pow+0x264>)
 80136ea:	4599      	cmp	r9, r3
 80136ec:	d10c      	bne.n	8013708 <__ieee754_pow+0x188>
 80136ee:	2d00      	cmp	r5, #0
 80136f0:	db0a      	blt.n	8013708 <__ieee754_pow+0x188>
 80136f2:	ec47 6b10 	vmov	d0, r6, r7
 80136f6:	b009      	add	sp, #36	; 0x24
 80136f8:	ecbd 8b06 	vpop	{d8-d10}
 80136fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013700:	f7ff bc54 	b.w	8012fac <__ieee754_sqrt>
 8013704:	2300      	movs	r3, #0
 8013706:	9304      	str	r3, [sp, #16]
 8013708:	ec47 6b10 	vmov	d0, r6, r7
 801370c:	f7ff fb30 	bl	8012d70 <fabs>
 8013710:	ec51 0b10 	vmov	r0, r1, d0
 8013714:	f1ba 0f00 	cmp.w	sl, #0
 8013718:	d129      	bne.n	801376e <__ieee754_pow+0x1ee>
 801371a:	b124      	cbz	r4, 8013726 <__ieee754_pow+0x1a6>
 801371c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013720:	4b2e      	ldr	r3, [pc, #184]	; (80137dc <__ieee754_pow+0x25c>)
 8013722:	429a      	cmp	r2, r3
 8013724:	d123      	bne.n	801376e <__ieee754_pow+0x1ee>
 8013726:	f1b9 0f00 	cmp.w	r9, #0
 801372a:	da05      	bge.n	8013738 <__ieee754_pow+0x1b8>
 801372c:	4602      	mov	r2, r0
 801372e:	460b      	mov	r3, r1
 8013730:	2000      	movs	r0, #0
 8013732:	492a      	ldr	r1, [pc, #168]	; (80137dc <__ieee754_pow+0x25c>)
 8013734:	f7ed f89a 	bl	800086c <__aeabi_ddiv>
 8013738:	2d00      	cmp	r5, #0
 801373a:	f6bf af40 	bge.w	80135be <__ieee754_pow+0x3e>
 801373e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013742:	9b04      	ldr	r3, [sp, #16]
 8013744:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013748:	431c      	orrs	r4, r3
 801374a:	d108      	bne.n	801375e <__ieee754_pow+0x1de>
 801374c:	4602      	mov	r2, r0
 801374e:	460b      	mov	r3, r1
 8013750:	4610      	mov	r0, r2
 8013752:	4619      	mov	r1, r3
 8013754:	f7ec fda8 	bl	80002a8 <__aeabi_dsub>
 8013758:	4602      	mov	r2, r0
 801375a:	460b      	mov	r3, r1
 801375c:	e78f      	b.n	801367e <__ieee754_pow+0xfe>
 801375e:	9b04      	ldr	r3, [sp, #16]
 8013760:	2b01      	cmp	r3, #1
 8013762:	f47f af2c 	bne.w	80135be <__ieee754_pow+0x3e>
 8013766:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801376a:	4619      	mov	r1, r3
 801376c:	e727      	b.n	80135be <__ieee754_pow+0x3e>
 801376e:	0feb      	lsrs	r3, r5, #31
 8013770:	3b01      	subs	r3, #1
 8013772:	9306      	str	r3, [sp, #24]
 8013774:	9a06      	ldr	r2, [sp, #24]
 8013776:	9b04      	ldr	r3, [sp, #16]
 8013778:	4313      	orrs	r3, r2
 801377a:	d102      	bne.n	8013782 <__ieee754_pow+0x202>
 801377c:	4632      	mov	r2, r6
 801377e:	463b      	mov	r3, r7
 8013780:	e7e6      	b.n	8013750 <__ieee754_pow+0x1d0>
 8013782:	4b19      	ldr	r3, [pc, #100]	; (80137e8 <__ieee754_pow+0x268>)
 8013784:	4598      	cmp	r8, r3
 8013786:	f340 80fb 	ble.w	8013980 <__ieee754_pow+0x400>
 801378a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801378e:	4598      	cmp	r8, r3
 8013790:	4b13      	ldr	r3, [pc, #76]	; (80137e0 <__ieee754_pow+0x260>)
 8013792:	dd0c      	ble.n	80137ae <__ieee754_pow+0x22e>
 8013794:	429c      	cmp	r4, r3
 8013796:	dc0f      	bgt.n	80137b8 <__ieee754_pow+0x238>
 8013798:	f1b9 0f00 	cmp.w	r9, #0
 801379c:	da0f      	bge.n	80137be <__ieee754_pow+0x23e>
 801379e:	2000      	movs	r0, #0
 80137a0:	b009      	add	sp, #36	; 0x24
 80137a2:	ecbd 8b06 	vpop	{d8-d10}
 80137a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137aa:	f7ff bbf6 	b.w	8012f9a <__math_oflow>
 80137ae:	429c      	cmp	r4, r3
 80137b0:	dbf2      	blt.n	8013798 <__ieee754_pow+0x218>
 80137b2:	4b0a      	ldr	r3, [pc, #40]	; (80137dc <__ieee754_pow+0x25c>)
 80137b4:	429c      	cmp	r4, r3
 80137b6:	dd19      	ble.n	80137ec <__ieee754_pow+0x26c>
 80137b8:	f1b9 0f00 	cmp.w	r9, #0
 80137bc:	dcef      	bgt.n	801379e <__ieee754_pow+0x21e>
 80137be:	2000      	movs	r0, #0
 80137c0:	b009      	add	sp, #36	; 0x24
 80137c2:	ecbd 8b06 	vpop	{d8-d10}
 80137c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ca:	f7ff bbdd 	b.w	8012f88 <__math_uflow>
 80137ce:	bf00      	nop
 80137d0:	fff00000 	.word	0xfff00000
 80137d4:	7ff00000 	.word	0x7ff00000
 80137d8:	433fffff 	.word	0x433fffff
 80137dc:	3ff00000 	.word	0x3ff00000
 80137e0:	3fefffff 	.word	0x3fefffff
 80137e4:	3fe00000 	.word	0x3fe00000
 80137e8:	41e00000 	.word	0x41e00000
 80137ec:	2200      	movs	r2, #0
 80137ee:	4b60      	ldr	r3, [pc, #384]	; (8013970 <__ieee754_pow+0x3f0>)
 80137f0:	f7ec fd5a 	bl	80002a8 <__aeabi_dsub>
 80137f4:	4604      	mov	r4, r0
 80137f6:	460d      	mov	r5, r1
 80137f8:	a353      	add	r3, pc, #332	; (adr r3, 8013948 <__ieee754_pow+0x3c8>)
 80137fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137fe:	f7ec ff0b 	bl	8000618 <__aeabi_dmul>
 8013802:	4606      	mov	r6, r0
 8013804:	460f      	mov	r7, r1
 8013806:	4620      	mov	r0, r4
 8013808:	4629      	mov	r1, r5
 801380a:	a351      	add	r3, pc, #324	; (adr r3, 8013950 <__ieee754_pow+0x3d0>)
 801380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013810:	f7ec ff02 	bl	8000618 <__aeabi_dmul>
 8013814:	2200      	movs	r2, #0
 8013816:	4682      	mov	sl, r0
 8013818:	468b      	mov	fp, r1
 801381a:	4b56      	ldr	r3, [pc, #344]	; (8013974 <__ieee754_pow+0x3f4>)
 801381c:	4620      	mov	r0, r4
 801381e:	4629      	mov	r1, r5
 8013820:	f7ec fefa 	bl	8000618 <__aeabi_dmul>
 8013824:	4602      	mov	r2, r0
 8013826:	460b      	mov	r3, r1
 8013828:	a14b      	add	r1, pc, #300	; (adr r1, 8013958 <__ieee754_pow+0x3d8>)
 801382a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801382e:	f7ec fd3b 	bl	80002a8 <__aeabi_dsub>
 8013832:	4622      	mov	r2, r4
 8013834:	462b      	mov	r3, r5
 8013836:	f7ec feef 	bl	8000618 <__aeabi_dmul>
 801383a:	4602      	mov	r2, r0
 801383c:	460b      	mov	r3, r1
 801383e:	2000      	movs	r0, #0
 8013840:	494d      	ldr	r1, [pc, #308]	; (8013978 <__ieee754_pow+0x3f8>)
 8013842:	f7ec fd31 	bl	80002a8 <__aeabi_dsub>
 8013846:	4680      	mov	r8, r0
 8013848:	4689      	mov	r9, r1
 801384a:	4622      	mov	r2, r4
 801384c:	462b      	mov	r3, r5
 801384e:	4620      	mov	r0, r4
 8013850:	4629      	mov	r1, r5
 8013852:	f7ec fee1 	bl	8000618 <__aeabi_dmul>
 8013856:	4602      	mov	r2, r0
 8013858:	460b      	mov	r3, r1
 801385a:	4640      	mov	r0, r8
 801385c:	4649      	mov	r1, r9
 801385e:	f7ec fedb 	bl	8000618 <__aeabi_dmul>
 8013862:	a33f      	add	r3, pc, #252	; (adr r3, 8013960 <__ieee754_pow+0x3e0>)
 8013864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013868:	f7ec fed6 	bl	8000618 <__aeabi_dmul>
 801386c:	4602      	mov	r2, r0
 801386e:	460b      	mov	r3, r1
 8013870:	4650      	mov	r0, sl
 8013872:	4659      	mov	r1, fp
 8013874:	f7ec fd18 	bl	80002a8 <__aeabi_dsub>
 8013878:	4602      	mov	r2, r0
 801387a:	460b      	mov	r3, r1
 801387c:	4680      	mov	r8, r0
 801387e:	4689      	mov	r9, r1
 8013880:	4630      	mov	r0, r6
 8013882:	4639      	mov	r1, r7
 8013884:	f7ec fd12 	bl	80002ac <__adddf3>
 8013888:	2000      	movs	r0, #0
 801388a:	4632      	mov	r2, r6
 801388c:	463b      	mov	r3, r7
 801388e:	4604      	mov	r4, r0
 8013890:	460d      	mov	r5, r1
 8013892:	f7ec fd09 	bl	80002a8 <__aeabi_dsub>
 8013896:	4602      	mov	r2, r0
 8013898:	460b      	mov	r3, r1
 801389a:	4640      	mov	r0, r8
 801389c:	4649      	mov	r1, r9
 801389e:	f7ec fd03 	bl	80002a8 <__aeabi_dsub>
 80138a2:	9b04      	ldr	r3, [sp, #16]
 80138a4:	9a06      	ldr	r2, [sp, #24]
 80138a6:	4682      	mov	sl, r0
 80138a8:	3b01      	subs	r3, #1
 80138aa:	468b      	mov	fp, r1
 80138ac:	4313      	orrs	r3, r2
 80138ae:	f040 81e7 	bne.w	8013c80 <__ieee754_pow+0x700>
 80138b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013968 <__ieee754_pow+0x3e8>
 80138b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80138ba:	2600      	movs	r6, #0
 80138bc:	eeb0 8a47 	vmov.f32	s16, s14
 80138c0:	eef0 8a67 	vmov.f32	s17, s15
 80138c4:	463b      	mov	r3, r7
 80138c6:	4632      	mov	r2, r6
 80138c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138cc:	f7ec fcec 	bl	80002a8 <__aeabi_dsub>
 80138d0:	4622      	mov	r2, r4
 80138d2:	462b      	mov	r3, r5
 80138d4:	f7ec fea0 	bl	8000618 <__aeabi_dmul>
 80138d8:	4680      	mov	r8, r0
 80138da:	4689      	mov	r9, r1
 80138dc:	4650      	mov	r0, sl
 80138de:	4659      	mov	r1, fp
 80138e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80138e4:	f7ec fe98 	bl	8000618 <__aeabi_dmul>
 80138e8:	4602      	mov	r2, r0
 80138ea:	460b      	mov	r3, r1
 80138ec:	4640      	mov	r0, r8
 80138ee:	4649      	mov	r1, r9
 80138f0:	f7ec fcdc 	bl	80002ac <__adddf3>
 80138f4:	4680      	mov	r8, r0
 80138f6:	4689      	mov	r9, r1
 80138f8:	4632      	mov	r2, r6
 80138fa:	463b      	mov	r3, r7
 80138fc:	4620      	mov	r0, r4
 80138fe:	4629      	mov	r1, r5
 8013900:	f7ec fe8a 	bl	8000618 <__aeabi_dmul>
 8013904:	460b      	mov	r3, r1
 8013906:	4604      	mov	r4, r0
 8013908:	460d      	mov	r5, r1
 801390a:	4602      	mov	r2, r0
 801390c:	4649      	mov	r1, r9
 801390e:	4640      	mov	r0, r8
 8013910:	f7ec fccc 	bl	80002ac <__adddf3>
 8013914:	4b19      	ldr	r3, [pc, #100]	; (801397c <__ieee754_pow+0x3fc>)
 8013916:	4606      	mov	r6, r0
 8013918:	460f      	mov	r7, r1
 801391a:	4299      	cmp	r1, r3
 801391c:	468b      	mov	fp, r1
 801391e:	ec45 4b19 	vmov	d9, r4, r5
 8013922:	f340 82f1 	ble.w	8013f08 <__ieee754_pow+0x988>
 8013926:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801392a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801392e:	4303      	orrs	r3, r0
 8013930:	f000 81e4 	beq.w	8013cfc <__ieee754_pow+0x77c>
 8013934:	2200      	movs	r2, #0
 8013936:	2300      	movs	r3, #0
 8013938:	ec51 0b18 	vmov	r0, r1, d8
 801393c:	f7ed f8de 	bl	8000afc <__aeabi_dcmplt>
 8013940:	3800      	subs	r0, #0
 8013942:	bf18      	it	ne
 8013944:	2001      	movne	r0, #1
 8013946:	e72b      	b.n	80137a0 <__ieee754_pow+0x220>
 8013948:	60000000 	.word	0x60000000
 801394c:	3ff71547 	.word	0x3ff71547
 8013950:	f85ddf44 	.word	0xf85ddf44
 8013954:	3e54ae0b 	.word	0x3e54ae0b
 8013958:	55555555 	.word	0x55555555
 801395c:	3fd55555 	.word	0x3fd55555
 8013960:	652b82fe 	.word	0x652b82fe
 8013964:	3ff71547 	.word	0x3ff71547
 8013968:	00000000 	.word	0x00000000
 801396c:	bff00000 	.word	0xbff00000
 8013970:	3ff00000 	.word	0x3ff00000
 8013974:	3fd00000 	.word	0x3fd00000
 8013978:	3fe00000 	.word	0x3fe00000
 801397c:	408fffff 	.word	0x408fffff
 8013980:	4bd5      	ldr	r3, [pc, #852]	; (8013cd8 <__ieee754_pow+0x758>)
 8013982:	2200      	movs	r2, #0
 8013984:	402b      	ands	r3, r5
 8013986:	b92b      	cbnz	r3, 8013994 <__ieee754_pow+0x414>
 8013988:	4bd4      	ldr	r3, [pc, #848]	; (8013cdc <__ieee754_pow+0x75c>)
 801398a:	f7ec fe45 	bl	8000618 <__aeabi_dmul>
 801398e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013992:	460c      	mov	r4, r1
 8013994:	1523      	asrs	r3, r4, #20
 8013996:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801399a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801399e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80139a2:	4413      	add	r3, r2
 80139a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80139a8:	9305      	str	r3, [sp, #20]
 80139aa:	4bcd      	ldr	r3, [pc, #820]	; (8013ce0 <__ieee754_pow+0x760>)
 80139ac:	429c      	cmp	r4, r3
 80139ae:	dd08      	ble.n	80139c2 <__ieee754_pow+0x442>
 80139b0:	4bcc      	ldr	r3, [pc, #816]	; (8013ce4 <__ieee754_pow+0x764>)
 80139b2:	429c      	cmp	r4, r3
 80139b4:	f340 8162 	ble.w	8013c7c <__ieee754_pow+0x6fc>
 80139b8:	9b05      	ldr	r3, [sp, #20]
 80139ba:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80139be:	3301      	adds	r3, #1
 80139c0:	9305      	str	r3, [sp, #20]
 80139c2:	2400      	movs	r4, #0
 80139c4:	00e3      	lsls	r3, r4, #3
 80139c6:	4682      	mov	sl, r0
 80139c8:	4629      	mov	r1, r5
 80139ca:	46ab      	mov	fp, r5
 80139cc:	9307      	str	r3, [sp, #28]
 80139ce:	4bc6      	ldr	r3, [pc, #792]	; (8013ce8 <__ieee754_pow+0x768>)
 80139d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80139d4:	ed93 7b00 	vldr	d7, [r3]
 80139d8:	eeb0 9a47 	vmov.f32	s18, s14
 80139dc:	eef0 9a67 	vmov.f32	s19, s15
 80139e0:	ec53 2b17 	vmov	r2, r3, d7
 80139e4:	f7ec fc60 	bl	80002a8 <__aeabi_dsub>
 80139e8:	4652      	mov	r2, sl
 80139ea:	4606      	mov	r6, r0
 80139ec:	460f      	mov	r7, r1
 80139ee:	462b      	mov	r3, r5
 80139f0:	106d      	asrs	r5, r5, #1
 80139f2:	ec51 0b19 	vmov	r0, r1, d9
 80139f6:	f7ec fc59 	bl	80002ac <__adddf3>
 80139fa:	4602      	mov	r2, r0
 80139fc:	460b      	mov	r3, r1
 80139fe:	2000      	movs	r0, #0
 8013a00:	49ba      	ldr	r1, [pc, #744]	; (8013cec <__ieee754_pow+0x76c>)
 8013a02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013a06:	f7ec ff31 	bl	800086c <__aeabi_ddiv>
 8013a0a:	4602      	mov	r2, r0
 8013a0c:	460b      	mov	r3, r1
 8013a0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013a12:	ec41 0b1a 	vmov	d10, r0, r1
 8013a16:	4630      	mov	r0, r6
 8013a18:	4639      	mov	r1, r7
 8013a1a:	f7ec fdfd 	bl	8000618 <__aeabi_dmul>
 8013a1e:	2300      	movs	r3, #0
 8013a20:	2200      	movs	r2, #0
 8013a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a26:	9302      	str	r3, [sp, #8]
 8013a28:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013a2c:	4614      	mov	r4, r2
 8013a2e:	461d      	mov	r5, r3
 8013a30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013a34:	ec41 0b18 	vmov	d8, r0, r1
 8013a38:	4640      	mov	r0, r8
 8013a3a:	4649      	mov	r1, r9
 8013a3c:	f7ec fdec 	bl	8000618 <__aeabi_dmul>
 8013a40:	4602      	mov	r2, r0
 8013a42:	460b      	mov	r3, r1
 8013a44:	4630      	mov	r0, r6
 8013a46:	4639      	mov	r1, r7
 8013a48:	f7ec fc2e 	bl	80002a8 <__aeabi_dsub>
 8013a4c:	4606      	mov	r6, r0
 8013a4e:	460f      	mov	r7, r1
 8013a50:	4620      	mov	r0, r4
 8013a52:	4629      	mov	r1, r5
 8013a54:	ec53 2b19 	vmov	r2, r3, d9
 8013a58:	f7ec fc26 	bl	80002a8 <__aeabi_dsub>
 8013a5c:	4602      	mov	r2, r0
 8013a5e:	460b      	mov	r3, r1
 8013a60:	4650      	mov	r0, sl
 8013a62:	4659      	mov	r1, fp
 8013a64:	f7ec fc20 	bl	80002a8 <__aeabi_dsub>
 8013a68:	4642      	mov	r2, r8
 8013a6a:	464b      	mov	r3, r9
 8013a6c:	f7ec fdd4 	bl	8000618 <__aeabi_dmul>
 8013a70:	4602      	mov	r2, r0
 8013a72:	460b      	mov	r3, r1
 8013a74:	4630      	mov	r0, r6
 8013a76:	4639      	mov	r1, r7
 8013a78:	f7ec fc16 	bl	80002a8 <__aeabi_dsub>
 8013a7c:	ec53 2b1a 	vmov	r2, r3, d10
 8013a80:	f7ec fdca 	bl	8000618 <__aeabi_dmul>
 8013a84:	ec53 2b18 	vmov	r2, r3, d8
 8013a88:	ec41 0b19 	vmov	d9, r0, r1
 8013a8c:	ec51 0b18 	vmov	r0, r1, d8
 8013a90:	f7ec fdc2 	bl	8000618 <__aeabi_dmul>
 8013a94:	4604      	mov	r4, r0
 8013a96:	460d      	mov	r5, r1
 8013a98:	a37b      	add	r3, pc, #492	; (adr r3, 8013c88 <__ieee754_pow+0x708>)
 8013a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9e:	f7ec fdbb 	bl	8000618 <__aeabi_dmul>
 8013aa2:	a37b      	add	r3, pc, #492	; (adr r3, 8013c90 <__ieee754_pow+0x710>)
 8013aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa8:	f7ec fc00 	bl	80002ac <__adddf3>
 8013aac:	4622      	mov	r2, r4
 8013aae:	462b      	mov	r3, r5
 8013ab0:	f7ec fdb2 	bl	8000618 <__aeabi_dmul>
 8013ab4:	a378      	add	r3, pc, #480	; (adr r3, 8013c98 <__ieee754_pow+0x718>)
 8013ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aba:	f7ec fbf7 	bl	80002ac <__adddf3>
 8013abe:	4622      	mov	r2, r4
 8013ac0:	462b      	mov	r3, r5
 8013ac2:	f7ec fda9 	bl	8000618 <__aeabi_dmul>
 8013ac6:	a376      	add	r3, pc, #472	; (adr r3, 8013ca0 <__ieee754_pow+0x720>)
 8013ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013acc:	f7ec fbee 	bl	80002ac <__adddf3>
 8013ad0:	4622      	mov	r2, r4
 8013ad2:	462b      	mov	r3, r5
 8013ad4:	f7ec fda0 	bl	8000618 <__aeabi_dmul>
 8013ad8:	a373      	add	r3, pc, #460	; (adr r3, 8013ca8 <__ieee754_pow+0x728>)
 8013ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ade:	f7ec fbe5 	bl	80002ac <__adddf3>
 8013ae2:	4622      	mov	r2, r4
 8013ae4:	462b      	mov	r3, r5
 8013ae6:	f7ec fd97 	bl	8000618 <__aeabi_dmul>
 8013aea:	a371      	add	r3, pc, #452	; (adr r3, 8013cb0 <__ieee754_pow+0x730>)
 8013aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af0:	f7ec fbdc 	bl	80002ac <__adddf3>
 8013af4:	4606      	mov	r6, r0
 8013af6:	460f      	mov	r7, r1
 8013af8:	4622      	mov	r2, r4
 8013afa:	462b      	mov	r3, r5
 8013afc:	4620      	mov	r0, r4
 8013afe:	4629      	mov	r1, r5
 8013b00:	f7ec fd8a 	bl	8000618 <__aeabi_dmul>
 8013b04:	4602      	mov	r2, r0
 8013b06:	460b      	mov	r3, r1
 8013b08:	4630      	mov	r0, r6
 8013b0a:	4639      	mov	r1, r7
 8013b0c:	f7ec fd84 	bl	8000618 <__aeabi_dmul>
 8013b10:	4642      	mov	r2, r8
 8013b12:	4604      	mov	r4, r0
 8013b14:	460d      	mov	r5, r1
 8013b16:	464b      	mov	r3, r9
 8013b18:	ec51 0b18 	vmov	r0, r1, d8
 8013b1c:	f7ec fbc6 	bl	80002ac <__adddf3>
 8013b20:	ec53 2b19 	vmov	r2, r3, d9
 8013b24:	f7ec fd78 	bl	8000618 <__aeabi_dmul>
 8013b28:	4622      	mov	r2, r4
 8013b2a:	462b      	mov	r3, r5
 8013b2c:	f7ec fbbe 	bl	80002ac <__adddf3>
 8013b30:	4642      	mov	r2, r8
 8013b32:	4682      	mov	sl, r0
 8013b34:	468b      	mov	fp, r1
 8013b36:	464b      	mov	r3, r9
 8013b38:	4640      	mov	r0, r8
 8013b3a:	4649      	mov	r1, r9
 8013b3c:	f7ec fd6c 	bl	8000618 <__aeabi_dmul>
 8013b40:	2200      	movs	r2, #0
 8013b42:	4b6b      	ldr	r3, [pc, #428]	; (8013cf0 <__ieee754_pow+0x770>)
 8013b44:	4606      	mov	r6, r0
 8013b46:	460f      	mov	r7, r1
 8013b48:	f7ec fbb0 	bl	80002ac <__adddf3>
 8013b4c:	4652      	mov	r2, sl
 8013b4e:	465b      	mov	r3, fp
 8013b50:	f7ec fbac 	bl	80002ac <__adddf3>
 8013b54:	2000      	movs	r0, #0
 8013b56:	460d      	mov	r5, r1
 8013b58:	460b      	mov	r3, r1
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	4649      	mov	r1, r9
 8013b60:	4640      	mov	r0, r8
 8013b62:	f7ec fd59 	bl	8000618 <__aeabi_dmul>
 8013b66:	2200      	movs	r2, #0
 8013b68:	4680      	mov	r8, r0
 8013b6a:	4689      	mov	r9, r1
 8013b6c:	4b60      	ldr	r3, [pc, #384]	; (8013cf0 <__ieee754_pow+0x770>)
 8013b6e:	4620      	mov	r0, r4
 8013b70:	4629      	mov	r1, r5
 8013b72:	f7ec fb99 	bl	80002a8 <__aeabi_dsub>
 8013b76:	4632      	mov	r2, r6
 8013b78:	463b      	mov	r3, r7
 8013b7a:	f7ec fb95 	bl	80002a8 <__aeabi_dsub>
 8013b7e:	4602      	mov	r2, r0
 8013b80:	460b      	mov	r3, r1
 8013b82:	4650      	mov	r0, sl
 8013b84:	4659      	mov	r1, fp
 8013b86:	f7ec fb8f 	bl	80002a8 <__aeabi_dsub>
 8013b8a:	ec53 2b18 	vmov	r2, r3, d8
 8013b8e:	f7ec fd43 	bl	8000618 <__aeabi_dmul>
 8013b92:	4606      	mov	r6, r0
 8013b94:	460f      	mov	r7, r1
 8013b96:	4622      	mov	r2, r4
 8013b98:	462b      	mov	r3, r5
 8013b9a:	ec51 0b19 	vmov	r0, r1, d9
 8013b9e:	f7ec fd3b 	bl	8000618 <__aeabi_dmul>
 8013ba2:	4602      	mov	r2, r0
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	4639      	mov	r1, r7
 8013baa:	f7ec fb7f 	bl	80002ac <__adddf3>
 8013bae:	4606      	mov	r6, r0
 8013bb0:	460f      	mov	r7, r1
 8013bb2:	4602      	mov	r2, r0
 8013bb4:	460b      	mov	r3, r1
 8013bb6:	4640      	mov	r0, r8
 8013bb8:	4649      	mov	r1, r9
 8013bba:	f7ec fb77 	bl	80002ac <__adddf3>
 8013bbe:	2000      	movs	r0, #0
 8013bc0:	460d      	mov	r5, r1
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	a33c      	add	r3, pc, #240	; (adr r3, 8013cb8 <__ieee754_pow+0x738>)
 8013bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bca:	f7ec fd25 	bl	8000618 <__aeabi_dmul>
 8013bce:	4642      	mov	r2, r8
 8013bd0:	464b      	mov	r3, r9
 8013bd2:	ec41 0b18 	vmov	d8, r0, r1
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	4629      	mov	r1, r5
 8013bda:	f7ec fb65 	bl	80002a8 <__aeabi_dsub>
 8013bde:	4602      	mov	r2, r0
 8013be0:	460b      	mov	r3, r1
 8013be2:	4630      	mov	r0, r6
 8013be4:	4639      	mov	r1, r7
 8013be6:	f7ec fb5f 	bl	80002a8 <__aeabi_dsub>
 8013bea:	a335      	add	r3, pc, #212	; (adr r3, 8013cc0 <__ieee754_pow+0x740>)
 8013bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf0:	f7ec fd12 	bl	8000618 <__aeabi_dmul>
 8013bf4:	4606      	mov	r6, r0
 8013bf6:	460f      	mov	r7, r1
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	a332      	add	r3, pc, #200	; (adr r3, 8013cc8 <__ieee754_pow+0x748>)
 8013bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c02:	f7ec fd09 	bl	8000618 <__aeabi_dmul>
 8013c06:	4602      	mov	r2, r0
 8013c08:	460b      	mov	r3, r1
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	4639      	mov	r1, r7
 8013c0e:	f7ec fb4d 	bl	80002ac <__adddf3>
 8013c12:	9a07      	ldr	r2, [sp, #28]
 8013c14:	4b37      	ldr	r3, [pc, #220]	; (8013cf4 <__ieee754_pow+0x774>)
 8013c16:	4413      	add	r3, r2
 8013c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1c:	f7ec fb46 	bl	80002ac <__adddf3>
 8013c20:	4682      	mov	sl, r0
 8013c22:	9805      	ldr	r0, [sp, #20]
 8013c24:	468b      	mov	fp, r1
 8013c26:	f7ec fc8d 	bl	8000544 <__aeabi_i2d>
 8013c2a:	9a07      	ldr	r2, [sp, #28]
 8013c2c:	4b32      	ldr	r3, [pc, #200]	; (8013cf8 <__ieee754_pow+0x778>)
 8013c2e:	4606      	mov	r6, r0
 8013c30:	460f      	mov	r7, r1
 8013c32:	4413      	add	r3, r2
 8013c34:	4652      	mov	r2, sl
 8013c36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c3a:	ec51 0b18 	vmov	r0, r1, d8
 8013c3e:	465b      	mov	r3, fp
 8013c40:	f7ec fb34 	bl	80002ac <__adddf3>
 8013c44:	4642      	mov	r2, r8
 8013c46:	464b      	mov	r3, r9
 8013c48:	f7ec fb30 	bl	80002ac <__adddf3>
 8013c4c:	4632      	mov	r2, r6
 8013c4e:	463b      	mov	r3, r7
 8013c50:	f7ec fb2c 	bl	80002ac <__adddf3>
 8013c54:	2000      	movs	r0, #0
 8013c56:	4632      	mov	r2, r6
 8013c58:	463b      	mov	r3, r7
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	460d      	mov	r5, r1
 8013c5e:	f7ec fb23 	bl	80002a8 <__aeabi_dsub>
 8013c62:	4642      	mov	r2, r8
 8013c64:	464b      	mov	r3, r9
 8013c66:	f7ec fb1f 	bl	80002a8 <__aeabi_dsub>
 8013c6a:	ec53 2b18 	vmov	r2, r3, d8
 8013c6e:	f7ec fb1b 	bl	80002a8 <__aeabi_dsub>
 8013c72:	4602      	mov	r2, r0
 8013c74:	460b      	mov	r3, r1
 8013c76:	4650      	mov	r0, sl
 8013c78:	4659      	mov	r1, fp
 8013c7a:	e610      	b.n	801389e <__ieee754_pow+0x31e>
 8013c7c:	2401      	movs	r4, #1
 8013c7e:	e6a1      	b.n	80139c4 <__ieee754_pow+0x444>
 8013c80:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013cd0 <__ieee754_pow+0x750>
 8013c84:	e617      	b.n	80138b6 <__ieee754_pow+0x336>
 8013c86:	bf00      	nop
 8013c88:	4a454eef 	.word	0x4a454eef
 8013c8c:	3fca7e28 	.word	0x3fca7e28
 8013c90:	93c9db65 	.word	0x93c9db65
 8013c94:	3fcd864a 	.word	0x3fcd864a
 8013c98:	a91d4101 	.word	0xa91d4101
 8013c9c:	3fd17460 	.word	0x3fd17460
 8013ca0:	518f264d 	.word	0x518f264d
 8013ca4:	3fd55555 	.word	0x3fd55555
 8013ca8:	db6fabff 	.word	0xdb6fabff
 8013cac:	3fdb6db6 	.word	0x3fdb6db6
 8013cb0:	33333303 	.word	0x33333303
 8013cb4:	3fe33333 	.word	0x3fe33333
 8013cb8:	e0000000 	.word	0xe0000000
 8013cbc:	3feec709 	.word	0x3feec709
 8013cc0:	dc3a03fd 	.word	0xdc3a03fd
 8013cc4:	3feec709 	.word	0x3feec709
 8013cc8:	145b01f5 	.word	0x145b01f5
 8013ccc:	be3e2fe0 	.word	0xbe3e2fe0
 8013cd0:	00000000 	.word	0x00000000
 8013cd4:	3ff00000 	.word	0x3ff00000
 8013cd8:	7ff00000 	.word	0x7ff00000
 8013cdc:	43400000 	.word	0x43400000
 8013ce0:	0003988e 	.word	0x0003988e
 8013ce4:	000bb679 	.word	0x000bb679
 8013ce8:	08017650 	.word	0x08017650
 8013cec:	3ff00000 	.word	0x3ff00000
 8013cf0:	40080000 	.word	0x40080000
 8013cf4:	08017670 	.word	0x08017670
 8013cf8:	08017660 	.word	0x08017660
 8013cfc:	a3b5      	add	r3, pc, #724	; (adr r3, 8013fd4 <__ieee754_pow+0xa54>)
 8013cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d02:	4640      	mov	r0, r8
 8013d04:	4649      	mov	r1, r9
 8013d06:	f7ec fad1 	bl	80002ac <__adddf3>
 8013d0a:	4622      	mov	r2, r4
 8013d0c:	462b      	mov	r3, r5
 8013d0e:	ec41 0b1a 	vmov	d10, r0, r1
 8013d12:	4630      	mov	r0, r6
 8013d14:	4639      	mov	r1, r7
 8013d16:	f7ec fac7 	bl	80002a8 <__aeabi_dsub>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	ec51 0b1a 	vmov	r0, r1, d10
 8013d22:	f7ec ff09 	bl	8000b38 <__aeabi_dcmpgt>
 8013d26:	2800      	cmp	r0, #0
 8013d28:	f47f ae04 	bne.w	8013934 <__ieee754_pow+0x3b4>
 8013d2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013d30:	4aa3      	ldr	r2, [pc, #652]	; (8013fc0 <__ieee754_pow+0xa40>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	f340 8108 	ble.w	8013f48 <__ieee754_pow+0x9c8>
 8013d38:	151b      	asrs	r3, r3, #20
 8013d3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013d3e:	48a1      	ldr	r0, [pc, #644]	; (8013fc4 <__ieee754_pow+0xa44>)
 8013d40:	f1bb 0f00 	cmp.w	fp, #0
 8013d44:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013d48:	f04f 0200 	mov.w	r2, #0
 8013d4c:	fa4a fa03 	asr.w	sl, sl, r3
 8013d50:	44da      	add	sl, fp
 8013d52:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013d56:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013d5a:	fa40 f001 	asr.w	r0, r0, r1
 8013d5e:	f1c1 0114 	rsb	r1, r1, #20
 8013d62:	ea00 030a 	and.w	r3, r0, sl
 8013d66:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013d70:	fa4a fa01 	asr.w	sl, sl, r1
 8013d74:	4629      	mov	r1, r5
 8013d76:	bfb8      	it	lt
 8013d78:	f1ca 0a00 	rsblt	sl, sl, #0
 8013d7c:	f7ec fa94 	bl	80002a8 <__aeabi_dsub>
 8013d80:	ec41 0b19 	vmov	d9, r0, r1
 8013d84:	4642      	mov	r2, r8
 8013d86:	464b      	mov	r3, r9
 8013d88:	ec51 0b19 	vmov	r0, r1, d9
 8013d8c:	f7ec fa8e 	bl	80002ac <__adddf3>
 8013d90:	2000      	movs	r0, #0
 8013d92:	460d      	mov	r5, r1
 8013d94:	4604      	mov	r4, r0
 8013d96:	a37a      	add	r3, pc, #488	; (adr r3, 8013f80 <__ieee754_pow+0xa00>)
 8013d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9c:	f7ec fc3c 	bl	8000618 <__aeabi_dmul>
 8013da0:	4606      	mov	r6, r0
 8013da2:	460f      	mov	r7, r1
 8013da4:	4620      	mov	r0, r4
 8013da6:	4629      	mov	r1, r5
 8013da8:	ec53 2b19 	vmov	r2, r3, d9
 8013dac:	f7ec fa7c 	bl	80002a8 <__aeabi_dsub>
 8013db0:	4602      	mov	r2, r0
 8013db2:	460b      	mov	r3, r1
 8013db4:	4640      	mov	r0, r8
 8013db6:	4649      	mov	r1, r9
 8013db8:	f7ec fa76 	bl	80002a8 <__aeabi_dsub>
 8013dbc:	a372      	add	r3, pc, #456	; (adr r3, 8013f88 <__ieee754_pow+0xa08>)
 8013dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc2:	f7ec fc29 	bl	8000618 <__aeabi_dmul>
 8013dc6:	4680      	mov	r8, r0
 8013dc8:	4689      	mov	r9, r1
 8013dca:	4620      	mov	r0, r4
 8013dcc:	4629      	mov	r1, r5
 8013dce:	a370      	add	r3, pc, #448	; (adr r3, 8013f90 <__ieee754_pow+0xa10>)
 8013dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd4:	f7ec fc20 	bl	8000618 <__aeabi_dmul>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	460b      	mov	r3, r1
 8013ddc:	4640      	mov	r0, r8
 8013dde:	4649      	mov	r1, r9
 8013de0:	f7ec fa64 	bl	80002ac <__adddf3>
 8013de4:	4604      	mov	r4, r0
 8013de6:	460d      	mov	r5, r1
 8013de8:	4602      	mov	r2, r0
 8013dea:	460b      	mov	r3, r1
 8013dec:	4630      	mov	r0, r6
 8013dee:	4639      	mov	r1, r7
 8013df0:	f7ec fa5c 	bl	80002ac <__adddf3>
 8013df4:	4632      	mov	r2, r6
 8013df6:	4680      	mov	r8, r0
 8013df8:	4689      	mov	r9, r1
 8013dfa:	463b      	mov	r3, r7
 8013dfc:	f7ec fa54 	bl	80002a8 <__aeabi_dsub>
 8013e00:	4602      	mov	r2, r0
 8013e02:	460b      	mov	r3, r1
 8013e04:	4620      	mov	r0, r4
 8013e06:	4629      	mov	r1, r5
 8013e08:	f7ec fa4e 	bl	80002a8 <__aeabi_dsub>
 8013e0c:	4642      	mov	r2, r8
 8013e0e:	4606      	mov	r6, r0
 8013e10:	460f      	mov	r7, r1
 8013e12:	464b      	mov	r3, r9
 8013e14:	4640      	mov	r0, r8
 8013e16:	4649      	mov	r1, r9
 8013e18:	f7ec fbfe 	bl	8000618 <__aeabi_dmul>
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	460d      	mov	r5, r1
 8013e20:	a35d      	add	r3, pc, #372	; (adr r3, 8013f98 <__ieee754_pow+0xa18>)
 8013e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e26:	f7ec fbf7 	bl	8000618 <__aeabi_dmul>
 8013e2a:	a35d      	add	r3, pc, #372	; (adr r3, 8013fa0 <__ieee754_pow+0xa20>)
 8013e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e30:	f7ec fa3a 	bl	80002a8 <__aeabi_dsub>
 8013e34:	4622      	mov	r2, r4
 8013e36:	462b      	mov	r3, r5
 8013e38:	f7ec fbee 	bl	8000618 <__aeabi_dmul>
 8013e3c:	a35a      	add	r3, pc, #360	; (adr r3, 8013fa8 <__ieee754_pow+0xa28>)
 8013e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e42:	f7ec fa33 	bl	80002ac <__adddf3>
 8013e46:	4622      	mov	r2, r4
 8013e48:	462b      	mov	r3, r5
 8013e4a:	f7ec fbe5 	bl	8000618 <__aeabi_dmul>
 8013e4e:	a358      	add	r3, pc, #352	; (adr r3, 8013fb0 <__ieee754_pow+0xa30>)
 8013e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e54:	f7ec fa28 	bl	80002a8 <__aeabi_dsub>
 8013e58:	4622      	mov	r2, r4
 8013e5a:	462b      	mov	r3, r5
 8013e5c:	f7ec fbdc 	bl	8000618 <__aeabi_dmul>
 8013e60:	a355      	add	r3, pc, #340	; (adr r3, 8013fb8 <__ieee754_pow+0xa38>)
 8013e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e66:	f7ec fa21 	bl	80002ac <__adddf3>
 8013e6a:	4622      	mov	r2, r4
 8013e6c:	462b      	mov	r3, r5
 8013e6e:	f7ec fbd3 	bl	8000618 <__aeabi_dmul>
 8013e72:	4602      	mov	r2, r0
 8013e74:	460b      	mov	r3, r1
 8013e76:	4640      	mov	r0, r8
 8013e78:	4649      	mov	r1, r9
 8013e7a:	f7ec fa15 	bl	80002a8 <__aeabi_dsub>
 8013e7e:	4604      	mov	r4, r0
 8013e80:	460d      	mov	r5, r1
 8013e82:	4602      	mov	r2, r0
 8013e84:	460b      	mov	r3, r1
 8013e86:	4640      	mov	r0, r8
 8013e88:	4649      	mov	r1, r9
 8013e8a:	f7ec fbc5 	bl	8000618 <__aeabi_dmul>
 8013e8e:	2200      	movs	r2, #0
 8013e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e94:	ec41 0b19 	vmov	d9, r0, r1
 8013e98:	4620      	mov	r0, r4
 8013e9a:	4629      	mov	r1, r5
 8013e9c:	f7ec fa04 	bl	80002a8 <__aeabi_dsub>
 8013ea0:	4602      	mov	r2, r0
 8013ea2:	460b      	mov	r3, r1
 8013ea4:	ec51 0b19 	vmov	r0, r1, d9
 8013ea8:	f7ec fce0 	bl	800086c <__aeabi_ddiv>
 8013eac:	4632      	mov	r2, r6
 8013eae:	4604      	mov	r4, r0
 8013eb0:	460d      	mov	r5, r1
 8013eb2:	463b      	mov	r3, r7
 8013eb4:	4640      	mov	r0, r8
 8013eb6:	4649      	mov	r1, r9
 8013eb8:	f7ec fbae 	bl	8000618 <__aeabi_dmul>
 8013ebc:	4632      	mov	r2, r6
 8013ebe:	463b      	mov	r3, r7
 8013ec0:	f7ec f9f4 	bl	80002ac <__adddf3>
 8013ec4:	4602      	mov	r2, r0
 8013ec6:	460b      	mov	r3, r1
 8013ec8:	4620      	mov	r0, r4
 8013eca:	4629      	mov	r1, r5
 8013ecc:	f7ec f9ec 	bl	80002a8 <__aeabi_dsub>
 8013ed0:	4642      	mov	r2, r8
 8013ed2:	464b      	mov	r3, r9
 8013ed4:	f7ec f9e8 	bl	80002a8 <__aeabi_dsub>
 8013ed8:	460b      	mov	r3, r1
 8013eda:	4602      	mov	r2, r0
 8013edc:	493a      	ldr	r1, [pc, #232]	; (8013fc8 <__ieee754_pow+0xa48>)
 8013ede:	2000      	movs	r0, #0
 8013ee0:	f7ec f9e2 	bl	80002a8 <__aeabi_dsub>
 8013ee4:	ec41 0b10 	vmov	d0, r0, r1
 8013ee8:	ee10 3a90 	vmov	r3, s1
 8013eec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013ef4:	da2b      	bge.n	8013f4e <__ieee754_pow+0x9ce>
 8013ef6:	4650      	mov	r0, sl
 8013ef8:	f7fe ffaa 	bl	8012e50 <scalbn>
 8013efc:	ec51 0b10 	vmov	r0, r1, d0
 8013f00:	ec53 2b18 	vmov	r2, r3, d8
 8013f04:	f7ff bbed 	b.w	80136e2 <__ieee754_pow+0x162>
 8013f08:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013f0c:	4b2f      	ldr	r3, [pc, #188]	; (8013fcc <__ieee754_pow+0xa4c>)
 8013f0e:	429e      	cmp	r6, r3
 8013f10:	f77f af0c 	ble.w	8013d2c <__ieee754_pow+0x7ac>
 8013f14:	4b2e      	ldr	r3, [pc, #184]	; (8013fd0 <__ieee754_pow+0xa50>)
 8013f16:	440b      	add	r3, r1
 8013f18:	4303      	orrs	r3, r0
 8013f1a:	d009      	beq.n	8013f30 <__ieee754_pow+0x9b0>
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	2300      	movs	r3, #0
 8013f20:	ec51 0b18 	vmov	r0, r1, d8
 8013f24:	f7ec fdea 	bl	8000afc <__aeabi_dcmplt>
 8013f28:	3800      	subs	r0, #0
 8013f2a:	bf18      	it	ne
 8013f2c:	2001      	movne	r0, #1
 8013f2e:	e447      	b.n	80137c0 <__ieee754_pow+0x240>
 8013f30:	4622      	mov	r2, r4
 8013f32:	462b      	mov	r3, r5
 8013f34:	f7ec f9b8 	bl	80002a8 <__aeabi_dsub>
 8013f38:	4642      	mov	r2, r8
 8013f3a:	464b      	mov	r3, r9
 8013f3c:	f7ec fdf2 	bl	8000b24 <__aeabi_dcmpge>
 8013f40:	2800      	cmp	r0, #0
 8013f42:	f43f aef3 	beq.w	8013d2c <__ieee754_pow+0x7ac>
 8013f46:	e7e9      	b.n	8013f1c <__ieee754_pow+0x99c>
 8013f48:	f04f 0a00 	mov.w	sl, #0
 8013f4c:	e71a      	b.n	8013d84 <__ieee754_pow+0x804>
 8013f4e:	ec51 0b10 	vmov	r0, r1, d0
 8013f52:	4619      	mov	r1, r3
 8013f54:	e7d4      	b.n	8013f00 <__ieee754_pow+0x980>
 8013f56:	2000      	movs	r0, #0
 8013f58:	491b      	ldr	r1, [pc, #108]	; (8013fc8 <__ieee754_pow+0xa48>)
 8013f5a:	f7ff bb30 	b.w	80135be <__ieee754_pow+0x3e>
 8013f5e:	2000      	movs	r0, #0
 8013f60:	2100      	movs	r1, #0
 8013f62:	f7ff bb2c 	b.w	80135be <__ieee754_pow+0x3e>
 8013f66:	4630      	mov	r0, r6
 8013f68:	4639      	mov	r1, r7
 8013f6a:	f7ff bb28 	b.w	80135be <__ieee754_pow+0x3e>
 8013f6e:	9204      	str	r2, [sp, #16]
 8013f70:	f7ff bb7a 	b.w	8013668 <__ieee754_pow+0xe8>
 8013f74:	2300      	movs	r3, #0
 8013f76:	f7ff bb64 	b.w	8013642 <__ieee754_pow+0xc2>
 8013f7a:	bf00      	nop
 8013f7c:	f3af 8000 	nop.w
 8013f80:	00000000 	.word	0x00000000
 8013f84:	3fe62e43 	.word	0x3fe62e43
 8013f88:	fefa39ef 	.word	0xfefa39ef
 8013f8c:	3fe62e42 	.word	0x3fe62e42
 8013f90:	0ca86c39 	.word	0x0ca86c39
 8013f94:	be205c61 	.word	0xbe205c61
 8013f98:	72bea4d0 	.word	0x72bea4d0
 8013f9c:	3e663769 	.word	0x3e663769
 8013fa0:	c5d26bf1 	.word	0xc5d26bf1
 8013fa4:	3ebbbd41 	.word	0x3ebbbd41
 8013fa8:	af25de2c 	.word	0xaf25de2c
 8013fac:	3f11566a 	.word	0x3f11566a
 8013fb0:	16bebd93 	.word	0x16bebd93
 8013fb4:	3f66c16c 	.word	0x3f66c16c
 8013fb8:	5555553e 	.word	0x5555553e
 8013fbc:	3fc55555 	.word	0x3fc55555
 8013fc0:	3fe00000 	.word	0x3fe00000
 8013fc4:	fff00000 	.word	0xfff00000
 8013fc8:	3ff00000 	.word	0x3ff00000
 8013fcc:	4090cbff 	.word	0x4090cbff
 8013fd0:	3f6f3400 	.word	0x3f6f3400
 8013fd4:	652b82fe 	.word	0x652b82fe
 8013fd8:	3c971547 	.word	0x3c971547
 8013fdc:	00000000 	.word	0x00000000

08013fe0 <__ieee754_rem_pio2>:
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	ec55 4b10 	vmov	r4, r5, d0
 8013fe8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8013fec:	4bca      	ldr	r3, [pc, #808]	; (8014318 <__ieee754_rem_pio2+0x338>)
 8013fee:	4682      	mov	sl, r0
 8013ff0:	4598      	cmp	r8, r3
 8013ff2:	ed2d 8b02 	vpush	{d8}
 8013ff6:	b08b      	sub	sp, #44	; 0x2c
 8013ff8:	9502      	str	r5, [sp, #8]
 8013ffa:	dc08      	bgt.n	801400e <__ieee754_rem_pio2+0x2e>
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	2300      	movs	r3, #0
 8014000:	ed80 0b00 	vstr	d0, [r0]
 8014004:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014008:	f04f 0b00 	mov.w	fp, #0
 801400c:	e028      	b.n	8014060 <__ieee754_rem_pio2+0x80>
 801400e:	4bc3      	ldr	r3, [pc, #780]	; (801431c <__ieee754_rem_pio2+0x33c>)
 8014010:	4598      	cmp	r8, r3
 8014012:	dc78      	bgt.n	8014106 <__ieee754_rem_pio2+0x126>
 8014014:	9b02      	ldr	r3, [sp, #8]
 8014016:	ee10 0a10 	vmov	r0, s0
 801401a:	4ec1      	ldr	r6, [pc, #772]	; (8014320 <__ieee754_rem_pio2+0x340>)
 801401c:	4629      	mov	r1, r5
 801401e:	2b00      	cmp	r3, #0
 8014020:	a3af      	add	r3, pc, #700	; (adr r3, 80142e0 <__ieee754_rem_pio2+0x300>)
 8014022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014026:	dd39      	ble.n	801409c <__ieee754_rem_pio2+0xbc>
 8014028:	f7ec f93e 	bl	80002a8 <__aeabi_dsub>
 801402c:	45b0      	cmp	r8, r6
 801402e:	4604      	mov	r4, r0
 8014030:	460d      	mov	r5, r1
 8014032:	d01b      	beq.n	801406c <__ieee754_rem_pio2+0x8c>
 8014034:	a3ac      	add	r3, pc, #688	; (adr r3, 80142e8 <__ieee754_rem_pio2+0x308>)
 8014036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801403a:	f7ec f935 	bl	80002a8 <__aeabi_dsub>
 801403e:	4602      	mov	r2, r0
 8014040:	460b      	mov	r3, r1
 8014042:	4620      	mov	r0, r4
 8014044:	4629      	mov	r1, r5
 8014046:	e9ca 2300 	strd	r2, r3, [sl]
 801404a:	f7ec f92d 	bl	80002a8 <__aeabi_dsub>
 801404e:	a3a6      	add	r3, pc, #664	; (adr r3, 80142e8 <__ieee754_rem_pio2+0x308>)
 8014050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014054:	f04f 0b01 	mov.w	fp, #1
 8014058:	f7ec f926 	bl	80002a8 <__aeabi_dsub>
 801405c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014060:	4658      	mov	r0, fp
 8014062:	b00b      	add	sp, #44	; 0x2c
 8014064:	ecbd 8b02 	vpop	{d8}
 8014068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801406c:	a3a0      	add	r3, pc, #640	; (adr r3, 80142f0 <__ieee754_rem_pio2+0x310>)
 801406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014072:	f7ec f919 	bl	80002a8 <__aeabi_dsub>
 8014076:	4604      	mov	r4, r0
 8014078:	460d      	mov	r5, r1
 801407a:	a39f      	add	r3, pc, #636	; (adr r3, 80142f8 <__ieee754_rem_pio2+0x318>)
 801407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014080:	f7ec f912 	bl	80002a8 <__aeabi_dsub>
 8014084:	4602      	mov	r2, r0
 8014086:	460b      	mov	r3, r1
 8014088:	4620      	mov	r0, r4
 801408a:	4629      	mov	r1, r5
 801408c:	e9ca 2300 	strd	r2, r3, [sl]
 8014090:	f7ec f90a 	bl	80002a8 <__aeabi_dsub>
 8014094:	a398      	add	r3, pc, #608	; (adr r3, 80142f8 <__ieee754_rem_pio2+0x318>)
 8014096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801409a:	e7db      	b.n	8014054 <__ieee754_rem_pio2+0x74>
 801409c:	f7ec f906 	bl	80002ac <__adddf3>
 80140a0:	45b0      	cmp	r8, r6
 80140a2:	4604      	mov	r4, r0
 80140a4:	460d      	mov	r5, r1
 80140a6:	d016      	beq.n	80140d6 <__ieee754_rem_pio2+0xf6>
 80140a8:	a38f      	add	r3, pc, #572	; (adr r3, 80142e8 <__ieee754_rem_pio2+0x308>)
 80140aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ae:	f7ec f8fd 	bl	80002ac <__adddf3>
 80140b2:	4602      	mov	r2, r0
 80140b4:	460b      	mov	r3, r1
 80140b6:	4620      	mov	r0, r4
 80140b8:	4629      	mov	r1, r5
 80140ba:	e9ca 2300 	strd	r2, r3, [sl]
 80140be:	f7ec f8f3 	bl	80002a8 <__aeabi_dsub>
 80140c2:	a389      	add	r3, pc, #548	; (adr r3, 80142e8 <__ieee754_rem_pio2+0x308>)
 80140c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c8:	f7ec f8f0 	bl	80002ac <__adddf3>
 80140cc:	f04f 3bff 	mov.w	fp, #4294967295
 80140d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80140d4:	e7c4      	b.n	8014060 <__ieee754_rem_pio2+0x80>
 80140d6:	a386      	add	r3, pc, #536	; (adr r3, 80142f0 <__ieee754_rem_pio2+0x310>)
 80140d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140dc:	f7ec f8e6 	bl	80002ac <__adddf3>
 80140e0:	4604      	mov	r4, r0
 80140e2:	460d      	mov	r5, r1
 80140e4:	a384      	add	r3, pc, #528	; (adr r3, 80142f8 <__ieee754_rem_pio2+0x318>)
 80140e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ea:	f7ec f8df 	bl	80002ac <__adddf3>
 80140ee:	4602      	mov	r2, r0
 80140f0:	460b      	mov	r3, r1
 80140f2:	4620      	mov	r0, r4
 80140f4:	4629      	mov	r1, r5
 80140f6:	e9ca 2300 	strd	r2, r3, [sl]
 80140fa:	f7ec f8d5 	bl	80002a8 <__aeabi_dsub>
 80140fe:	a37e      	add	r3, pc, #504	; (adr r3, 80142f8 <__ieee754_rem_pio2+0x318>)
 8014100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014104:	e7e0      	b.n	80140c8 <__ieee754_rem_pio2+0xe8>
 8014106:	4b87      	ldr	r3, [pc, #540]	; (8014324 <__ieee754_rem_pio2+0x344>)
 8014108:	4598      	cmp	r8, r3
 801410a:	f300 80d8 	bgt.w	80142be <__ieee754_rem_pio2+0x2de>
 801410e:	f7fe fe2f 	bl	8012d70 <fabs>
 8014112:	ee10 0a10 	vmov	r0, s0
 8014116:	ec55 4b10 	vmov	r4, r5, d0
 801411a:	a379      	add	r3, pc, #484	; (adr r3, 8014300 <__ieee754_rem_pio2+0x320>)
 801411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014120:	4629      	mov	r1, r5
 8014122:	f7ec fa79 	bl	8000618 <__aeabi_dmul>
 8014126:	2200      	movs	r2, #0
 8014128:	4b7f      	ldr	r3, [pc, #508]	; (8014328 <__ieee754_rem_pio2+0x348>)
 801412a:	f7ec f8bf 	bl	80002ac <__adddf3>
 801412e:	f7ec fd23 	bl	8000b78 <__aeabi_d2iz>
 8014132:	4683      	mov	fp, r0
 8014134:	f7ec fa06 	bl	8000544 <__aeabi_i2d>
 8014138:	4602      	mov	r2, r0
 801413a:	460b      	mov	r3, r1
 801413c:	ec43 2b18 	vmov	d8, r2, r3
 8014140:	a367      	add	r3, pc, #412	; (adr r3, 80142e0 <__ieee754_rem_pio2+0x300>)
 8014142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014146:	f7ec fa67 	bl	8000618 <__aeabi_dmul>
 801414a:	4602      	mov	r2, r0
 801414c:	460b      	mov	r3, r1
 801414e:	4620      	mov	r0, r4
 8014150:	4629      	mov	r1, r5
 8014152:	f7ec f8a9 	bl	80002a8 <__aeabi_dsub>
 8014156:	4606      	mov	r6, r0
 8014158:	460f      	mov	r7, r1
 801415a:	a363      	add	r3, pc, #396	; (adr r3, 80142e8 <__ieee754_rem_pio2+0x308>)
 801415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014160:	ec51 0b18 	vmov	r0, r1, d8
 8014164:	f7ec fa58 	bl	8000618 <__aeabi_dmul>
 8014168:	f1bb 0f1f 	cmp.w	fp, #31
 801416c:	4604      	mov	r4, r0
 801416e:	460d      	mov	r5, r1
 8014170:	dc0d      	bgt.n	801418e <__ieee754_rem_pio2+0x1ae>
 8014172:	f10b 32ff 	add.w	r2, fp, #4294967295
 8014176:	4b6d      	ldr	r3, [pc, #436]	; (801432c <__ieee754_rem_pio2+0x34c>)
 8014178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801417c:	4543      	cmp	r3, r8
 801417e:	d006      	beq.n	801418e <__ieee754_rem_pio2+0x1ae>
 8014180:	4622      	mov	r2, r4
 8014182:	462b      	mov	r3, r5
 8014184:	4630      	mov	r0, r6
 8014186:	4639      	mov	r1, r7
 8014188:	f7ec f88e 	bl	80002a8 <__aeabi_dsub>
 801418c:	e00e      	b.n	80141ac <__ieee754_rem_pio2+0x1cc>
 801418e:	462b      	mov	r3, r5
 8014190:	4622      	mov	r2, r4
 8014192:	4630      	mov	r0, r6
 8014194:	4639      	mov	r1, r7
 8014196:	f7ec f887 	bl	80002a8 <__aeabi_dsub>
 801419a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801419e:	9303      	str	r3, [sp, #12]
 80141a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80141a4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80141a8:	2b10      	cmp	r3, #16
 80141aa:	dc02      	bgt.n	80141b2 <__ieee754_rem_pio2+0x1d2>
 80141ac:	e9ca 0100 	strd	r0, r1, [sl]
 80141b0:	e039      	b.n	8014226 <__ieee754_rem_pio2+0x246>
 80141b2:	a34f      	add	r3, pc, #316	; (adr r3, 80142f0 <__ieee754_rem_pio2+0x310>)
 80141b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b8:	ec51 0b18 	vmov	r0, r1, d8
 80141bc:	f7ec fa2c 	bl	8000618 <__aeabi_dmul>
 80141c0:	4604      	mov	r4, r0
 80141c2:	460d      	mov	r5, r1
 80141c4:	4602      	mov	r2, r0
 80141c6:	460b      	mov	r3, r1
 80141c8:	4630      	mov	r0, r6
 80141ca:	4639      	mov	r1, r7
 80141cc:	f7ec f86c 	bl	80002a8 <__aeabi_dsub>
 80141d0:	4602      	mov	r2, r0
 80141d2:	460b      	mov	r3, r1
 80141d4:	4680      	mov	r8, r0
 80141d6:	4689      	mov	r9, r1
 80141d8:	4630      	mov	r0, r6
 80141da:	4639      	mov	r1, r7
 80141dc:	f7ec f864 	bl	80002a8 <__aeabi_dsub>
 80141e0:	4622      	mov	r2, r4
 80141e2:	462b      	mov	r3, r5
 80141e4:	f7ec f860 	bl	80002a8 <__aeabi_dsub>
 80141e8:	4604      	mov	r4, r0
 80141ea:	460d      	mov	r5, r1
 80141ec:	a342      	add	r3, pc, #264	; (adr r3, 80142f8 <__ieee754_rem_pio2+0x318>)
 80141ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f2:	ec51 0b18 	vmov	r0, r1, d8
 80141f6:	f7ec fa0f 	bl	8000618 <__aeabi_dmul>
 80141fa:	4622      	mov	r2, r4
 80141fc:	462b      	mov	r3, r5
 80141fe:	f7ec f853 	bl	80002a8 <__aeabi_dsub>
 8014202:	4602      	mov	r2, r0
 8014204:	460b      	mov	r3, r1
 8014206:	4604      	mov	r4, r0
 8014208:	460d      	mov	r5, r1
 801420a:	4640      	mov	r0, r8
 801420c:	4649      	mov	r1, r9
 801420e:	f7ec f84b 	bl	80002a8 <__aeabi_dsub>
 8014212:	9a03      	ldr	r2, [sp, #12]
 8014214:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014218:	1ad3      	subs	r3, r2, r3
 801421a:	2b31      	cmp	r3, #49	; 0x31
 801421c:	dc24      	bgt.n	8014268 <__ieee754_rem_pio2+0x288>
 801421e:	4646      	mov	r6, r8
 8014220:	464f      	mov	r7, r9
 8014222:	e9ca 0100 	strd	r0, r1, [sl]
 8014226:	e9da 8900 	ldrd	r8, r9, [sl]
 801422a:	4630      	mov	r0, r6
 801422c:	4639      	mov	r1, r7
 801422e:	4642      	mov	r2, r8
 8014230:	464b      	mov	r3, r9
 8014232:	f7ec f839 	bl	80002a8 <__aeabi_dsub>
 8014236:	462b      	mov	r3, r5
 8014238:	4622      	mov	r2, r4
 801423a:	f7ec f835 	bl	80002a8 <__aeabi_dsub>
 801423e:	9b02      	ldr	r3, [sp, #8]
 8014240:	2b00      	cmp	r3, #0
 8014242:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014246:	f6bf af0b 	bge.w	8014060 <__ieee754_rem_pio2+0x80>
 801424a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801424e:	f8ca 8000 	str.w	r8, [sl]
 8014252:	f8ca 0008 	str.w	r0, [sl, #8]
 8014256:	f8ca 3004 	str.w	r3, [sl, #4]
 801425a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801425e:	f8ca 300c 	str.w	r3, [sl, #12]
 8014262:	f1cb 0b00 	rsb	fp, fp, #0
 8014266:	e6fb      	b.n	8014060 <__ieee754_rem_pio2+0x80>
 8014268:	a327      	add	r3, pc, #156	; (adr r3, 8014308 <__ieee754_rem_pio2+0x328>)
 801426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426e:	ec51 0b18 	vmov	r0, r1, d8
 8014272:	f7ec f9d1 	bl	8000618 <__aeabi_dmul>
 8014276:	4604      	mov	r4, r0
 8014278:	460d      	mov	r5, r1
 801427a:	4602      	mov	r2, r0
 801427c:	460b      	mov	r3, r1
 801427e:	4640      	mov	r0, r8
 8014280:	4649      	mov	r1, r9
 8014282:	f7ec f811 	bl	80002a8 <__aeabi_dsub>
 8014286:	4602      	mov	r2, r0
 8014288:	460b      	mov	r3, r1
 801428a:	4606      	mov	r6, r0
 801428c:	460f      	mov	r7, r1
 801428e:	4640      	mov	r0, r8
 8014290:	4649      	mov	r1, r9
 8014292:	f7ec f809 	bl	80002a8 <__aeabi_dsub>
 8014296:	4622      	mov	r2, r4
 8014298:	462b      	mov	r3, r5
 801429a:	f7ec f805 	bl	80002a8 <__aeabi_dsub>
 801429e:	4604      	mov	r4, r0
 80142a0:	460d      	mov	r5, r1
 80142a2:	a31b      	add	r3, pc, #108	; (adr r3, 8014310 <__ieee754_rem_pio2+0x330>)
 80142a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a8:	ec51 0b18 	vmov	r0, r1, d8
 80142ac:	f7ec f9b4 	bl	8000618 <__aeabi_dmul>
 80142b0:	4622      	mov	r2, r4
 80142b2:	462b      	mov	r3, r5
 80142b4:	f7eb fff8 	bl	80002a8 <__aeabi_dsub>
 80142b8:	4604      	mov	r4, r0
 80142ba:	460d      	mov	r5, r1
 80142bc:	e760      	b.n	8014180 <__ieee754_rem_pio2+0x1a0>
 80142be:	4b1c      	ldr	r3, [pc, #112]	; (8014330 <__ieee754_rem_pio2+0x350>)
 80142c0:	4598      	cmp	r8, r3
 80142c2:	dd37      	ble.n	8014334 <__ieee754_rem_pio2+0x354>
 80142c4:	ee10 2a10 	vmov	r2, s0
 80142c8:	462b      	mov	r3, r5
 80142ca:	4620      	mov	r0, r4
 80142cc:	4629      	mov	r1, r5
 80142ce:	f7eb ffeb 	bl	80002a8 <__aeabi_dsub>
 80142d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80142d6:	e9ca 0100 	strd	r0, r1, [sl]
 80142da:	e695      	b.n	8014008 <__ieee754_rem_pio2+0x28>
 80142dc:	f3af 8000 	nop.w
 80142e0:	54400000 	.word	0x54400000
 80142e4:	3ff921fb 	.word	0x3ff921fb
 80142e8:	1a626331 	.word	0x1a626331
 80142ec:	3dd0b461 	.word	0x3dd0b461
 80142f0:	1a600000 	.word	0x1a600000
 80142f4:	3dd0b461 	.word	0x3dd0b461
 80142f8:	2e037073 	.word	0x2e037073
 80142fc:	3ba3198a 	.word	0x3ba3198a
 8014300:	6dc9c883 	.word	0x6dc9c883
 8014304:	3fe45f30 	.word	0x3fe45f30
 8014308:	2e000000 	.word	0x2e000000
 801430c:	3ba3198a 	.word	0x3ba3198a
 8014310:	252049c1 	.word	0x252049c1
 8014314:	397b839a 	.word	0x397b839a
 8014318:	3fe921fb 	.word	0x3fe921fb
 801431c:	4002d97b 	.word	0x4002d97b
 8014320:	3ff921fb 	.word	0x3ff921fb
 8014324:	413921fb 	.word	0x413921fb
 8014328:	3fe00000 	.word	0x3fe00000
 801432c:	08017680 	.word	0x08017680
 8014330:	7fefffff 	.word	0x7fefffff
 8014334:	ea4f 5628 	mov.w	r6, r8, asr #20
 8014338:	4620      	mov	r0, r4
 801433a:	2703      	movs	r7, #3
 801433c:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8014340:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8014344:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8014348:	460d      	mov	r5, r1
 801434a:	f7ec fc15 	bl	8000b78 <__aeabi_d2iz>
 801434e:	f7ec f8f9 	bl	8000544 <__aeabi_i2d>
 8014352:	4602      	mov	r2, r0
 8014354:	460b      	mov	r3, r1
 8014356:	4620      	mov	r0, r4
 8014358:	4629      	mov	r1, r5
 801435a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801435e:	f7eb ffa3 	bl	80002a8 <__aeabi_dsub>
 8014362:	2200      	movs	r2, #0
 8014364:	4b1f      	ldr	r3, [pc, #124]	; (80143e4 <__ieee754_rem_pio2+0x404>)
 8014366:	f7ec f957 	bl	8000618 <__aeabi_dmul>
 801436a:	460d      	mov	r5, r1
 801436c:	4604      	mov	r4, r0
 801436e:	f7ec fc03 	bl	8000b78 <__aeabi_d2iz>
 8014372:	f7ec f8e7 	bl	8000544 <__aeabi_i2d>
 8014376:	4602      	mov	r2, r0
 8014378:	460b      	mov	r3, r1
 801437a:	4620      	mov	r0, r4
 801437c:	4629      	mov	r1, r5
 801437e:	2400      	movs	r4, #0
 8014380:	2500      	movs	r5, #0
 8014382:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014386:	f7eb ff8f 	bl	80002a8 <__aeabi_dsub>
 801438a:	2200      	movs	r2, #0
 801438c:	4b15      	ldr	r3, [pc, #84]	; (80143e4 <__ieee754_rem_pio2+0x404>)
 801438e:	f7ec f943 	bl	8000618 <__aeabi_dmul>
 8014392:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014396:	4622      	mov	r2, r4
 8014398:	462b      	mov	r3, r5
 801439a:	46b9      	mov	r9, r7
 801439c:	3f01      	subs	r7, #1
 801439e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80143a2:	f7ec fba1 	bl	8000ae8 <__aeabi_dcmpeq>
 80143a6:	2800      	cmp	r0, #0
 80143a8:	d1f5      	bne.n	8014396 <__ieee754_rem_pio2+0x3b6>
 80143aa:	4b0f      	ldr	r3, [pc, #60]	; (80143e8 <__ieee754_rem_pio2+0x408>)
 80143ac:	4632      	mov	r2, r6
 80143ae:	4651      	mov	r1, sl
 80143b0:	a804      	add	r0, sp, #16
 80143b2:	9301      	str	r3, [sp, #4]
 80143b4:	2302      	movs	r3, #2
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	464b      	mov	r3, r9
 80143ba:	f000 f819 	bl	80143f0 <__kernel_rem_pio2>
 80143be:	9b02      	ldr	r3, [sp, #8]
 80143c0:	4683      	mov	fp, r0
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	f6bf ae4c 	bge.w	8014060 <__ieee754_rem_pio2+0x80>
 80143c8:	e9da 2100 	ldrd	r2, r1, [sl]
 80143cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143d0:	e9ca 2300 	strd	r2, r3, [sl]
 80143d4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80143d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143dc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80143e0:	e73f      	b.n	8014262 <__ieee754_rem_pio2+0x282>
 80143e2:	bf00      	nop
 80143e4:	41700000 	.word	0x41700000
 80143e8:	08017700 	.word	0x08017700
 80143ec:	00000000 	.word	0x00000000

080143f0 <__kernel_rem_pio2>:
 80143f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f4:	ed2d 8b02 	vpush	{d8}
 80143f8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80143fc:	f112 0f14 	cmn.w	r2, #20
 8014400:	f04f 0500 	mov.w	r5, #0
 8014404:	9306      	str	r3, [sp, #24]
 8014406:	bfa8      	it	ge
 8014408:	1ed4      	subge	r4, r2, #3
 801440a:	4bc5      	ldr	r3, [pc, #788]	; (8014720 <__kernel_rem_pio2+0x330>)
 801440c:	bfb8      	it	lt
 801440e:	2400      	movlt	r4, #0
 8014410:	9104      	str	r1, [sp, #16]
 8014412:	ae20      	add	r6, sp, #128	; 0x80
 8014414:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8014416:	9009      	str	r0, [sp, #36]	; 0x24
 8014418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801441c:	9300      	str	r3, [sp, #0]
 801441e:	9b06      	ldr	r3, [sp, #24]
 8014420:	f103 33ff 	add.w	r3, r3, #4294967295
 8014424:	9305      	str	r3, [sp, #20]
 8014426:	bfa4      	itt	ge
 8014428:	2318      	movge	r3, #24
 801442a:	fb94 f4f3 	sdivge	r4, r4, r3
 801442e:	f06f 0317 	mvn.w	r3, #23
 8014432:	fb04 3303 	mla	r3, r4, r3, r3
 8014436:	eb03 0a02 	add.w	sl, r3, r2
 801443a:	9b00      	ldr	r3, [sp, #0]
 801443c:	9a05      	ldr	r2, [sp, #20]
 801443e:	eb03 0802 	add.w	r8, r3, r2
 8014442:	1aa7      	subs	r7, r4, r2
 8014444:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014446:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8014710 <__kernel_rem_pio2+0x320>
 801444a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801444e:	4545      	cmp	r5, r8
 8014450:	dd13      	ble.n	801447a <__kernel_rem_pio2+0x8a>
 8014452:	aa20      	add	r2, sp, #128	; 0x80
 8014454:	9b06      	ldr	r3, [sp, #24]
 8014456:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801445a:	f04f 0800 	mov.w	r8, #0
 801445e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014462:	9b00      	ldr	r3, [sp, #0]
 8014464:	4598      	cmp	r8, r3
 8014466:	dc30      	bgt.n	80144ca <__kernel_rem_pio2+0xda>
 8014468:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801446c:	462f      	mov	r7, r5
 801446e:	2600      	movs	r6, #0
 8014470:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8014710 <__kernel_rem_pio2+0x320>
 8014474:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014478:	e01b      	b.n	80144b2 <__kernel_rem_pio2+0xc2>
 801447a:	42ef      	cmn	r7, r5
 801447c:	d407      	bmi.n	801448e <__kernel_rem_pio2+0x9e>
 801447e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014482:	f7ec f85f 	bl	8000544 <__aeabi_i2d>
 8014486:	3501      	adds	r5, #1
 8014488:	e8e6 0102 	strd	r0, r1, [r6], #8
 801448c:	e7df      	b.n	801444e <__kernel_rem_pio2+0x5e>
 801448e:	ec51 0b18 	vmov	r0, r1, d8
 8014492:	e7f8      	b.n	8014486 <__kernel_rem_pio2+0x96>
 8014494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014498:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801449c:	3601      	adds	r6, #1
 801449e:	f7ec f8bb 	bl	8000618 <__aeabi_dmul>
 80144a2:	4602      	mov	r2, r0
 80144a4:	460b      	mov	r3, r1
 80144a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144aa:	f7eb feff 	bl	80002ac <__adddf3>
 80144ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144b2:	9b05      	ldr	r3, [sp, #20]
 80144b4:	3f08      	subs	r7, #8
 80144b6:	429e      	cmp	r6, r3
 80144b8:	ddec      	ble.n	8014494 <__kernel_rem_pio2+0xa4>
 80144ba:	f108 0801 	add.w	r8, r8, #1
 80144be:	3508      	adds	r5, #8
 80144c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80144c4:	ecab 7b02 	vstmia	fp!, {d7}
 80144c8:	e7cb      	b.n	8014462 <__kernel_rem_pio2+0x72>
 80144ca:	9b00      	ldr	r3, [sp, #0]
 80144cc:	aa0c      	add	r2, sp, #48	; 0x30
 80144ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80144d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80144d4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80144d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80144da:	9c00      	ldr	r4, [sp, #0]
 80144dc:	930a      	str	r3, [sp, #40]	; 0x28
 80144de:	00e3      	lsls	r3, r4, #3
 80144e0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80144e4:	46a1      	mov	r9, r4
 80144e6:	9308      	str	r3, [sp, #32]
 80144e8:	ab98      	add	r3, sp, #608	; 0x260
 80144ea:	46c3      	mov	fp, r8
 80144ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80144f0:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80144f4:	ab70      	add	r3, sp, #448	; 0x1c0
 80144f6:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80144fa:	f1b9 0f00 	cmp.w	r9, #0
 80144fe:	f1a5 0508 	sub.w	r5, r5, #8
 8014502:	dc77      	bgt.n	80145f4 <__kernel_rem_pio2+0x204>
 8014504:	4650      	mov	r0, sl
 8014506:	ec47 6b10 	vmov	d0, r6, r7
 801450a:	f7fe fca1 	bl	8012e50 <scalbn>
 801450e:	2200      	movs	r2, #0
 8014510:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014514:	ee10 0a10 	vmov	r0, s0
 8014518:	ec57 6b10 	vmov	r6, r7, d0
 801451c:	4639      	mov	r1, r7
 801451e:	f7ec f87b 	bl	8000618 <__aeabi_dmul>
 8014522:	ec41 0b10 	vmov	d0, r0, r1
 8014526:	f7fe fe23 	bl	8013170 <floor>
 801452a:	2200      	movs	r2, #0
 801452c:	4b7d      	ldr	r3, [pc, #500]	; (8014724 <__kernel_rem_pio2+0x334>)
 801452e:	ec51 0b10 	vmov	r0, r1, d0
 8014532:	f7ec f871 	bl	8000618 <__aeabi_dmul>
 8014536:	4602      	mov	r2, r0
 8014538:	460b      	mov	r3, r1
 801453a:	4630      	mov	r0, r6
 801453c:	4639      	mov	r1, r7
 801453e:	f7eb feb3 	bl	80002a8 <__aeabi_dsub>
 8014542:	460f      	mov	r7, r1
 8014544:	4606      	mov	r6, r0
 8014546:	f7ec fb17 	bl	8000b78 <__aeabi_d2iz>
 801454a:	9002      	str	r0, [sp, #8]
 801454c:	f7eb fffa 	bl	8000544 <__aeabi_i2d>
 8014550:	4602      	mov	r2, r0
 8014552:	460b      	mov	r3, r1
 8014554:	4630      	mov	r0, r6
 8014556:	4639      	mov	r1, r7
 8014558:	f7eb fea6 	bl	80002a8 <__aeabi_dsub>
 801455c:	f1ba 0f00 	cmp.w	sl, #0
 8014560:	4606      	mov	r6, r0
 8014562:	460f      	mov	r7, r1
 8014564:	dd6d      	ble.n	8014642 <__kernel_rem_pio2+0x252>
 8014566:	1e61      	subs	r1, r4, #1
 8014568:	ab0c      	add	r3, sp, #48	; 0x30
 801456a:	f1ca 0018 	rsb	r0, sl, #24
 801456e:	9d02      	ldr	r5, [sp, #8]
 8014570:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014574:	fa43 f200 	asr.w	r2, r3, r0
 8014578:	4415      	add	r5, r2
 801457a:	4082      	lsls	r2, r0
 801457c:	1a9b      	subs	r3, r3, r2
 801457e:	aa0c      	add	r2, sp, #48	; 0x30
 8014580:	9502      	str	r5, [sp, #8]
 8014582:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014586:	f1ca 0217 	rsb	r2, sl, #23
 801458a:	fa43 fb02 	asr.w	fp, r3, r2
 801458e:	f1bb 0f00 	cmp.w	fp, #0
 8014592:	dd65      	ble.n	8014660 <__kernel_rem_pio2+0x270>
 8014594:	9b02      	ldr	r3, [sp, #8]
 8014596:	2200      	movs	r2, #0
 8014598:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801459c:	3301      	adds	r3, #1
 801459e:	4615      	mov	r5, r2
 80145a0:	9302      	str	r3, [sp, #8]
 80145a2:	4294      	cmp	r4, r2
 80145a4:	f300 809f 	bgt.w	80146e6 <__kernel_rem_pio2+0x2f6>
 80145a8:	f1ba 0f00 	cmp.w	sl, #0
 80145ac:	dd07      	ble.n	80145be <__kernel_rem_pio2+0x1ce>
 80145ae:	f1ba 0f01 	cmp.w	sl, #1
 80145b2:	f000 80c3 	beq.w	801473c <__kernel_rem_pio2+0x34c>
 80145b6:	f1ba 0f02 	cmp.w	sl, #2
 80145ba:	f000 80c9 	beq.w	8014750 <__kernel_rem_pio2+0x360>
 80145be:	f1bb 0f02 	cmp.w	fp, #2
 80145c2:	d14d      	bne.n	8014660 <__kernel_rem_pio2+0x270>
 80145c4:	4632      	mov	r2, r6
 80145c6:	463b      	mov	r3, r7
 80145c8:	2000      	movs	r0, #0
 80145ca:	4957      	ldr	r1, [pc, #348]	; (8014728 <__kernel_rem_pio2+0x338>)
 80145cc:	f7eb fe6c 	bl	80002a8 <__aeabi_dsub>
 80145d0:	4606      	mov	r6, r0
 80145d2:	460f      	mov	r7, r1
 80145d4:	2d00      	cmp	r5, #0
 80145d6:	d043      	beq.n	8014660 <__kernel_rem_pio2+0x270>
 80145d8:	4650      	mov	r0, sl
 80145da:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8014718 <__kernel_rem_pio2+0x328>
 80145de:	f7fe fc37 	bl	8012e50 <scalbn>
 80145e2:	4630      	mov	r0, r6
 80145e4:	4639      	mov	r1, r7
 80145e6:	ec53 2b10 	vmov	r2, r3, d0
 80145ea:	f7eb fe5d 	bl	80002a8 <__aeabi_dsub>
 80145ee:	4606      	mov	r6, r0
 80145f0:	460f      	mov	r7, r1
 80145f2:	e035      	b.n	8014660 <__kernel_rem_pio2+0x270>
 80145f4:	2200      	movs	r2, #0
 80145f6:	4b4d      	ldr	r3, [pc, #308]	; (801472c <__kernel_rem_pio2+0x33c>)
 80145f8:	4630      	mov	r0, r6
 80145fa:	4639      	mov	r1, r7
 80145fc:	f7ec f80c 	bl	8000618 <__aeabi_dmul>
 8014600:	f109 39ff 	add.w	r9, r9, #4294967295
 8014604:	f7ec fab8 	bl	8000b78 <__aeabi_d2iz>
 8014608:	f7eb ff9c 	bl	8000544 <__aeabi_i2d>
 801460c:	4602      	mov	r2, r0
 801460e:	460b      	mov	r3, r1
 8014610:	ec43 2b18 	vmov	d8, r2, r3
 8014614:	2200      	movs	r2, #0
 8014616:	4b46      	ldr	r3, [pc, #280]	; (8014730 <__kernel_rem_pio2+0x340>)
 8014618:	f7eb fffe 	bl	8000618 <__aeabi_dmul>
 801461c:	4602      	mov	r2, r0
 801461e:	460b      	mov	r3, r1
 8014620:	4630      	mov	r0, r6
 8014622:	4639      	mov	r1, r7
 8014624:	f7eb fe40 	bl	80002a8 <__aeabi_dsub>
 8014628:	f7ec faa6 	bl	8000b78 <__aeabi_d2iz>
 801462c:	f84b 0b04 	str.w	r0, [fp], #4
 8014630:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014634:	ec51 0b18 	vmov	r0, r1, d8
 8014638:	f7eb fe38 	bl	80002ac <__adddf3>
 801463c:	4606      	mov	r6, r0
 801463e:	460f      	mov	r7, r1
 8014640:	e75b      	b.n	80144fa <__kernel_rem_pio2+0x10a>
 8014642:	d106      	bne.n	8014652 <__kernel_rem_pio2+0x262>
 8014644:	1e63      	subs	r3, r4, #1
 8014646:	aa0c      	add	r2, sp, #48	; 0x30
 8014648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801464c:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8014650:	e79d      	b.n	801458e <__kernel_rem_pio2+0x19e>
 8014652:	2200      	movs	r2, #0
 8014654:	4b37      	ldr	r3, [pc, #220]	; (8014734 <__kernel_rem_pio2+0x344>)
 8014656:	f7ec fa65 	bl	8000b24 <__aeabi_dcmpge>
 801465a:	2800      	cmp	r0, #0
 801465c:	d140      	bne.n	80146e0 <__kernel_rem_pio2+0x2f0>
 801465e:	4683      	mov	fp, r0
 8014660:	2200      	movs	r2, #0
 8014662:	2300      	movs	r3, #0
 8014664:	4630      	mov	r0, r6
 8014666:	4639      	mov	r1, r7
 8014668:	f7ec fa3e 	bl	8000ae8 <__aeabi_dcmpeq>
 801466c:	2800      	cmp	r0, #0
 801466e:	f000 80c3 	beq.w	80147f8 <__kernel_rem_pio2+0x408>
 8014672:	1e65      	subs	r5, r4, #1
 8014674:	2200      	movs	r2, #0
 8014676:	462b      	mov	r3, r5
 8014678:	9900      	ldr	r1, [sp, #0]
 801467a:	428b      	cmp	r3, r1
 801467c:	da6f      	bge.n	801475e <__kernel_rem_pio2+0x36e>
 801467e:	2a00      	cmp	r2, #0
 8014680:	f000 808c 	beq.w	801479c <__kernel_rem_pio2+0x3ac>
 8014684:	ab0c      	add	r3, sp, #48	; 0x30
 8014686:	f1aa 0a18 	sub.w	sl, sl, #24
 801468a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801468e:	2b00      	cmp	r3, #0
 8014690:	f000 80b0 	beq.w	80147f4 <__kernel_rem_pio2+0x404>
 8014694:	4650      	mov	r0, sl
 8014696:	462c      	mov	r4, r5
 8014698:	f04f 0800 	mov.w	r8, #0
 801469c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801472c <__kernel_rem_pio2+0x33c>
 80146a0:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8014718 <__kernel_rem_pio2+0x328>
 80146a4:	f7fe fbd4 	bl	8012e50 <scalbn>
 80146a8:	1c6b      	adds	r3, r5, #1
 80146aa:	00da      	lsls	r2, r3, #3
 80146ac:	9205      	str	r2, [sp, #20]
 80146ae:	aa70      	add	r2, sp, #448	; 0x1c0
 80146b0:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80146b4:	ec57 6b10 	vmov	r6, r7, d0
 80146b8:	2c00      	cmp	r4, #0
 80146ba:	f280 80d6 	bge.w	801486a <__kernel_rem_pio2+0x47a>
 80146be:	462c      	mov	r4, r5
 80146c0:	2c00      	cmp	r4, #0
 80146c2:	f2c0 8104 	blt.w	80148ce <__kernel_rem_pio2+0x4de>
 80146c6:	4b1c      	ldr	r3, [pc, #112]	; (8014738 <__kernel_rem_pio2+0x348>)
 80146c8:	f04f 0900 	mov.w	r9, #0
 80146cc:	f04f 0a00 	mov.w	sl, #0
 80146d0:	2700      	movs	r7, #0
 80146d2:	461e      	mov	r6, r3
 80146d4:	ab70      	add	r3, sp, #448	; 0x1c0
 80146d6:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80146da:	1b2b      	subs	r3, r5, r4
 80146dc:	9306      	str	r3, [sp, #24]
 80146de:	e0e8      	b.n	80148b2 <__kernel_rem_pio2+0x4c2>
 80146e0:	f04f 0b02 	mov.w	fp, #2
 80146e4:	e756      	b.n	8014594 <__kernel_rem_pio2+0x1a4>
 80146e6:	f8d8 3000 	ldr.w	r3, [r8]
 80146ea:	b955      	cbnz	r5, 8014702 <__kernel_rem_pio2+0x312>
 80146ec:	b123      	cbz	r3, 80146f8 <__kernel_rem_pio2+0x308>
 80146ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80146f2:	f8c8 3000 	str.w	r3, [r8]
 80146f6:	2301      	movs	r3, #1
 80146f8:	3201      	adds	r2, #1
 80146fa:	f108 0804 	add.w	r8, r8, #4
 80146fe:	461d      	mov	r5, r3
 8014700:	e74f      	b.n	80145a2 <__kernel_rem_pio2+0x1b2>
 8014702:	1acb      	subs	r3, r1, r3
 8014704:	f8c8 3000 	str.w	r3, [r8]
 8014708:	462b      	mov	r3, r5
 801470a:	e7f5      	b.n	80146f8 <__kernel_rem_pio2+0x308>
 801470c:	f3af 8000 	nop.w
	...
 801471c:	3ff00000 	.word	0x3ff00000
 8014720:	08017848 	.word	0x08017848
 8014724:	40200000 	.word	0x40200000
 8014728:	3ff00000 	.word	0x3ff00000
 801472c:	3e700000 	.word	0x3e700000
 8014730:	41700000 	.word	0x41700000
 8014734:	3fe00000 	.word	0x3fe00000
 8014738:	08017808 	.word	0x08017808
 801473c:	1e62      	subs	r2, r4, #1
 801473e:	ab0c      	add	r3, sp, #48	; 0x30
 8014740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014744:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014748:	a90c      	add	r1, sp, #48	; 0x30
 801474a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801474e:	e736      	b.n	80145be <__kernel_rem_pio2+0x1ce>
 8014750:	1e62      	subs	r2, r4, #1
 8014752:	ab0c      	add	r3, sp, #48	; 0x30
 8014754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014758:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801475c:	e7f4      	b.n	8014748 <__kernel_rem_pio2+0x358>
 801475e:	a90c      	add	r1, sp, #48	; 0x30
 8014760:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014764:	3b01      	subs	r3, #1
 8014766:	430a      	orrs	r2, r1
 8014768:	e786      	b.n	8014678 <__kernel_rem_pio2+0x288>
 801476a:	3301      	adds	r3, #1
 801476c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014770:	2900      	cmp	r1, #0
 8014772:	d0fa      	beq.n	801476a <__kernel_rem_pio2+0x37a>
 8014774:	9a08      	ldr	r2, [sp, #32]
 8014776:	a920      	add	r1, sp, #128	; 0x80
 8014778:	18e3      	adds	r3, r4, r3
 801477a:	f104 0801 	add.w	r8, r4, #1
 801477e:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8014782:	9302      	str	r3, [sp, #8]
 8014784:	446a      	add	r2, sp
 8014786:	3a98      	subs	r2, #152	; 0x98
 8014788:	9208      	str	r2, [sp, #32]
 801478a:	9a06      	ldr	r2, [sp, #24]
 801478c:	18a2      	adds	r2, r4, r2
 801478e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8014792:	9b02      	ldr	r3, [sp, #8]
 8014794:	4543      	cmp	r3, r8
 8014796:	da04      	bge.n	80147a2 <__kernel_rem_pio2+0x3b2>
 8014798:	461c      	mov	r4, r3
 801479a:	e6a0      	b.n	80144de <__kernel_rem_pio2+0xee>
 801479c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801479e:	2301      	movs	r3, #1
 80147a0:	e7e4      	b.n	801476c <__kernel_rem_pio2+0x37c>
 80147a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147a4:	f04f 0900 	mov.w	r9, #0
 80147a8:	2600      	movs	r6, #0
 80147aa:	2700      	movs	r7, #0
 80147ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80147b0:	f7eb fec8 	bl	8000544 <__aeabi_i2d>
 80147b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80147ba:	461c      	mov	r4, r3
 80147bc:	46ab      	mov	fp, r5
 80147be:	9b05      	ldr	r3, [sp, #20]
 80147c0:	4599      	cmp	r9, r3
 80147c2:	dd06      	ble.n	80147d2 <__kernel_rem_pio2+0x3e2>
 80147c4:	9b08      	ldr	r3, [sp, #32]
 80147c6:	f108 0801 	add.w	r8, r8, #1
 80147ca:	e8e3 6702 	strd	r6, r7, [r3], #8
 80147ce:	9308      	str	r3, [sp, #32]
 80147d0:	e7df      	b.n	8014792 <__kernel_rem_pio2+0x3a2>
 80147d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80147d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80147da:	f7eb ff1d 	bl	8000618 <__aeabi_dmul>
 80147de:	4602      	mov	r2, r0
 80147e0:	460b      	mov	r3, r1
 80147e2:	4630      	mov	r0, r6
 80147e4:	4639      	mov	r1, r7
 80147e6:	f109 0901 	add.w	r9, r9, #1
 80147ea:	f7eb fd5f 	bl	80002ac <__adddf3>
 80147ee:	4606      	mov	r6, r0
 80147f0:	460f      	mov	r7, r1
 80147f2:	e7e4      	b.n	80147be <__kernel_rem_pio2+0x3ce>
 80147f4:	3d01      	subs	r5, #1
 80147f6:	e745      	b.n	8014684 <__kernel_rem_pio2+0x294>
 80147f8:	f1ca 0000 	rsb	r0, sl, #0
 80147fc:	ec47 6b10 	vmov	d0, r6, r7
 8014800:	f7fe fb26 	bl	8012e50 <scalbn>
 8014804:	2200      	movs	r2, #0
 8014806:	4ba1      	ldr	r3, [pc, #644]	; (8014a8c <__kernel_rem_pio2+0x69c>)
 8014808:	ee10 0a10 	vmov	r0, s0
 801480c:	ec57 6b10 	vmov	r6, r7, d0
 8014810:	4639      	mov	r1, r7
 8014812:	f7ec f987 	bl	8000b24 <__aeabi_dcmpge>
 8014816:	b1f8      	cbz	r0, 8014858 <__kernel_rem_pio2+0x468>
 8014818:	2200      	movs	r2, #0
 801481a:	4b9d      	ldr	r3, [pc, #628]	; (8014a90 <__kernel_rem_pio2+0x6a0>)
 801481c:	4630      	mov	r0, r6
 801481e:	4639      	mov	r1, r7
 8014820:	f7eb fefa 	bl	8000618 <__aeabi_dmul>
 8014824:	1c65      	adds	r5, r4, #1
 8014826:	f7ec f9a7 	bl	8000b78 <__aeabi_d2iz>
 801482a:	4680      	mov	r8, r0
 801482c:	f7eb fe8a 	bl	8000544 <__aeabi_i2d>
 8014830:	2200      	movs	r2, #0
 8014832:	4b96      	ldr	r3, [pc, #600]	; (8014a8c <__kernel_rem_pio2+0x69c>)
 8014834:	f10a 0a18 	add.w	sl, sl, #24
 8014838:	f7eb feee 	bl	8000618 <__aeabi_dmul>
 801483c:	460b      	mov	r3, r1
 801483e:	4602      	mov	r2, r0
 8014840:	4639      	mov	r1, r7
 8014842:	4630      	mov	r0, r6
 8014844:	f7eb fd30 	bl	80002a8 <__aeabi_dsub>
 8014848:	f7ec f996 	bl	8000b78 <__aeabi_d2iz>
 801484c:	ab0c      	add	r3, sp, #48	; 0x30
 801484e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014852:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014856:	e71d      	b.n	8014694 <__kernel_rem_pio2+0x2a4>
 8014858:	4630      	mov	r0, r6
 801485a:	4639      	mov	r1, r7
 801485c:	f7ec f98c 	bl	8000b78 <__aeabi_d2iz>
 8014860:	ab0c      	add	r3, sp, #48	; 0x30
 8014862:	4625      	mov	r5, r4
 8014864:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014868:	e714      	b.n	8014694 <__kernel_rem_pio2+0x2a4>
 801486a:	ab0c      	add	r3, sp, #48	; 0x30
 801486c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014870:	3c01      	subs	r4, #1
 8014872:	f7eb fe67 	bl	8000544 <__aeabi_i2d>
 8014876:	4632      	mov	r2, r6
 8014878:	463b      	mov	r3, r7
 801487a:	f7eb fecd 	bl	8000618 <__aeabi_dmul>
 801487e:	4642      	mov	r2, r8
 8014880:	464b      	mov	r3, r9
 8014882:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014886:	4630      	mov	r0, r6
 8014888:	4639      	mov	r1, r7
 801488a:	f7eb fec5 	bl	8000618 <__aeabi_dmul>
 801488e:	4606      	mov	r6, r0
 8014890:	460f      	mov	r7, r1
 8014892:	e711      	b.n	80146b8 <__kernel_rem_pio2+0x2c8>
 8014894:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8014898:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801489c:	f7eb febc 	bl	8000618 <__aeabi_dmul>
 80148a0:	4602      	mov	r2, r0
 80148a2:	460b      	mov	r3, r1
 80148a4:	4648      	mov	r0, r9
 80148a6:	4651      	mov	r1, sl
 80148a8:	3701      	adds	r7, #1
 80148aa:	f7eb fcff 	bl	80002ac <__adddf3>
 80148ae:	4681      	mov	r9, r0
 80148b0:	468a      	mov	sl, r1
 80148b2:	9b00      	ldr	r3, [sp, #0]
 80148b4:	429f      	cmp	r7, r3
 80148b6:	dc02      	bgt.n	80148be <__kernel_rem_pio2+0x4ce>
 80148b8:	9b06      	ldr	r3, [sp, #24]
 80148ba:	429f      	cmp	r7, r3
 80148bc:	ddea      	ble.n	8014894 <__kernel_rem_pio2+0x4a4>
 80148be:	ab48      	add	r3, sp, #288	; 0x120
 80148c0:	9a06      	ldr	r2, [sp, #24]
 80148c2:	3c01      	subs	r4, #1
 80148c4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80148c8:	e9c6 9a00 	strd	r9, sl, [r6]
 80148cc:	e6f8      	b.n	80146c0 <__kernel_rem_pio2+0x2d0>
 80148ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80148d0:	2b02      	cmp	r3, #2
 80148d2:	dc0b      	bgt.n	80148ec <__kernel_rem_pio2+0x4fc>
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	dc39      	bgt.n	801494c <__kernel_rem_pio2+0x55c>
 80148d8:	d05d      	beq.n	8014996 <__kernel_rem_pio2+0x5a6>
 80148da:	9b02      	ldr	r3, [sp, #8]
 80148dc:	f003 0007 	and.w	r0, r3, #7
 80148e0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80148e4:	ecbd 8b02 	vpop	{d8}
 80148e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ec:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80148ee:	2b03      	cmp	r3, #3
 80148f0:	d1f3      	bne.n	80148da <__kernel_rem_pio2+0x4ea>
 80148f2:	9b05      	ldr	r3, [sp, #20]
 80148f4:	9500      	str	r5, [sp, #0]
 80148f6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80148fa:	eb0d 0403 	add.w	r4, sp, r3
 80148fe:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8014902:	46a2      	mov	sl, r4
 8014904:	9b00      	ldr	r3, [sp, #0]
 8014906:	f1aa 0a08 	sub.w	sl, sl, #8
 801490a:	2b00      	cmp	r3, #0
 801490c:	dc69      	bgt.n	80149e2 <__kernel_rem_pio2+0x5f2>
 801490e:	46aa      	mov	sl, r5
 8014910:	f1ba 0f01 	cmp.w	sl, #1
 8014914:	f1a4 0408 	sub.w	r4, r4, #8
 8014918:	f300 8083 	bgt.w	8014a22 <__kernel_rem_pio2+0x632>
 801491c:	9c05      	ldr	r4, [sp, #20]
 801491e:	ab48      	add	r3, sp, #288	; 0x120
 8014920:	2000      	movs	r0, #0
 8014922:	2100      	movs	r1, #0
 8014924:	441c      	add	r4, r3
 8014926:	2d01      	cmp	r5, #1
 8014928:	f300 809a 	bgt.w	8014a60 <__kernel_rem_pio2+0x670>
 801492c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8014930:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8014934:	f1bb 0f00 	cmp.w	fp, #0
 8014938:	f040 8098 	bne.w	8014a6c <__kernel_rem_pio2+0x67c>
 801493c:	9b04      	ldr	r3, [sp, #16]
 801493e:	e9c3 7800 	strd	r7, r8, [r3]
 8014942:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014946:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801494a:	e7c6      	b.n	80148da <__kernel_rem_pio2+0x4ea>
 801494c:	9e05      	ldr	r6, [sp, #20]
 801494e:	ab48      	add	r3, sp, #288	; 0x120
 8014950:	462c      	mov	r4, r5
 8014952:	2000      	movs	r0, #0
 8014954:	441e      	add	r6, r3
 8014956:	2100      	movs	r1, #0
 8014958:	2c00      	cmp	r4, #0
 801495a:	da33      	bge.n	80149c4 <__kernel_rem_pio2+0x5d4>
 801495c:	f1bb 0f00 	cmp.w	fp, #0
 8014960:	d036      	beq.n	80149d0 <__kernel_rem_pio2+0x5e0>
 8014962:	4602      	mov	r2, r0
 8014964:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014968:	9c04      	ldr	r4, [sp, #16]
 801496a:	ae4a      	add	r6, sp, #296	; 0x128
 801496c:	e9c4 2300 	strd	r2, r3, [r4]
 8014970:	2401      	movs	r4, #1
 8014972:	4602      	mov	r2, r0
 8014974:	460b      	mov	r3, r1
 8014976:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801497a:	f7eb fc95 	bl	80002a8 <__aeabi_dsub>
 801497e:	42a5      	cmp	r5, r4
 8014980:	da29      	bge.n	80149d6 <__kernel_rem_pio2+0x5e6>
 8014982:	f1bb 0f00 	cmp.w	fp, #0
 8014986:	d002      	beq.n	801498e <__kernel_rem_pio2+0x59e>
 8014988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801498c:	4619      	mov	r1, r3
 801498e:	9b04      	ldr	r3, [sp, #16]
 8014990:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014994:	e7a1      	b.n	80148da <__kernel_rem_pio2+0x4ea>
 8014996:	9c05      	ldr	r4, [sp, #20]
 8014998:	ab48      	add	r3, sp, #288	; 0x120
 801499a:	2000      	movs	r0, #0
 801499c:	2100      	movs	r1, #0
 801499e:	441c      	add	r4, r3
 80149a0:	2d00      	cmp	r5, #0
 80149a2:	da09      	bge.n	80149b8 <__kernel_rem_pio2+0x5c8>
 80149a4:	f1bb 0f00 	cmp.w	fp, #0
 80149a8:	d002      	beq.n	80149b0 <__kernel_rem_pio2+0x5c0>
 80149aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80149ae:	4619      	mov	r1, r3
 80149b0:	9b04      	ldr	r3, [sp, #16]
 80149b2:	e9c3 0100 	strd	r0, r1, [r3]
 80149b6:	e790      	b.n	80148da <__kernel_rem_pio2+0x4ea>
 80149b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80149bc:	3d01      	subs	r5, #1
 80149be:	f7eb fc75 	bl	80002ac <__adddf3>
 80149c2:	e7ed      	b.n	80149a0 <__kernel_rem_pio2+0x5b0>
 80149c4:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80149c8:	3c01      	subs	r4, #1
 80149ca:	f7eb fc6f 	bl	80002ac <__adddf3>
 80149ce:	e7c3      	b.n	8014958 <__kernel_rem_pio2+0x568>
 80149d0:	4602      	mov	r2, r0
 80149d2:	460b      	mov	r3, r1
 80149d4:	e7c8      	b.n	8014968 <__kernel_rem_pio2+0x578>
 80149d6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80149da:	3401      	adds	r4, #1
 80149dc:	f7eb fc66 	bl	80002ac <__adddf3>
 80149e0:	e7cd      	b.n	801497e <__kernel_rem_pio2+0x58e>
 80149e2:	9b00      	ldr	r3, [sp, #0]
 80149e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80149e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80149ec:	3b01      	subs	r3, #1
 80149ee:	4640      	mov	r0, r8
 80149f0:	4632      	mov	r2, r6
 80149f2:	4649      	mov	r1, r9
 80149f4:	9300      	str	r3, [sp, #0]
 80149f6:	463b      	mov	r3, r7
 80149f8:	f7eb fc58 	bl	80002ac <__adddf3>
 80149fc:	4602      	mov	r2, r0
 80149fe:	460b      	mov	r3, r1
 8014a00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014a04:	4640      	mov	r0, r8
 8014a06:	4649      	mov	r1, r9
 8014a08:	f7eb fc4e 	bl	80002a8 <__aeabi_dsub>
 8014a0c:	4632      	mov	r2, r6
 8014a0e:	463b      	mov	r3, r7
 8014a10:	f7eb fc4c 	bl	80002ac <__adddf3>
 8014a14:	ed9d 7b06 	vldr	d7, [sp, #24]
 8014a18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014a1c:	ed8a 7b00 	vstr	d7, [sl]
 8014a20:	e770      	b.n	8014904 <__kernel_rem_pio2+0x514>
 8014a22:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014a26:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8014a2a:	4640      	mov	r0, r8
 8014a2c:	4649      	mov	r1, r9
 8014a2e:	4632      	mov	r2, r6
 8014a30:	463b      	mov	r3, r7
 8014a32:	f7eb fc3b 	bl	80002ac <__adddf3>
 8014a36:	4602      	mov	r2, r0
 8014a38:	460b      	mov	r3, r1
 8014a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a3e:	e9cd 0100 	strd	r0, r1, [sp]
 8014a42:	4640      	mov	r0, r8
 8014a44:	4649      	mov	r1, r9
 8014a46:	f7eb fc2f 	bl	80002a8 <__aeabi_dsub>
 8014a4a:	4632      	mov	r2, r6
 8014a4c:	463b      	mov	r3, r7
 8014a4e:	f7eb fc2d 	bl	80002ac <__adddf3>
 8014a52:	ed9d 7b00 	vldr	d7, [sp]
 8014a56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a5a:	ed84 7b00 	vstr	d7, [r4]
 8014a5e:	e757      	b.n	8014910 <__kernel_rem_pio2+0x520>
 8014a60:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014a64:	3d01      	subs	r5, #1
 8014a66:	f7eb fc21 	bl	80002ac <__adddf3>
 8014a6a:	e75c      	b.n	8014926 <__kernel_rem_pio2+0x536>
 8014a6c:	9b04      	ldr	r3, [sp, #16]
 8014a6e:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014a72:	9a04      	ldr	r2, [sp, #16]
 8014a74:	601f      	str	r7, [r3, #0]
 8014a76:	605c      	str	r4, [r3, #4]
 8014a78:	609d      	str	r5, [r3, #8]
 8014a7a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014a7e:	6110      	str	r0, [r2, #16]
 8014a80:	60d3      	str	r3, [r2, #12]
 8014a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014a86:	6153      	str	r3, [r2, #20]
 8014a88:	e727      	b.n	80148da <__kernel_rem_pio2+0x4ea>
 8014a8a:	bf00      	nop
 8014a8c:	41700000 	.word	0x41700000
 8014a90:	3e700000 	.word	0x3e700000

08014a94 <__cvt>:
 8014a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a98:	ec55 4b10 	vmov	r4, r5, d0
 8014a9c:	2d00      	cmp	r5, #0
 8014a9e:	460e      	mov	r6, r1
 8014aa0:	4619      	mov	r1, r3
 8014aa2:	462b      	mov	r3, r5
 8014aa4:	bfb4      	ite	lt
 8014aa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014aaa:	2300      	movge	r3, #0
 8014aac:	4691      	mov	r9, r2
 8014aae:	bfbf      	itttt	lt
 8014ab0:	4622      	movlt	r2, r4
 8014ab2:	461d      	movlt	r5, r3
 8014ab4:	232d      	movlt	r3, #45	; 0x2d
 8014ab6:	4614      	movlt	r4, r2
 8014ab8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014abc:	700b      	strb	r3, [r1, #0]
 8014abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ac0:	f023 0820 	bic.w	r8, r3, #32
 8014ac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014ac8:	d005      	beq.n	8014ad6 <__cvt+0x42>
 8014aca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014ace:	d100      	bne.n	8014ad2 <__cvt+0x3e>
 8014ad0:	3601      	adds	r6, #1
 8014ad2:	2102      	movs	r1, #2
 8014ad4:	e000      	b.n	8014ad8 <__cvt+0x44>
 8014ad6:	2103      	movs	r1, #3
 8014ad8:	ab03      	add	r3, sp, #12
 8014ada:	4632      	mov	r2, r6
 8014adc:	9301      	str	r3, [sp, #4]
 8014ade:	ab02      	add	r3, sp, #8
 8014ae0:	ec45 4b10 	vmov	d0, r4, r5
 8014ae4:	9300      	str	r3, [sp, #0]
 8014ae6:	4653      	mov	r3, sl
 8014ae8:	f000 fe7e 	bl	80157e8 <_dtoa_r>
 8014aec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014af0:	4607      	mov	r7, r0
 8014af2:	d102      	bne.n	8014afa <__cvt+0x66>
 8014af4:	f019 0f01 	tst.w	r9, #1
 8014af8:	d022      	beq.n	8014b40 <__cvt+0xac>
 8014afa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014afe:	eb07 0906 	add.w	r9, r7, r6
 8014b02:	d110      	bne.n	8014b26 <__cvt+0x92>
 8014b04:	783b      	ldrb	r3, [r7, #0]
 8014b06:	2b30      	cmp	r3, #48	; 0x30
 8014b08:	d10a      	bne.n	8014b20 <__cvt+0x8c>
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	4620      	mov	r0, r4
 8014b10:	4629      	mov	r1, r5
 8014b12:	f7eb ffe9 	bl	8000ae8 <__aeabi_dcmpeq>
 8014b16:	b918      	cbnz	r0, 8014b20 <__cvt+0x8c>
 8014b18:	f1c6 0601 	rsb	r6, r6, #1
 8014b1c:	f8ca 6000 	str.w	r6, [sl]
 8014b20:	f8da 3000 	ldr.w	r3, [sl]
 8014b24:	4499      	add	r9, r3
 8014b26:	2200      	movs	r2, #0
 8014b28:	2300      	movs	r3, #0
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	4629      	mov	r1, r5
 8014b2e:	f7eb ffdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8014b32:	b108      	cbz	r0, 8014b38 <__cvt+0xa4>
 8014b34:	f8cd 900c 	str.w	r9, [sp, #12]
 8014b38:	2230      	movs	r2, #48	; 0x30
 8014b3a:	9b03      	ldr	r3, [sp, #12]
 8014b3c:	454b      	cmp	r3, r9
 8014b3e:	d307      	bcc.n	8014b50 <__cvt+0xbc>
 8014b40:	9b03      	ldr	r3, [sp, #12]
 8014b42:	4638      	mov	r0, r7
 8014b44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b46:	1bdb      	subs	r3, r3, r7
 8014b48:	6013      	str	r3, [r2, #0]
 8014b4a:	b004      	add	sp, #16
 8014b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b50:	1c59      	adds	r1, r3, #1
 8014b52:	9103      	str	r1, [sp, #12]
 8014b54:	701a      	strb	r2, [r3, #0]
 8014b56:	e7f0      	b.n	8014b3a <__cvt+0xa6>

08014b58 <__exponent>:
 8014b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014b5a:	2900      	cmp	r1, #0
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	bfb8      	it	lt
 8014b60:	4249      	neglt	r1, r1
 8014b62:	f803 2b02 	strb.w	r2, [r3], #2
 8014b66:	bfb4      	ite	lt
 8014b68:	222d      	movlt	r2, #45	; 0x2d
 8014b6a:	222b      	movge	r2, #43	; 0x2b
 8014b6c:	2909      	cmp	r1, #9
 8014b6e:	7042      	strb	r2, [r0, #1]
 8014b70:	dd29      	ble.n	8014bc6 <__exponent+0x6e>
 8014b72:	f10d 0207 	add.w	r2, sp, #7
 8014b76:	260a      	movs	r6, #10
 8014b78:	4617      	mov	r7, r2
 8014b7a:	4694      	mov	ip, r2
 8014b7c:	3a01      	subs	r2, #1
 8014b7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8014b82:	fb06 1415 	mls	r4, r6, r5, r1
 8014b86:	3430      	adds	r4, #48	; 0x30
 8014b88:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014b8c:	460c      	mov	r4, r1
 8014b8e:	4629      	mov	r1, r5
 8014b90:	2c63      	cmp	r4, #99	; 0x63
 8014b92:	dcf2      	bgt.n	8014b7a <__exponent+0x22>
 8014b94:	3130      	adds	r1, #48	; 0x30
 8014b96:	f1ac 0402 	sub.w	r4, ip, #2
 8014b9a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014b9e:	1c41      	adds	r1, r0, #1
 8014ba0:	4622      	mov	r2, r4
 8014ba2:	42ba      	cmp	r2, r7
 8014ba4:	d30a      	bcc.n	8014bbc <__exponent+0x64>
 8014ba6:	f10d 0209 	add.w	r2, sp, #9
 8014baa:	eba2 020c 	sub.w	r2, r2, ip
 8014bae:	42bc      	cmp	r4, r7
 8014bb0:	bf88      	it	hi
 8014bb2:	2200      	movhi	r2, #0
 8014bb4:	4413      	add	r3, r2
 8014bb6:	1a18      	subs	r0, r3, r0
 8014bb8:	b003      	add	sp, #12
 8014bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bbc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014bc0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014bc4:	e7ed      	b.n	8014ba2 <__exponent+0x4a>
 8014bc6:	2330      	movs	r3, #48	; 0x30
 8014bc8:	3130      	adds	r1, #48	; 0x30
 8014bca:	7083      	strb	r3, [r0, #2]
 8014bcc:	1d03      	adds	r3, r0, #4
 8014bce:	70c1      	strb	r1, [r0, #3]
 8014bd0:	e7f1      	b.n	8014bb6 <__exponent+0x5e>
	...

08014bd4 <_printf_float>:
 8014bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bd8:	ed2d 8b02 	vpush	{d8}
 8014bdc:	b08d      	sub	sp, #52	; 0x34
 8014bde:	460c      	mov	r4, r1
 8014be0:	4616      	mov	r6, r2
 8014be2:	461f      	mov	r7, r3
 8014be4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014be8:	4605      	mov	r5, r0
 8014bea:	f000 fcdb 	bl	80155a4 <_localeconv_r>
 8014bee:	f8d0 a000 	ldr.w	sl, [r0]
 8014bf2:	4650      	mov	r0, sl
 8014bf4:	f7eb fb4c 	bl	8000290 <strlen>
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014bfe:	ee08 0a10 	vmov	s16, r0
 8014c02:	930a      	str	r3, [sp, #40]	; 0x28
 8014c04:	6823      	ldr	r3, [r4, #0]
 8014c06:	9305      	str	r3, [sp, #20]
 8014c08:	f8d8 3000 	ldr.w	r3, [r8]
 8014c0c:	3307      	adds	r3, #7
 8014c0e:	f023 0307 	bic.w	r3, r3, #7
 8014c12:	f103 0208 	add.w	r2, r3, #8
 8014c16:	f8c8 2000 	str.w	r2, [r8]
 8014c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8014c1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014c22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014c26:	f8cd 8018 	str.w	r8, [sp, #24]
 8014c2a:	9307      	str	r3, [sp, #28]
 8014c2c:	4b9f      	ldr	r3, [pc, #636]	; (8014eac <_printf_float+0x2d8>)
 8014c2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014c32:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8014c36:	f7eb ff89 	bl	8000b4c <__aeabi_dcmpun>
 8014c3a:	bb88      	cbnz	r0, 8014ca0 <_printf_float+0xcc>
 8014c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8014c40:	4b9a      	ldr	r3, [pc, #616]	; (8014eac <_printf_float+0x2d8>)
 8014c42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014c46:	f7eb ff63 	bl	8000b10 <__aeabi_dcmple>
 8014c4a:	bb48      	cbnz	r0, 8014ca0 <_printf_float+0xcc>
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	2300      	movs	r3, #0
 8014c50:	4640      	mov	r0, r8
 8014c52:	4649      	mov	r1, r9
 8014c54:	f7eb ff52 	bl	8000afc <__aeabi_dcmplt>
 8014c58:	b110      	cbz	r0, 8014c60 <_printf_float+0x8c>
 8014c5a:	232d      	movs	r3, #45	; 0x2d
 8014c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c60:	4a93      	ldr	r2, [pc, #588]	; (8014eb0 <_printf_float+0x2dc>)
 8014c62:	4b94      	ldr	r3, [pc, #592]	; (8014eb4 <_printf_float+0x2e0>)
 8014c64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014c68:	bf94      	ite	ls
 8014c6a:	4690      	movls	r8, r2
 8014c6c:	4698      	movhi	r8, r3
 8014c6e:	2303      	movs	r3, #3
 8014c70:	f04f 0900 	mov.w	r9, #0
 8014c74:	6123      	str	r3, [r4, #16]
 8014c76:	9b05      	ldr	r3, [sp, #20]
 8014c78:	f023 0304 	bic.w	r3, r3, #4
 8014c7c:	6023      	str	r3, [r4, #0]
 8014c7e:	4633      	mov	r3, r6
 8014c80:	aa0b      	add	r2, sp, #44	; 0x2c
 8014c82:	4621      	mov	r1, r4
 8014c84:	4628      	mov	r0, r5
 8014c86:	9700      	str	r7, [sp, #0]
 8014c88:	f000 f9da 	bl	8015040 <_printf_common>
 8014c8c:	3001      	adds	r0, #1
 8014c8e:	f040 8090 	bne.w	8014db2 <_printf_float+0x1de>
 8014c92:	f04f 30ff 	mov.w	r0, #4294967295
 8014c96:	b00d      	add	sp, #52	; 0x34
 8014c98:	ecbd 8b02 	vpop	{d8}
 8014c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca0:	4642      	mov	r2, r8
 8014ca2:	464b      	mov	r3, r9
 8014ca4:	4640      	mov	r0, r8
 8014ca6:	4649      	mov	r1, r9
 8014ca8:	f7eb ff50 	bl	8000b4c <__aeabi_dcmpun>
 8014cac:	b140      	cbz	r0, 8014cc0 <_printf_float+0xec>
 8014cae:	464b      	mov	r3, r9
 8014cb0:	4a81      	ldr	r2, [pc, #516]	; (8014eb8 <_printf_float+0x2e4>)
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	bfbc      	itt	lt
 8014cb6:	232d      	movlt	r3, #45	; 0x2d
 8014cb8:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014cbc:	4b7f      	ldr	r3, [pc, #508]	; (8014ebc <_printf_float+0x2e8>)
 8014cbe:	e7d1      	b.n	8014c64 <_printf_float+0x90>
 8014cc0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014cc4:	6863      	ldr	r3, [r4, #4]
 8014cc6:	9206      	str	r2, [sp, #24]
 8014cc8:	1c5a      	adds	r2, r3, #1
 8014cca:	d13f      	bne.n	8014d4c <_printf_float+0x178>
 8014ccc:	2306      	movs	r3, #6
 8014cce:	6063      	str	r3, [r4, #4]
 8014cd0:	9b05      	ldr	r3, [sp, #20]
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	6861      	ldr	r1, [r4, #4]
 8014cd6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014cda:	2300      	movs	r3, #0
 8014cdc:	9303      	str	r3, [sp, #12]
 8014cde:	ab0a      	add	r3, sp, #40	; 0x28
 8014ce0:	6022      	str	r2, [r4, #0]
 8014ce2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014ce6:	ab09      	add	r3, sp, #36	; 0x24
 8014ce8:	ec49 8b10 	vmov	d0, r8, r9
 8014cec:	9300      	str	r3, [sp, #0]
 8014cee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014cf2:	f7ff fecf 	bl	8014a94 <__cvt>
 8014cf6:	9b06      	ldr	r3, [sp, #24]
 8014cf8:	4680      	mov	r8, r0
 8014cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014cfc:	2b47      	cmp	r3, #71	; 0x47
 8014cfe:	d108      	bne.n	8014d12 <_printf_float+0x13e>
 8014d00:	1cc8      	adds	r0, r1, #3
 8014d02:	db02      	blt.n	8014d0a <_printf_float+0x136>
 8014d04:	6863      	ldr	r3, [r4, #4]
 8014d06:	4299      	cmp	r1, r3
 8014d08:	dd41      	ble.n	8014d8e <_printf_float+0x1ba>
 8014d0a:	f1ab 0302 	sub.w	r3, fp, #2
 8014d0e:	fa5f fb83 	uxtb.w	fp, r3
 8014d12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014d16:	d820      	bhi.n	8014d5a <_printf_float+0x186>
 8014d18:	3901      	subs	r1, #1
 8014d1a:	465a      	mov	r2, fp
 8014d1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014d20:	9109      	str	r1, [sp, #36]	; 0x24
 8014d22:	f7ff ff19 	bl	8014b58 <__exponent>
 8014d26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d28:	4681      	mov	r9, r0
 8014d2a:	1813      	adds	r3, r2, r0
 8014d2c:	2a01      	cmp	r2, #1
 8014d2e:	6123      	str	r3, [r4, #16]
 8014d30:	dc02      	bgt.n	8014d38 <_printf_float+0x164>
 8014d32:	6822      	ldr	r2, [r4, #0]
 8014d34:	07d2      	lsls	r2, r2, #31
 8014d36:	d501      	bpl.n	8014d3c <_printf_float+0x168>
 8014d38:	3301      	adds	r3, #1
 8014d3a:	6123      	str	r3, [r4, #16]
 8014d3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d09c      	beq.n	8014c7e <_printf_float+0xaa>
 8014d44:	232d      	movs	r3, #45	; 0x2d
 8014d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d4a:	e798      	b.n	8014c7e <_printf_float+0xaa>
 8014d4c:	9a06      	ldr	r2, [sp, #24]
 8014d4e:	2a47      	cmp	r2, #71	; 0x47
 8014d50:	d1be      	bne.n	8014cd0 <_printf_float+0xfc>
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d1bc      	bne.n	8014cd0 <_printf_float+0xfc>
 8014d56:	2301      	movs	r3, #1
 8014d58:	e7b9      	b.n	8014cce <_printf_float+0xfa>
 8014d5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014d5e:	d118      	bne.n	8014d92 <_printf_float+0x1be>
 8014d60:	2900      	cmp	r1, #0
 8014d62:	6863      	ldr	r3, [r4, #4]
 8014d64:	dd0b      	ble.n	8014d7e <_printf_float+0x1aa>
 8014d66:	6121      	str	r1, [r4, #16]
 8014d68:	b913      	cbnz	r3, 8014d70 <_printf_float+0x19c>
 8014d6a:	6822      	ldr	r2, [r4, #0]
 8014d6c:	07d0      	lsls	r0, r2, #31
 8014d6e:	d502      	bpl.n	8014d76 <_printf_float+0x1a2>
 8014d70:	3301      	adds	r3, #1
 8014d72:	440b      	add	r3, r1
 8014d74:	6123      	str	r3, [r4, #16]
 8014d76:	f04f 0900 	mov.w	r9, #0
 8014d7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8014d7c:	e7de      	b.n	8014d3c <_printf_float+0x168>
 8014d7e:	b913      	cbnz	r3, 8014d86 <_printf_float+0x1b2>
 8014d80:	6822      	ldr	r2, [r4, #0]
 8014d82:	07d2      	lsls	r2, r2, #31
 8014d84:	d501      	bpl.n	8014d8a <_printf_float+0x1b6>
 8014d86:	3302      	adds	r3, #2
 8014d88:	e7f4      	b.n	8014d74 <_printf_float+0x1a0>
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	e7f2      	b.n	8014d74 <_printf_float+0x1a0>
 8014d8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d94:	4299      	cmp	r1, r3
 8014d96:	db05      	blt.n	8014da4 <_printf_float+0x1d0>
 8014d98:	6823      	ldr	r3, [r4, #0]
 8014d9a:	6121      	str	r1, [r4, #16]
 8014d9c:	07d8      	lsls	r0, r3, #31
 8014d9e:	d5ea      	bpl.n	8014d76 <_printf_float+0x1a2>
 8014da0:	1c4b      	adds	r3, r1, #1
 8014da2:	e7e7      	b.n	8014d74 <_printf_float+0x1a0>
 8014da4:	2900      	cmp	r1, #0
 8014da6:	bfd4      	ite	le
 8014da8:	f1c1 0202 	rsble	r2, r1, #2
 8014dac:	2201      	movgt	r2, #1
 8014dae:	4413      	add	r3, r2
 8014db0:	e7e0      	b.n	8014d74 <_printf_float+0x1a0>
 8014db2:	6823      	ldr	r3, [r4, #0]
 8014db4:	055a      	lsls	r2, r3, #21
 8014db6:	d407      	bmi.n	8014dc8 <_printf_float+0x1f4>
 8014db8:	6923      	ldr	r3, [r4, #16]
 8014dba:	4642      	mov	r2, r8
 8014dbc:	4631      	mov	r1, r6
 8014dbe:	4628      	mov	r0, r5
 8014dc0:	47b8      	blx	r7
 8014dc2:	3001      	adds	r0, #1
 8014dc4:	d12c      	bne.n	8014e20 <_printf_float+0x24c>
 8014dc6:	e764      	b.n	8014c92 <_printf_float+0xbe>
 8014dc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014dcc:	f240 80e0 	bls.w	8014f90 <_printf_float+0x3bc>
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014dd8:	f7eb fe86 	bl	8000ae8 <__aeabi_dcmpeq>
 8014ddc:	2800      	cmp	r0, #0
 8014dde:	d034      	beq.n	8014e4a <_printf_float+0x276>
 8014de0:	2301      	movs	r3, #1
 8014de2:	4a37      	ldr	r2, [pc, #220]	; (8014ec0 <_printf_float+0x2ec>)
 8014de4:	4631      	mov	r1, r6
 8014de6:	4628      	mov	r0, r5
 8014de8:	47b8      	blx	r7
 8014dea:	3001      	adds	r0, #1
 8014dec:	f43f af51 	beq.w	8014c92 <_printf_float+0xbe>
 8014df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014df4:	429a      	cmp	r2, r3
 8014df6:	db02      	blt.n	8014dfe <_printf_float+0x22a>
 8014df8:	6823      	ldr	r3, [r4, #0]
 8014dfa:	07d8      	lsls	r0, r3, #31
 8014dfc:	d510      	bpl.n	8014e20 <_printf_float+0x24c>
 8014dfe:	ee18 3a10 	vmov	r3, s16
 8014e02:	4652      	mov	r2, sl
 8014e04:	4631      	mov	r1, r6
 8014e06:	4628      	mov	r0, r5
 8014e08:	47b8      	blx	r7
 8014e0a:	3001      	adds	r0, #1
 8014e0c:	f43f af41 	beq.w	8014c92 <_printf_float+0xbe>
 8014e10:	f04f 0800 	mov.w	r8, #0
 8014e14:	f104 091a 	add.w	r9, r4, #26
 8014e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e1a:	3b01      	subs	r3, #1
 8014e1c:	4543      	cmp	r3, r8
 8014e1e:	dc09      	bgt.n	8014e34 <_printf_float+0x260>
 8014e20:	6823      	ldr	r3, [r4, #0]
 8014e22:	079b      	lsls	r3, r3, #30
 8014e24:	f100 8107 	bmi.w	8015036 <_printf_float+0x462>
 8014e28:	68e0      	ldr	r0, [r4, #12]
 8014e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e2c:	4298      	cmp	r0, r3
 8014e2e:	bfb8      	it	lt
 8014e30:	4618      	movlt	r0, r3
 8014e32:	e730      	b.n	8014c96 <_printf_float+0xc2>
 8014e34:	2301      	movs	r3, #1
 8014e36:	464a      	mov	r2, r9
 8014e38:	4631      	mov	r1, r6
 8014e3a:	4628      	mov	r0, r5
 8014e3c:	47b8      	blx	r7
 8014e3e:	3001      	adds	r0, #1
 8014e40:	f43f af27 	beq.w	8014c92 <_printf_float+0xbe>
 8014e44:	f108 0801 	add.w	r8, r8, #1
 8014e48:	e7e6      	b.n	8014e18 <_printf_float+0x244>
 8014e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	dc39      	bgt.n	8014ec4 <_printf_float+0x2f0>
 8014e50:	2301      	movs	r3, #1
 8014e52:	4a1b      	ldr	r2, [pc, #108]	; (8014ec0 <_printf_float+0x2ec>)
 8014e54:	4631      	mov	r1, r6
 8014e56:	4628      	mov	r0, r5
 8014e58:	47b8      	blx	r7
 8014e5a:	3001      	adds	r0, #1
 8014e5c:	f43f af19 	beq.w	8014c92 <_printf_float+0xbe>
 8014e60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014e64:	4313      	orrs	r3, r2
 8014e66:	d102      	bne.n	8014e6e <_printf_float+0x29a>
 8014e68:	6823      	ldr	r3, [r4, #0]
 8014e6a:	07d9      	lsls	r1, r3, #31
 8014e6c:	d5d8      	bpl.n	8014e20 <_printf_float+0x24c>
 8014e6e:	ee18 3a10 	vmov	r3, s16
 8014e72:	4652      	mov	r2, sl
 8014e74:	4631      	mov	r1, r6
 8014e76:	4628      	mov	r0, r5
 8014e78:	47b8      	blx	r7
 8014e7a:	3001      	adds	r0, #1
 8014e7c:	f43f af09 	beq.w	8014c92 <_printf_float+0xbe>
 8014e80:	f04f 0900 	mov.w	r9, #0
 8014e84:	f104 0a1a 	add.w	sl, r4, #26
 8014e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e8a:	425b      	negs	r3, r3
 8014e8c:	454b      	cmp	r3, r9
 8014e8e:	dc01      	bgt.n	8014e94 <_printf_float+0x2c0>
 8014e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e92:	e792      	b.n	8014dba <_printf_float+0x1e6>
 8014e94:	2301      	movs	r3, #1
 8014e96:	4652      	mov	r2, sl
 8014e98:	4631      	mov	r1, r6
 8014e9a:	4628      	mov	r0, r5
 8014e9c:	47b8      	blx	r7
 8014e9e:	3001      	adds	r0, #1
 8014ea0:	f43f aef7 	beq.w	8014c92 <_printf_float+0xbe>
 8014ea4:	f109 0901 	add.w	r9, r9, #1
 8014ea8:	e7ee      	b.n	8014e88 <_printf_float+0x2b4>
 8014eaa:	bf00      	nop
 8014eac:	7fefffff 	.word	0x7fefffff
 8014eb0:	08017858 	.word	0x08017858
 8014eb4:	0801785c 	.word	0x0801785c
 8014eb8:	08017860 	.word	0x08017860
 8014ebc:	08017864 	.word	0x08017864
 8014ec0:	08017868 	.word	0x08017868
 8014ec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014ec8:	429a      	cmp	r2, r3
 8014eca:	bfa8      	it	ge
 8014ecc:	461a      	movge	r2, r3
 8014ece:	2a00      	cmp	r2, #0
 8014ed0:	4691      	mov	r9, r2
 8014ed2:	dc37      	bgt.n	8014f44 <_printf_float+0x370>
 8014ed4:	f04f 0b00 	mov.w	fp, #0
 8014ed8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014edc:	f104 021a 	add.w	r2, r4, #26
 8014ee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014ee2:	9305      	str	r3, [sp, #20]
 8014ee4:	eba3 0309 	sub.w	r3, r3, r9
 8014ee8:	455b      	cmp	r3, fp
 8014eea:	dc33      	bgt.n	8014f54 <_printf_float+0x380>
 8014eec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	db3b      	blt.n	8014f6c <_printf_float+0x398>
 8014ef4:	6823      	ldr	r3, [r4, #0]
 8014ef6:	07da      	lsls	r2, r3, #31
 8014ef8:	d438      	bmi.n	8014f6c <_printf_float+0x398>
 8014efa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014efe:	eba2 0903 	sub.w	r9, r2, r3
 8014f02:	9b05      	ldr	r3, [sp, #20]
 8014f04:	1ad2      	subs	r2, r2, r3
 8014f06:	4591      	cmp	r9, r2
 8014f08:	bfa8      	it	ge
 8014f0a:	4691      	movge	r9, r2
 8014f0c:	f1b9 0f00 	cmp.w	r9, #0
 8014f10:	dc35      	bgt.n	8014f7e <_printf_float+0x3aa>
 8014f12:	f04f 0800 	mov.w	r8, #0
 8014f16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014f1a:	f104 0a1a 	add.w	sl, r4, #26
 8014f1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014f22:	1a9b      	subs	r3, r3, r2
 8014f24:	eba3 0309 	sub.w	r3, r3, r9
 8014f28:	4543      	cmp	r3, r8
 8014f2a:	f77f af79 	ble.w	8014e20 <_printf_float+0x24c>
 8014f2e:	2301      	movs	r3, #1
 8014f30:	4652      	mov	r2, sl
 8014f32:	4631      	mov	r1, r6
 8014f34:	4628      	mov	r0, r5
 8014f36:	47b8      	blx	r7
 8014f38:	3001      	adds	r0, #1
 8014f3a:	f43f aeaa 	beq.w	8014c92 <_printf_float+0xbe>
 8014f3e:	f108 0801 	add.w	r8, r8, #1
 8014f42:	e7ec      	b.n	8014f1e <_printf_float+0x34a>
 8014f44:	4613      	mov	r3, r2
 8014f46:	4631      	mov	r1, r6
 8014f48:	4642      	mov	r2, r8
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	47b8      	blx	r7
 8014f4e:	3001      	adds	r0, #1
 8014f50:	d1c0      	bne.n	8014ed4 <_printf_float+0x300>
 8014f52:	e69e      	b.n	8014c92 <_printf_float+0xbe>
 8014f54:	2301      	movs	r3, #1
 8014f56:	4631      	mov	r1, r6
 8014f58:	4628      	mov	r0, r5
 8014f5a:	9205      	str	r2, [sp, #20]
 8014f5c:	47b8      	blx	r7
 8014f5e:	3001      	adds	r0, #1
 8014f60:	f43f ae97 	beq.w	8014c92 <_printf_float+0xbe>
 8014f64:	f10b 0b01 	add.w	fp, fp, #1
 8014f68:	9a05      	ldr	r2, [sp, #20]
 8014f6a:	e7b9      	b.n	8014ee0 <_printf_float+0x30c>
 8014f6c:	ee18 3a10 	vmov	r3, s16
 8014f70:	4652      	mov	r2, sl
 8014f72:	4631      	mov	r1, r6
 8014f74:	4628      	mov	r0, r5
 8014f76:	47b8      	blx	r7
 8014f78:	3001      	adds	r0, #1
 8014f7a:	d1be      	bne.n	8014efa <_printf_float+0x326>
 8014f7c:	e689      	b.n	8014c92 <_printf_float+0xbe>
 8014f7e:	9a05      	ldr	r2, [sp, #20]
 8014f80:	464b      	mov	r3, r9
 8014f82:	4631      	mov	r1, r6
 8014f84:	4628      	mov	r0, r5
 8014f86:	4442      	add	r2, r8
 8014f88:	47b8      	blx	r7
 8014f8a:	3001      	adds	r0, #1
 8014f8c:	d1c1      	bne.n	8014f12 <_printf_float+0x33e>
 8014f8e:	e680      	b.n	8014c92 <_printf_float+0xbe>
 8014f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f92:	2a01      	cmp	r2, #1
 8014f94:	dc01      	bgt.n	8014f9a <_printf_float+0x3c6>
 8014f96:	07db      	lsls	r3, r3, #31
 8014f98:	d53a      	bpl.n	8015010 <_printf_float+0x43c>
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	4642      	mov	r2, r8
 8014f9e:	4631      	mov	r1, r6
 8014fa0:	4628      	mov	r0, r5
 8014fa2:	47b8      	blx	r7
 8014fa4:	3001      	adds	r0, #1
 8014fa6:	f43f ae74 	beq.w	8014c92 <_printf_float+0xbe>
 8014faa:	ee18 3a10 	vmov	r3, s16
 8014fae:	4652      	mov	r2, sl
 8014fb0:	4631      	mov	r1, r6
 8014fb2:	4628      	mov	r0, r5
 8014fb4:	47b8      	blx	r7
 8014fb6:	3001      	adds	r0, #1
 8014fb8:	f43f ae6b 	beq.w	8014c92 <_printf_float+0xbe>
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014fc8:	f7eb fd8e 	bl	8000ae8 <__aeabi_dcmpeq>
 8014fcc:	b9d8      	cbnz	r0, 8015006 <_printf_float+0x432>
 8014fce:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014fd2:	f108 0201 	add.w	r2, r8, #1
 8014fd6:	4631      	mov	r1, r6
 8014fd8:	4628      	mov	r0, r5
 8014fda:	47b8      	blx	r7
 8014fdc:	3001      	adds	r0, #1
 8014fde:	d10e      	bne.n	8014ffe <_printf_float+0x42a>
 8014fe0:	e657      	b.n	8014c92 <_printf_float+0xbe>
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	4652      	mov	r2, sl
 8014fe6:	4631      	mov	r1, r6
 8014fe8:	4628      	mov	r0, r5
 8014fea:	47b8      	blx	r7
 8014fec:	3001      	adds	r0, #1
 8014fee:	f43f ae50 	beq.w	8014c92 <_printf_float+0xbe>
 8014ff2:	f108 0801 	add.w	r8, r8, #1
 8014ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	4543      	cmp	r3, r8
 8014ffc:	dcf1      	bgt.n	8014fe2 <_printf_float+0x40e>
 8014ffe:	464b      	mov	r3, r9
 8015000:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015004:	e6da      	b.n	8014dbc <_printf_float+0x1e8>
 8015006:	f04f 0800 	mov.w	r8, #0
 801500a:	f104 0a1a 	add.w	sl, r4, #26
 801500e:	e7f2      	b.n	8014ff6 <_printf_float+0x422>
 8015010:	2301      	movs	r3, #1
 8015012:	4642      	mov	r2, r8
 8015014:	e7df      	b.n	8014fd6 <_printf_float+0x402>
 8015016:	2301      	movs	r3, #1
 8015018:	464a      	mov	r2, r9
 801501a:	4631      	mov	r1, r6
 801501c:	4628      	mov	r0, r5
 801501e:	47b8      	blx	r7
 8015020:	3001      	adds	r0, #1
 8015022:	f43f ae36 	beq.w	8014c92 <_printf_float+0xbe>
 8015026:	f108 0801 	add.w	r8, r8, #1
 801502a:	68e3      	ldr	r3, [r4, #12]
 801502c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801502e:	1a5b      	subs	r3, r3, r1
 8015030:	4543      	cmp	r3, r8
 8015032:	dcf0      	bgt.n	8015016 <_printf_float+0x442>
 8015034:	e6f8      	b.n	8014e28 <_printf_float+0x254>
 8015036:	f04f 0800 	mov.w	r8, #0
 801503a:	f104 0919 	add.w	r9, r4, #25
 801503e:	e7f4      	b.n	801502a <_printf_float+0x456>

08015040 <_printf_common>:
 8015040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015044:	4616      	mov	r6, r2
 8015046:	4699      	mov	r9, r3
 8015048:	688a      	ldr	r2, [r1, #8]
 801504a:	4607      	mov	r7, r0
 801504c:	690b      	ldr	r3, [r1, #16]
 801504e:	460c      	mov	r4, r1
 8015050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015054:	4293      	cmp	r3, r2
 8015056:	bfb8      	it	lt
 8015058:	4613      	movlt	r3, r2
 801505a:	6033      	str	r3, [r6, #0]
 801505c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015060:	b10a      	cbz	r2, 8015066 <_printf_common+0x26>
 8015062:	3301      	adds	r3, #1
 8015064:	6033      	str	r3, [r6, #0]
 8015066:	6823      	ldr	r3, [r4, #0]
 8015068:	0699      	lsls	r1, r3, #26
 801506a:	bf42      	ittt	mi
 801506c:	6833      	ldrmi	r3, [r6, #0]
 801506e:	3302      	addmi	r3, #2
 8015070:	6033      	strmi	r3, [r6, #0]
 8015072:	6825      	ldr	r5, [r4, #0]
 8015074:	f015 0506 	ands.w	r5, r5, #6
 8015078:	d106      	bne.n	8015088 <_printf_common+0x48>
 801507a:	f104 0a19 	add.w	sl, r4, #25
 801507e:	68e3      	ldr	r3, [r4, #12]
 8015080:	6832      	ldr	r2, [r6, #0]
 8015082:	1a9b      	subs	r3, r3, r2
 8015084:	42ab      	cmp	r3, r5
 8015086:	dc2b      	bgt.n	80150e0 <_printf_common+0xa0>
 8015088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801508c:	1e13      	subs	r3, r2, #0
 801508e:	6822      	ldr	r2, [r4, #0]
 8015090:	bf18      	it	ne
 8015092:	2301      	movne	r3, #1
 8015094:	0692      	lsls	r2, r2, #26
 8015096:	d430      	bmi.n	80150fa <_printf_common+0xba>
 8015098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801509c:	4649      	mov	r1, r9
 801509e:	4638      	mov	r0, r7
 80150a0:	47c0      	blx	r8
 80150a2:	3001      	adds	r0, #1
 80150a4:	d023      	beq.n	80150ee <_printf_common+0xae>
 80150a6:	6823      	ldr	r3, [r4, #0]
 80150a8:	341a      	adds	r4, #26
 80150aa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80150ae:	f003 0306 	and.w	r3, r3, #6
 80150b2:	2b04      	cmp	r3, #4
 80150b4:	bf0a      	itet	eq
 80150b6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80150ba:	2500      	movne	r5, #0
 80150bc:	6833      	ldreq	r3, [r6, #0]
 80150be:	f04f 0600 	mov.w	r6, #0
 80150c2:	bf08      	it	eq
 80150c4:	1aed      	subeq	r5, r5, r3
 80150c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80150ca:	bf08      	it	eq
 80150cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80150d0:	4293      	cmp	r3, r2
 80150d2:	bfc4      	itt	gt
 80150d4:	1a9b      	subgt	r3, r3, r2
 80150d6:	18ed      	addgt	r5, r5, r3
 80150d8:	42b5      	cmp	r5, r6
 80150da:	d11a      	bne.n	8015112 <_printf_common+0xd2>
 80150dc:	2000      	movs	r0, #0
 80150de:	e008      	b.n	80150f2 <_printf_common+0xb2>
 80150e0:	2301      	movs	r3, #1
 80150e2:	4652      	mov	r2, sl
 80150e4:	4649      	mov	r1, r9
 80150e6:	4638      	mov	r0, r7
 80150e8:	47c0      	blx	r8
 80150ea:	3001      	adds	r0, #1
 80150ec:	d103      	bne.n	80150f6 <_printf_common+0xb6>
 80150ee:	f04f 30ff 	mov.w	r0, #4294967295
 80150f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150f6:	3501      	adds	r5, #1
 80150f8:	e7c1      	b.n	801507e <_printf_common+0x3e>
 80150fa:	18e1      	adds	r1, r4, r3
 80150fc:	1c5a      	adds	r2, r3, #1
 80150fe:	2030      	movs	r0, #48	; 0x30
 8015100:	3302      	adds	r3, #2
 8015102:	4422      	add	r2, r4
 8015104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801510c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015110:	e7c2      	b.n	8015098 <_printf_common+0x58>
 8015112:	2301      	movs	r3, #1
 8015114:	4622      	mov	r2, r4
 8015116:	4649      	mov	r1, r9
 8015118:	4638      	mov	r0, r7
 801511a:	47c0      	blx	r8
 801511c:	3001      	adds	r0, #1
 801511e:	d0e6      	beq.n	80150ee <_printf_common+0xae>
 8015120:	3601      	adds	r6, #1
 8015122:	e7d9      	b.n	80150d8 <_printf_common+0x98>

08015124 <_printf_i>:
 8015124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015128:	7e0f      	ldrb	r7, [r1, #24]
 801512a:	4691      	mov	r9, r2
 801512c:	4680      	mov	r8, r0
 801512e:	460c      	mov	r4, r1
 8015130:	2f78      	cmp	r7, #120	; 0x78
 8015132:	469a      	mov	sl, r3
 8015134:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801513a:	d807      	bhi.n	801514c <_printf_i+0x28>
 801513c:	2f62      	cmp	r7, #98	; 0x62
 801513e:	d80a      	bhi.n	8015156 <_printf_i+0x32>
 8015140:	2f00      	cmp	r7, #0
 8015142:	f000 80d3 	beq.w	80152ec <_printf_i+0x1c8>
 8015146:	2f58      	cmp	r7, #88	; 0x58
 8015148:	f000 80bf 	beq.w	80152ca <_printf_i+0x1a6>
 801514c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015154:	e03a      	b.n	80151cc <_printf_i+0xa8>
 8015156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801515a:	2b15      	cmp	r3, #21
 801515c:	d8f6      	bhi.n	801514c <_printf_i+0x28>
 801515e:	a101      	add	r1, pc, #4	; (adr r1, 8015164 <_printf_i+0x40>)
 8015160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015164:	080151bd 	.word	0x080151bd
 8015168:	080151d1 	.word	0x080151d1
 801516c:	0801514d 	.word	0x0801514d
 8015170:	0801514d 	.word	0x0801514d
 8015174:	0801514d 	.word	0x0801514d
 8015178:	0801514d 	.word	0x0801514d
 801517c:	080151d1 	.word	0x080151d1
 8015180:	0801514d 	.word	0x0801514d
 8015184:	0801514d 	.word	0x0801514d
 8015188:	0801514d 	.word	0x0801514d
 801518c:	0801514d 	.word	0x0801514d
 8015190:	080152d3 	.word	0x080152d3
 8015194:	080151fd 	.word	0x080151fd
 8015198:	0801528f 	.word	0x0801528f
 801519c:	0801514d 	.word	0x0801514d
 80151a0:	0801514d 	.word	0x0801514d
 80151a4:	080152f5 	.word	0x080152f5
 80151a8:	0801514d 	.word	0x0801514d
 80151ac:	080151fd 	.word	0x080151fd
 80151b0:	0801514d 	.word	0x0801514d
 80151b4:	0801514d 	.word	0x0801514d
 80151b8:	08015297 	.word	0x08015297
 80151bc:	682b      	ldr	r3, [r5, #0]
 80151be:	1d1a      	adds	r2, r3, #4
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	602a      	str	r2, [r5, #0]
 80151c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80151c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80151cc:	2301      	movs	r3, #1
 80151ce:	e09e      	b.n	801530e <_printf_i+0x1ea>
 80151d0:	6820      	ldr	r0, [r4, #0]
 80151d2:	682b      	ldr	r3, [r5, #0]
 80151d4:	0607      	lsls	r7, r0, #24
 80151d6:	f103 0104 	add.w	r1, r3, #4
 80151da:	6029      	str	r1, [r5, #0]
 80151dc:	d501      	bpl.n	80151e2 <_printf_i+0xbe>
 80151de:	681e      	ldr	r6, [r3, #0]
 80151e0:	e003      	b.n	80151ea <_printf_i+0xc6>
 80151e2:	0646      	lsls	r6, r0, #25
 80151e4:	d5fb      	bpl.n	80151de <_printf_i+0xba>
 80151e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80151ea:	2e00      	cmp	r6, #0
 80151ec:	da03      	bge.n	80151f6 <_printf_i+0xd2>
 80151ee:	232d      	movs	r3, #45	; 0x2d
 80151f0:	4276      	negs	r6, r6
 80151f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151f6:	4859      	ldr	r0, [pc, #356]	; (801535c <_printf_i+0x238>)
 80151f8:	230a      	movs	r3, #10
 80151fa:	e012      	b.n	8015222 <_printf_i+0xfe>
 80151fc:	682b      	ldr	r3, [r5, #0]
 80151fe:	6820      	ldr	r0, [r4, #0]
 8015200:	1d19      	adds	r1, r3, #4
 8015202:	6029      	str	r1, [r5, #0]
 8015204:	0605      	lsls	r5, r0, #24
 8015206:	d501      	bpl.n	801520c <_printf_i+0xe8>
 8015208:	681e      	ldr	r6, [r3, #0]
 801520a:	e002      	b.n	8015212 <_printf_i+0xee>
 801520c:	0641      	lsls	r1, r0, #25
 801520e:	d5fb      	bpl.n	8015208 <_printf_i+0xe4>
 8015210:	881e      	ldrh	r6, [r3, #0]
 8015212:	2f6f      	cmp	r7, #111	; 0x6f
 8015214:	4851      	ldr	r0, [pc, #324]	; (801535c <_printf_i+0x238>)
 8015216:	bf0c      	ite	eq
 8015218:	2308      	moveq	r3, #8
 801521a:	230a      	movne	r3, #10
 801521c:	2100      	movs	r1, #0
 801521e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015222:	6865      	ldr	r5, [r4, #4]
 8015224:	2d00      	cmp	r5, #0
 8015226:	60a5      	str	r5, [r4, #8]
 8015228:	bfa2      	ittt	ge
 801522a:	6821      	ldrge	r1, [r4, #0]
 801522c:	f021 0104 	bicge.w	r1, r1, #4
 8015230:	6021      	strge	r1, [r4, #0]
 8015232:	b90e      	cbnz	r6, 8015238 <_printf_i+0x114>
 8015234:	2d00      	cmp	r5, #0
 8015236:	d04a      	beq.n	80152ce <_printf_i+0x1aa>
 8015238:	4615      	mov	r5, r2
 801523a:	fbb6 f1f3 	udiv	r1, r6, r3
 801523e:	fb03 6711 	mls	r7, r3, r1, r6
 8015242:	5dc7      	ldrb	r7, [r0, r7]
 8015244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015248:	4637      	mov	r7, r6
 801524a:	460e      	mov	r6, r1
 801524c:	42bb      	cmp	r3, r7
 801524e:	d9f4      	bls.n	801523a <_printf_i+0x116>
 8015250:	2b08      	cmp	r3, #8
 8015252:	d10b      	bne.n	801526c <_printf_i+0x148>
 8015254:	6823      	ldr	r3, [r4, #0]
 8015256:	07de      	lsls	r6, r3, #31
 8015258:	d508      	bpl.n	801526c <_printf_i+0x148>
 801525a:	6923      	ldr	r3, [r4, #16]
 801525c:	6861      	ldr	r1, [r4, #4]
 801525e:	4299      	cmp	r1, r3
 8015260:	bfde      	ittt	le
 8015262:	2330      	movle	r3, #48	; 0x30
 8015264:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015268:	f105 35ff 	addle.w	r5, r5, #4294967295
 801526c:	1b52      	subs	r2, r2, r5
 801526e:	6122      	str	r2, [r4, #16]
 8015270:	464b      	mov	r3, r9
 8015272:	aa03      	add	r2, sp, #12
 8015274:	4621      	mov	r1, r4
 8015276:	4640      	mov	r0, r8
 8015278:	f8cd a000 	str.w	sl, [sp]
 801527c:	f7ff fee0 	bl	8015040 <_printf_common>
 8015280:	3001      	adds	r0, #1
 8015282:	d149      	bne.n	8015318 <_printf_i+0x1f4>
 8015284:	f04f 30ff 	mov.w	r0, #4294967295
 8015288:	b004      	add	sp, #16
 801528a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801528e:	6823      	ldr	r3, [r4, #0]
 8015290:	f043 0320 	orr.w	r3, r3, #32
 8015294:	6023      	str	r3, [r4, #0]
 8015296:	2778      	movs	r7, #120	; 0x78
 8015298:	4831      	ldr	r0, [pc, #196]	; (8015360 <_printf_i+0x23c>)
 801529a:	6823      	ldr	r3, [r4, #0]
 801529c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80152a0:	061f      	lsls	r7, r3, #24
 80152a2:	6829      	ldr	r1, [r5, #0]
 80152a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80152a8:	d402      	bmi.n	80152b0 <_printf_i+0x18c>
 80152aa:	065f      	lsls	r7, r3, #25
 80152ac:	bf48      	it	mi
 80152ae:	b2b6      	uxthmi	r6, r6
 80152b0:	07df      	lsls	r7, r3, #31
 80152b2:	6029      	str	r1, [r5, #0]
 80152b4:	bf44      	itt	mi
 80152b6:	f043 0320 	orrmi.w	r3, r3, #32
 80152ba:	6023      	strmi	r3, [r4, #0]
 80152bc:	b91e      	cbnz	r6, 80152c6 <_printf_i+0x1a2>
 80152be:	6823      	ldr	r3, [r4, #0]
 80152c0:	f023 0320 	bic.w	r3, r3, #32
 80152c4:	6023      	str	r3, [r4, #0]
 80152c6:	2310      	movs	r3, #16
 80152c8:	e7a8      	b.n	801521c <_printf_i+0xf8>
 80152ca:	4824      	ldr	r0, [pc, #144]	; (801535c <_printf_i+0x238>)
 80152cc:	e7e5      	b.n	801529a <_printf_i+0x176>
 80152ce:	4615      	mov	r5, r2
 80152d0:	e7be      	b.n	8015250 <_printf_i+0x12c>
 80152d2:	682b      	ldr	r3, [r5, #0]
 80152d4:	6826      	ldr	r6, [r4, #0]
 80152d6:	1d18      	adds	r0, r3, #4
 80152d8:	6961      	ldr	r1, [r4, #20]
 80152da:	6028      	str	r0, [r5, #0]
 80152dc:	0635      	lsls	r5, r6, #24
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	d501      	bpl.n	80152e6 <_printf_i+0x1c2>
 80152e2:	6019      	str	r1, [r3, #0]
 80152e4:	e002      	b.n	80152ec <_printf_i+0x1c8>
 80152e6:	0670      	lsls	r0, r6, #25
 80152e8:	d5fb      	bpl.n	80152e2 <_printf_i+0x1be>
 80152ea:	8019      	strh	r1, [r3, #0]
 80152ec:	2300      	movs	r3, #0
 80152ee:	4615      	mov	r5, r2
 80152f0:	6123      	str	r3, [r4, #16]
 80152f2:	e7bd      	b.n	8015270 <_printf_i+0x14c>
 80152f4:	682b      	ldr	r3, [r5, #0]
 80152f6:	2100      	movs	r1, #0
 80152f8:	1d1a      	adds	r2, r3, #4
 80152fa:	602a      	str	r2, [r5, #0]
 80152fc:	681d      	ldr	r5, [r3, #0]
 80152fe:	6862      	ldr	r2, [r4, #4]
 8015300:	4628      	mov	r0, r5
 8015302:	f000 f9c6 	bl	8015692 <memchr>
 8015306:	b108      	cbz	r0, 801530c <_printf_i+0x1e8>
 8015308:	1b40      	subs	r0, r0, r5
 801530a:	6060      	str	r0, [r4, #4]
 801530c:	6863      	ldr	r3, [r4, #4]
 801530e:	6123      	str	r3, [r4, #16]
 8015310:	2300      	movs	r3, #0
 8015312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015316:	e7ab      	b.n	8015270 <_printf_i+0x14c>
 8015318:	6923      	ldr	r3, [r4, #16]
 801531a:	462a      	mov	r2, r5
 801531c:	4649      	mov	r1, r9
 801531e:	4640      	mov	r0, r8
 8015320:	47d0      	blx	sl
 8015322:	3001      	adds	r0, #1
 8015324:	d0ae      	beq.n	8015284 <_printf_i+0x160>
 8015326:	6823      	ldr	r3, [r4, #0]
 8015328:	079b      	lsls	r3, r3, #30
 801532a:	d413      	bmi.n	8015354 <_printf_i+0x230>
 801532c:	68e0      	ldr	r0, [r4, #12]
 801532e:	9b03      	ldr	r3, [sp, #12]
 8015330:	4298      	cmp	r0, r3
 8015332:	bfb8      	it	lt
 8015334:	4618      	movlt	r0, r3
 8015336:	e7a7      	b.n	8015288 <_printf_i+0x164>
 8015338:	2301      	movs	r3, #1
 801533a:	4632      	mov	r2, r6
 801533c:	4649      	mov	r1, r9
 801533e:	4640      	mov	r0, r8
 8015340:	47d0      	blx	sl
 8015342:	3001      	adds	r0, #1
 8015344:	d09e      	beq.n	8015284 <_printf_i+0x160>
 8015346:	3501      	adds	r5, #1
 8015348:	68e3      	ldr	r3, [r4, #12]
 801534a:	9903      	ldr	r1, [sp, #12]
 801534c:	1a5b      	subs	r3, r3, r1
 801534e:	42ab      	cmp	r3, r5
 8015350:	dcf2      	bgt.n	8015338 <_printf_i+0x214>
 8015352:	e7eb      	b.n	801532c <_printf_i+0x208>
 8015354:	2500      	movs	r5, #0
 8015356:	f104 0619 	add.w	r6, r4, #25
 801535a:	e7f5      	b.n	8015348 <_printf_i+0x224>
 801535c:	0801786a 	.word	0x0801786a
 8015360:	0801787b 	.word	0x0801787b

08015364 <std>:
 8015364:	2300      	movs	r3, #0
 8015366:	b510      	push	{r4, lr}
 8015368:	4604      	mov	r4, r0
 801536a:	6083      	str	r3, [r0, #8]
 801536c:	8181      	strh	r1, [r0, #12]
 801536e:	4619      	mov	r1, r3
 8015370:	6643      	str	r3, [r0, #100]	; 0x64
 8015372:	81c2      	strh	r2, [r0, #14]
 8015374:	2208      	movs	r2, #8
 8015376:	6183      	str	r3, [r0, #24]
 8015378:	e9c0 3300 	strd	r3, r3, [r0]
 801537c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015380:	305c      	adds	r0, #92	; 0x5c
 8015382:	f000 f906 	bl	8015592 <memset>
 8015386:	4b0d      	ldr	r3, [pc, #52]	; (80153bc <std+0x58>)
 8015388:	6224      	str	r4, [r4, #32]
 801538a:	6263      	str	r3, [r4, #36]	; 0x24
 801538c:	4b0c      	ldr	r3, [pc, #48]	; (80153c0 <std+0x5c>)
 801538e:	62a3      	str	r3, [r4, #40]	; 0x28
 8015390:	4b0c      	ldr	r3, [pc, #48]	; (80153c4 <std+0x60>)
 8015392:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015394:	4b0c      	ldr	r3, [pc, #48]	; (80153c8 <std+0x64>)
 8015396:	6323      	str	r3, [r4, #48]	; 0x30
 8015398:	4b0c      	ldr	r3, [pc, #48]	; (80153cc <std+0x68>)
 801539a:	429c      	cmp	r4, r3
 801539c:	d006      	beq.n	80153ac <std+0x48>
 801539e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80153a2:	4294      	cmp	r4, r2
 80153a4:	d002      	beq.n	80153ac <std+0x48>
 80153a6:	33d0      	adds	r3, #208	; 0xd0
 80153a8:	429c      	cmp	r4, r3
 80153aa:	d105      	bne.n	80153b8 <std+0x54>
 80153ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80153b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153b4:	f000 b96a 	b.w	801568c <__retarget_lock_init_recursive>
 80153b8:	bd10      	pop	{r4, pc}
 80153ba:	bf00      	nop
 80153bc:	0801550d 	.word	0x0801550d
 80153c0:	0801552f 	.word	0x0801552f
 80153c4:	08015567 	.word	0x08015567
 80153c8:	0801558b 	.word	0x0801558b
 80153cc:	200279d0 	.word	0x200279d0

080153d0 <stdio_exit_handler>:
 80153d0:	4a02      	ldr	r2, [pc, #8]	; (80153dc <stdio_exit_handler+0xc>)
 80153d2:	4903      	ldr	r1, [pc, #12]	; (80153e0 <stdio_exit_handler+0x10>)
 80153d4:	4803      	ldr	r0, [pc, #12]	; (80153e4 <stdio_exit_handler+0x14>)
 80153d6:	f000 b869 	b.w	80154ac <_fwalk_sglue>
 80153da:	bf00      	nop
 80153dc:	20000080 	.word	0x20000080
 80153e0:	08017061 	.word	0x08017061
 80153e4:	2000008c 	.word	0x2000008c

080153e8 <cleanup_stdio>:
 80153e8:	6841      	ldr	r1, [r0, #4]
 80153ea:	4b0c      	ldr	r3, [pc, #48]	; (801541c <cleanup_stdio+0x34>)
 80153ec:	4299      	cmp	r1, r3
 80153ee:	b510      	push	{r4, lr}
 80153f0:	4604      	mov	r4, r0
 80153f2:	d001      	beq.n	80153f8 <cleanup_stdio+0x10>
 80153f4:	f001 fe34 	bl	8017060 <_fflush_r>
 80153f8:	68a1      	ldr	r1, [r4, #8]
 80153fa:	4b09      	ldr	r3, [pc, #36]	; (8015420 <cleanup_stdio+0x38>)
 80153fc:	4299      	cmp	r1, r3
 80153fe:	d002      	beq.n	8015406 <cleanup_stdio+0x1e>
 8015400:	4620      	mov	r0, r4
 8015402:	f001 fe2d 	bl	8017060 <_fflush_r>
 8015406:	68e1      	ldr	r1, [r4, #12]
 8015408:	4b06      	ldr	r3, [pc, #24]	; (8015424 <cleanup_stdio+0x3c>)
 801540a:	4299      	cmp	r1, r3
 801540c:	d004      	beq.n	8015418 <cleanup_stdio+0x30>
 801540e:	4620      	mov	r0, r4
 8015410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015414:	f001 be24 	b.w	8017060 <_fflush_r>
 8015418:	bd10      	pop	{r4, pc}
 801541a:	bf00      	nop
 801541c:	200279d0 	.word	0x200279d0
 8015420:	20027a38 	.word	0x20027a38
 8015424:	20027aa0 	.word	0x20027aa0

08015428 <global_stdio_init.part.0>:
 8015428:	b510      	push	{r4, lr}
 801542a:	4b0b      	ldr	r3, [pc, #44]	; (8015458 <global_stdio_init.part.0+0x30>)
 801542c:	2104      	movs	r1, #4
 801542e:	4c0b      	ldr	r4, [pc, #44]	; (801545c <global_stdio_init.part.0+0x34>)
 8015430:	4a0b      	ldr	r2, [pc, #44]	; (8015460 <global_stdio_init.part.0+0x38>)
 8015432:	4620      	mov	r0, r4
 8015434:	601a      	str	r2, [r3, #0]
 8015436:	2200      	movs	r2, #0
 8015438:	f7ff ff94 	bl	8015364 <std>
 801543c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015440:	2201      	movs	r2, #1
 8015442:	2109      	movs	r1, #9
 8015444:	f7ff ff8e 	bl	8015364 <std>
 8015448:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801544c:	2202      	movs	r2, #2
 801544e:	2112      	movs	r1, #18
 8015450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015454:	f7ff bf86 	b.w	8015364 <std>
 8015458:	20027b08 	.word	0x20027b08
 801545c:	200279d0 	.word	0x200279d0
 8015460:	080153d1 	.word	0x080153d1

08015464 <__sfp_lock_acquire>:
 8015464:	4801      	ldr	r0, [pc, #4]	; (801546c <__sfp_lock_acquire+0x8>)
 8015466:	f000 b912 	b.w	801568e <__retarget_lock_acquire_recursive>
 801546a:	bf00      	nop
 801546c:	20027b11 	.word	0x20027b11

08015470 <__sfp_lock_release>:
 8015470:	4801      	ldr	r0, [pc, #4]	; (8015478 <__sfp_lock_release+0x8>)
 8015472:	f000 b90d 	b.w	8015690 <__retarget_lock_release_recursive>
 8015476:	bf00      	nop
 8015478:	20027b11 	.word	0x20027b11

0801547c <__sinit>:
 801547c:	b510      	push	{r4, lr}
 801547e:	4604      	mov	r4, r0
 8015480:	f7ff fff0 	bl	8015464 <__sfp_lock_acquire>
 8015484:	6a23      	ldr	r3, [r4, #32]
 8015486:	b11b      	cbz	r3, 8015490 <__sinit+0x14>
 8015488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801548c:	f7ff bff0 	b.w	8015470 <__sfp_lock_release>
 8015490:	4b04      	ldr	r3, [pc, #16]	; (80154a4 <__sinit+0x28>)
 8015492:	6223      	str	r3, [r4, #32]
 8015494:	4b04      	ldr	r3, [pc, #16]	; (80154a8 <__sinit+0x2c>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d1f5      	bne.n	8015488 <__sinit+0xc>
 801549c:	f7ff ffc4 	bl	8015428 <global_stdio_init.part.0>
 80154a0:	e7f2      	b.n	8015488 <__sinit+0xc>
 80154a2:	bf00      	nop
 80154a4:	080153e9 	.word	0x080153e9
 80154a8:	20027b08 	.word	0x20027b08

080154ac <_fwalk_sglue>:
 80154ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154b0:	4607      	mov	r7, r0
 80154b2:	4688      	mov	r8, r1
 80154b4:	4614      	mov	r4, r2
 80154b6:	2600      	movs	r6, #0
 80154b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80154bc:	f1b9 0901 	subs.w	r9, r9, #1
 80154c0:	d505      	bpl.n	80154ce <_fwalk_sglue+0x22>
 80154c2:	6824      	ldr	r4, [r4, #0]
 80154c4:	2c00      	cmp	r4, #0
 80154c6:	d1f7      	bne.n	80154b8 <_fwalk_sglue+0xc>
 80154c8:	4630      	mov	r0, r6
 80154ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154ce:	89ab      	ldrh	r3, [r5, #12]
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	d907      	bls.n	80154e4 <_fwalk_sglue+0x38>
 80154d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80154d8:	3301      	adds	r3, #1
 80154da:	d003      	beq.n	80154e4 <_fwalk_sglue+0x38>
 80154dc:	4629      	mov	r1, r5
 80154de:	4638      	mov	r0, r7
 80154e0:	47c0      	blx	r8
 80154e2:	4306      	orrs	r6, r0
 80154e4:	3568      	adds	r5, #104	; 0x68
 80154e6:	e7e9      	b.n	80154bc <_fwalk_sglue+0x10>

080154e8 <iprintf>:
 80154e8:	b40f      	push	{r0, r1, r2, r3}
 80154ea:	b507      	push	{r0, r1, r2, lr}
 80154ec:	4906      	ldr	r1, [pc, #24]	; (8015508 <iprintf+0x20>)
 80154ee:	ab04      	add	r3, sp, #16
 80154f0:	6808      	ldr	r0, [r1, #0]
 80154f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80154f6:	6881      	ldr	r1, [r0, #8]
 80154f8:	9301      	str	r3, [sp, #4]
 80154fa:	f001 fc13 	bl	8016d24 <_vfiprintf_r>
 80154fe:	b003      	add	sp, #12
 8015500:	f85d eb04 	ldr.w	lr, [sp], #4
 8015504:	b004      	add	sp, #16
 8015506:	4770      	bx	lr
 8015508:	200000d8 	.word	0x200000d8

0801550c <__sread>:
 801550c:	b510      	push	{r4, lr}
 801550e:	460c      	mov	r4, r1
 8015510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015514:	f000 f86c 	bl	80155f0 <_read_r>
 8015518:	2800      	cmp	r0, #0
 801551a:	bfab      	itete	ge
 801551c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801551e:	89a3      	ldrhlt	r3, [r4, #12]
 8015520:	181b      	addge	r3, r3, r0
 8015522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015526:	bfac      	ite	ge
 8015528:	6563      	strge	r3, [r4, #84]	; 0x54
 801552a:	81a3      	strhlt	r3, [r4, #12]
 801552c:	bd10      	pop	{r4, pc}

0801552e <__swrite>:
 801552e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015532:	461f      	mov	r7, r3
 8015534:	898b      	ldrh	r3, [r1, #12]
 8015536:	4605      	mov	r5, r0
 8015538:	460c      	mov	r4, r1
 801553a:	05db      	lsls	r3, r3, #23
 801553c:	4616      	mov	r6, r2
 801553e:	d505      	bpl.n	801554c <__swrite+0x1e>
 8015540:	2302      	movs	r3, #2
 8015542:	2200      	movs	r2, #0
 8015544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015548:	f000 f840 	bl	80155cc <_lseek_r>
 801554c:	89a3      	ldrh	r3, [r4, #12]
 801554e:	4632      	mov	r2, r6
 8015550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015554:	4628      	mov	r0, r5
 8015556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801555a:	81a3      	strh	r3, [r4, #12]
 801555c:	463b      	mov	r3, r7
 801555e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015562:	f000 b857 	b.w	8015614 <_write_r>

08015566 <__sseek>:
 8015566:	b510      	push	{r4, lr}
 8015568:	460c      	mov	r4, r1
 801556a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801556e:	f000 f82d 	bl	80155cc <_lseek_r>
 8015572:	1c43      	adds	r3, r0, #1
 8015574:	89a3      	ldrh	r3, [r4, #12]
 8015576:	bf15      	itete	ne
 8015578:	6560      	strne	r0, [r4, #84]	; 0x54
 801557a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801557e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015582:	81a3      	strheq	r3, [r4, #12]
 8015584:	bf18      	it	ne
 8015586:	81a3      	strhne	r3, [r4, #12]
 8015588:	bd10      	pop	{r4, pc}

0801558a <__sclose>:
 801558a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801558e:	f000 b80d 	b.w	80155ac <_close_r>

08015592 <memset>:
 8015592:	4402      	add	r2, r0
 8015594:	4603      	mov	r3, r0
 8015596:	4293      	cmp	r3, r2
 8015598:	d100      	bne.n	801559c <memset+0xa>
 801559a:	4770      	bx	lr
 801559c:	f803 1b01 	strb.w	r1, [r3], #1
 80155a0:	e7f9      	b.n	8015596 <memset+0x4>
	...

080155a4 <_localeconv_r>:
 80155a4:	4800      	ldr	r0, [pc, #0]	; (80155a8 <_localeconv_r+0x4>)
 80155a6:	4770      	bx	lr
 80155a8:	200001cc 	.word	0x200001cc

080155ac <_close_r>:
 80155ac:	b538      	push	{r3, r4, r5, lr}
 80155ae:	2300      	movs	r3, #0
 80155b0:	4d05      	ldr	r5, [pc, #20]	; (80155c8 <_close_r+0x1c>)
 80155b2:	4604      	mov	r4, r0
 80155b4:	4608      	mov	r0, r1
 80155b6:	602b      	str	r3, [r5, #0]
 80155b8:	f7f0 fc7d 	bl	8005eb6 <_close>
 80155bc:	1c43      	adds	r3, r0, #1
 80155be:	d102      	bne.n	80155c6 <_close_r+0x1a>
 80155c0:	682b      	ldr	r3, [r5, #0]
 80155c2:	b103      	cbz	r3, 80155c6 <_close_r+0x1a>
 80155c4:	6023      	str	r3, [r4, #0]
 80155c6:	bd38      	pop	{r3, r4, r5, pc}
 80155c8:	20027b0c 	.word	0x20027b0c

080155cc <_lseek_r>:
 80155cc:	b538      	push	{r3, r4, r5, lr}
 80155ce:	4604      	mov	r4, r0
 80155d0:	4d06      	ldr	r5, [pc, #24]	; (80155ec <_lseek_r+0x20>)
 80155d2:	4608      	mov	r0, r1
 80155d4:	4611      	mov	r1, r2
 80155d6:	2200      	movs	r2, #0
 80155d8:	602a      	str	r2, [r5, #0]
 80155da:	461a      	mov	r2, r3
 80155dc:	f7f0 fc92 	bl	8005f04 <_lseek>
 80155e0:	1c43      	adds	r3, r0, #1
 80155e2:	d102      	bne.n	80155ea <_lseek_r+0x1e>
 80155e4:	682b      	ldr	r3, [r5, #0]
 80155e6:	b103      	cbz	r3, 80155ea <_lseek_r+0x1e>
 80155e8:	6023      	str	r3, [r4, #0]
 80155ea:	bd38      	pop	{r3, r4, r5, pc}
 80155ec:	20027b0c 	.word	0x20027b0c

080155f0 <_read_r>:
 80155f0:	b538      	push	{r3, r4, r5, lr}
 80155f2:	4604      	mov	r4, r0
 80155f4:	4d06      	ldr	r5, [pc, #24]	; (8015610 <_read_r+0x20>)
 80155f6:	4608      	mov	r0, r1
 80155f8:	4611      	mov	r1, r2
 80155fa:	2200      	movs	r2, #0
 80155fc:	602a      	str	r2, [r5, #0]
 80155fe:	461a      	mov	r2, r3
 8015600:	f7f0 fc20 	bl	8005e44 <_read>
 8015604:	1c43      	adds	r3, r0, #1
 8015606:	d102      	bne.n	801560e <_read_r+0x1e>
 8015608:	682b      	ldr	r3, [r5, #0]
 801560a:	b103      	cbz	r3, 801560e <_read_r+0x1e>
 801560c:	6023      	str	r3, [r4, #0]
 801560e:	bd38      	pop	{r3, r4, r5, pc}
 8015610:	20027b0c 	.word	0x20027b0c

08015614 <_write_r>:
 8015614:	b538      	push	{r3, r4, r5, lr}
 8015616:	4604      	mov	r4, r0
 8015618:	4d06      	ldr	r5, [pc, #24]	; (8015634 <_write_r+0x20>)
 801561a:	4608      	mov	r0, r1
 801561c:	4611      	mov	r1, r2
 801561e:	2200      	movs	r2, #0
 8015620:	602a      	str	r2, [r5, #0]
 8015622:	461a      	mov	r2, r3
 8015624:	f7f0 fc2b 	bl	8005e7e <_write>
 8015628:	1c43      	adds	r3, r0, #1
 801562a:	d102      	bne.n	8015632 <_write_r+0x1e>
 801562c:	682b      	ldr	r3, [r5, #0]
 801562e:	b103      	cbz	r3, 8015632 <_write_r+0x1e>
 8015630:	6023      	str	r3, [r4, #0]
 8015632:	bd38      	pop	{r3, r4, r5, pc}
 8015634:	20027b0c 	.word	0x20027b0c

08015638 <__errno>:
 8015638:	4b01      	ldr	r3, [pc, #4]	; (8015640 <__errno+0x8>)
 801563a:	6818      	ldr	r0, [r3, #0]
 801563c:	4770      	bx	lr
 801563e:	bf00      	nop
 8015640:	200000d8 	.word	0x200000d8

08015644 <__libc_init_array>:
 8015644:	b570      	push	{r4, r5, r6, lr}
 8015646:	4d0d      	ldr	r5, [pc, #52]	; (801567c <__libc_init_array+0x38>)
 8015648:	2600      	movs	r6, #0
 801564a:	4c0d      	ldr	r4, [pc, #52]	; (8015680 <__libc_init_array+0x3c>)
 801564c:	1b64      	subs	r4, r4, r5
 801564e:	10a4      	asrs	r4, r4, #2
 8015650:	42a6      	cmp	r6, r4
 8015652:	d109      	bne.n	8015668 <__libc_init_array+0x24>
 8015654:	4d0b      	ldr	r5, [pc, #44]	; (8015684 <__libc_init_array+0x40>)
 8015656:	2600      	movs	r6, #0
 8015658:	4c0b      	ldr	r4, [pc, #44]	; (8015688 <__libc_init_array+0x44>)
 801565a:	f001 ff05 	bl	8017468 <_init>
 801565e:	1b64      	subs	r4, r4, r5
 8015660:	10a4      	asrs	r4, r4, #2
 8015662:	42a6      	cmp	r6, r4
 8015664:	d105      	bne.n	8015672 <__libc_init_array+0x2e>
 8015666:	bd70      	pop	{r4, r5, r6, pc}
 8015668:	f855 3b04 	ldr.w	r3, [r5], #4
 801566c:	3601      	adds	r6, #1
 801566e:	4798      	blx	r3
 8015670:	e7ee      	b.n	8015650 <__libc_init_array+0xc>
 8015672:	f855 3b04 	ldr.w	r3, [r5], #4
 8015676:	3601      	adds	r6, #1
 8015678:	4798      	blx	r3
 801567a:	e7f2      	b.n	8015662 <__libc_init_array+0x1e>
 801567c:	08017bd4 	.word	0x08017bd4
 8015680:	08017bd4 	.word	0x08017bd4
 8015684:	08017bd4 	.word	0x08017bd4
 8015688:	08017bdc 	.word	0x08017bdc

0801568c <__retarget_lock_init_recursive>:
 801568c:	4770      	bx	lr

0801568e <__retarget_lock_acquire_recursive>:
 801568e:	4770      	bx	lr

08015690 <__retarget_lock_release_recursive>:
 8015690:	4770      	bx	lr

08015692 <memchr>:
 8015692:	b2c9      	uxtb	r1, r1
 8015694:	4402      	add	r2, r0
 8015696:	b510      	push	{r4, lr}
 8015698:	4290      	cmp	r0, r2
 801569a:	4603      	mov	r3, r0
 801569c:	d101      	bne.n	80156a2 <memchr+0x10>
 801569e:	2300      	movs	r3, #0
 80156a0:	e003      	b.n	80156aa <memchr+0x18>
 80156a2:	781c      	ldrb	r4, [r3, #0]
 80156a4:	3001      	adds	r0, #1
 80156a6:	428c      	cmp	r4, r1
 80156a8:	d1f6      	bne.n	8015698 <memchr+0x6>
 80156aa:	4618      	mov	r0, r3
 80156ac:	bd10      	pop	{r4, pc}

080156ae <memcpy>:
 80156ae:	440a      	add	r2, r1
 80156b0:	1e43      	subs	r3, r0, #1
 80156b2:	4291      	cmp	r1, r2
 80156b4:	d100      	bne.n	80156b8 <memcpy+0xa>
 80156b6:	4770      	bx	lr
 80156b8:	b510      	push	{r4, lr}
 80156ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156be:	4291      	cmp	r1, r2
 80156c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156c4:	d1f9      	bne.n	80156ba <memcpy+0xc>
 80156c6:	bd10      	pop	{r4, pc}

080156c8 <quorem>:
 80156c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156cc:	6903      	ldr	r3, [r0, #16]
 80156ce:	4607      	mov	r7, r0
 80156d0:	690c      	ldr	r4, [r1, #16]
 80156d2:	42a3      	cmp	r3, r4
 80156d4:	f2c0 8086 	blt.w	80157e4 <quorem+0x11c>
 80156d8:	3c01      	subs	r4, #1
 80156da:	f100 0514 	add.w	r5, r0, #20
 80156de:	f101 0814 	add.w	r8, r1, #20
 80156e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80156e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80156ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80156ee:	9301      	str	r3, [sp, #4]
 80156f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80156f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80156f8:	3301      	adds	r3, #1
 80156fa:	429a      	cmp	r2, r3
 80156fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8015700:	d335      	bcc.n	801576e <quorem+0xa6>
 8015702:	f04f 0e00 	mov.w	lr, #0
 8015706:	4640      	mov	r0, r8
 8015708:	46ac      	mov	ip, r5
 801570a:	46f2      	mov	sl, lr
 801570c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015710:	b293      	uxth	r3, r2
 8015712:	4581      	cmp	r9, r0
 8015714:	fb06 e303 	mla	r3, r6, r3, lr
 8015718:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801571c:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8015720:	b29b      	uxth	r3, r3
 8015722:	fb06 220e 	mla	r2, r6, lr, r2
 8015726:	ebaa 0303 	sub.w	r3, sl, r3
 801572a:	f8dc a000 	ldr.w	sl, [ip]
 801572e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015732:	fa1f fa8a 	uxth.w	sl, sl
 8015736:	b292      	uxth	r2, r2
 8015738:	4453      	add	r3, sl
 801573a:	9300      	str	r3, [sp, #0]
 801573c:	f8dc 3000 	ldr.w	r3, [ip]
 8015740:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 8015744:	9b00      	ldr	r3, [sp, #0]
 8015746:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801574a:	f8bd 3000 	ldrh.w	r3, [sp]
 801574e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015752:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015756:	f84c 3b04 	str.w	r3, [ip], #4
 801575a:	d2d7      	bcs.n	801570c <quorem+0x44>
 801575c:	f855 300b 	ldr.w	r3, [r5, fp]
 8015760:	b92b      	cbnz	r3, 801576e <quorem+0xa6>
 8015762:	9b01      	ldr	r3, [sp, #4]
 8015764:	3b04      	subs	r3, #4
 8015766:	429d      	cmp	r5, r3
 8015768:	461a      	mov	r2, r3
 801576a:	d32f      	bcc.n	80157cc <quorem+0x104>
 801576c:	613c      	str	r4, [r7, #16]
 801576e:	4638      	mov	r0, r7
 8015770:	f001 f9a8 	bl	8016ac4 <__mcmp>
 8015774:	2800      	cmp	r0, #0
 8015776:	db25      	blt.n	80157c4 <quorem+0xfc>
 8015778:	3601      	adds	r6, #1
 801577a:	4629      	mov	r1, r5
 801577c:	2000      	movs	r0, #0
 801577e:	f858 2b04 	ldr.w	r2, [r8], #4
 8015782:	f8d1 c000 	ldr.w	ip, [r1]
 8015786:	b293      	uxth	r3, r2
 8015788:	45c1      	cmp	r9, r8
 801578a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801578e:	eba0 0303 	sub.w	r3, r0, r3
 8015792:	fa1f f08c 	uxth.w	r0, ip
 8015796:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801579a:	4403      	add	r3, r0
 801579c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80157a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80157aa:	f841 3b04 	str.w	r3, [r1], #4
 80157ae:	d2e6      	bcs.n	801577e <quorem+0xb6>
 80157b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80157b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80157b8:	b922      	cbnz	r2, 80157c4 <quorem+0xfc>
 80157ba:	3b04      	subs	r3, #4
 80157bc:	429d      	cmp	r5, r3
 80157be:	461a      	mov	r2, r3
 80157c0:	d30a      	bcc.n	80157d8 <quorem+0x110>
 80157c2:	613c      	str	r4, [r7, #16]
 80157c4:	4630      	mov	r0, r6
 80157c6:	b003      	add	sp, #12
 80157c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157cc:	6812      	ldr	r2, [r2, #0]
 80157ce:	3b04      	subs	r3, #4
 80157d0:	2a00      	cmp	r2, #0
 80157d2:	d1cb      	bne.n	801576c <quorem+0xa4>
 80157d4:	3c01      	subs	r4, #1
 80157d6:	e7c6      	b.n	8015766 <quorem+0x9e>
 80157d8:	6812      	ldr	r2, [r2, #0]
 80157da:	3b04      	subs	r3, #4
 80157dc:	2a00      	cmp	r2, #0
 80157de:	d1f0      	bne.n	80157c2 <quorem+0xfa>
 80157e0:	3c01      	subs	r4, #1
 80157e2:	e7eb      	b.n	80157bc <quorem+0xf4>
 80157e4:	2000      	movs	r0, #0
 80157e6:	e7ee      	b.n	80157c6 <quorem+0xfe>

080157e8 <_dtoa_r>:
 80157e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ec:	69c5      	ldr	r5, [r0, #28]
 80157ee:	4604      	mov	r4, r0
 80157f0:	ed2d 8b04 	vpush	{d8-d9}
 80157f4:	b093      	sub	sp, #76	; 0x4c
 80157f6:	ec57 6b10 	vmov	r6, r7, d0
 80157fa:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80157fe:	9107      	str	r1, [sp, #28]
 8015800:	920a      	str	r2, [sp, #40]	; 0x28
 8015802:	930d      	str	r3, [sp, #52]	; 0x34
 8015804:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015808:	b975      	cbnz	r5, 8015828 <_dtoa_r+0x40>
 801580a:	2010      	movs	r0, #16
 801580c:	f000 fe28 	bl	8016460 <malloc>
 8015810:	4602      	mov	r2, r0
 8015812:	61e0      	str	r0, [r4, #28]
 8015814:	b920      	cbnz	r0, 8015820 <_dtoa_r+0x38>
 8015816:	4bae      	ldr	r3, [pc, #696]	; (8015ad0 <_dtoa_r+0x2e8>)
 8015818:	21ef      	movs	r1, #239	; 0xef
 801581a:	48ae      	ldr	r0, [pc, #696]	; (8015ad4 <_dtoa_r+0x2ec>)
 801581c:	f001 fcee 	bl	80171fc <__assert_func>
 8015820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015824:	6005      	str	r5, [r0, #0]
 8015826:	60c5      	str	r5, [r0, #12]
 8015828:	69e3      	ldr	r3, [r4, #28]
 801582a:	6819      	ldr	r1, [r3, #0]
 801582c:	b151      	cbz	r1, 8015844 <_dtoa_r+0x5c>
 801582e:	685a      	ldr	r2, [r3, #4]
 8015830:	2301      	movs	r3, #1
 8015832:	4620      	mov	r0, r4
 8015834:	4093      	lsls	r3, r2
 8015836:	604a      	str	r2, [r1, #4]
 8015838:	608b      	str	r3, [r1, #8]
 801583a:	f000 ff05 	bl	8016648 <_Bfree>
 801583e:	69e3      	ldr	r3, [r4, #28]
 8015840:	2200      	movs	r2, #0
 8015842:	601a      	str	r2, [r3, #0]
 8015844:	1e3b      	subs	r3, r7, #0
 8015846:	bfb7      	itett	lt
 8015848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801584c:	2300      	movge	r3, #0
 801584e:	2201      	movlt	r2, #1
 8015850:	9303      	strlt	r3, [sp, #12]
 8015852:	bfac      	ite	ge
 8015854:	f8c8 3000 	strge.w	r3, [r8]
 8015858:	f8c8 2000 	strlt.w	r2, [r8]
 801585c:	4b9e      	ldr	r3, [pc, #632]	; (8015ad8 <_dtoa_r+0x2f0>)
 801585e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015862:	ea33 0308 	bics.w	r3, r3, r8
 8015866:	d11b      	bne.n	80158a0 <_dtoa_r+0xb8>
 8015868:	f242 730f 	movw	r3, #9999	; 0x270f
 801586c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801586e:	6013      	str	r3, [r2, #0]
 8015870:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8015874:	4333      	orrs	r3, r6
 8015876:	f000 8592 	beq.w	801639e <_dtoa_r+0xbb6>
 801587a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801587c:	b963      	cbnz	r3, 8015898 <_dtoa_r+0xb0>
 801587e:	4b97      	ldr	r3, [pc, #604]	; (8015adc <_dtoa_r+0x2f4>)
 8015880:	e027      	b.n	80158d2 <_dtoa_r+0xea>
 8015882:	4b97      	ldr	r3, [pc, #604]	; (8015ae0 <_dtoa_r+0x2f8>)
 8015884:	9300      	str	r3, [sp, #0]
 8015886:	3308      	adds	r3, #8
 8015888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801588a:	6013      	str	r3, [r2, #0]
 801588c:	9800      	ldr	r0, [sp, #0]
 801588e:	b013      	add	sp, #76	; 0x4c
 8015890:	ecbd 8b04 	vpop	{d8-d9}
 8015894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015898:	4b90      	ldr	r3, [pc, #576]	; (8015adc <_dtoa_r+0x2f4>)
 801589a:	9300      	str	r3, [sp, #0]
 801589c:	3303      	adds	r3, #3
 801589e:	e7f3      	b.n	8015888 <_dtoa_r+0xa0>
 80158a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80158a4:	2200      	movs	r2, #0
 80158a6:	2300      	movs	r3, #0
 80158a8:	ec51 0b17 	vmov	r0, r1, d7
 80158ac:	eeb0 8a47 	vmov.f32	s16, s14
 80158b0:	eef0 8a67 	vmov.f32	s17, s15
 80158b4:	f7eb f918 	bl	8000ae8 <__aeabi_dcmpeq>
 80158b8:	4681      	mov	r9, r0
 80158ba:	b160      	cbz	r0, 80158d6 <_dtoa_r+0xee>
 80158bc:	2301      	movs	r3, #1
 80158be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80158c0:	6013      	str	r3, [r2, #0]
 80158c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	f000 8567 	beq.w	8016398 <_dtoa_r+0xbb0>
 80158ca:	4b86      	ldr	r3, [pc, #536]	; (8015ae4 <_dtoa_r+0x2fc>)
 80158cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80158ce:	6013      	str	r3, [r2, #0]
 80158d0:	3b01      	subs	r3, #1
 80158d2:	9300      	str	r3, [sp, #0]
 80158d4:	e7da      	b.n	801588c <_dtoa_r+0xa4>
 80158d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80158da:	eeb0 0a48 	vmov.f32	s0, s16
 80158de:	eef0 0a68 	vmov.f32	s1, s17
 80158e2:	aa10      	add	r2, sp, #64	; 0x40
 80158e4:	a911      	add	r1, sp, #68	; 0x44
 80158e6:	4620      	mov	r0, r4
 80158e8:	f001 f998 	bl	8016c1c <__d2b>
 80158ec:	4682      	mov	sl, r0
 80158ee:	2d00      	cmp	r5, #0
 80158f0:	d07d      	beq.n	80159ee <_dtoa_r+0x206>
 80158f2:	ee18 3a90 	vmov	r3, s17
 80158f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80158fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80158fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015902:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015906:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801590a:	ec51 0b18 	vmov	r0, r1, d8
 801590e:	4619      	mov	r1, r3
 8015910:	2200      	movs	r2, #0
 8015912:	4b75      	ldr	r3, [pc, #468]	; (8015ae8 <_dtoa_r+0x300>)
 8015914:	f7ea fcc8 	bl	80002a8 <__aeabi_dsub>
 8015918:	a367      	add	r3, pc, #412	; (adr r3, 8015ab8 <_dtoa_r+0x2d0>)
 801591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801591e:	f7ea fe7b 	bl	8000618 <__aeabi_dmul>
 8015922:	a367      	add	r3, pc, #412	; (adr r3, 8015ac0 <_dtoa_r+0x2d8>)
 8015924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015928:	f7ea fcc0 	bl	80002ac <__adddf3>
 801592c:	4606      	mov	r6, r0
 801592e:	460f      	mov	r7, r1
 8015930:	4628      	mov	r0, r5
 8015932:	f7ea fe07 	bl	8000544 <__aeabi_i2d>
 8015936:	a364      	add	r3, pc, #400	; (adr r3, 8015ac8 <_dtoa_r+0x2e0>)
 8015938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801593c:	f7ea fe6c 	bl	8000618 <__aeabi_dmul>
 8015940:	4602      	mov	r2, r0
 8015942:	460b      	mov	r3, r1
 8015944:	4630      	mov	r0, r6
 8015946:	4639      	mov	r1, r7
 8015948:	f7ea fcb0 	bl	80002ac <__adddf3>
 801594c:	4606      	mov	r6, r0
 801594e:	460f      	mov	r7, r1
 8015950:	f7eb f912 	bl	8000b78 <__aeabi_d2iz>
 8015954:	2200      	movs	r2, #0
 8015956:	4683      	mov	fp, r0
 8015958:	2300      	movs	r3, #0
 801595a:	4630      	mov	r0, r6
 801595c:	4639      	mov	r1, r7
 801595e:	f7eb f8cd 	bl	8000afc <__aeabi_dcmplt>
 8015962:	b148      	cbz	r0, 8015978 <_dtoa_r+0x190>
 8015964:	4658      	mov	r0, fp
 8015966:	f7ea fded 	bl	8000544 <__aeabi_i2d>
 801596a:	4632      	mov	r2, r6
 801596c:	463b      	mov	r3, r7
 801596e:	f7eb f8bb 	bl	8000ae8 <__aeabi_dcmpeq>
 8015972:	b908      	cbnz	r0, 8015978 <_dtoa_r+0x190>
 8015974:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015978:	f1bb 0f16 	cmp.w	fp, #22
 801597c:	d857      	bhi.n	8015a2e <_dtoa_r+0x246>
 801597e:	4b5b      	ldr	r3, [pc, #364]	; (8015aec <_dtoa_r+0x304>)
 8015980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015984:	ec51 0b18 	vmov	r0, r1, d8
 8015988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598c:	f7eb f8b6 	bl	8000afc <__aeabi_dcmplt>
 8015990:	2800      	cmp	r0, #0
 8015992:	d04e      	beq.n	8015a32 <_dtoa_r+0x24a>
 8015994:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015998:	2300      	movs	r3, #0
 801599a:	930c      	str	r3, [sp, #48]	; 0x30
 801599c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801599e:	1b5b      	subs	r3, r3, r5
 80159a0:	1e5a      	subs	r2, r3, #1
 80159a2:	bf4c      	ite	mi
 80159a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80159a8:	2300      	movpl	r3, #0
 80159aa:	9206      	str	r2, [sp, #24]
 80159ac:	bf45      	ittet	mi
 80159ae:	9305      	strmi	r3, [sp, #20]
 80159b0:	2300      	movmi	r3, #0
 80159b2:	9305      	strpl	r3, [sp, #20]
 80159b4:	9306      	strmi	r3, [sp, #24]
 80159b6:	f1bb 0f00 	cmp.w	fp, #0
 80159ba:	db3c      	blt.n	8015a36 <_dtoa_r+0x24e>
 80159bc:	9b06      	ldr	r3, [sp, #24]
 80159be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80159c2:	445b      	add	r3, fp
 80159c4:	9306      	str	r3, [sp, #24]
 80159c6:	2300      	movs	r3, #0
 80159c8:	9308      	str	r3, [sp, #32]
 80159ca:	9b07      	ldr	r3, [sp, #28]
 80159cc:	2b09      	cmp	r3, #9
 80159ce:	d868      	bhi.n	8015aa2 <_dtoa_r+0x2ba>
 80159d0:	2b05      	cmp	r3, #5
 80159d2:	bfc5      	ittet	gt
 80159d4:	3b04      	subgt	r3, #4
 80159d6:	2500      	movgt	r5, #0
 80159d8:	2501      	movle	r5, #1
 80159da:	9307      	strgt	r3, [sp, #28]
 80159dc:	9b07      	ldr	r3, [sp, #28]
 80159de:	3b02      	subs	r3, #2
 80159e0:	2b03      	cmp	r3, #3
 80159e2:	f200 8087 	bhi.w	8015af4 <_dtoa_r+0x30c>
 80159e6:	e8df f003 	tbb	[pc, r3]
 80159ea:	3d30      	.short	0x3d30
 80159ec:	5a3b      	.short	0x5a3b
 80159ee:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80159f2:	441d      	add	r5, r3
 80159f4:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80159f8:	2b20      	cmp	r3, #32
 80159fa:	bfc9      	itett	gt
 80159fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015a00:	f1c3 0320 	rsble	r3, r3, #32
 8015a04:	fa08 f803 	lslgt.w	r8, r8, r3
 8015a08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015a0c:	bfd8      	it	le
 8015a0e:	fa06 f003 	lslle.w	r0, r6, r3
 8015a12:	f105 35ff 	add.w	r5, r5, #4294967295
 8015a16:	bfc4      	itt	gt
 8015a18:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015a1c:	ea48 0003 	orrgt.w	r0, r8, r3
 8015a20:	f7ea fd80 	bl	8000524 <__aeabi_ui2d>
 8015a24:	2201      	movs	r2, #1
 8015a26:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015a2a:	920e      	str	r2, [sp, #56]	; 0x38
 8015a2c:	e76f      	b.n	801590e <_dtoa_r+0x126>
 8015a2e:	2301      	movs	r3, #1
 8015a30:	e7b3      	b.n	801599a <_dtoa_r+0x1b2>
 8015a32:	900c      	str	r0, [sp, #48]	; 0x30
 8015a34:	e7b2      	b.n	801599c <_dtoa_r+0x1b4>
 8015a36:	9b05      	ldr	r3, [sp, #20]
 8015a38:	eba3 030b 	sub.w	r3, r3, fp
 8015a3c:	9305      	str	r3, [sp, #20]
 8015a3e:	f1cb 0300 	rsb	r3, fp, #0
 8015a42:	9308      	str	r3, [sp, #32]
 8015a44:	2300      	movs	r3, #0
 8015a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a48:	e7bf      	b.n	80159ca <_dtoa_r+0x1e2>
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8015a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	dc52      	bgt.n	8015afa <_dtoa_r+0x312>
 8015a54:	2301      	movs	r3, #1
 8015a56:	461a      	mov	r2, r3
 8015a58:	9301      	str	r3, [sp, #4]
 8015a5a:	9304      	str	r3, [sp, #16]
 8015a5c:	920a      	str	r2, [sp, #40]	; 0x28
 8015a5e:	e00b      	b.n	8015a78 <_dtoa_r+0x290>
 8015a60:	2301      	movs	r3, #1
 8015a62:	e7f3      	b.n	8015a4c <_dtoa_r+0x264>
 8015a64:	2300      	movs	r3, #0
 8015a66:	9309      	str	r3, [sp, #36]	; 0x24
 8015a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a6a:	445b      	add	r3, fp
 8015a6c:	9301      	str	r3, [sp, #4]
 8015a6e:	3301      	adds	r3, #1
 8015a70:	2b01      	cmp	r3, #1
 8015a72:	9304      	str	r3, [sp, #16]
 8015a74:	bfb8      	it	lt
 8015a76:	2301      	movlt	r3, #1
 8015a78:	69e0      	ldr	r0, [r4, #28]
 8015a7a:	2100      	movs	r1, #0
 8015a7c:	2204      	movs	r2, #4
 8015a7e:	f102 0614 	add.w	r6, r2, #20
 8015a82:	429e      	cmp	r6, r3
 8015a84:	d93d      	bls.n	8015b02 <_dtoa_r+0x31a>
 8015a86:	6041      	str	r1, [r0, #4]
 8015a88:	4620      	mov	r0, r4
 8015a8a:	f000 fd9d 	bl	80165c8 <_Balloc>
 8015a8e:	9000      	str	r0, [sp, #0]
 8015a90:	2800      	cmp	r0, #0
 8015a92:	d139      	bne.n	8015b08 <_dtoa_r+0x320>
 8015a94:	4b16      	ldr	r3, [pc, #88]	; (8015af0 <_dtoa_r+0x308>)
 8015a96:	4602      	mov	r2, r0
 8015a98:	f240 11af 	movw	r1, #431	; 0x1af
 8015a9c:	e6bd      	b.n	801581a <_dtoa_r+0x32>
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	e7e1      	b.n	8015a66 <_dtoa_r+0x27e>
 8015aa2:	2501      	movs	r5, #1
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	9509      	str	r5, [sp, #36]	; 0x24
 8015aa8:	9307      	str	r3, [sp, #28]
 8015aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8015aae:	2200      	movs	r2, #0
 8015ab0:	9301      	str	r3, [sp, #4]
 8015ab2:	9304      	str	r3, [sp, #16]
 8015ab4:	2312      	movs	r3, #18
 8015ab6:	e7d1      	b.n	8015a5c <_dtoa_r+0x274>
 8015ab8:	636f4361 	.word	0x636f4361
 8015abc:	3fd287a7 	.word	0x3fd287a7
 8015ac0:	8b60c8b3 	.word	0x8b60c8b3
 8015ac4:	3fc68a28 	.word	0x3fc68a28
 8015ac8:	509f79fb 	.word	0x509f79fb
 8015acc:	3fd34413 	.word	0x3fd34413
 8015ad0:	08017899 	.word	0x08017899
 8015ad4:	080178b0 	.word	0x080178b0
 8015ad8:	7ff00000 	.word	0x7ff00000
 8015adc:	08017895 	.word	0x08017895
 8015ae0:	0801788c 	.word	0x0801788c
 8015ae4:	08017869 	.word	0x08017869
 8015ae8:	3ff80000 	.word	0x3ff80000
 8015aec:	080179a0 	.word	0x080179a0
 8015af0:	08017908 	.word	0x08017908
 8015af4:	2301      	movs	r3, #1
 8015af6:	9309      	str	r3, [sp, #36]	; 0x24
 8015af8:	e7d7      	b.n	8015aaa <_dtoa_r+0x2c2>
 8015afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015afc:	9301      	str	r3, [sp, #4]
 8015afe:	9304      	str	r3, [sp, #16]
 8015b00:	e7ba      	b.n	8015a78 <_dtoa_r+0x290>
 8015b02:	3101      	adds	r1, #1
 8015b04:	0052      	lsls	r2, r2, #1
 8015b06:	e7ba      	b.n	8015a7e <_dtoa_r+0x296>
 8015b08:	69e3      	ldr	r3, [r4, #28]
 8015b0a:	9a00      	ldr	r2, [sp, #0]
 8015b0c:	601a      	str	r2, [r3, #0]
 8015b0e:	9b04      	ldr	r3, [sp, #16]
 8015b10:	2b0e      	cmp	r3, #14
 8015b12:	f200 80a8 	bhi.w	8015c66 <_dtoa_r+0x47e>
 8015b16:	2d00      	cmp	r5, #0
 8015b18:	f000 80a5 	beq.w	8015c66 <_dtoa_r+0x47e>
 8015b1c:	f1bb 0f00 	cmp.w	fp, #0
 8015b20:	dd38      	ble.n	8015b94 <_dtoa_r+0x3ac>
 8015b22:	f00b 020f 	and.w	r2, fp, #15
 8015b26:	4bbf      	ldr	r3, [pc, #764]	; (8015e24 <_dtoa_r+0x63c>)
 8015b28:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015b2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015b30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b34:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015b38:	d019      	beq.n	8015b6e <_dtoa_r+0x386>
 8015b3a:	4bbb      	ldr	r3, [pc, #748]	; (8015e28 <_dtoa_r+0x640>)
 8015b3c:	f008 080f 	and.w	r8, r8, #15
 8015b40:	2503      	movs	r5, #3
 8015b42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015b46:	ec51 0b18 	vmov	r0, r1, d8
 8015b4a:	f7ea fe8f 	bl	800086c <__aeabi_ddiv>
 8015b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015e28 <_dtoa_r+0x640>
 8015b56:	f1b8 0f00 	cmp.w	r8, #0
 8015b5a:	d10a      	bne.n	8015b72 <_dtoa_r+0x38a>
 8015b5c:	4632      	mov	r2, r6
 8015b5e:	463b      	mov	r3, r7
 8015b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b64:	f7ea fe82 	bl	800086c <__aeabi_ddiv>
 8015b68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b6c:	e02b      	b.n	8015bc6 <_dtoa_r+0x3de>
 8015b6e:	2502      	movs	r5, #2
 8015b70:	e7ef      	b.n	8015b52 <_dtoa_r+0x36a>
 8015b72:	f018 0f01 	tst.w	r8, #1
 8015b76:	d008      	beq.n	8015b8a <_dtoa_r+0x3a2>
 8015b78:	4630      	mov	r0, r6
 8015b7a:	4639      	mov	r1, r7
 8015b7c:	3501      	adds	r5, #1
 8015b7e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015b82:	f7ea fd49 	bl	8000618 <__aeabi_dmul>
 8015b86:	4606      	mov	r6, r0
 8015b88:	460f      	mov	r7, r1
 8015b8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015b8e:	f109 0908 	add.w	r9, r9, #8
 8015b92:	e7e0      	b.n	8015b56 <_dtoa_r+0x36e>
 8015b94:	f000 809f 	beq.w	8015cd6 <_dtoa_r+0x4ee>
 8015b98:	f1cb 0600 	rsb	r6, fp, #0
 8015b9c:	4ba1      	ldr	r3, [pc, #644]	; (8015e24 <_dtoa_r+0x63c>)
 8015b9e:	4fa2      	ldr	r7, [pc, #648]	; (8015e28 <_dtoa_r+0x640>)
 8015ba0:	2502      	movs	r5, #2
 8015ba2:	f006 020f 	and.w	r2, r6, #15
 8015ba6:	1136      	asrs	r6, r6, #4
 8015ba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015bac:	ec51 0b18 	vmov	r0, r1, d8
 8015bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb4:	f7ea fd30 	bl	8000618 <__aeabi_dmul>
 8015bb8:	2300      	movs	r3, #0
 8015bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015bbe:	2e00      	cmp	r6, #0
 8015bc0:	d17e      	bne.n	8015cc0 <_dtoa_r+0x4d8>
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d1d0      	bne.n	8015b68 <_dtoa_r+0x380>
 8015bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	f000 8084 	beq.w	8015cda <_dtoa_r+0x4f2>
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	4b95      	ldr	r3, [pc, #596]	; (8015e2c <_dtoa_r+0x644>)
 8015bd6:	4640      	mov	r0, r8
 8015bd8:	4649      	mov	r1, r9
 8015bda:	f7ea ff8f 	bl	8000afc <__aeabi_dcmplt>
 8015bde:	2800      	cmp	r0, #0
 8015be0:	d07b      	beq.n	8015cda <_dtoa_r+0x4f2>
 8015be2:	9b04      	ldr	r3, [sp, #16]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d078      	beq.n	8015cda <_dtoa_r+0x4f2>
 8015be8:	9b01      	ldr	r3, [sp, #4]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	dd39      	ble.n	8015c62 <_dtoa_r+0x47a>
 8015bee:	2200      	movs	r2, #0
 8015bf0:	4b8f      	ldr	r3, [pc, #572]	; (8015e30 <_dtoa_r+0x648>)
 8015bf2:	4640      	mov	r0, r8
 8015bf4:	4649      	mov	r1, r9
 8015bf6:	f7ea fd0f 	bl	8000618 <__aeabi_dmul>
 8015bfa:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015bfe:	3501      	adds	r5, #1
 8015c00:	9e01      	ldr	r6, [sp, #4]
 8015c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015c0a:	4628      	mov	r0, r5
 8015c0c:	f7ea fc9a 	bl	8000544 <__aeabi_i2d>
 8015c10:	4642      	mov	r2, r8
 8015c12:	464b      	mov	r3, r9
 8015c14:	f7ea fd00 	bl	8000618 <__aeabi_dmul>
 8015c18:	4b86      	ldr	r3, [pc, #536]	; (8015e34 <_dtoa_r+0x64c>)
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	f7ea fb46 	bl	80002ac <__adddf3>
 8015c20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c28:	9303      	str	r3, [sp, #12]
 8015c2a:	2e00      	cmp	r6, #0
 8015c2c:	d158      	bne.n	8015ce0 <_dtoa_r+0x4f8>
 8015c2e:	2200      	movs	r2, #0
 8015c30:	4b81      	ldr	r3, [pc, #516]	; (8015e38 <_dtoa_r+0x650>)
 8015c32:	4640      	mov	r0, r8
 8015c34:	4649      	mov	r1, r9
 8015c36:	f7ea fb37 	bl	80002a8 <__aeabi_dsub>
 8015c3a:	4680      	mov	r8, r0
 8015c3c:	4689      	mov	r9, r1
 8015c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c42:	f7ea ff79 	bl	8000b38 <__aeabi_dcmpgt>
 8015c46:	2800      	cmp	r0, #0
 8015c48:	f040 8296 	bne.w	8016178 <_dtoa_r+0x990>
 8015c4c:	4640      	mov	r0, r8
 8015c4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015c56:	4649      	mov	r1, r9
 8015c58:	f7ea ff50 	bl	8000afc <__aeabi_dcmplt>
 8015c5c:	2800      	cmp	r0, #0
 8015c5e:	f040 8289 	bne.w	8016174 <_dtoa_r+0x98c>
 8015c62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	f2c0 814e 	blt.w	8015f0a <_dtoa_r+0x722>
 8015c6e:	f1bb 0f0e 	cmp.w	fp, #14
 8015c72:	f300 814a 	bgt.w	8015f0a <_dtoa_r+0x722>
 8015c76:	4b6b      	ldr	r3, [pc, #428]	; (8015e24 <_dtoa_r+0x63c>)
 8015c78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015c7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	f280 80dc 	bge.w	8015e40 <_dtoa_r+0x658>
 8015c88:	9b04      	ldr	r3, [sp, #16]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	f300 80d8 	bgt.w	8015e40 <_dtoa_r+0x658>
 8015c90:	f040 826f 	bne.w	8016172 <_dtoa_r+0x98a>
 8015c94:	2200      	movs	r2, #0
 8015c96:	4b68      	ldr	r3, [pc, #416]	; (8015e38 <_dtoa_r+0x650>)
 8015c98:	4640      	mov	r0, r8
 8015c9a:	4649      	mov	r1, r9
 8015c9c:	f7ea fcbc 	bl	8000618 <__aeabi_dmul>
 8015ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015ca4:	f7ea ff3e 	bl	8000b24 <__aeabi_dcmpge>
 8015ca8:	9e04      	ldr	r6, [sp, #16]
 8015caa:	4637      	mov	r7, r6
 8015cac:	2800      	cmp	r0, #0
 8015cae:	f040 8245 	bne.w	801613c <_dtoa_r+0x954>
 8015cb2:	9d00      	ldr	r5, [sp, #0]
 8015cb4:	2331      	movs	r3, #49	; 0x31
 8015cb6:	f10b 0b01 	add.w	fp, fp, #1
 8015cba:	f805 3b01 	strb.w	r3, [r5], #1
 8015cbe:	e241      	b.n	8016144 <_dtoa_r+0x95c>
 8015cc0:	07f2      	lsls	r2, r6, #31
 8015cc2:	d505      	bpl.n	8015cd0 <_dtoa_r+0x4e8>
 8015cc4:	3501      	adds	r5, #1
 8015cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015cca:	f7ea fca5 	bl	8000618 <__aeabi_dmul>
 8015cce:	2301      	movs	r3, #1
 8015cd0:	1076      	asrs	r6, r6, #1
 8015cd2:	3708      	adds	r7, #8
 8015cd4:	e773      	b.n	8015bbe <_dtoa_r+0x3d6>
 8015cd6:	2502      	movs	r5, #2
 8015cd8:	e775      	b.n	8015bc6 <_dtoa_r+0x3de>
 8015cda:	465f      	mov	r7, fp
 8015cdc:	9e04      	ldr	r6, [sp, #16]
 8015cde:	e792      	b.n	8015c06 <_dtoa_r+0x41e>
 8015ce0:	9900      	ldr	r1, [sp, #0]
 8015ce2:	4b50      	ldr	r3, [pc, #320]	; (8015e24 <_dtoa_r+0x63c>)
 8015ce4:	4431      	add	r1, r6
 8015ce6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015cea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015cee:	9102      	str	r1, [sp, #8]
 8015cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015cf2:	eeb0 9a47 	vmov.f32	s18, s14
 8015cf6:	eef0 9a67 	vmov.f32	s19, s15
 8015cfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015cfe:	2900      	cmp	r1, #0
 8015d00:	d044      	beq.n	8015d8c <_dtoa_r+0x5a4>
 8015d02:	2000      	movs	r0, #0
 8015d04:	494d      	ldr	r1, [pc, #308]	; (8015e3c <_dtoa_r+0x654>)
 8015d06:	f7ea fdb1 	bl	800086c <__aeabi_ddiv>
 8015d0a:	ec53 2b19 	vmov	r2, r3, d9
 8015d0e:	f7ea facb 	bl	80002a8 <__aeabi_dsub>
 8015d12:	9d00      	ldr	r5, [sp, #0]
 8015d14:	ec41 0b19 	vmov	d9, r0, r1
 8015d18:	4649      	mov	r1, r9
 8015d1a:	4640      	mov	r0, r8
 8015d1c:	f7ea ff2c 	bl	8000b78 <__aeabi_d2iz>
 8015d20:	4606      	mov	r6, r0
 8015d22:	f7ea fc0f 	bl	8000544 <__aeabi_i2d>
 8015d26:	4602      	mov	r2, r0
 8015d28:	3630      	adds	r6, #48	; 0x30
 8015d2a:	460b      	mov	r3, r1
 8015d2c:	4640      	mov	r0, r8
 8015d2e:	4649      	mov	r1, r9
 8015d30:	f7ea faba 	bl	80002a8 <__aeabi_dsub>
 8015d34:	f805 6b01 	strb.w	r6, [r5], #1
 8015d38:	4680      	mov	r8, r0
 8015d3a:	4689      	mov	r9, r1
 8015d3c:	ec53 2b19 	vmov	r2, r3, d9
 8015d40:	f7ea fedc 	bl	8000afc <__aeabi_dcmplt>
 8015d44:	2800      	cmp	r0, #0
 8015d46:	d164      	bne.n	8015e12 <_dtoa_r+0x62a>
 8015d48:	4642      	mov	r2, r8
 8015d4a:	464b      	mov	r3, r9
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	4937      	ldr	r1, [pc, #220]	; (8015e2c <_dtoa_r+0x644>)
 8015d50:	f7ea faaa 	bl	80002a8 <__aeabi_dsub>
 8015d54:	ec53 2b19 	vmov	r2, r3, d9
 8015d58:	f7ea fed0 	bl	8000afc <__aeabi_dcmplt>
 8015d5c:	2800      	cmp	r0, #0
 8015d5e:	f040 80b6 	bne.w	8015ece <_dtoa_r+0x6e6>
 8015d62:	9b02      	ldr	r3, [sp, #8]
 8015d64:	429d      	cmp	r5, r3
 8015d66:	f43f af7c 	beq.w	8015c62 <_dtoa_r+0x47a>
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	4b30      	ldr	r3, [pc, #192]	; (8015e30 <_dtoa_r+0x648>)
 8015d6e:	ec51 0b19 	vmov	r0, r1, d9
 8015d72:	f7ea fc51 	bl	8000618 <__aeabi_dmul>
 8015d76:	2200      	movs	r2, #0
 8015d78:	4b2d      	ldr	r3, [pc, #180]	; (8015e30 <_dtoa_r+0x648>)
 8015d7a:	ec41 0b19 	vmov	d9, r0, r1
 8015d7e:	4640      	mov	r0, r8
 8015d80:	4649      	mov	r1, r9
 8015d82:	f7ea fc49 	bl	8000618 <__aeabi_dmul>
 8015d86:	4680      	mov	r8, r0
 8015d88:	4689      	mov	r9, r1
 8015d8a:	e7c5      	b.n	8015d18 <_dtoa_r+0x530>
 8015d8c:	ec51 0b17 	vmov	r0, r1, d7
 8015d90:	f7ea fc42 	bl	8000618 <__aeabi_dmul>
 8015d94:	9b02      	ldr	r3, [sp, #8]
 8015d96:	9d00      	ldr	r5, [sp, #0]
 8015d98:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d9a:	ec41 0b19 	vmov	d9, r0, r1
 8015d9e:	4649      	mov	r1, r9
 8015da0:	4640      	mov	r0, r8
 8015da2:	f7ea fee9 	bl	8000b78 <__aeabi_d2iz>
 8015da6:	4606      	mov	r6, r0
 8015da8:	f7ea fbcc 	bl	8000544 <__aeabi_i2d>
 8015dac:	4602      	mov	r2, r0
 8015dae:	460b      	mov	r3, r1
 8015db0:	4640      	mov	r0, r8
 8015db2:	4649      	mov	r1, r9
 8015db4:	3630      	adds	r6, #48	; 0x30
 8015db6:	f7ea fa77 	bl	80002a8 <__aeabi_dsub>
 8015dba:	9b02      	ldr	r3, [sp, #8]
 8015dbc:	f805 6b01 	strb.w	r6, [r5], #1
 8015dc0:	4680      	mov	r8, r0
 8015dc2:	429d      	cmp	r5, r3
 8015dc4:	4689      	mov	r9, r1
 8015dc6:	f04f 0200 	mov.w	r2, #0
 8015dca:	d124      	bne.n	8015e16 <_dtoa_r+0x62e>
 8015dcc:	4b1b      	ldr	r3, [pc, #108]	; (8015e3c <_dtoa_r+0x654>)
 8015dce:	ec51 0b19 	vmov	r0, r1, d9
 8015dd2:	f7ea fa6b 	bl	80002ac <__adddf3>
 8015dd6:	4602      	mov	r2, r0
 8015dd8:	460b      	mov	r3, r1
 8015dda:	4640      	mov	r0, r8
 8015ddc:	4649      	mov	r1, r9
 8015dde:	f7ea feab 	bl	8000b38 <__aeabi_dcmpgt>
 8015de2:	2800      	cmp	r0, #0
 8015de4:	d173      	bne.n	8015ece <_dtoa_r+0x6e6>
 8015de6:	2000      	movs	r0, #0
 8015de8:	4914      	ldr	r1, [pc, #80]	; (8015e3c <_dtoa_r+0x654>)
 8015dea:	ec53 2b19 	vmov	r2, r3, d9
 8015dee:	f7ea fa5b 	bl	80002a8 <__aeabi_dsub>
 8015df2:	4602      	mov	r2, r0
 8015df4:	460b      	mov	r3, r1
 8015df6:	4640      	mov	r0, r8
 8015df8:	4649      	mov	r1, r9
 8015dfa:	f7ea fe7f 	bl	8000afc <__aeabi_dcmplt>
 8015dfe:	2800      	cmp	r0, #0
 8015e00:	f43f af2f 	beq.w	8015c62 <_dtoa_r+0x47a>
 8015e04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015e06:	1e6b      	subs	r3, r5, #1
 8015e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015e0e:	2b30      	cmp	r3, #48	; 0x30
 8015e10:	d0f8      	beq.n	8015e04 <_dtoa_r+0x61c>
 8015e12:	46bb      	mov	fp, r7
 8015e14:	e04a      	b.n	8015eac <_dtoa_r+0x6c4>
 8015e16:	4b06      	ldr	r3, [pc, #24]	; (8015e30 <_dtoa_r+0x648>)
 8015e18:	f7ea fbfe 	bl	8000618 <__aeabi_dmul>
 8015e1c:	4680      	mov	r8, r0
 8015e1e:	4689      	mov	r9, r1
 8015e20:	e7bd      	b.n	8015d9e <_dtoa_r+0x5b6>
 8015e22:	bf00      	nop
 8015e24:	080179a0 	.word	0x080179a0
 8015e28:	08017978 	.word	0x08017978
 8015e2c:	3ff00000 	.word	0x3ff00000
 8015e30:	40240000 	.word	0x40240000
 8015e34:	401c0000 	.word	0x401c0000
 8015e38:	40140000 	.word	0x40140000
 8015e3c:	3fe00000 	.word	0x3fe00000
 8015e40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015e44:	9d00      	ldr	r5, [sp, #0]
 8015e46:	4642      	mov	r2, r8
 8015e48:	464b      	mov	r3, r9
 8015e4a:	4630      	mov	r0, r6
 8015e4c:	4639      	mov	r1, r7
 8015e4e:	f7ea fd0d 	bl	800086c <__aeabi_ddiv>
 8015e52:	f7ea fe91 	bl	8000b78 <__aeabi_d2iz>
 8015e56:	9001      	str	r0, [sp, #4]
 8015e58:	f7ea fb74 	bl	8000544 <__aeabi_i2d>
 8015e5c:	4642      	mov	r2, r8
 8015e5e:	464b      	mov	r3, r9
 8015e60:	f7ea fbda 	bl	8000618 <__aeabi_dmul>
 8015e64:	4602      	mov	r2, r0
 8015e66:	460b      	mov	r3, r1
 8015e68:	4630      	mov	r0, r6
 8015e6a:	4639      	mov	r1, r7
 8015e6c:	f7ea fa1c 	bl	80002a8 <__aeabi_dsub>
 8015e70:	9e01      	ldr	r6, [sp, #4]
 8015e72:	9f04      	ldr	r7, [sp, #16]
 8015e74:	4602      	mov	r2, r0
 8015e76:	3630      	adds	r6, #48	; 0x30
 8015e78:	460b      	mov	r3, r1
 8015e7a:	f805 6b01 	strb.w	r6, [r5], #1
 8015e7e:	9e00      	ldr	r6, [sp, #0]
 8015e80:	1bae      	subs	r6, r5, r6
 8015e82:	42b7      	cmp	r7, r6
 8015e84:	d134      	bne.n	8015ef0 <_dtoa_r+0x708>
 8015e86:	f7ea fa11 	bl	80002ac <__adddf3>
 8015e8a:	4642      	mov	r2, r8
 8015e8c:	464b      	mov	r3, r9
 8015e8e:	4606      	mov	r6, r0
 8015e90:	460f      	mov	r7, r1
 8015e92:	f7ea fe51 	bl	8000b38 <__aeabi_dcmpgt>
 8015e96:	b9c8      	cbnz	r0, 8015ecc <_dtoa_r+0x6e4>
 8015e98:	4642      	mov	r2, r8
 8015e9a:	464b      	mov	r3, r9
 8015e9c:	4630      	mov	r0, r6
 8015e9e:	4639      	mov	r1, r7
 8015ea0:	f7ea fe22 	bl	8000ae8 <__aeabi_dcmpeq>
 8015ea4:	b110      	cbz	r0, 8015eac <_dtoa_r+0x6c4>
 8015ea6:	9b01      	ldr	r3, [sp, #4]
 8015ea8:	07db      	lsls	r3, r3, #31
 8015eaa:	d40f      	bmi.n	8015ecc <_dtoa_r+0x6e4>
 8015eac:	4651      	mov	r1, sl
 8015eae:	4620      	mov	r0, r4
 8015eb0:	f000 fbca 	bl	8016648 <_Bfree>
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015eb8:	702b      	strb	r3, [r5, #0]
 8015eba:	f10b 0301 	add.w	r3, fp, #1
 8015ebe:	6013      	str	r3, [r2, #0]
 8015ec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	f43f ace2 	beq.w	801588c <_dtoa_r+0xa4>
 8015ec8:	601d      	str	r5, [r3, #0]
 8015eca:	e4df      	b.n	801588c <_dtoa_r+0xa4>
 8015ecc:	465f      	mov	r7, fp
 8015ece:	462b      	mov	r3, r5
 8015ed0:	461d      	mov	r5, r3
 8015ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015ed6:	2a39      	cmp	r2, #57	; 0x39
 8015ed8:	d106      	bne.n	8015ee8 <_dtoa_r+0x700>
 8015eda:	9a00      	ldr	r2, [sp, #0]
 8015edc:	429a      	cmp	r2, r3
 8015ede:	d1f7      	bne.n	8015ed0 <_dtoa_r+0x6e8>
 8015ee0:	2230      	movs	r2, #48	; 0x30
 8015ee2:	9900      	ldr	r1, [sp, #0]
 8015ee4:	3701      	adds	r7, #1
 8015ee6:	700a      	strb	r2, [r1, #0]
 8015ee8:	781a      	ldrb	r2, [r3, #0]
 8015eea:	3201      	adds	r2, #1
 8015eec:	701a      	strb	r2, [r3, #0]
 8015eee:	e790      	b.n	8015e12 <_dtoa_r+0x62a>
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	4ba3      	ldr	r3, [pc, #652]	; (8016180 <_dtoa_r+0x998>)
 8015ef4:	f7ea fb90 	bl	8000618 <__aeabi_dmul>
 8015ef8:	2200      	movs	r2, #0
 8015efa:	2300      	movs	r3, #0
 8015efc:	4606      	mov	r6, r0
 8015efe:	460f      	mov	r7, r1
 8015f00:	f7ea fdf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8015f04:	2800      	cmp	r0, #0
 8015f06:	d09e      	beq.n	8015e46 <_dtoa_r+0x65e>
 8015f08:	e7d0      	b.n	8015eac <_dtoa_r+0x6c4>
 8015f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f0c:	2a00      	cmp	r2, #0
 8015f0e:	f000 80ca 	beq.w	80160a6 <_dtoa_r+0x8be>
 8015f12:	9a07      	ldr	r2, [sp, #28]
 8015f14:	2a01      	cmp	r2, #1
 8015f16:	f300 80ad 	bgt.w	8016074 <_dtoa_r+0x88c>
 8015f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f1c:	2a00      	cmp	r2, #0
 8015f1e:	f000 80a5 	beq.w	801606c <_dtoa_r+0x884>
 8015f22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015f26:	9e08      	ldr	r6, [sp, #32]
 8015f28:	9d05      	ldr	r5, [sp, #20]
 8015f2a:	9a05      	ldr	r2, [sp, #20]
 8015f2c:	2101      	movs	r1, #1
 8015f2e:	4620      	mov	r0, r4
 8015f30:	441a      	add	r2, r3
 8015f32:	9205      	str	r2, [sp, #20]
 8015f34:	9a06      	ldr	r2, [sp, #24]
 8015f36:	441a      	add	r2, r3
 8015f38:	9206      	str	r2, [sp, #24]
 8015f3a:	f000 fc3d 	bl	80167b8 <__i2b>
 8015f3e:	4607      	mov	r7, r0
 8015f40:	b165      	cbz	r5, 8015f5c <_dtoa_r+0x774>
 8015f42:	9b06      	ldr	r3, [sp, #24]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	dd09      	ble.n	8015f5c <_dtoa_r+0x774>
 8015f48:	42ab      	cmp	r3, r5
 8015f4a:	9a05      	ldr	r2, [sp, #20]
 8015f4c:	bfa8      	it	ge
 8015f4e:	462b      	movge	r3, r5
 8015f50:	1ad2      	subs	r2, r2, r3
 8015f52:	1aed      	subs	r5, r5, r3
 8015f54:	9205      	str	r2, [sp, #20]
 8015f56:	9a06      	ldr	r2, [sp, #24]
 8015f58:	1ad3      	subs	r3, r2, r3
 8015f5a:	9306      	str	r3, [sp, #24]
 8015f5c:	9b08      	ldr	r3, [sp, #32]
 8015f5e:	b1f3      	cbz	r3, 8015f9e <_dtoa_r+0x7b6>
 8015f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	f000 80a3 	beq.w	80160ae <_dtoa_r+0x8c6>
 8015f68:	2e00      	cmp	r6, #0
 8015f6a:	dd10      	ble.n	8015f8e <_dtoa_r+0x7a6>
 8015f6c:	4639      	mov	r1, r7
 8015f6e:	4632      	mov	r2, r6
 8015f70:	4620      	mov	r0, r4
 8015f72:	f000 fce1 	bl	8016938 <__pow5mult>
 8015f76:	4652      	mov	r2, sl
 8015f78:	4601      	mov	r1, r0
 8015f7a:	4607      	mov	r7, r0
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	f000 fc31 	bl	80167e4 <__multiply>
 8015f82:	4680      	mov	r8, r0
 8015f84:	4651      	mov	r1, sl
 8015f86:	4620      	mov	r0, r4
 8015f88:	46c2      	mov	sl, r8
 8015f8a:	f000 fb5d 	bl	8016648 <_Bfree>
 8015f8e:	9b08      	ldr	r3, [sp, #32]
 8015f90:	1b9a      	subs	r2, r3, r6
 8015f92:	d004      	beq.n	8015f9e <_dtoa_r+0x7b6>
 8015f94:	4651      	mov	r1, sl
 8015f96:	4620      	mov	r0, r4
 8015f98:	f000 fcce 	bl	8016938 <__pow5mult>
 8015f9c:	4682      	mov	sl, r0
 8015f9e:	2101      	movs	r1, #1
 8015fa0:	4620      	mov	r0, r4
 8015fa2:	f000 fc09 	bl	80167b8 <__i2b>
 8015fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fa8:	4606      	mov	r6, r0
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	f340 8081 	ble.w	80160b2 <_dtoa_r+0x8ca>
 8015fb0:	461a      	mov	r2, r3
 8015fb2:	4601      	mov	r1, r0
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	f000 fcbf 	bl	8016938 <__pow5mult>
 8015fba:	9b07      	ldr	r3, [sp, #28]
 8015fbc:	4606      	mov	r6, r0
 8015fbe:	2b01      	cmp	r3, #1
 8015fc0:	dd7a      	ble.n	80160b8 <_dtoa_r+0x8d0>
 8015fc2:	f04f 0800 	mov.w	r8, #0
 8015fc6:	6933      	ldr	r3, [r6, #16]
 8015fc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015fcc:	6918      	ldr	r0, [r3, #16]
 8015fce:	f000 fba5 	bl	801671c <__hi0bits>
 8015fd2:	f1c0 0020 	rsb	r0, r0, #32
 8015fd6:	9b06      	ldr	r3, [sp, #24]
 8015fd8:	4418      	add	r0, r3
 8015fda:	f010 001f 	ands.w	r0, r0, #31
 8015fde:	f000 8094 	beq.w	801610a <_dtoa_r+0x922>
 8015fe2:	f1c0 0320 	rsb	r3, r0, #32
 8015fe6:	2b04      	cmp	r3, #4
 8015fe8:	f340 8085 	ble.w	80160f6 <_dtoa_r+0x90e>
 8015fec:	f1c0 001c 	rsb	r0, r0, #28
 8015ff0:	9b05      	ldr	r3, [sp, #20]
 8015ff2:	4403      	add	r3, r0
 8015ff4:	4405      	add	r5, r0
 8015ff6:	9305      	str	r3, [sp, #20]
 8015ff8:	9b06      	ldr	r3, [sp, #24]
 8015ffa:	4403      	add	r3, r0
 8015ffc:	9306      	str	r3, [sp, #24]
 8015ffe:	9b05      	ldr	r3, [sp, #20]
 8016000:	2b00      	cmp	r3, #0
 8016002:	dd05      	ble.n	8016010 <_dtoa_r+0x828>
 8016004:	4651      	mov	r1, sl
 8016006:	461a      	mov	r2, r3
 8016008:	4620      	mov	r0, r4
 801600a:	f000 fcef 	bl	80169ec <__lshift>
 801600e:	4682      	mov	sl, r0
 8016010:	9b06      	ldr	r3, [sp, #24]
 8016012:	2b00      	cmp	r3, #0
 8016014:	dd05      	ble.n	8016022 <_dtoa_r+0x83a>
 8016016:	4631      	mov	r1, r6
 8016018:	461a      	mov	r2, r3
 801601a:	4620      	mov	r0, r4
 801601c:	f000 fce6 	bl	80169ec <__lshift>
 8016020:	4606      	mov	r6, r0
 8016022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016024:	2b00      	cmp	r3, #0
 8016026:	d072      	beq.n	801610e <_dtoa_r+0x926>
 8016028:	4631      	mov	r1, r6
 801602a:	4650      	mov	r0, sl
 801602c:	f000 fd4a 	bl	8016ac4 <__mcmp>
 8016030:	2800      	cmp	r0, #0
 8016032:	da6c      	bge.n	801610e <_dtoa_r+0x926>
 8016034:	2300      	movs	r3, #0
 8016036:	4651      	mov	r1, sl
 8016038:	220a      	movs	r2, #10
 801603a:	4620      	mov	r0, r4
 801603c:	f000 fb26 	bl	801668c <__multadd>
 8016040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016042:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016046:	4682      	mov	sl, r0
 8016048:	2b00      	cmp	r3, #0
 801604a:	f000 81af 	beq.w	80163ac <_dtoa_r+0xbc4>
 801604e:	2300      	movs	r3, #0
 8016050:	4639      	mov	r1, r7
 8016052:	220a      	movs	r2, #10
 8016054:	4620      	mov	r0, r4
 8016056:	f000 fb19 	bl	801668c <__multadd>
 801605a:	9b01      	ldr	r3, [sp, #4]
 801605c:	4607      	mov	r7, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	f300 8096 	bgt.w	8016190 <_dtoa_r+0x9a8>
 8016064:	9b07      	ldr	r3, [sp, #28]
 8016066:	2b02      	cmp	r3, #2
 8016068:	dc59      	bgt.n	801611e <_dtoa_r+0x936>
 801606a:	e091      	b.n	8016190 <_dtoa_r+0x9a8>
 801606c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801606e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016072:	e758      	b.n	8015f26 <_dtoa_r+0x73e>
 8016074:	9b04      	ldr	r3, [sp, #16]
 8016076:	1e5e      	subs	r6, r3, #1
 8016078:	9b08      	ldr	r3, [sp, #32]
 801607a:	42b3      	cmp	r3, r6
 801607c:	bfb7      	itett	lt
 801607e:	9b08      	ldrlt	r3, [sp, #32]
 8016080:	1b9e      	subge	r6, r3, r6
 8016082:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8016084:	1af3      	sublt	r3, r6, r3
 8016086:	bfbe      	ittt	lt
 8016088:	9608      	strlt	r6, [sp, #32]
 801608a:	2600      	movlt	r6, #0
 801608c:	18d2      	addlt	r2, r2, r3
 801608e:	9b04      	ldr	r3, [sp, #16]
 8016090:	bfb8      	it	lt
 8016092:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8016094:	2b00      	cmp	r3, #0
 8016096:	bfb7      	itett	lt
 8016098:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801609c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80160a0:	1a9d      	sublt	r5, r3, r2
 80160a2:	2300      	movlt	r3, #0
 80160a4:	e741      	b.n	8015f2a <_dtoa_r+0x742>
 80160a6:	9e08      	ldr	r6, [sp, #32]
 80160a8:	9d05      	ldr	r5, [sp, #20]
 80160aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80160ac:	e748      	b.n	8015f40 <_dtoa_r+0x758>
 80160ae:	9a08      	ldr	r2, [sp, #32]
 80160b0:	e770      	b.n	8015f94 <_dtoa_r+0x7ac>
 80160b2:	9b07      	ldr	r3, [sp, #28]
 80160b4:	2b01      	cmp	r3, #1
 80160b6:	dc19      	bgt.n	80160ec <_dtoa_r+0x904>
 80160b8:	9b02      	ldr	r3, [sp, #8]
 80160ba:	b9bb      	cbnz	r3, 80160ec <_dtoa_r+0x904>
 80160bc:	9b03      	ldr	r3, [sp, #12]
 80160be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80160c2:	b99b      	cbnz	r3, 80160ec <_dtoa_r+0x904>
 80160c4:	9b03      	ldr	r3, [sp, #12]
 80160c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80160ca:	0d1b      	lsrs	r3, r3, #20
 80160cc:	051b      	lsls	r3, r3, #20
 80160ce:	b183      	cbz	r3, 80160f2 <_dtoa_r+0x90a>
 80160d0:	9b05      	ldr	r3, [sp, #20]
 80160d2:	f04f 0801 	mov.w	r8, #1
 80160d6:	3301      	adds	r3, #1
 80160d8:	9305      	str	r3, [sp, #20]
 80160da:	9b06      	ldr	r3, [sp, #24]
 80160dc:	3301      	adds	r3, #1
 80160de:	9306      	str	r3, [sp, #24]
 80160e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	f47f af6f 	bne.w	8015fc6 <_dtoa_r+0x7de>
 80160e8:	2001      	movs	r0, #1
 80160ea:	e774      	b.n	8015fd6 <_dtoa_r+0x7ee>
 80160ec:	f04f 0800 	mov.w	r8, #0
 80160f0:	e7f6      	b.n	80160e0 <_dtoa_r+0x8f8>
 80160f2:	4698      	mov	r8, r3
 80160f4:	e7f4      	b.n	80160e0 <_dtoa_r+0x8f8>
 80160f6:	d082      	beq.n	8015ffe <_dtoa_r+0x816>
 80160f8:	331c      	adds	r3, #28
 80160fa:	9a05      	ldr	r2, [sp, #20]
 80160fc:	441a      	add	r2, r3
 80160fe:	441d      	add	r5, r3
 8016100:	9205      	str	r2, [sp, #20]
 8016102:	9a06      	ldr	r2, [sp, #24]
 8016104:	441a      	add	r2, r3
 8016106:	9206      	str	r2, [sp, #24]
 8016108:	e779      	b.n	8015ffe <_dtoa_r+0x816>
 801610a:	4603      	mov	r3, r0
 801610c:	e7f4      	b.n	80160f8 <_dtoa_r+0x910>
 801610e:	9b04      	ldr	r3, [sp, #16]
 8016110:	2b00      	cmp	r3, #0
 8016112:	dc37      	bgt.n	8016184 <_dtoa_r+0x99c>
 8016114:	9b07      	ldr	r3, [sp, #28]
 8016116:	2b02      	cmp	r3, #2
 8016118:	dd34      	ble.n	8016184 <_dtoa_r+0x99c>
 801611a:	9b04      	ldr	r3, [sp, #16]
 801611c:	9301      	str	r3, [sp, #4]
 801611e:	9b01      	ldr	r3, [sp, #4]
 8016120:	b963      	cbnz	r3, 801613c <_dtoa_r+0x954>
 8016122:	4631      	mov	r1, r6
 8016124:	2205      	movs	r2, #5
 8016126:	4620      	mov	r0, r4
 8016128:	f000 fab0 	bl	801668c <__multadd>
 801612c:	4601      	mov	r1, r0
 801612e:	4606      	mov	r6, r0
 8016130:	4650      	mov	r0, sl
 8016132:	f000 fcc7 	bl	8016ac4 <__mcmp>
 8016136:	2800      	cmp	r0, #0
 8016138:	f73f adbb 	bgt.w	8015cb2 <_dtoa_r+0x4ca>
 801613c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801613e:	9d00      	ldr	r5, [sp, #0]
 8016140:	ea6f 0b03 	mvn.w	fp, r3
 8016144:	f04f 0800 	mov.w	r8, #0
 8016148:	4631      	mov	r1, r6
 801614a:	4620      	mov	r0, r4
 801614c:	f000 fa7c 	bl	8016648 <_Bfree>
 8016150:	2f00      	cmp	r7, #0
 8016152:	f43f aeab 	beq.w	8015eac <_dtoa_r+0x6c4>
 8016156:	f1b8 0f00 	cmp.w	r8, #0
 801615a:	d005      	beq.n	8016168 <_dtoa_r+0x980>
 801615c:	45b8      	cmp	r8, r7
 801615e:	d003      	beq.n	8016168 <_dtoa_r+0x980>
 8016160:	4641      	mov	r1, r8
 8016162:	4620      	mov	r0, r4
 8016164:	f000 fa70 	bl	8016648 <_Bfree>
 8016168:	4639      	mov	r1, r7
 801616a:	4620      	mov	r0, r4
 801616c:	f000 fa6c 	bl	8016648 <_Bfree>
 8016170:	e69c      	b.n	8015eac <_dtoa_r+0x6c4>
 8016172:	2600      	movs	r6, #0
 8016174:	4637      	mov	r7, r6
 8016176:	e7e1      	b.n	801613c <_dtoa_r+0x954>
 8016178:	46bb      	mov	fp, r7
 801617a:	4637      	mov	r7, r6
 801617c:	e599      	b.n	8015cb2 <_dtoa_r+0x4ca>
 801617e:	bf00      	nop
 8016180:	40240000 	.word	0x40240000
 8016184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016186:	2b00      	cmp	r3, #0
 8016188:	f000 80c8 	beq.w	801631c <_dtoa_r+0xb34>
 801618c:	9b04      	ldr	r3, [sp, #16]
 801618e:	9301      	str	r3, [sp, #4]
 8016190:	2d00      	cmp	r5, #0
 8016192:	dd05      	ble.n	80161a0 <_dtoa_r+0x9b8>
 8016194:	4639      	mov	r1, r7
 8016196:	462a      	mov	r2, r5
 8016198:	4620      	mov	r0, r4
 801619a:	f000 fc27 	bl	80169ec <__lshift>
 801619e:	4607      	mov	r7, r0
 80161a0:	f1b8 0f00 	cmp.w	r8, #0
 80161a4:	d05b      	beq.n	801625e <_dtoa_r+0xa76>
 80161a6:	6879      	ldr	r1, [r7, #4]
 80161a8:	4620      	mov	r0, r4
 80161aa:	f000 fa0d 	bl	80165c8 <_Balloc>
 80161ae:	4605      	mov	r5, r0
 80161b0:	b928      	cbnz	r0, 80161be <_dtoa_r+0x9d6>
 80161b2:	4b82      	ldr	r3, [pc, #520]	; (80163bc <_dtoa_r+0xbd4>)
 80161b4:	4602      	mov	r2, r0
 80161b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80161ba:	f7ff bb2e 	b.w	801581a <_dtoa_r+0x32>
 80161be:	693a      	ldr	r2, [r7, #16]
 80161c0:	f107 010c 	add.w	r1, r7, #12
 80161c4:	300c      	adds	r0, #12
 80161c6:	3202      	adds	r2, #2
 80161c8:	0092      	lsls	r2, r2, #2
 80161ca:	f7ff fa70 	bl	80156ae <memcpy>
 80161ce:	2201      	movs	r2, #1
 80161d0:	4629      	mov	r1, r5
 80161d2:	4620      	mov	r0, r4
 80161d4:	f000 fc0a 	bl	80169ec <__lshift>
 80161d8:	9b00      	ldr	r3, [sp, #0]
 80161da:	46b8      	mov	r8, r7
 80161dc:	4607      	mov	r7, r0
 80161de:	3301      	adds	r3, #1
 80161e0:	9304      	str	r3, [sp, #16]
 80161e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161e6:	4413      	add	r3, r2
 80161e8:	9308      	str	r3, [sp, #32]
 80161ea:	9b02      	ldr	r3, [sp, #8]
 80161ec:	f003 0301 	and.w	r3, r3, #1
 80161f0:	9306      	str	r3, [sp, #24]
 80161f2:	9b04      	ldr	r3, [sp, #16]
 80161f4:	4631      	mov	r1, r6
 80161f6:	4650      	mov	r0, sl
 80161f8:	3b01      	subs	r3, #1
 80161fa:	9301      	str	r3, [sp, #4]
 80161fc:	f7ff fa64 	bl	80156c8 <quorem>
 8016200:	4641      	mov	r1, r8
 8016202:	9002      	str	r0, [sp, #8]
 8016204:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016208:	4650      	mov	r0, sl
 801620a:	f000 fc5b 	bl	8016ac4 <__mcmp>
 801620e:	463a      	mov	r2, r7
 8016210:	9005      	str	r0, [sp, #20]
 8016212:	4631      	mov	r1, r6
 8016214:	4620      	mov	r0, r4
 8016216:	f000 fc71 	bl	8016afc <__mdiff>
 801621a:	68c2      	ldr	r2, [r0, #12]
 801621c:	4605      	mov	r5, r0
 801621e:	bb02      	cbnz	r2, 8016262 <_dtoa_r+0xa7a>
 8016220:	4601      	mov	r1, r0
 8016222:	4650      	mov	r0, sl
 8016224:	f000 fc4e 	bl	8016ac4 <__mcmp>
 8016228:	4602      	mov	r2, r0
 801622a:	4629      	mov	r1, r5
 801622c:	4620      	mov	r0, r4
 801622e:	9209      	str	r2, [sp, #36]	; 0x24
 8016230:	f000 fa0a 	bl	8016648 <_Bfree>
 8016234:	9b07      	ldr	r3, [sp, #28]
 8016236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016238:	9d04      	ldr	r5, [sp, #16]
 801623a:	ea43 0102 	orr.w	r1, r3, r2
 801623e:	9b06      	ldr	r3, [sp, #24]
 8016240:	4319      	orrs	r1, r3
 8016242:	d110      	bne.n	8016266 <_dtoa_r+0xa7e>
 8016244:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016248:	d029      	beq.n	801629e <_dtoa_r+0xab6>
 801624a:	9b05      	ldr	r3, [sp, #20]
 801624c:	2b00      	cmp	r3, #0
 801624e:	dd02      	ble.n	8016256 <_dtoa_r+0xa6e>
 8016250:	9b02      	ldr	r3, [sp, #8]
 8016252:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8016256:	9b01      	ldr	r3, [sp, #4]
 8016258:	f883 9000 	strb.w	r9, [r3]
 801625c:	e774      	b.n	8016148 <_dtoa_r+0x960>
 801625e:	4638      	mov	r0, r7
 8016260:	e7ba      	b.n	80161d8 <_dtoa_r+0x9f0>
 8016262:	2201      	movs	r2, #1
 8016264:	e7e1      	b.n	801622a <_dtoa_r+0xa42>
 8016266:	9b05      	ldr	r3, [sp, #20]
 8016268:	2b00      	cmp	r3, #0
 801626a:	db04      	blt.n	8016276 <_dtoa_r+0xa8e>
 801626c:	9907      	ldr	r1, [sp, #28]
 801626e:	430b      	orrs	r3, r1
 8016270:	9906      	ldr	r1, [sp, #24]
 8016272:	430b      	orrs	r3, r1
 8016274:	d120      	bne.n	80162b8 <_dtoa_r+0xad0>
 8016276:	2a00      	cmp	r2, #0
 8016278:	dded      	ble.n	8016256 <_dtoa_r+0xa6e>
 801627a:	4651      	mov	r1, sl
 801627c:	2201      	movs	r2, #1
 801627e:	4620      	mov	r0, r4
 8016280:	f000 fbb4 	bl	80169ec <__lshift>
 8016284:	4631      	mov	r1, r6
 8016286:	4682      	mov	sl, r0
 8016288:	f000 fc1c 	bl	8016ac4 <__mcmp>
 801628c:	2800      	cmp	r0, #0
 801628e:	dc03      	bgt.n	8016298 <_dtoa_r+0xab0>
 8016290:	d1e1      	bne.n	8016256 <_dtoa_r+0xa6e>
 8016292:	f019 0f01 	tst.w	r9, #1
 8016296:	d0de      	beq.n	8016256 <_dtoa_r+0xa6e>
 8016298:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801629c:	d1d8      	bne.n	8016250 <_dtoa_r+0xa68>
 801629e:	2339      	movs	r3, #57	; 0x39
 80162a0:	9a01      	ldr	r2, [sp, #4]
 80162a2:	7013      	strb	r3, [r2, #0]
 80162a4:	462b      	mov	r3, r5
 80162a6:	461d      	mov	r5, r3
 80162a8:	3b01      	subs	r3, #1
 80162aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80162ae:	2a39      	cmp	r2, #57	; 0x39
 80162b0:	d06b      	beq.n	801638a <_dtoa_r+0xba2>
 80162b2:	3201      	adds	r2, #1
 80162b4:	701a      	strb	r2, [r3, #0]
 80162b6:	e747      	b.n	8016148 <_dtoa_r+0x960>
 80162b8:	2a00      	cmp	r2, #0
 80162ba:	dd07      	ble.n	80162cc <_dtoa_r+0xae4>
 80162bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80162c0:	d0ed      	beq.n	801629e <_dtoa_r+0xab6>
 80162c2:	f109 0301 	add.w	r3, r9, #1
 80162c6:	9a01      	ldr	r2, [sp, #4]
 80162c8:	7013      	strb	r3, [r2, #0]
 80162ca:	e73d      	b.n	8016148 <_dtoa_r+0x960>
 80162cc:	9b04      	ldr	r3, [sp, #16]
 80162ce:	9a08      	ldr	r2, [sp, #32]
 80162d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80162d4:	4293      	cmp	r3, r2
 80162d6:	d042      	beq.n	801635e <_dtoa_r+0xb76>
 80162d8:	4651      	mov	r1, sl
 80162da:	2300      	movs	r3, #0
 80162dc:	220a      	movs	r2, #10
 80162de:	4620      	mov	r0, r4
 80162e0:	f000 f9d4 	bl	801668c <__multadd>
 80162e4:	45b8      	cmp	r8, r7
 80162e6:	4682      	mov	sl, r0
 80162e8:	f04f 0300 	mov.w	r3, #0
 80162ec:	f04f 020a 	mov.w	r2, #10
 80162f0:	4641      	mov	r1, r8
 80162f2:	4620      	mov	r0, r4
 80162f4:	d107      	bne.n	8016306 <_dtoa_r+0xb1e>
 80162f6:	f000 f9c9 	bl	801668c <__multadd>
 80162fa:	4680      	mov	r8, r0
 80162fc:	4607      	mov	r7, r0
 80162fe:	9b04      	ldr	r3, [sp, #16]
 8016300:	3301      	adds	r3, #1
 8016302:	9304      	str	r3, [sp, #16]
 8016304:	e775      	b.n	80161f2 <_dtoa_r+0xa0a>
 8016306:	f000 f9c1 	bl	801668c <__multadd>
 801630a:	4639      	mov	r1, r7
 801630c:	4680      	mov	r8, r0
 801630e:	2300      	movs	r3, #0
 8016310:	220a      	movs	r2, #10
 8016312:	4620      	mov	r0, r4
 8016314:	f000 f9ba 	bl	801668c <__multadd>
 8016318:	4607      	mov	r7, r0
 801631a:	e7f0      	b.n	80162fe <_dtoa_r+0xb16>
 801631c:	9b04      	ldr	r3, [sp, #16]
 801631e:	9301      	str	r3, [sp, #4]
 8016320:	9d00      	ldr	r5, [sp, #0]
 8016322:	4631      	mov	r1, r6
 8016324:	4650      	mov	r0, sl
 8016326:	f7ff f9cf 	bl	80156c8 <quorem>
 801632a:	9b00      	ldr	r3, [sp, #0]
 801632c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016330:	f805 9b01 	strb.w	r9, [r5], #1
 8016334:	1aea      	subs	r2, r5, r3
 8016336:	9b01      	ldr	r3, [sp, #4]
 8016338:	4293      	cmp	r3, r2
 801633a:	dd07      	ble.n	801634c <_dtoa_r+0xb64>
 801633c:	4651      	mov	r1, sl
 801633e:	2300      	movs	r3, #0
 8016340:	220a      	movs	r2, #10
 8016342:	4620      	mov	r0, r4
 8016344:	f000 f9a2 	bl	801668c <__multadd>
 8016348:	4682      	mov	sl, r0
 801634a:	e7ea      	b.n	8016322 <_dtoa_r+0xb3a>
 801634c:	9b01      	ldr	r3, [sp, #4]
 801634e:	f04f 0800 	mov.w	r8, #0
 8016352:	2b00      	cmp	r3, #0
 8016354:	bfcc      	ite	gt
 8016356:	461d      	movgt	r5, r3
 8016358:	2501      	movle	r5, #1
 801635a:	9b00      	ldr	r3, [sp, #0]
 801635c:	441d      	add	r5, r3
 801635e:	4651      	mov	r1, sl
 8016360:	2201      	movs	r2, #1
 8016362:	4620      	mov	r0, r4
 8016364:	f000 fb42 	bl	80169ec <__lshift>
 8016368:	4631      	mov	r1, r6
 801636a:	4682      	mov	sl, r0
 801636c:	f000 fbaa 	bl	8016ac4 <__mcmp>
 8016370:	2800      	cmp	r0, #0
 8016372:	dc97      	bgt.n	80162a4 <_dtoa_r+0xabc>
 8016374:	d102      	bne.n	801637c <_dtoa_r+0xb94>
 8016376:	f019 0f01 	tst.w	r9, #1
 801637a:	d193      	bne.n	80162a4 <_dtoa_r+0xabc>
 801637c:	462b      	mov	r3, r5
 801637e:	461d      	mov	r5, r3
 8016380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016384:	2a30      	cmp	r2, #48	; 0x30
 8016386:	d0fa      	beq.n	801637e <_dtoa_r+0xb96>
 8016388:	e6de      	b.n	8016148 <_dtoa_r+0x960>
 801638a:	9a00      	ldr	r2, [sp, #0]
 801638c:	429a      	cmp	r2, r3
 801638e:	d18a      	bne.n	80162a6 <_dtoa_r+0xabe>
 8016390:	f10b 0b01 	add.w	fp, fp, #1
 8016394:	2331      	movs	r3, #49	; 0x31
 8016396:	e797      	b.n	80162c8 <_dtoa_r+0xae0>
 8016398:	4b09      	ldr	r3, [pc, #36]	; (80163c0 <_dtoa_r+0xbd8>)
 801639a:	f7ff ba9a 	b.w	80158d2 <_dtoa_r+0xea>
 801639e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	f47f aa6e 	bne.w	8015882 <_dtoa_r+0x9a>
 80163a6:	4b07      	ldr	r3, [pc, #28]	; (80163c4 <_dtoa_r+0xbdc>)
 80163a8:	f7ff ba93 	b.w	80158d2 <_dtoa_r+0xea>
 80163ac:	9b01      	ldr	r3, [sp, #4]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	dcb6      	bgt.n	8016320 <_dtoa_r+0xb38>
 80163b2:	9b07      	ldr	r3, [sp, #28]
 80163b4:	2b02      	cmp	r3, #2
 80163b6:	f73f aeb2 	bgt.w	801611e <_dtoa_r+0x936>
 80163ba:	e7b1      	b.n	8016320 <_dtoa_r+0xb38>
 80163bc:	08017908 	.word	0x08017908
 80163c0:	08017868 	.word	0x08017868
 80163c4:	0801788c 	.word	0x0801788c

080163c8 <_free_r>:
 80163c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163ca:	2900      	cmp	r1, #0
 80163cc:	d043      	beq.n	8016456 <_free_r+0x8e>
 80163ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163d2:	1f0c      	subs	r4, r1, #4
 80163d4:	9001      	str	r0, [sp, #4]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	bfb8      	it	lt
 80163da:	18e4      	addlt	r4, r4, r3
 80163dc:	f000 f8e8 	bl	80165b0 <__malloc_lock>
 80163e0:	4a1e      	ldr	r2, [pc, #120]	; (801645c <_free_r+0x94>)
 80163e2:	9801      	ldr	r0, [sp, #4]
 80163e4:	6813      	ldr	r3, [r2, #0]
 80163e6:	b933      	cbnz	r3, 80163f6 <_free_r+0x2e>
 80163e8:	6063      	str	r3, [r4, #4]
 80163ea:	6014      	str	r4, [r2, #0]
 80163ec:	b003      	add	sp, #12
 80163ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163f2:	f000 b8e3 	b.w	80165bc <__malloc_unlock>
 80163f6:	42a3      	cmp	r3, r4
 80163f8:	d908      	bls.n	801640c <_free_r+0x44>
 80163fa:	6825      	ldr	r5, [r4, #0]
 80163fc:	1961      	adds	r1, r4, r5
 80163fe:	428b      	cmp	r3, r1
 8016400:	bf01      	itttt	eq
 8016402:	6819      	ldreq	r1, [r3, #0]
 8016404:	685b      	ldreq	r3, [r3, #4]
 8016406:	1949      	addeq	r1, r1, r5
 8016408:	6021      	streq	r1, [r4, #0]
 801640a:	e7ed      	b.n	80163e8 <_free_r+0x20>
 801640c:	461a      	mov	r2, r3
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	b10b      	cbz	r3, 8016416 <_free_r+0x4e>
 8016412:	42a3      	cmp	r3, r4
 8016414:	d9fa      	bls.n	801640c <_free_r+0x44>
 8016416:	6811      	ldr	r1, [r2, #0]
 8016418:	1855      	adds	r5, r2, r1
 801641a:	42a5      	cmp	r5, r4
 801641c:	d10b      	bne.n	8016436 <_free_r+0x6e>
 801641e:	6824      	ldr	r4, [r4, #0]
 8016420:	4421      	add	r1, r4
 8016422:	1854      	adds	r4, r2, r1
 8016424:	6011      	str	r1, [r2, #0]
 8016426:	42a3      	cmp	r3, r4
 8016428:	d1e0      	bne.n	80163ec <_free_r+0x24>
 801642a:	681c      	ldr	r4, [r3, #0]
 801642c:	685b      	ldr	r3, [r3, #4]
 801642e:	440c      	add	r4, r1
 8016430:	6053      	str	r3, [r2, #4]
 8016432:	6014      	str	r4, [r2, #0]
 8016434:	e7da      	b.n	80163ec <_free_r+0x24>
 8016436:	d902      	bls.n	801643e <_free_r+0x76>
 8016438:	230c      	movs	r3, #12
 801643a:	6003      	str	r3, [r0, #0]
 801643c:	e7d6      	b.n	80163ec <_free_r+0x24>
 801643e:	6825      	ldr	r5, [r4, #0]
 8016440:	1961      	adds	r1, r4, r5
 8016442:	428b      	cmp	r3, r1
 8016444:	bf02      	ittt	eq
 8016446:	6819      	ldreq	r1, [r3, #0]
 8016448:	685b      	ldreq	r3, [r3, #4]
 801644a:	1949      	addeq	r1, r1, r5
 801644c:	6063      	str	r3, [r4, #4]
 801644e:	bf08      	it	eq
 8016450:	6021      	streq	r1, [r4, #0]
 8016452:	6054      	str	r4, [r2, #4]
 8016454:	e7ca      	b.n	80163ec <_free_r+0x24>
 8016456:	b003      	add	sp, #12
 8016458:	bd30      	pop	{r4, r5, pc}
 801645a:	bf00      	nop
 801645c:	20027b14 	.word	0x20027b14

08016460 <malloc>:
 8016460:	4b02      	ldr	r3, [pc, #8]	; (801646c <malloc+0xc>)
 8016462:	4601      	mov	r1, r0
 8016464:	6818      	ldr	r0, [r3, #0]
 8016466:	f000 b823 	b.w	80164b0 <_malloc_r>
 801646a:	bf00      	nop
 801646c:	200000d8 	.word	0x200000d8

08016470 <sbrk_aligned>:
 8016470:	b570      	push	{r4, r5, r6, lr}
 8016472:	4e0e      	ldr	r6, [pc, #56]	; (80164ac <sbrk_aligned+0x3c>)
 8016474:	460c      	mov	r4, r1
 8016476:	4605      	mov	r5, r0
 8016478:	6831      	ldr	r1, [r6, #0]
 801647a:	b911      	cbnz	r1, 8016482 <sbrk_aligned+0x12>
 801647c:	f000 feae 	bl	80171dc <_sbrk_r>
 8016480:	6030      	str	r0, [r6, #0]
 8016482:	4621      	mov	r1, r4
 8016484:	4628      	mov	r0, r5
 8016486:	f000 fea9 	bl	80171dc <_sbrk_r>
 801648a:	1c43      	adds	r3, r0, #1
 801648c:	d00a      	beq.n	80164a4 <sbrk_aligned+0x34>
 801648e:	1cc4      	adds	r4, r0, #3
 8016490:	f024 0403 	bic.w	r4, r4, #3
 8016494:	42a0      	cmp	r0, r4
 8016496:	d007      	beq.n	80164a8 <sbrk_aligned+0x38>
 8016498:	1a21      	subs	r1, r4, r0
 801649a:	4628      	mov	r0, r5
 801649c:	f000 fe9e 	bl	80171dc <_sbrk_r>
 80164a0:	3001      	adds	r0, #1
 80164a2:	d101      	bne.n	80164a8 <sbrk_aligned+0x38>
 80164a4:	f04f 34ff 	mov.w	r4, #4294967295
 80164a8:	4620      	mov	r0, r4
 80164aa:	bd70      	pop	{r4, r5, r6, pc}
 80164ac:	20027b18 	.word	0x20027b18

080164b0 <_malloc_r>:
 80164b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164b4:	1ccd      	adds	r5, r1, #3
 80164b6:	4607      	mov	r7, r0
 80164b8:	f025 0503 	bic.w	r5, r5, #3
 80164bc:	3508      	adds	r5, #8
 80164be:	2d0c      	cmp	r5, #12
 80164c0:	bf38      	it	cc
 80164c2:	250c      	movcc	r5, #12
 80164c4:	2d00      	cmp	r5, #0
 80164c6:	db01      	blt.n	80164cc <_malloc_r+0x1c>
 80164c8:	42a9      	cmp	r1, r5
 80164ca:	d905      	bls.n	80164d8 <_malloc_r+0x28>
 80164cc:	230c      	movs	r3, #12
 80164ce:	2600      	movs	r6, #0
 80164d0:	603b      	str	r3, [r7, #0]
 80164d2:	4630      	mov	r0, r6
 80164d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80165ac <_malloc_r+0xfc>
 80164dc:	f000 f868 	bl	80165b0 <__malloc_lock>
 80164e0:	f8d8 3000 	ldr.w	r3, [r8]
 80164e4:	461c      	mov	r4, r3
 80164e6:	bb5c      	cbnz	r4, 8016540 <_malloc_r+0x90>
 80164e8:	4629      	mov	r1, r5
 80164ea:	4638      	mov	r0, r7
 80164ec:	f7ff ffc0 	bl	8016470 <sbrk_aligned>
 80164f0:	1c43      	adds	r3, r0, #1
 80164f2:	4604      	mov	r4, r0
 80164f4:	d155      	bne.n	80165a2 <_malloc_r+0xf2>
 80164f6:	f8d8 4000 	ldr.w	r4, [r8]
 80164fa:	4626      	mov	r6, r4
 80164fc:	2e00      	cmp	r6, #0
 80164fe:	d145      	bne.n	801658c <_malloc_r+0xdc>
 8016500:	2c00      	cmp	r4, #0
 8016502:	d048      	beq.n	8016596 <_malloc_r+0xe6>
 8016504:	6823      	ldr	r3, [r4, #0]
 8016506:	4631      	mov	r1, r6
 8016508:	4638      	mov	r0, r7
 801650a:	eb04 0903 	add.w	r9, r4, r3
 801650e:	f000 fe65 	bl	80171dc <_sbrk_r>
 8016512:	4581      	cmp	r9, r0
 8016514:	d13f      	bne.n	8016596 <_malloc_r+0xe6>
 8016516:	6821      	ldr	r1, [r4, #0]
 8016518:	4638      	mov	r0, r7
 801651a:	1a6d      	subs	r5, r5, r1
 801651c:	4629      	mov	r1, r5
 801651e:	f7ff ffa7 	bl	8016470 <sbrk_aligned>
 8016522:	3001      	adds	r0, #1
 8016524:	d037      	beq.n	8016596 <_malloc_r+0xe6>
 8016526:	6823      	ldr	r3, [r4, #0]
 8016528:	442b      	add	r3, r5
 801652a:	6023      	str	r3, [r4, #0]
 801652c:	f8d8 3000 	ldr.w	r3, [r8]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d038      	beq.n	80165a6 <_malloc_r+0xf6>
 8016534:	685a      	ldr	r2, [r3, #4]
 8016536:	42a2      	cmp	r2, r4
 8016538:	d12b      	bne.n	8016592 <_malloc_r+0xe2>
 801653a:	2200      	movs	r2, #0
 801653c:	605a      	str	r2, [r3, #4]
 801653e:	e00f      	b.n	8016560 <_malloc_r+0xb0>
 8016540:	6822      	ldr	r2, [r4, #0]
 8016542:	1b52      	subs	r2, r2, r5
 8016544:	d41f      	bmi.n	8016586 <_malloc_r+0xd6>
 8016546:	2a0b      	cmp	r2, #11
 8016548:	d917      	bls.n	801657a <_malloc_r+0xca>
 801654a:	1961      	adds	r1, r4, r5
 801654c:	42a3      	cmp	r3, r4
 801654e:	6025      	str	r5, [r4, #0]
 8016550:	bf18      	it	ne
 8016552:	6059      	strne	r1, [r3, #4]
 8016554:	6863      	ldr	r3, [r4, #4]
 8016556:	bf08      	it	eq
 8016558:	f8c8 1000 	streq.w	r1, [r8]
 801655c:	5162      	str	r2, [r4, r5]
 801655e:	604b      	str	r3, [r1, #4]
 8016560:	f104 060b 	add.w	r6, r4, #11
 8016564:	4638      	mov	r0, r7
 8016566:	f000 f829 	bl	80165bc <__malloc_unlock>
 801656a:	1d23      	adds	r3, r4, #4
 801656c:	f026 0607 	bic.w	r6, r6, #7
 8016570:	1af2      	subs	r2, r6, r3
 8016572:	d0ae      	beq.n	80164d2 <_malloc_r+0x22>
 8016574:	1b9b      	subs	r3, r3, r6
 8016576:	50a3      	str	r3, [r4, r2]
 8016578:	e7ab      	b.n	80164d2 <_malloc_r+0x22>
 801657a:	42a3      	cmp	r3, r4
 801657c:	6862      	ldr	r2, [r4, #4]
 801657e:	d1dd      	bne.n	801653c <_malloc_r+0x8c>
 8016580:	f8c8 2000 	str.w	r2, [r8]
 8016584:	e7ec      	b.n	8016560 <_malloc_r+0xb0>
 8016586:	4623      	mov	r3, r4
 8016588:	6864      	ldr	r4, [r4, #4]
 801658a:	e7ac      	b.n	80164e6 <_malloc_r+0x36>
 801658c:	4634      	mov	r4, r6
 801658e:	6876      	ldr	r6, [r6, #4]
 8016590:	e7b4      	b.n	80164fc <_malloc_r+0x4c>
 8016592:	4613      	mov	r3, r2
 8016594:	e7cc      	b.n	8016530 <_malloc_r+0x80>
 8016596:	230c      	movs	r3, #12
 8016598:	4638      	mov	r0, r7
 801659a:	603b      	str	r3, [r7, #0]
 801659c:	f000 f80e 	bl	80165bc <__malloc_unlock>
 80165a0:	e797      	b.n	80164d2 <_malloc_r+0x22>
 80165a2:	6025      	str	r5, [r4, #0]
 80165a4:	e7dc      	b.n	8016560 <_malloc_r+0xb0>
 80165a6:	605b      	str	r3, [r3, #4]
 80165a8:	deff      	udf	#255	; 0xff
 80165aa:	bf00      	nop
 80165ac:	20027b14 	.word	0x20027b14

080165b0 <__malloc_lock>:
 80165b0:	4801      	ldr	r0, [pc, #4]	; (80165b8 <__malloc_lock+0x8>)
 80165b2:	f7ff b86c 	b.w	801568e <__retarget_lock_acquire_recursive>
 80165b6:	bf00      	nop
 80165b8:	20027b10 	.word	0x20027b10

080165bc <__malloc_unlock>:
 80165bc:	4801      	ldr	r0, [pc, #4]	; (80165c4 <__malloc_unlock+0x8>)
 80165be:	f7ff b867 	b.w	8015690 <__retarget_lock_release_recursive>
 80165c2:	bf00      	nop
 80165c4:	20027b10 	.word	0x20027b10

080165c8 <_Balloc>:
 80165c8:	b570      	push	{r4, r5, r6, lr}
 80165ca:	69c6      	ldr	r6, [r0, #28]
 80165cc:	4604      	mov	r4, r0
 80165ce:	460d      	mov	r5, r1
 80165d0:	b976      	cbnz	r6, 80165f0 <_Balloc+0x28>
 80165d2:	2010      	movs	r0, #16
 80165d4:	f7ff ff44 	bl	8016460 <malloc>
 80165d8:	4602      	mov	r2, r0
 80165da:	61e0      	str	r0, [r4, #28]
 80165dc:	b920      	cbnz	r0, 80165e8 <_Balloc+0x20>
 80165de:	4b18      	ldr	r3, [pc, #96]	; (8016640 <_Balloc+0x78>)
 80165e0:	216b      	movs	r1, #107	; 0x6b
 80165e2:	4818      	ldr	r0, [pc, #96]	; (8016644 <_Balloc+0x7c>)
 80165e4:	f000 fe0a 	bl	80171fc <__assert_func>
 80165e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80165ec:	6006      	str	r6, [r0, #0]
 80165ee:	60c6      	str	r6, [r0, #12]
 80165f0:	69e6      	ldr	r6, [r4, #28]
 80165f2:	68f3      	ldr	r3, [r6, #12]
 80165f4:	b183      	cbz	r3, 8016618 <_Balloc+0x50>
 80165f6:	69e3      	ldr	r3, [r4, #28]
 80165f8:	68db      	ldr	r3, [r3, #12]
 80165fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80165fe:	b9b8      	cbnz	r0, 8016630 <_Balloc+0x68>
 8016600:	2101      	movs	r1, #1
 8016602:	4620      	mov	r0, r4
 8016604:	fa01 f605 	lsl.w	r6, r1, r5
 8016608:	1d72      	adds	r2, r6, #5
 801660a:	0092      	lsls	r2, r2, #2
 801660c:	f000 fe14 	bl	8017238 <_calloc_r>
 8016610:	b160      	cbz	r0, 801662c <_Balloc+0x64>
 8016612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016616:	e00e      	b.n	8016636 <_Balloc+0x6e>
 8016618:	2221      	movs	r2, #33	; 0x21
 801661a:	2104      	movs	r1, #4
 801661c:	4620      	mov	r0, r4
 801661e:	f000 fe0b 	bl	8017238 <_calloc_r>
 8016622:	69e3      	ldr	r3, [r4, #28]
 8016624:	60f0      	str	r0, [r6, #12]
 8016626:	68db      	ldr	r3, [r3, #12]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d1e4      	bne.n	80165f6 <_Balloc+0x2e>
 801662c:	2000      	movs	r0, #0
 801662e:	bd70      	pop	{r4, r5, r6, pc}
 8016630:	6802      	ldr	r2, [r0, #0]
 8016632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016636:	2300      	movs	r3, #0
 8016638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801663c:	e7f7      	b.n	801662e <_Balloc+0x66>
 801663e:	bf00      	nop
 8016640:	08017899 	.word	0x08017899
 8016644:	08017919 	.word	0x08017919

08016648 <_Bfree>:
 8016648:	b570      	push	{r4, r5, r6, lr}
 801664a:	69c6      	ldr	r6, [r0, #28]
 801664c:	4605      	mov	r5, r0
 801664e:	460c      	mov	r4, r1
 8016650:	b976      	cbnz	r6, 8016670 <_Bfree+0x28>
 8016652:	2010      	movs	r0, #16
 8016654:	f7ff ff04 	bl	8016460 <malloc>
 8016658:	4602      	mov	r2, r0
 801665a:	61e8      	str	r0, [r5, #28]
 801665c:	b920      	cbnz	r0, 8016668 <_Bfree+0x20>
 801665e:	4b09      	ldr	r3, [pc, #36]	; (8016684 <_Bfree+0x3c>)
 8016660:	218f      	movs	r1, #143	; 0x8f
 8016662:	4809      	ldr	r0, [pc, #36]	; (8016688 <_Bfree+0x40>)
 8016664:	f000 fdca 	bl	80171fc <__assert_func>
 8016668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801666c:	6006      	str	r6, [r0, #0]
 801666e:	60c6      	str	r6, [r0, #12]
 8016670:	b13c      	cbz	r4, 8016682 <_Bfree+0x3a>
 8016672:	69eb      	ldr	r3, [r5, #28]
 8016674:	6862      	ldr	r2, [r4, #4]
 8016676:	68db      	ldr	r3, [r3, #12]
 8016678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801667c:	6021      	str	r1, [r4, #0]
 801667e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016682:	bd70      	pop	{r4, r5, r6, pc}
 8016684:	08017899 	.word	0x08017899
 8016688:	08017919 	.word	0x08017919

0801668c <__multadd>:
 801668c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016690:	f101 0c14 	add.w	ip, r1, #20
 8016694:	4607      	mov	r7, r0
 8016696:	460c      	mov	r4, r1
 8016698:	461e      	mov	r6, r3
 801669a:	690d      	ldr	r5, [r1, #16]
 801669c:	2000      	movs	r0, #0
 801669e:	f8dc 3000 	ldr.w	r3, [ip]
 80166a2:	3001      	adds	r0, #1
 80166a4:	b299      	uxth	r1, r3
 80166a6:	4285      	cmp	r5, r0
 80166a8:	fb02 6101 	mla	r1, r2, r1, r6
 80166ac:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80166b0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80166b4:	b289      	uxth	r1, r1
 80166b6:	fb02 3306 	mla	r3, r2, r6, r3
 80166ba:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80166be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80166c2:	f84c 1b04 	str.w	r1, [ip], #4
 80166c6:	dcea      	bgt.n	801669e <__multadd+0x12>
 80166c8:	b30e      	cbz	r6, 801670e <__multadd+0x82>
 80166ca:	68a3      	ldr	r3, [r4, #8]
 80166cc:	42ab      	cmp	r3, r5
 80166ce:	dc19      	bgt.n	8016704 <__multadd+0x78>
 80166d0:	6861      	ldr	r1, [r4, #4]
 80166d2:	4638      	mov	r0, r7
 80166d4:	3101      	adds	r1, #1
 80166d6:	f7ff ff77 	bl	80165c8 <_Balloc>
 80166da:	4680      	mov	r8, r0
 80166dc:	b928      	cbnz	r0, 80166ea <__multadd+0x5e>
 80166de:	4602      	mov	r2, r0
 80166e0:	4b0c      	ldr	r3, [pc, #48]	; (8016714 <__multadd+0x88>)
 80166e2:	21ba      	movs	r1, #186	; 0xba
 80166e4:	480c      	ldr	r0, [pc, #48]	; (8016718 <__multadd+0x8c>)
 80166e6:	f000 fd89 	bl	80171fc <__assert_func>
 80166ea:	6922      	ldr	r2, [r4, #16]
 80166ec:	f104 010c 	add.w	r1, r4, #12
 80166f0:	300c      	adds	r0, #12
 80166f2:	3202      	adds	r2, #2
 80166f4:	0092      	lsls	r2, r2, #2
 80166f6:	f7fe ffda 	bl	80156ae <memcpy>
 80166fa:	4621      	mov	r1, r4
 80166fc:	4644      	mov	r4, r8
 80166fe:	4638      	mov	r0, r7
 8016700:	f7ff ffa2 	bl	8016648 <_Bfree>
 8016704:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016708:	3501      	adds	r5, #1
 801670a:	615e      	str	r6, [r3, #20]
 801670c:	6125      	str	r5, [r4, #16]
 801670e:	4620      	mov	r0, r4
 8016710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016714:	08017908 	.word	0x08017908
 8016718:	08017919 	.word	0x08017919

0801671c <__hi0bits>:
 801671c:	0c03      	lsrs	r3, r0, #16
 801671e:	041b      	lsls	r3, r3, #16
 8016720:	b9d3      	cbnz	r3, 8016758 <__hi0bits+0x3c>
 8016722:	0400      	lsls	r0, r0, #16
 8016724:	2310      	movs	r3, #16
 8016726:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801672a:	bf04      	itt	eq
 801672c:	0200      	lsleq	r0, r0, #8
 801672e:	3308      	addeq	r3, #8
 8016730:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016734:	bf04      	itt	eq
 8016736:	0100      	lsleq	r0, r0, #4
 8016738:	3304      	addeq	r3, #4
 801673a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801673e:	bf04      	itt	eq
 8016740:	0080      	lsleq	r0, r0, #2
 8016742:	3302      	addeq	r3, #2
 8016744:	2800      	cmp	r0, #0
 8016746:	db05      	blt.n	8016754 <__hi0bits+0x38>
 8016748:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801674c:	f103 0301 	add.w	r3, r3, #1
 8016750:	bf08      	it	eq
 8016752:	2320      	moveq	r3, #32
 8016754:	4618      	mov	r0, r3
 8016756:	4770      	bx	lr
 8016758:	2300      	movs	r3, #0
 801675a:	e7e4      	b.n	8016726 <__hi0bits+0xa>

0801675c <__lo0bits>:
 801675c:	6803      	ldr	r3, [r0, #0]
 801675e:	f013 0207 	ands.w	r2, r3, #7
 8016762:	d00c      	beq.n	801677e <__lo0bits+0x22>
 8016764:	07d9      	lsls	r1, r3, #31
 8016766:	d422      	bmi.n	80167ae <__lo0bits+0x52>
 8016768:	079a      	lsls	r2, r3, #30
 801676a:	bf47      	ittee	mi
 801676c:	085b      	lsrmi	r3, r3, #1
 801676e:	2201      	movmi	r2, #1
 8016770:	089b      	lsrpl	r3, r3, #2
 8016772:	2202      	movpl	r2, #2
 8016774:	bf4c      	ite	mi
 8016776:	6003      	strmi	r3, [r0, #0]
 8016778:	6003      	strpl	r3, [r0, #0]
 801677a:	4610      	mov	r0, r2
 801677c:	4770      	bx	lr
 801677e:	b299      	uxth	r1, r3
 8016780:	b909      	cbnz	r1, 8016786 <__lo0bits+0x2a>
 8016782:	0c1b      	lsrs	r3, r3, #16
 8016784:	2210      	movs	r2, #16
 8016786:	b2d9      	uxtb	r1, r3
 8016788:	b909      	cbnz	r1, 801678e <__lo0bits+0x32>
 801678a:	3208      	adds	r2, #8
 801678c:	0a1b      	lsrs	r3, r3, #8
 801678e:	0719      	lsls	r1, r3, #28
 8016790:	bf04      	itt	eq
 8016792:	091b      	lsreq	r3, r3, #4
 8016794:	3204      	addeq	r2, #4
 8016796:	0799      	lsls	r1, r3, #30
 8016798:	bf04      	itt	eq
 801679a:	089b      	lsreq	r3, r3, #2
 801679c:	3202      	addeq	r2, #2
 801679e:	07d9      	lsls	r1, r3, #31
 80167a0:	d403      	bmi.n	80167aa <__lo0bits+0x4e>
 80167a2:	085b      	lsrs	r3, r3, #1
 80167a4:	f102 0201 	add.w	r2, r2, #1
 80167a8:	d003      	beq.n	80167b2 <__lo0bits+0x56>
 80167aa:	6003      	str	r3, [r0, #0]
 80167ac:	e7e5      	b.n	801677a <__lo0bits+0x1e>
 80167ae:	2200      	movs	r2, #0
 80167b0:	e7e3      	b.n	801677a <__lo0bits+0x1e>
 80167b2:	2220      	movs	r2, #32
 80167b4:	e7e1      	b.n	801677a <__lo0bits+0x1e>
	...

080167b8 <__i2b>:
 80167b8:	b510      	push	{r4, lr}
 80167ba:	460c      	mov	r4, r1
 80167bc:	2101      	movs	r1, #1
 80167be:	f7ff ff03 	bl	80165c8 <_Balloc>
 80167c2:	4602      	mov	r2, r0
 80167c4:	b928      	cbnz	r0, 80167d2 <__i2b+0x1a>
 80167c6:	4b05      	ldr	r3, [pc, #20]	; (80167dc <__i2b+0x24>)
 80167c8:	f240 1145 	movw	r1, #325	; 0x145
 80167cc:	4804      	ldr	r0, [pc, #16]	; (80167e0 <__i2b+0x28>)
 80167ce:	f000 fd15 	bl	80171fc <__assert_func>
 80167d2:	2301      	movs	r3, #1
 80167d4:	6144      	str	r4, [r0, #20]
 80167d6:	6103      	str	r3, [r0, #16]
 80167d8:	bd10      	pop	{r4, pc}
 80167da:	bf00      	nop
 80167dc:	08017908 	.word	0x08017908
 80167e0:	08017919 	.word	0x08017919

080167e4 <__multiply>:
 80167e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e8:	4691      	mov	r9, r2
 80167ea:	690a      	ldr	r2, [r1, #16]
 80167ec:	460c      	mov	r4, r1
 80167ee:	b085      	sub	sp, #20
 80167f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80167f4:	429a      	cmp	r2, r3
 80167f6:	bfbe      	ittt	lt
 80167f8:	460b      	movlt	r3, r1
 80167fa:	464c      	movlt	r4, r9
 80167fc:	4699      	movlt	r9, r3
 80167fe:	6927      	ldr	r7, [r4, #16]
 8016800:	68a3      	ldr	r3, [r4, #8]
 8016802:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016806:	6861      	ldr	r1, [r4, #4]
 8016808:	eb07 060a 	add.w	r6, r7, sl
 801680c:	42b3      	cmp	r3, r6
 801680e:	bfb8      	it	lt
 8016810:	3101      	addlt	r1, #1
 8016812:	f7ff fed9 	bl	80165c8 <_Balloc>
 8016816:	b930      	cbnz	r0, 8016826 <__multiply+0x42>
 8016818:	4602      	mov	r2, r0
 801681a:	4b45      	ldr	r3, [pc, #276]	; (8016930 <__multiply+0x14c>)
 801681c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016820:	4844      	ldr	r0, [pc, #272]	; (8016934 <__multiply+0x150>)
 8016822:	f000 fceb 	bl	80171fc <__assert_func>
 8016826:	f100 0514 	add.w	r5, r0, #20
 801682a:	2200      	movs	r2, #0
 801682c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016830:	462b      	mov	r3, r5
 8016832:	4543      	cmp	r3, r8
 8016834:	d321      	bcc.n	801687a <__multiply+0x96>
 8016836:	f104 0314 	add.w	r3, r4, #20
 801683a:	f104 0115 	add.w	r1, r4, #21
 801683e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016842:	f109 0314 	add.w	r3, r9, #20
 8016846:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801684a:	9202      	str	r2, [sp, #8]
 801684c:	1b3a      	subs	r2, r7, r4
 801684e:	3a15      	subs	r2, #21
 8016850:	f022 0203 	bic.w	r2, r2, #3
 8016854:	3204      	adds	r2, #4
 8016856:	428f      	cmp	r7, r1
 8016858:	bf38      	it	cc
 801685a:	2204      	movcc	r2, #4
 801685c:	9201      	str	r2, [sp, #4]
 801685e:	9a02      	ldr	r2, [sp, #8]
 8016860:	9303      	str	r3, [sp, #12]
 8016862:	429a      	cmp	r2, r3
 8016864:	d80c      	bhi.n	8016880 <__multiply+0x9c>
 8016866:	2e00      	cmp	r6, #0
 8016868:	dd03      	ble.n	8016872 <__multiply+0x8e>
 801686a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801686e:	2b00      	cmp	r3, #0
 8016870:	d05b      	beq.n	801692a <__multiply+0x146>
 8016872:	6106      	str	r6, [r0, #16]
 8016874:	b005      	add	sp, #20
 8016876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801687a:	f843 2b04 	str.w	r2, [r3], #4
 801687e:	e7d8      	b.n	8016832 <__multiply+0x4e>
 8016880:	f8b3 a000 	ldrh.w	sl, [r3]
 8016884:	f1ba 0f00 	cmp.w	sl, #0
 8016888:	d024      	beq.n	80168d4 <__multiply+0xf0>
 801688a:	f104 0e14 	add.w	lr, r4, #20
 801688e:	46a9      	mov	r9, r5
 8016890:	f04f 0c00 	mov.w	ip, #0
 8016894:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016898:	f8d9 1000 	ldr.w	r1, [r9]
 801689c:	fa1f fb82 	uxth.w	fp, r2
 80168a0:	4577      	cmp	r7, lr
 80168a2:	b289      	uxth	r1, r1
 80168a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80168a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80168ac:	f8d9 2000 	ldr.w	r2, [r9]
 80168b0:	4461      	add	r1, ip
 80168b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80168b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80168ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80168be:	b289      	uxth	r1, r1
 80168c0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80168c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80168c8:	f849 1b04 	str.w	r1, [r9], #4
 80168cc:	d8e2      	bhi.n	8016894 <__multiply+0xb0>
 80168ce:	9a01      	ldr	r2, [sp, #4]
 80168d0:	f845 c002 	str.w	ip, [r5, r2]
 80168d4:	9a03      	ldr	r2, [sp, #12]
 80168d6:	3304      	adds	r3, #4
 80168d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80168dc:	f1b9 0f00 	cmp.w	r9, #0
 80168e0:	d021      	beq.n	8016926 <__multiply+0x142>
 80168e2:	6829      	ldr	r1, [r5, #0]
 80168e4:	f104 0c14 	add.w	ip, r4, #20
 80168e8:	46ae      	mov	lr, r5
 80168ea:	f04f 0a00 	mov.w	sl, #0
 80168ee:	f8bc b000 	ldrh.w	fp, [ip]
 80168f2:	b289      	uxth	r1, r1
 80168f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80168f8:	fb09 220b 	mla	r2, r9, fp, r2
 80168fc:	4452      	add	r2, sl
 80168fe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016902:	f84e 1b04 	str.w	r1, [lr], #4
 8016906:	f85c 1b04 	ldr.w	r1, [ip], #4
 801690a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801690e:	f8be 1000 	ldrh.w	r1, [lr]
 8016912:	4567      	cmp	r7, ip
 8016914:	fb09 110a 	mla	r1, r9, sl, r1
 8016918:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801691c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016920:	d8e5      	bhi.n	80168ee <__multiply+0x10a>
 8016922:	9a01      	ldr	r2, [sp, #4]
 8016924:	50a9      	str	r1, [r5, r2]
 8016926:	3504      	adds	r5, #4
 8016928:	e799      	b.n	801685e <__multiply+0x7a>
 801692a:	3e01      	subs	r6, #1
 801692c:	e79b      	b.n	8016866 <__multiply+0x82>
 801692e:	bf00      	nop
 8016930:	08017908 	.word	0x08017908
 8016934:	08017919 	.word	0x08017919

08016938 <__pow5mult>:
 8016938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801693c:	4615      	mov	r5, r2
 801693e:	f012 0203 	ands.w	r2, r2, #3
 8016942:	4606      	mov	r6, r0
 8016944:	460f      	mov	r7, r1
 8016946:	d007      	beq.n	8016958 <__pow5mult+0x20>
 8016948:	3a01      	subs	r2, #1
 801694a:	4c25      	ldr	r4, [pc, #148]	; (80169e0 <__pow5mult+0xa8>)
 801694c:	2300      	movs	r3, #0
 801694e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016952:	f7ff fe9b 	bl	801668c <__multadd>
 8016956:	4607      	mov	r7, r0
 8016958:	10ad      	asrs	r5, r5, #2
 801695a:	d03d      	beq.n	80169d8 <__pow5mult+0xa0>
 801695c:	69f4      	ldr	r4, [r6, #28]
 801695e:	b97c      	cbnz	r4, 8016980 <__pow5mult+0x48>
 8016960:	2010      	movs	r0, #16
 8016962:	f7ff fd7d 	bl	8016460 <malloc>
 8016966:	4602      	mov	r2, r0
 8016968:	61f0      	str	r0, [r6, #28]
 801696a:	b928      	cbnz	r0, 8016978 <__pow5mult+0x40>
 801696c:	4b1d      	ldr	r3, [pc, #116]	; (80169e4 <__pow5mult+0xac>)
 801696e:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016972:	481d      	ldr	r0, [pc, #116]	; (80169e8 <__pow5mult+0xb0>)
 8016974:	f000 fc42 	bl	80171fc <__assert_func>
 8016978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801697c:	6004      	str	r4, [r0, #0]
 801697e:	60c4      	str	r4, [r0, #12]
 8016980:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016988:	b94c      	cbnz	r4, 801699e <__pow5mult+0x66>
 801698a:	f240 2171 	movw	r1, #625	; 0x271
 801698e:	4630      	mov	r0, r6
 8016990:	f7ff ff12 	bl	80167b8 <__i2b>
 8016994:	2300      	movs	r3, #0
 8016996:	4604      	mov	r4, r0
 8016998:	f8c8 0008 	str.w	r0, [r8, #8]
 801699c:	6003      	str	r3, [r0, #0]
 801699e:	f04f 0900 	mov.w	r9, #0
 80169a2:	07eb      	lsls	r3, r5, #31
 80169a4:	d50a      	bpl.n	80169bc <__pow5mult+0x84>
 80169a6:	4639      	mov	r1, r7
 80169a8:	4622      	mov	r2, r4
 80169aa:	4630      	mov	r0, r6
 80169ac:	f7ff ff1a 	bl	80167e4 <__multiply>
 80169b0:	4680      	mov	r8, r0
 80169b2:	4639      	mov	r1, r7
 80169b4:	4630      	mov	r0, r6
 80169b6:	4647      	mov	r7, r8
 80169b8:	f7ff fe46 	bl	8016648 <_Bfree>
 80169bc:	106d      	asrs	r5, r5, #1
 80169be:	d00b      	beq.n	80169d8 <__pow5mult+0xa0>
 80169c0:	6820      	ldr	r0, [r4, #0]
 80169c2:	b938      	cbnz	r0, 80169d4 <__pow5mult+0x9c>
 80169c4:	4622      	mov	r2, r4
 80169c6:	4621      	mov	r1, r4
 80169c8:	4630      	mov	r0, r6
 80169ca:	f7ff ff0b 	bl	80167e4 <__multiply>
 80169ce:	6020      	str	r0, [r4, #0]
 80169d0:	f8c0 9000 	str.w	r9, [r0]
 80169d4:	4604      	mov	r4, r0
 80169d6:	e7e4      	b.n	80169a2 <__pow5mult+0x6a>
 80169d8:	4638      	mov	r0, r7
 80169da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169de:	bf00      	nop
 80169e0:	08017a68 	.word	0x08017a68
 80169e4:	08017899 	.word	0x08017899
 80169e8:	08017919 	.word	0x08017919

080169ec <__lshift>:
 80169ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169f0:	460c      	mov	r4, r1
 80169f2:	4607      	mov	r7, r0
 80169f4:	4691      	mov	r9, r2
 80169f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80169fa:	6923      	ldr	r3, [r4, #16]
 80169fc:	6849      	ldr	r1, [r1, #4]
 80169fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016a02:	68a3      	ldr	r3, [r4, #8]
 8016a04:	f108 0601 	add.w	r6, r8, #1
 8016a08:	42b3      	cmp	r3, r6
 8016a0a:	db0b      	blt.n	8016a24 <__lshift+0x38>
 8016a0c:	4638      	mov	r0, r7
 8016a0e:	f7ff fddb 	bl	80165c8 <_Balloc>
 8016a12:	4605      	mov	r5, r0
 8016a14:	b948      	cbnz	r0, 8016a2a <__lshift+0x3e>
 8016a16:	4602      	mov	r2, r0
 8016a18:	4b28      	ldr	r3, [pc, #160]	; (8016abc <__lshift+0xd0>)
 8016a1a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016a1e:	4828      	ldr	r0, [pc, #160]	; (8016ac0 <__lshift+0xd4>)
 8016a20:	f000 fbec 	bl	80171fc <__assert_func>
 8016a24:	3101      	adds	r1, #1
 8016a26:	005b      	lsls	r3, r3, #1
 8016a28:	e7ee      	b.n	8016a08 <__lshift+0x1c>
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	f100 0114 	add.w	r1, r0, #20
 8016a30:	f100 0210 	add.w	r2, r0, #16
 8016a34:	4618      	mov	r0, r3
 8016a36:	4553      	cmp	r3, sl
 8016a38:	db33      	blt.n	8016aa2 <__lshift+0xb6>
 8016a3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016a3e:	f104 0314 	add.w	r3, r4, #20
 8016a42:	6920      	ldr	r0, [r4, #16]
 8016a44:	f019 091f 	ands.w	r9, r9, #31
 8016a48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016a4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016a50:	d02b      	beq.n	8016aaa <__lshift+0xbe>
 8016a52:	f1c9 0e20 	rsb	lr, r9, #32
 8016a56:	468a      	mov	sl, r1
 8016a58:	2200      	movs	r2, #0
 8016a5a:	6818      	ldr	r0, [r3, #0]
 8016a5c:	fa00 f009 	lsl.w	r0, r0, r9
 8016a60:	4310      	orrs	r0, r2
 8016a62:	f84a 0b04 	str.w	r0, [sl], #4
 8016a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a6a:	459c      	cmp	ip, r3
 8016a6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016a70:	d8f3      	bhi.n	8016a5a <__lshift+0x6e>
 8016a72:	ebac 0304 	sub.w	r3, ip, r4
 8016a76:	f104 0015 	add.w	r0, r4, #21
 8016a7a:	3b15      	subs	r3, #21
 8016a7c:	f023 0303 	bic.w	r3, r3, #3
 8016a80:	3304      	adds	r3, #4
 8016a82:	4584      	cmp	ip, r0
 8016a84:	bf38      	it	cc
 8016a86:	2304      	movcc	r3, #4
 8016a88:	50ca      	str	r2, [r1, r3]
 8016a8a:	b10a      	cbz	r2, 8016a90 <__lshift+0xa4>
 8016a8c:	f108 0602 	add.w	r6, r8, #2
 8016a90:	3e01      	subs	r6, #1
 8016a92:	4638      	mov	r0, r7
 8016a94:	4621      	mov	r1, r4
 8016a96:	612e      	str	r6, [r5, #16]
 8016a98:	f7ff fdd6 	bl	8016648 <_Bfree>
 8016a9c:	4628      	mov	r0, r5
 8016a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	f842 0f04 	str.w	r0, [r2, #4]!
 8016aa8:	e7c5      	b.n	8016a36 <__lshift+0x4a>
 8016aaa:	3904      	subs	r1, #4
 8016aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ab0:	459c      	cmp	ip, r3
 8016ab2:	f841 2f04 	str.w	r2, [r1, #4]!
 8016ab6:	d8f9      	bhi.n	8016aac <__lshift+0xc0>
 8016ab8:	e7ea      	b.n	8016a90 <__lshift+0xa4>
 8016aba:	bf00      	nop
 8016abc:	08017908 	.word	0x08017908
 8016ac0:	08017919 	.word	0x08017919

08016ac4 <__mcmp>:
 8016ac4:	6902      	ldr	r2, [r0, #16]
 8016ac6:	b530      	push	{r4, r5, lr}
 8016ac8:	690c      	ldr	r4, [r1, #16]
 8016aca:	1b12      	subs	r2, r2, r4
 8016acc:	d10e      	bne.n	8016aec <__mcmp+0x28>
 8016ace:	f100 0314 	add.w	r3, r0, #20
 8016ad2:	3114      	adds	r1, #20
 8016ad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016ad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016adc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016ae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016ae4:	42a5      	cmp	r5, r4
 8016ae6:	d003      	beq.n	8016af0 <__mcmp+0x2c>
 8016ae8:	d305      	bcc.n	8016af6 <__mcmp+0x32>
 8016aea:	2201      	movs	r2, #1
 8016aec:	4610      	mov	r0, r2
 8016aee:	bd30      	pop	{r4, r5, pc}
 8016af0:	4283      	cmp	r3, r0
 8016af2:	d3f3      	bcc.n	8016adc <__mcmp+0x18>
 8016af4:	e7fa      	b.n	8016aec <__mcmp+0x28>
 8016af6:	f04f 32ff 	mov.w	r2, #4294967295
 8016afa:	e7f7      	b.n	8016aec <__mcmp+0x28>

08016afc <__mdiff>:
 8016afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b00:	460c      	mov	r4, r1
 8016b02:	4606      	mov	r6, r0
 8016b04:	4611      	mov	r1, r2
 8016b06:	4692      	mov	sl, r2
 8016b08:	4620      	mov	r0, r4
 8016b0a:	f7ff ffdb 	bl	8016ac4 <__mcmp>
 8016b0e:	1e05      	subs	r5, r0, #0
 8016b10:	d110      	bne.n	8016b34 <__mdiff+0x38>
 8016b12:	4629      	mov	r1, r5
 8016b14:	4630      	mov	r0, r6
 8016b16:	f7ff fd57 	bl	80165c8 <_Balloc>
 8016b1a:	b930      	cbnz	r0, 8016b2a <__mdiff+0x2e>
 8016b1c:	4b3d      	ldr	r3, [pc, #244]	; (8016c14 <__mdiff+0x118>)
 8016b1e:	4602      	mov	r2, r0
 8016b20:	f240 2137 	movw	r1, #567	; 0x237
 8016b24:	483c      	ldr	r0, [pc, #240]	; (8016c18 <__mdiff+0x11c>)
 8016b26:	f000 fb69 	bl	80171fc <__assert_func>
 8016b2a:	2301      	movs	r3, #1
 8016b2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b34:	bfa4      	itt	ge
 8016b36:	4653      	movge	r3, sl
 8016b38:	46a2      	movge	sl, r4
 8016b3a:	4630      	mov	r0, r6
 8016b3c:	bfa8      	it	ge
 8016b3e:	2500      	movge	r5, #0
 8016b40:	f8da 1004 	ldr.w	r1, [sl, #4]
 8016b44:	bfac      	ite	ge
 8016b46:	461c      	movge	r4, r3
 8016b48:	2501      	movlt	r5, #1
 8016b4a:	f7ff fd3d 	bl	80165c8 <_Balloc>
 8016b4e:	b920      	cbnz	r0, 8016b5a <__mdiff+0x5e>
 8016b50:	4b30      	ldr	r3, [pc, #192]	; (8016c14 <__mdiff+0x118>)
 8016b52:	4602      	mov	r2, r0
 8016b54:	f240 2145 	movw	r1, #581	; 0x245
 8016b58:	e7e4      	b.n	8016b24 <__mdiff+0x28>
 8016b5a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8016b5e:	f104 0914 	add.w	r9, r4, #20
 8016b62:	6926      	ldr	r6, [r4, #16]
 8016b64:	f100 0814 	add.w	r8, r0, #20
 8016b68:	60c5      	str	r5, [r0, #12]
 8016b6a:	f10a 0514 	add.w	r5, sl, #20
 8016b6e:	f10a 0210 	add.w	r2, sl, #16
 8016b72:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016b76:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8016b7a:	46c2      	mov	sl, r8
 8016b7c:	f04f 0c00 	mov.w	ip, #0
 8016b80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016b84:	f859 3b04 	ldr.w	r3, [r9], #4
 8016b88:	fa1f f18b 	uxth.w	r1, fp
 8016b8c:	454e      	cmp	r6, r9
 8016b8e:	4461      	add	r1, ip
 8016b90:	fa1f fc83 	uxth.w	ip, r3
 8016b94:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8016b98:	eba1 010c 	sub.w	r1, r1, ip
 8016b9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016ba0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016ba4:	b289      	uxth	r1, r1
 8016ba6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8016baa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8016bae:	f84a 1b04 	str.w	r1, [sl], #4
 8016bb2:	d8e5      	bhi.n	8016b80 <__mdiff+0x84>
 8016bb4:	1b33      	subs	r3, r6, r4
 8016bb6:	3415      	adds	r4, #21
 8016bb8:	3b15      	subs	r3, #21
 8016bba:	f023 0303 	bic.w	r3, r3, #3
 8016bbe:	3304      	adds	r3, #4
 8016bc0:	42a6      	cmp	r6, r4
 8016bc2:	bf38      	it	cc
 8016bc4:	2304      	movcc	r3, #4
 8016bc6:	441d      	add	r5, r3
 8016bc8:	4443      	add	r3, r8
 8016bca:	462c      	mov	r4, r5
 8016bcc:	461e      	mov	r6, r3
 8016bce:	4574      	cmp	r4, lr
 8016bd0:	d30e      	bcc.n	8016bf0 <__mdiff+0xf4>
 8016bd2:	f10e 0203 	add.w	r2, lr, #3
 8016bd6:	1b52      	subs	r2, r2, r5
 8016bd8:	3d03      	subs	r5, #3
 8016bda:	f022 0203 	bic.w	r2, r2, #3
 8016bde:	45ae      	cmp	lr, r5
 8016be0:	bf38      	it	cc
 8016be2:	2200      	movcc	r2, #0
 8016be4:	4413      	add	r3, r2
 8016be6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016bea:	b18a      	cbz	r2, 8016c10 <__mdiff+0x114>
 8016bec:	6107      	str	r7, [r0, #16]
 8016bee:	e79f      	b.n	8016b30 <__mdiff+0x34>
 8016bf0:	f854 8b04 	ldr.w	r8, [r4], #4
 8016bf4:	fa1f f288 	uxth.w	r2, r8
 8016bf8:	4462      	add	r2, ip
 8016bfa:	1411      	asrs	r1, r2, #16
 8016bfc:	b292      	uxth	r2, r2
 8016bfe:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8016c02:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8016c06:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8016c0a:	f846 2b04 	str.w	r2, [r6], #4
 8016c0e:	e7de      	b.n	8016bce <__mdiff+0xd2>
 8016c10:	3f01      	subs	r7, #1
 8016c12:	e7e8      	b.n	8016be6 <__mdiff+0xea>
 8016c14:	08017908 	.word	0x08017908
 8016c18:	08017919 	.word	0x08017919

08016c1c <__d2b>:
 8016c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016c20:	460f      	mov	r7, r1
 8016c22:	2101      	movs	r1, #1
 8016c24:	4616      	mov	r6, r2
 8016c26:	ec59 8b10 	vmov	r8, r9, d0
 8016c2a:	f7ff fccd 	bl	80165c8 <_Balloc>
 8016c2e:	4604      	mov	r4, r0
 8016c30:	b930      	cbnz	r0, 8016c40 <__d2b+0x24>
 8016c32:	4602      	mov	r2, r0
 8016c34:	4b24      	ldr	r3, [pc, #144]	; (8016cc8 <__d2b+0xac>)
 8016c36:	f240 310f 	movw	r1, #783	; 0x30f
 8016c3a:	4824      	ldr	r0, [pc, #144]	; (8016ccc <__d2b+0xb0>)
 8016c3c:	f000 fade 	bl	80171fc <__assert_func>
 8016c40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016c44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016c48:	bb2d      	cbnz	r5, 8016c96 <__d2b+0x7a>
 8016c4a:	9301      	str	r3, [sp, #4]
 8016c4c:	f1b8 0300 	subs.w	r3, r8, #0
 8016c50:	d026      	beq.n	8016ca0 <__d2b+0x84>
 8016c52:	4668      	mov	r0, sp
 8016c54:	9300      	str	r3, [sp, #0]
 8016c56:	f7ff fd81 	bl	801675c <__lo0bits>
 8016c5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016c5e:	b1e8      	cbz	r0, 8016c9c <__d2b+0x80>
 8016c60:	f1c0 0320 	rsb	r3, r0, #32
 8016c64:	fa02 f303 	lsl.w	r3, r2, r3
 8016c68:	40c2      	lsrs	r2, r0
 8016c6a:	430b      	orrs	r3, r1
 8016c6c:	9201      	str	r2, [sp, #4]
 8016c6e:	6163      	str	r3, [r4, #20]
 8016c70:	9b01      	ldr	r3, [sp, #4]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	61a3      	str	r3, [r4, #24]
 8016c76:	bf14      	ite	ne
 8016c78:	2202      	movne	r2, #2
 8016c7a:	2201      	moveq	r2, #1
 8016c7c:	6122      	str	r2, [r4, #16]
 8016c7e:	b1bd      	cbz	r5, 8016cb0 <__d2b+0x94>
 8016c80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016c84:	4405      	add	r5, r0
 8016c86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016c8a:	603d      	str	r5, [r7, #0]
 8016c8c:	6030      	str	r0, [r6, #0]
 8016c8e:	4620      	mov	r0, r4
 8016c90:	b003      	add	sp, #12
 8016c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016c9a:	e7d6      	b.n	8016c4a <__d2b+0x2e>
 8016c9c:	6161      	str	r1, [r4, #20]
 8016c9e:	e7e7      	b.n	8016c70 <__d2b+0x54>
 8016ca0:	a801      	add	r0, sp, #4
 8016ca2:	f7ff fd5b 	bl	801675c <__lo0bits>
 8016ca6:	9b01      	ldr	r3, [sp, #4]
 8016ca8:	3020      	adds	r0, #32
 8016caa:	2201      	movs	r2, #1
 8016cac:	6163      	str	r3, [r4, #20]
 8016cae:	e7e5      	b.n	8016c7c <__d2b+0x60>
 8016cb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016cb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016cb8:	6038      	str	r0, [r7, #0]
 8016cba:	6918      	ldr	r0, [r3, #16]
 8016cbc:	f7ff fd2e 	bl	801671c <__hi0bits>
 8016cc0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016cc4:	e7e2      	b.n	8016c8c <__d2b+0x70>
 8016cc6:	bf00      	nop
 8016cc8:	08017908 	.word	0x08017908
 8016ccc:	08017919 	.word	0x08017919

08016cd0 <__sfputc_r>:
 8016cd0:	6893      	ldr	r3, [r2, #8]
 8016cd2:	3b01      	subs	r3, #1
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	6093      	str	r3, [r2, #8]
 8016cd8:	b410      	push	{r4}
 8016cda:	da08      	bge.n	8016cee <__sfputc_r+0x1e>
 8016cdc:	6994      	ldr	r4, [r2, #24]
 8016cde:	42a3      	cmp	r3, r4
 8016ce0:	db01      	blt.n	8016ce6 <__sfputc_r+0x16>
 8016ce2:	290a      	cmp	r1, #10
 8016ce4:	d103      	bne.n	8016cee <__sfputc_r+0x1e>
 8016ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cea:	f000 b9e1 	b.w	80170b0 <__swbuf_r>
 8016cee:	6813      	ldr	r3, [r2, #0]
 8016cf0:	1c58      	adds	r0, r3, #1
 8016cf2:	6010      	str	r0, [r2, #0]
 8016cf4:	4608      	mov	r0, r1
 8016cf6:	7019      	strb	r1, [r3, #0]
 8016cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cfc:	4770      	bx	lr

08016cfe <__sfputs_r>:
 8016cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d00:	4606      	mov	r6, r0
 8016d02:	460f      	mov	r7, r1
 8016d04:	4614      	mov	r4, r2
 8016d06:	18d5      	adds	r5, r2, r3
 8016d08:	42ac      	cmp	r4, r5
 8016d0a:	d101      	bne.n	8016d10 <__sfputs_r+0x12>
 8016d0c:	2000      	movs	r0, #0
 8016d0e:	e007      	b.n	8016d20 <__sfputs_r+0x22>
 8016d10:	463a      	mov	r2, r7
 8016d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d16:	4630      	mov	r0, r6
 8016d18:	f7ff ffda 	bl	8016cd0 <__sfputc_r>
 8016d1c:	1c43      	adds	r3, r0, #1
 8016d1e:	d1f3      	bne.n	8016d08 <__sfputs_r+0xa>
 8016d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d24 <_vfiprintf_r>:
 8016d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d28:	460d      	mov	r5, r1
 8016d2a:	b09d      	sub	sp, #116	; 0x74
 8016d2c:	4614      	mov	r4, r2
 8016d2e:	4698      	mov	r8, r3
 8016d30:	4606      	mov	r6, r0
 8016d32:	b118      	cbz	r0, 8016d3c <_vfiprintf_r+0x18>
 8016d34:	6a03      	ldr	r3, [r0, #32]
 8016d36:	b90b      	cbnz	r3, 8016d3c <_vfiprintf_r+0x18>
 8016d38:	f7fe fba0 	bl	801547c <__sinit>
 8016d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d3e:	07d9      	lsls	r1, r3, #31
 8016d40:	d405      	bmi.n	8016d4e <_vfiprintf_r+0x2a>
 8016d42:	89ab      	ldrh	r3, [r5, #12]
 8016d44:	059a      	lsls	r2, r3, #22
 8016d46:	d402      	bmi.n	8016d4e <_vfiprintf_r+0x2a>
 8016d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d4a:	f7fe fca0 	bl	801568e <__retarget_lock_acquire_recursive>
 8016d4e:	89ab      	ldrh	r3, [r5, #12]
 8016d50:	071b      	lsls	r3, r3, #28
 8016d52:	d501      	bpl.n	8016d58 <_vfiprintf_r+0x34>
 8016d54:	692b      	ldr	r3, [r5, #16]
 8016d56:	b99b      	cbnz	r3, 8016d80 <_vfiprintf_r+0x5c>
 8016d58:	4629      	mov	r1, r5
 8016d5a:	4630      	mov	r0, r6
 8016d5c:	f000 f9e6 	bl	801712c <__swsetup_r>
 8016d60:	b170      	cbz	r0, 8016d80 <_vfiprintf_r+0x5c>
 8016d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d64:	07dc      	lsls	r4, r3, #31
 8016d66:	d504      	bpl.n	8016d72 <_vfiprintf_r+0x4e>
 8016d68:	f04f 30ff 	mov.w	r0, #4294967295
 8016d6c:	b01d      	add	sp, #116	; 0x74
 8016d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d72:	89ab      	ldrh	r3, [r5, #12]
 8016d74:	0598      	lsls	r0, r3, #22
 8016d76:	d4f7      	bmi.n	8016d68 <_vfiprintf_r+0x44>
 8016d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d7a:	f7fe fc89 	bl	8015690 <__retarget_lock_release_recursive>
 8016d7e:	e7f3      	b.n	8016d68 <_vfiprintf_r+0x44>
 8016d80:	2300      	movs	r3, #0
 8016d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d86:	f04f 0901 	mov.w	r9, #1
 8016d8a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8016f44 <_vfiprintf_r+0x220>
 8016d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8016d90:	2320      	movs	r3, #32
 8016d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d96:	2330      	movs	r3, #48	; 0x30
 8016d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d9c:	4623      	mov	r3, r4
 8016d9e:	469a      	mov	sl, r3
 8016da0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016da4:	b10a      	cbz	r2, 8016daa <_vfiprintf_r+0x86>
 8016da6:	2a25      	cmp	r2, #37	; 0x25
 8016da8:	d1f9      	bne.n	8016d9e <_vfiprintf_r+0x7a>
 8016daa:	ebba 0b04 	subs.w	fp, sl, r4
 8016dae:	d00b      	beq.n	8016dc8 <_vfiprintf_r+0xa4>
 8016db0:	465b      	mov	r3, fp
 8016db2:	4622      	mov	r2, r4
 8016db4:	4629      	mov	r1, r5
 8016db6:	4630      	mov	r0, r6
 8016db8:	f7ff ffa1 	bl	8016cfe <__sfputs_r>
 8016dbc:	3001      	adds	r0, #1
 8016dbe:	f000 80a9 	beq.w	8016f14 <_vfiprintf_r+0x1f0>
 8016dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016dc4:	445a      	add	r2, fp
 8016dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8016dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f000 80a1 	beq.w	8016f14 <_vfiprintf_r+0x1f0>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8016dd8:	f10a 0a01 	add.w	sl, sl, #1
 8016ddc:	9304      	str	r3, [sp, #16]
 8016dde:	9307      	str	r3, [sp, #28]
 8016de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016de4:	931a      	str	r3, [sp, #104]	; 0x68
 8016de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016dea:	4654      	mov	r4, sl
 8016dec:	2205      	movs	r2, #5
 8016dee:	4855      	ldr	r0, [pc, #340]	; (8016f44 <_vfiprintf_r+0x220>)
 8016df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016df4:	f7fe fc4d 	bl	8015692 <memchr>
 8016df8:	9a04      	ldr	r2, [sp, #16]
 8016dfa:	b9d8      	cbnz	r0, 8016e34 <_vfiprintf_r+0x110>
 8016dfc:	06d1      	lsls	r1, r2, #27
 8016dfe:	bf44      	itt	mi
 8016e00:	2320      	movmi	r3, #32
 8016e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e06:	0713      	lsls	r3, r2, #28
 8016e08:	bf44      	itt	mi
 8016e0a:	232b      	movmi	r3, #43	; 0x2b
 8016e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e10:	f89a 3000 	ldrb.w	r3, [sl]
 8016e14:	2b2a      	cmp	r3, #42	; 0x2a
 8016e16:	d015      	beq.n	8016e44 <_vfiprintf_r+0x120>
 8016e18:	9a07      	ldr	r2, [sp, #28]
 8016e1a:	4654      	mov	r4, sl
 8016e1c:	2000      	movs	r0, #0
 8016e1e:	f04f 0c0a 	mov.w	ip, #10
 8016e22:	4621      	mov	r1, r4
 8016e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e28:	3b30      	subs	r3, #48	; 0x30
 8016e2a:	2b09      	cmp	r3, #9
 8016e2c:	d94d      	bls.n	8016eca <_vfiprintf_r+0x1a6>
 8016e2e:	b1b0      	cbz	r0, 8016e5e <_vfiprintf_r+0x13a>
 8016e30:	9207      	str	r2, [sp, #28]
 8016e32:	e014      	b.n	8016e5e <_vfiprintf_r+0x13a>
 8016e34:	eba0 0308 	sub.w	r3, r0, r8
 8016e38:	46a2      	mov	sl, r4
 8016e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8016e3e:	4313      	orrs	r3, r2
 8016e40:	9304      	str	r3, [sp, #16]
 8016e42:	e7d2      	b.n	8016dea <_vfiprintf_r+0xc6>
 8016e44:	9b03      	ldr	r3, [sp, #12]
 8016e46:	1d19      	adds	r1, r3, #4
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	9103      	str	r1, [sp, #12]
 8016e4e:	bfbb      	ittet	lt
 8016e50:	425b      	neglt	r3, r3
 8016e52:	f042 0202 	orrlt.w	r2, r2, #2
 8016e56:	9307      	strge	r3, [sp, #28]
 8016e58:	9307      	strlt	r3, [sp, #28]
 8016e5a:	bfb8      	it	lt
 8016e5c:	9204      	strlt	r2, [sp, #16]
 8016e5e:	7823      	ldrb	r3, [r4, #0]
 8016e60:	2b2e      	cmp	r3, #46	; 0x2e
 8016e62:	d10c      	bne.n	8016e7e <_vfiprintf_r+0x15a>
 8016e64:	7863      	ldrb	r3, [r4, #1]
 8016e66:	2b2a      	cmp	r3, #42	; 0x2a
 8016e68:	d134      	bne.n	8016ed4 <_vfiprintf_r+0x1b0>
 8016e6a:	9b03      	ldr	r3, [sp, #12]
 8016e6c:	3402      	adds	r4, #2
 8016e6e:	1d1a      	adds	r2, r3, #4
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	9203      	str	r2, [sp, #12]
 8016e76:	bfb8      	it	lt
 8016e78:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e7c:	9305      	str	r3, [sp, #20]
 8016e7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016f54 <_vfiprintf_r+0x230>
 8016e82:	2203      	movs	r2, #3
 8016e84:	7821      	ldrb	r1, [r4, #0]
 8016e86:	4650      	mov	r0, sl
 8016e88:	f7fe fc03 	bl	8015692 <memchr>
 8016e8c:	b138      	cbz	r0, 8016e9e <_vfiprintf_r+0x17a>
 8016e8e:	eba0 000a 	sub.w	r0, r0, sl
 8016e92:	2240      	movs	r2, #64	; 0x40
 8016e94:	9b04      	ldr	r3, [sp, #16]
 8016e96:	3401      	adds	r4, #1
 8016e98:	4082      	lsls	r2, r0
 8016e9a:	4313      	orrs	r3, r2
 8016e9c:	9304      	str	r3, [sp, #16]
 8016e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ea2:	2206      	movs	r2, #6
 8016ea4:	4828      	ldr	r0, [pc, #160]	; (8016f48 <_vfiprintf_r+0x224>)
 8016ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016eaa:	f7fe fbf2 	bl	8015692 <memchr>
 8016eae:	2800      	cmp	r0, #0
 8016eb0:	d03f      	beq.n	8016f32 <_vfiprintf_r+0x20e>
 8016eb2:	4b26      	ldr	r3, [pc, #152]	; (8016f4c <_vfiprintf_r+0x228>)
 8016eb4:	bb1b      	cbnz	r3, 8016efe <_vfiprintf_r+0x1da>
 8016eb6:	9b03      	ldr	r3, [sp, #12]
 8016eb8:	3307      	adds	r3, #7
 8016eba:	f023 0307 	bic.w	r3, r3, #7
 8016ebe:	3308      	adds	r3, #8
 8016ec0:	9303      	str	r3, [sp, #12]
 8016ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ec4:	443b      	add	r3, r7
 8016ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ec8:	e768      	b.n	8016d9c <_vfiprintf_r+0x78>
 8016eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ece:	460c      	mov	r4, r1
 8016ed0:	2001      	movs	r0, #1
 8016ed2:	e7a6      	b.n	8016e22 <_vfiprintf_r+0xfe>
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	3401      	adds	r4, #1
 8016ed8:	f04f 0c0a 	mov.w	ip, #10
 8016edc:	4619      	mov	r1, r3
 8016ede:	9305      	str	r3, [sp, #20]
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ee6:	3a30      	subs	r2, #48	; 0x30
 8016ee8:	2a09      	cmp	r2, #9
 8016eea:	d903      	bls.n	8016ef4 <_vfiprintf_r+0x1d0>
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d0c6      	beq.n	8016e7e <_vfiprintf_r+0x15a>
 8016ef0:	9105      	str	r1, [sp, #20]
 8016ef2:	e7c4      	b.n	8016e7e <_vfiprintf_r+0x15a>
 8016ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ef8:	4604      	mov	r4, r0
 8016efa:	2301      	movs	r3, #1
 8016efc:	e7f0      	b.n	8016ee0 <_vfiprintf_r+0x1bc>
 8016efe:	ab03      	add	r3, sp, #12
 8016f00:	462a      	mov	r2, r5
 8016f02:	a904      	add	r1, sp, #16
 8016f04:	4630      	mov	r0, r6
 8016f06:	9300      	str	r3, [sp, #0]
 8016f08:	4b11      	ldr	r3, [pc, #68]	; (8016f50 <_vfiprintf_r+0x22c>)
 8016f0a:	f7fd fe63 	bl	8014bd4 <_printf_float>
 8016f0e:	4607      	mov	r7, r0
 8016f10:	1c78      	adds	r0, r7, #1
 8016f12:	d1d6      	bne.n	8016ec2 <_vfiprintf_r+0x19e>
 8016f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f16:	07d9      	lsls	r1, r3, #31
 8016f18:	d405      	bmi.n	8016f26 <_vfiprintf_r+0x202>
 8016f1a:	89ab      	ldrh	r3, [r5, #12]
 8016f1c:	059a      	lsls	r2, r3, #22
 8016f1e:	d402      	bmi.n	8016f26 <_vfiprintf_r+0x202>
 8016f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f22:	f7fe fbb5 	bl	8015690 <__retarget_lock_release_recursive>
 8016f26:	89ab      	ldrh	r3, [r5, #12]
 8016f28:	065b      	lsls	r3, r3, #25
 8016f2a:	f53f af1d 	bmi.w	8016d68 <_vfiprintf_r+0x44>
 8016f2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f30:	e71c      	b.n	8016d6c <_vfiprintf_r+0x48>
 8016f32:	ab03      	add	r3, sp, #12
 8016f34:	462a      	mov	r2, r5
 8016f36:	a904      	add	r1, sp, #16
 8016f38:	4630      	mov	r0, r6
 8016f3a:	9300      	str	r3, [sp, #0]
 8016f3c:	4b04      	ldr	r3, [pc, #16]	; (8016f50 <_vfiprintf_r+0x22c>)
 8016f3e:	f7fe f8f1 	bl	8015124 <_printf_i>
 8016f42:	e7e4      	b.n	8016f0e <_vfiprintf_r+0x1ea>
 8016f44:	08017a74 	.word	0x08017a74
 8016f48:	08017a7e 	.word	0x08017a7e
 8016f4c:	08014bd5 	.word	0x08014bd5
 8016f50:	08016cff 	.word	0x08016cff
 8016f54:	08017a7a 	.word	0x08017a7a

08016f58 <__sflush_r>:
 8016f58:	898a      	ldrh	r2, [r1, #12]
 8016f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f5e:	4605      	mov	r5, r0
 8016f60:	0710      	lsls	r0, r2, #28
 8016f62:	460c      	mov	r4, r1
 8016f64:	d458      	bmi.n	8017018 <__sflush_r+0xc0>
 8016f66:	684b      	ldr	r3, [r1, #4]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	dc05      	bgt.n	8016f78 <__sflush_r+0x20>
 8016f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	dc02      	bgt.n	8016f78 <__sflush_r+0x20>
 8016f72:	2000      	movs	r0, #0
 8016f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f7a:	2e00      	cmp	r6, #0
 8016f7c:	d0f9      	beq.n	8016f72 <__sflush_r+0x1a>
 8016f7e:	2300      	movs	r3, #0
 8016f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016f84:	682f      	ldr	r7, [r5, #0]
 8016f86:	6a21      	ldr	r1, [r4, #32]
 8016f88:	602b      	str	r3, [r5, #0]
 8016f8a:	d032      	beq.n	8016ff2 <__sflush_r+0x9a>
 8016f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f8e:	89a3      	ldrh	r3, [r4, #12]
 8016f90:	075a      	lsls	r2, r3, #29
 8016f92:	d505      	bpl.n	8016fa0 <__sflush_r+0x48>
 8016f94:	6863      	ldr	r3, [r4, #4]
 8016f96:	1ac0      	subs	r0, r0, r3
 8016f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f9a:	b10b      	cbz	r3, 8016fa0 <__sflush_r+0x48>
 8016f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f9e:	1ac0      	subs	r0, r0, r3
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	4602      	mov	r2, r0
 8016fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	6a21      	ldr	r1, [r4, #32]
 8016faa:	47b0      	blx	r6
 8016fac:	1c43      	adds	r3, r0, #1
 8016fae:	89a3      	ldrh	r3, [r4, #12]
 8016fb0:	d106      	bne.n	8016fc0 <__sflush_r+0x68>
 8016fb2:	6829      	ldr	r1, [r5, #0]
 8016fb4:	291d      	cmp	r1, #29
 8016fb6:	d82b      	bhi.n	8017010 <__sflush_r+0xb8>
 8016fb8:	4a28      	ldr	r2, [pc, #160]	; (801705c <__sflush_r+0x104>)
 8016fba:	410a      	asrs	r2, r1
 8016fbc:	07d6      	lsls	r6, r2, #31
 8016fbe:	d427      	bmi.n	8017010 <__sflush_r+0xb8>
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	04d9      	lsls	r1, r3, #19
 8016fc4:	6062      	str	r2, [r4, #4]
 8016fc6:	6922      	ldr	r2, [r4, #16]
 8016fc8:	6022      	str	r2, [r4, #0]
 8016fca:	d504      	bpl.n	8016fd6 <__sflush_r+0x7e>
 8016fcc:	1c42      	adds	r2, r0, #1
 8016fce:	d101      	bne.n	8016fd4 <__sflush_r+0x7c>
 8016fd0:	682b      	ldr	r3, [r5, #0]
 8016fd2:	b903      	cbnz	r3, 8016fd6 <__sflush_r+0x7e>
 8016fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8016fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fd8:	602f      	str	r7, [r5, #0]
 8016fda:	2900      	cmp	r1, #0
 8016fdc:	d0c9      	beq.n	8016f72 <__sflush_r+0x1a>
 8016fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fe2:	4299      	cmp	r1, r3
 8016fe4:	d002      	beq.n	8016fec <__sflush_r+0x94>
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	f7ff f9ee 	bl	80163c8 <_free_r>
 8016fec:	2000      	movs	r0, #0
 8016fee:	6360      	str	r0, [r4, #52]	; 0x34
 8016ff0:	e7c0      	b.n	8016f74 <__sflush_r+0x1c>
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	47b0      	blx	r6
 8016ff8:	1c41      	adds	r1, r0, #1
 8016ffa:	d1c8      	bne.n	8016f8e <__sflush_r+0x36>
 8016ffc:	682b      	ldr	r3, [r5, #0]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d0c5      	beq.n	8016f8e <__sflush_r+0x36>
 8017002:	2b1d      	cmp	r3, #29
 8017004:	d001      	beq.n	801700a <__sflush_r+0xb2>
 8017006:	2b16      	cmp	r3, #22
 8017008:	d101      	bne.n	801700e <__sflush_r+0xb6>
 801700a:	602f      	str	r7, [r5, #0]
 801700c:	e7b1      	b.n	8016f72 <__sflush_r+0x1a>
 801700e:	89a3      	ldrh	r3, [r4, #12]
 8017010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017014:	81a3      	strh	r3, [r4, #12]
 8017016:	e7ad      	b.n	8016f74 <__sflush_r+0x1c>
 8017018:	690f      	ldr	r7, [r1, #16]
 801701a:	2f00      	cmp	r7, #0
 801701c:	d0a9      	beq.n	8016f72 <__sflush_r+0x1a>
 801701e:	0793      	lsls	r3, r2, #30
 8017020:	680e      	ldr	r6, [r1, #0]
 8017022:	600f      	str	r7, [r1, #0]
 8017024:	bf0c      	ite	eq
 8017026:	694b      	ldreq	r3, [r1, #20]
 8017028:	2300      	movne	r3, #0
 801702a:	eba6 0807 	sub.w	r8, r6, r7
 801702e:	608b      	str	r3, [r1, #8]
 8017030:	f1b8 0f00 	cmp.w	r8, #0
 8017034:	dd9d      	ble.n	8016f72 <__sflush_r+0x1a>
 8017036:	4643      	mov	r3, r8
 8017038:	463a      	mov	r2, r7
 801703a:	6a21      	ldr	r1, [r4, #32]
 801703c:	4628      	mov	r0, r5
 801703e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017040:	47b0      	blx	r6
 8017042:	2800      	cmp	r0, #0
 8017044:	dc06      	bgt.n	8017054 <__sflush_r+0xfc>
 8017046:	89a3      	ldrh	r3, [r4, #12]
 8017048:	f04f 30ff 	mov.w	r0, #4294967295
 801704c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017050:	81a3      	strh	r3, [r4, #12]
 8017052:	e78f      	b.n	8016f74 <__sflush_r+0x1c>
 8017054:	4407      	add	r7, r0
 8017056:	eba8 0800 	sub.w	r8, r8, r0
 801705a:	e7e9      	b.n	8017030 <__sflush_r+0xd8>
 801705c:	dfbffffe 	.word	0xdfbffffe

08017060 <_fflush_r>:
 8017060:	b538      	push	{r3, r4, r5, lr}
 8017062:	690b      	ldr	r3, [r1, #16]
 8017064:	4605      	mov	r5, r0
 8017066:	460c      	mov	r4, r1
 8017068:	b913      	cbnz	r3, 8017070 <_fflush_r+0x10>
 801706a:	2500      	movs	r5, #0
 801706c:	4628      	mov	r0, r5
 801706e:	bd38      	pop	{r3, r4, r5, pc}
 8017070:	b118      	cbz	r0, 801707a <_fflush_r+0x1a>
 8017072:	6a03      	ldr	r3, [r0, #32]
 8017074:	b90b      	cbnz	r3, 801707a <_fflush_r+0x1a>
 8017076:	f7fe fa01 	bl	801547c <__sinit>
 801707a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d0f3      	beq.n	801706a <_fflush_r+0xa>
 8017082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017084:	07d0      	lsls	r0, r2, #31
 8017086:	d404      	bmi.n	8017092 <_fflush_r+0x32>
 8017088:	0599      	lsls	r1, r3, #22
 801708a:	d402      	bmi.n	8017092 <_fflush_r+0x32>
 801708c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801708e:	f7fe fafe 	bl	801568e <__retarget_lock_acquire_recursive>
 8017092:	4628      	mov	r0, r5
 8017094:	4621      	mov	r1, r4
 8017096:	f7ff ff5f 	bl	8016f58 <__sflush_r>
 801709a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801709c:	4605      	mov	r5, r0
 801709e:	07da      	lsls	r2, r3, #31
 80170a0:	d4e4      	bmi.n	801706c <_fflush_r+0xc>
 80170a2:	89a3      	ldrh	r3, [r4, #12]
 80170a4:	059b      	lsls	r3, r3, #22
 80170a6:	d4e1      	bmi.n	801706c <_fflush_r+0xc>
 80170a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170aa:	f7fe faf1 	bl	8015690 <__retarget_lock_release_recursive>
 80170ae:	e7dd      	b.n	801706c <_fflush_r+0xc>

080170b0 <__swbuf_r>:
 80170b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170b2:	460e      	mov	r6, r1
 80170b4:	4614      	mov	r4, r2
 80170b6:	4605      	mov	r5, r0
 80170b8:	b118      	cbz	r0, 80170c2 <__swbuf_r+0x12>
 80170ba:	6a03      	ldr	r3, [r0, #32]
 80170bc:	b90b      	cbnz	r3, 80170c2 <__swbuf_r+0x12>
 80170be:	f7fe f9dd 	bl	801547c <__sinit>
 80170c2:	69a3      	ldr	r3, [r4, #24]
 80170c4:	60a3      	str	r3, [r4, #8]
 80170c6:	89a3      	ldrh	r3, [r4, #12]
 80170c8:	071a      	lsls	r2, r3, #28
 80170ca:	d525      	bpl.n	8017118 <__swbuf_r+0x68>
 80170cc:	6923      	ldr	r3, [r4, #16]
 80170ce:	b31b      	cbz	r3, 8017118 <__swbuf_r+0x68>
 80170d0:	6823      	ldr	r3, [r4, #0]
 80170d2:	b2f6      	uxtb	r6, r6
 80170d4:	6922      	ldr	r2, [r4, #16]
 80170d6:	4637      	mov	r7, r6
 80170d8:	1a98      	subs	r0, r3, r2
 80170da:	6963      	ldr	r3, [r4, #20]
 80170dc:	4283      	cmp	r3, r0
 80170de:	dc04      	bgt.n	80170ea <__swbuf_r+0x3a>
 80170e0:	4621      	mov	r1, r4
 80170e2:	4628      	mov	r0, r5
 80170e4:	f7ff ffbc 	bl	8017060 <_fflush_r>
 80170e8:	b9e0      	cbnz	r0, 8017124 <__swbuf_r+0x74>
 80170ea:	68a3      	ldr	r3, [r4, #8]
 80170ec:	3b01      	subs	r3, #1
 80170ee:	60a3      	str	r3, [r4, #8]
 80170f0:	6823      	ldr	r3, [r4, #0]
 80170f2:	1c5a      	adds	r2, r3, #1
 80170f4:	6022      	str	r2, [r4, #0]
 80170f6:	701e      	strb	r6, [r3, #0]
 80170f8:	1c43      	adds	r3, r0, #1
 80170fa:	6962      	ldr	r2, [r4, #20]
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d004      	beq.n	801710a <__swbuf_r+0x5a>
 8017100:	89a3      	ldrh	r3, [r4, #12]
 8017102:	07db      	lsls	r3, r3, #31
 8017104:	d506      	bpl.n	8017114 <__swbuf_r+0x64>
 8017106:	2e0a      	cmp	r6, #10
 8017108:	d104      	bne.n	8017114 <__swbuf_r+0x64>
 801710a:	4621      	mov	r1, r4
 801710c:	4628      	mov	r0, r5
 801710e:	f7ff ffa7 	bl	8017060 <_fflush_r>
 8017112:	b938      	cbnz	r0, 8017124 <__swbuf_r+0x74>
 8017114:	4638      	mov	r0, r7
 8017116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017118:	4621      	mov	r1, r4
 801711a:	4628      	mov	r0, r5
 801711c:	f000 f806 	bl	801712c <__swsetup_r>
 8017120:	2800      	cmp	r0, #0
 8017122:	d0d5      	beq.n	80170d0 <__swbuf_r+0x20>
 8017124:	f04f 37ff 	mov.w	r7, #4294967295
 8017128:	e7f4      	b.n	8017114 <__swbuf_r+0x64>
	...

0801712c <__swsetup_r>:
 801712c:	b538      	push	{r3, r4, r5, lr}
 801712e:	4b2a      	ldr	r3, [pc, #168]	; (80171d8 <__swsetup_r+0xac>)
 8017130:	4605      	mov	r5, r0
 8017132:	460c      	mov	r4, r1
 8017134:	6818      	ldr	r0, [r3, #0]
 8017136:	b118      	cbz	r0, 8017140 <__swsetup_r+0x14>
 8017138:	6a03      	ldr	r3, [r0, #32]
 801713a:	b90b      	cbnz	r3, 8017140 <__swsetup_r+0x14>
 801713c:	f7fe f99e 	bl	801547c <__sinit>
 8017140:	89a3      	ldrh	r3, [r4, #12]
 8017142:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017146:	0718      	lsls	r0, r3, #28
 8017148:	d422      	bmi.n	8017190 <__swsetup_r+0x64>
 801714a:	06d9      	lsls	r1, r3, #27
 801714c:	d407      	bmi.n	801715e <__swsetup_r+0x32>
 801714e:	2309      	movs	r3, #9
 8017150:	602b      	str	r3, [r5, #0]
 8017152:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017156:	f04f 30ff 	mov.w	r0, #4294967295
 801715a:	81a3      	strh	r3, [r4, #12]
 801715c:	e034      	b.n	80171c8 <__swsetup_r+0x9c>
 801715e:	0758      	lsls	r0, r3, #29
 8017160:	d512      	bpl.n	8017188 <__swsetup_r+0x5c>
 8017162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017164:	b141      	cbz	r1, 8017178 <__swsetup_r+0x4c>
 8017166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801716a:	4299      	cmp	r1, r3
 801716c:	d002      	beq.n	8017174 <__swsetup_r+0x48>
 801716e:	4628      	mov	r0, r5
 8017170:	f7ff f92a 	bl	80163c8 <_free_r>
 8017174:	2300      	movs	r3, #0
 8017176:	6363      	str	r3, [r4, #52]	; 0x34
 8017178:	89a3      	ldrh	r3, [r4, #12]
 801717a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801717e:	81a3      	strh	r3, [r4, #12]
 8017180:	2300      	movs	r3, #0
 8017182:	6063      	str	r3, [r4, #4]
 8017184:	6923      	ldr	r3, [r4, #16]
 8017186:	6023      	str	r3, [r4, #0]
 8017188:	89a3      	ldrh	r3, [r4, #12]
 801718a:	f043 0308 	orr.w	r3, r3, #8
 801718e:	81a3      	strh	r3, [r4, #12]
 8017190:	6923      	ldr	r3, [r4, #16]
 8017192:	b94b      	cbnz	r3, 80171a8 <__swsetup_r+0x7c>
 8017194:	89a3      	ldrh	r3, [r4, #12]
 8017196:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801719a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801719e:	d003      	beq.n	80171a8 <__swsetup_r+0x7c>
 80171a0:	4621      	mov	r1, r4
 80171a2:	4628      	mov	r0, r5
 80171a4:	f000 f8b5 	bl	8017312 <__smakebuf_r>
 80171a8:	89a0      	ldrh	r0, [r4, #12]
 80171aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171ae:	f010 0301 	ands.w	r3, r0, #1
 80171b2:	d00a      	beq.n	80171ca <__swsetup_r+0x9e>
 80171b4:	2300      	movs	r3, #0
 80171b6:	60a3      	str	r3, [r4, #8]
 80171b8:	6963      	ldr	r3, [r4, #20]
 80171ba:	425b      	negs	r3, r3
 80171bc:	61a3      	str	r3, [r4, #24]
 80171be:	6923      	ldr	r3, [r4, #16]
 80171c0:	b943      	cbnz	r3, 80171d4 <__swsetup_r+0xa8>
 80171c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80171c6:	d1c4      	bne.n	8017152 <__swsetup_r+0x26>
 80171c8:	bd38      	pop	{r3, r4, r5, pc}
 80171ca:	0781      	lsls	r1, r0, #30
 80171cc:	bf58      	it	pl
 80171ce:	6963      	ldrpl	r3, [r4, #20]
 80171d0:	60a3      	str	r3, [r4, #8]
 80171d2:	e7f4      	b.n	80171be <__swsetup_r+0x92>
 80171d4:	2000      	movs	r0, #0
 80171d6:	e7f7      	b.n	80171c8 <__swsetup_r+0x9c>
 80171d8:	200000d8 	.word	0x200000d8

080171dc <_sbrk_r>:
 80171dc:	b538      	push	{r3, r4, r5, lr}
 80171de:	2300      	movs	r3, #0
 80171e0:	4d05      	ldr	r5, [pc, #20]	; (80171f8 <_sbrk_r+0x1c>)
 80171e2:	4604      	mov	r4, r0
 80171e4:	4608      	mov	r0, r1
 80171e6:	602b      	str	r3, [r5, #0]
 80171e8:	f7ee fe9a 	bl	8005f20 <_sbrk>
 80171ec:	1c43      	adds	r3, r0, #1
 80171ee:	d102      	bne.n	80171f6 <_sbrk_r+0x1a>
 80171f0:	682b      	ldr	r3, [r5, #0]
 80171f2:	b103      	cbz	r3, 80171f6 <_sbrk_r+0x1a>
 80171f4:	6023      	str	r3, [r4, #0]
 80171f6:	bd38      	pop	{r3, r4, r5, pc}
 80171f8:	20027b0c 	.word	0x20027b0c

080171fc <__assert_func>:
 80171fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171fe:	4614      	mov	r4, r2
 8017200:	461a      	mov	r2, r3
 8017202:	4b09      	ldr	r3, [pc, #36]	; (8017228 <__assert_func+0x2c>)
 8017204:	4605      	mov	r5, r0
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	68d8      	ldr	r0, [r3, #12]
 801720a:	b14c      	cbz	r4, 8017220 <__assert_func+0x24>
 801720c:	4b07      	ldr	r3, [pc, #28]	; (801722c <__assert_func+0x30>)
 801720e:	9100      	str	r1, [sp, #0]
 8017210:	4907      	ldr	r1, [pc, #28]	; (8017230 <__assert_func+0x34>)
 8017212:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017216:	462b      	mov	r3, r5
 8017218:	f000 f844 	bl	80172a4 <fiprintf>
 801721c:	f000 f8d8 	bl	80173d0 <abort>
 8017220:	4b04      	ldr	r3, [pc, #16]	; (8017234 <__assert_func+0x38>)
 8017222:	461c      	mov	r4, r3
 8017224:	e7f3      	b.n	801720e <__assert_func+0x12>
 8017226:	bf00      	nop
 8017228:	200000d8 	.word	0x200000d8
 801722c:	08017a8f 	.word	0x08017a8f
 8017230:	08017a9c 	.word	0x08017a9c
 8017234:	08017aca 	.word	0x08017aca

08017238 <_calloc_r>:
 8017238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801723a:	fba1 2402 	umull	r2, r4, r1, r2
 801723e:	b94c      	cbnz	r4, 8017254 <_calloc_r+0x1c>
 8017240:	4611      	mov	r1, r2
 8017242:	9201      	str	r2, [sp, #4]
 8017244:	f7ff f934 	bl	80164b0 <_malloc_r>
 8017248:	9a01      	ldr	r2, [sp, #4]
 801724a:	4605      	mov	r5, r0
 801724c:	b930      	cbnz	r0, 801725c <_calloc_r+0x24>
 801724e:	4628      	mov	r0, r5
 8017250:	b003      	add	sp, #12
 8017252:	bd30      	pop	{r4, r5, pc}
 8017254:	220c      	movs	r2, #12
 8017256:	2500      	movs	r5, #0
 8017258:	6002      	str	r2, [r0, #0]
 801725a:	e7f8      	b.n	801724e <_calloc_r+0x16>
 801725c:	4621      	mov	r1, r4
 801725e:	f7fe f998 	bl	8015592 <memset>
 8017262:	e7f4      	b.n	801724e <_calloc_r+0x16>

08017264 <__ascii_mbtowc>:
 8017264:	b082      	sub	sp, #8
 8017266:	b901      	cbnz	r1, 801726a <__ascii_mbtowc+0x6>
 8017268:	a901      	add	r1, sp, #4
 801726a:	b142      	cbz	r2, 801727e <__ascii_mbtowc+0x1a>
 801726c:	b14b      	cbz	r3, 8017282 <__ascii_mbtowc+0x1e>
 801726e:	7813      	ldrb	r3, [r2, #0]
 8017270:	600b      	str	r3, [r1, #0]
 8017272:	7812      	ldrb	r2, [r2, #0]
 8017274:	1e10      	subs	r0, r2, #0
 8017276:	bf18      	it	ne
 8017278:	2001      	movne	r0, #1
 801727a:	b002      	add	sp, #8
 801727c:	4770      	bx	lr
 801727e:	4610      	mov	r0, r2
 8017280:	e7fb      	b.n	801727a <__ascii_mbtowc+0x16>
 8017282:	f06f 0001 	mvn.w	r0, #1
 8017286:	e7f8      	b.n	801727a <__ascii_mbtowc+0x16>

08017288 <__ascii_wctomb>:
 8017288:	b149      	cbz	r1, 801729e <__ascii_wctomb+0x16>
 801728a:	2aff      	cmp	r2, #255	; 0xff
 801728c:	bf8d      	iteet	hi
 801728e:	238a      	movhi	r3, #138	; 0x8a
 8017290:	2001      	movls	r0, #1
 8017292:	700a      	strbls	r2, [r1, #0]
 8017294:	6003      	strhi	r3, [r0, #0]
 8017296:	bf88      	it	hi
 8017298:	f04f 30ff 	movhi.w	r0, #4294967295
 801729c:	4770      	bx	lr
 801729e:	4608      	mov	r0, r1
 80172a0:	4770      	bx	lr
	...

080172a4 <fiprintf>:
 80172a4:	b40e      	push	{r1, r2, r3}
 80172a6:	b503      	push	{r0, r1, lr}
 80172a8:	ab03      	add	r3, sp, #12
 80172aa:	4601      	mov	r1, r0
 80172ac:	4805      	ldr	r0, [pc, #20]	; (80172c4 <fiprintf+0x20>)
 80172ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80172b2:	6800      	ldr	r0, [r0, #0]
 80172b4:	9301      	str	r3, [sp, #4]
 80172b6:	f7ff fd35 	bl	8016d24 <_vfiprintf_r>
 80172ba:	b002      	add	sp, #8
 80172bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80172c0:	b003      	add	sp, #12
 80172c2:	4770      	bx	lr
 80172c4:	200000d8 	.word	0x200000d8

080172c8 <__swhatbuf_r>:
 80172c8:	b570      	push	{r4, r5, r6, lr}
 80172ca:	460c      	mov	r4, r1
 80172cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172d0:	b096      	sub	sp, #88	; 0x58
 80172d2:	4615      	mov	r5, r2
 80172d4:	2900      	cmp	r1, #0
 80172d6:	461e      	mov	r6, r3
 80172d8:	da0c      	bge.n	80172f4 <__swhatbuf_r+0x2c>
 80172da:	89a3      	ldrh	r3, [r4, #12]
 80172dc:	2100      	movs	r1, #0
 80172de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80172e2:	bf0c      	ite	eq
 80172e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80172e8:	2340      	movne	r3, #64	; 0x40
 80172ea:	2000      	movs	r0, #0
 80172ec:	6031      	str	r1, [r6, #0]
 80172ee:	602b      	str	r3, [r5, #0]
 80172f0:	b016      	add	sp, #88	; 0x58
 80172f2:	bd70      	pop	{r4, r5, r6, pc}
 80172f4:	466a      	mov	r2, sp
 80172f6:	f000 f849 	bl	801738c <_fstat_r>
 80172fa:	2800      	cmp	r0, #0
 80172fc:	dbed      	blt.n	80172da <__swhatbuf_r+0x12>
 80172fe:	9901      	ldr	r1, [sp, #4]
 8017300:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017304:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017308:	4259      	negs	r1, r3
 801730a:	4159      	adcs	r1, r3
 801730c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017310:	e7eb      	b.n	80172ea <__swhatbuf_r+0x22>

08017312 <__smakebuf_r>:
 8017312:	898b      	ldrh	r3, [r1, #12]
 8017314:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017316:	079d      	lsls	r5, r3, #30
 8017318:	4606      	mov	r6, r0
 801731a:	460c      	mov	r4, r1
 801731c:	d507      	bpl.n	801732e <__smakebuf_r+0x1c>
 801731e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017322:	6023      	str	r3, [r4, #0]
 8017324:	6123      	str	r3, [r4, #16]
 8017326:	2301      	movs	r3, #1
 8017328:	6163      	str	r3, [r4, #20]
 801732a:	b002      	add	sp, #8
 801732c:	bd70      	pop	{r4, r5, r6, pc}
 801732e:	ab01      	add	r3, sp, #4
 8017330:	466a      	mov	r2, sp
 8017332:	f7ff ffc9 	bl	80172c8 <__swhatbuf_r>
 8017336:	9900      	ldr	r1, [sp, #0]
 8017338:	4605      	mov	r5, r0
 801733a:	4630      	mov	r0, r6
 801733c:	f7ff f8b8 	bl	80164b0 <_malloc_r>
 8017340:	b948      	cbnz	r0, 8017356 <__smakebuf_r+0x44>
 8017342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017346:	059a      	lsls	r2, r3, #22
 8017348:	d4ef      	bmi.n	801732a <__smakebuf_r+0x18>
 801734a:	f023 0303 	bic.w	r3, r3, #3
 801734e:	f043 0302 	orr.w	r3, r3, #2
 8017352:	81a3      	strh	r3, [r4, #12]
 8017354:	e7e3      	b.n	801731e <__smakebuf_r+0xc>
 8017356:	89a3      	ldrh	r3, [r4, #12]
 8017358:	6020      	str	r0, [r4, #0]
 801735a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801735e:	6120      	str	r0, [r4, #16]
 8017360:	81a3      	strh	r3, [r4, #12]
 8017362:	9b00      	ldr	r3, [sp, #0]
 8017364:	6163      	str	r3, [r4, #20]
 8017366:	9b01      	ldr	r3, [sp, #4]
 8017368:	b15b      	cbz	r3, 8017382 <__smakebuf_r+0x70>
 801736a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801736e:	4630      	mov	r0, r6
 8017370:	f000 f81e 	bl	80173b0 <_isatty_r>
 8017374:	b128      	cbz	r0, 8017382 <__smakebuf_r+0x70>
 8017376:	89a3      	ldrh	r3, [r4, #12]
 8017378:	f023 0303 	bic.w	r3, r3, #3
 801737c:	f043 0301 	orr.w	r3, r3, #1
 8017380:	81a3      	strh	r3, [r4, #12]
 8017382:	89a3      	ldrh	r3, [r4, #12]
 8017384:	431d      	orrs	r5, r3
 8017386:	81a5      	strh	r5, [r4, #12]
 8017388:	e7cf      	b.n	801732a <__smakebuf_r+0x18>
	...

0801738c <_fstat_r>:
 801738c:	b538      	push	{r3, r4, r5, lr}
 801738e:	2300      	movs	r3, #0
 8017390:	4d06      	ldr	r5, [pc, #24]	; (80173ac <_fstat_r+0x20>)
 8017392:	4604      	mov	r4, r0
 8017394:	4608      	mov	r0, r1
 8017396:	4611      	mov	r1, r2
 8017398:	602b      	str	r3, [r5, #0]
 801739a:	f7ee fd98 	bl	8005ece <_fstat>
 801739e:	1c43      	adds	r3, r0, #1
 80173a0:	d102      	bne.n	80173a8 <_fstat_r+0x1c>
 80173a2:	682b      	ldr	r3, [r5, #0]
 80173a4:	b103      	cbz	r3, 80173a8 <_fstat_r+0x1c>
 80173a6:	6023      	str	r3, [r4, #0]
 80173a8:	bd38      	pop	{r3, r4, r5, pc}
 80173aa:	bf00      	nop
 80173ac:	20027b0c 	.word	0x20027b0c

080173b0 <_isatty_r>:
 80173b0:	b538      	push	{r3, r4, r5, lr}
 80173b2:	2300      	movs	r3, #0
 80173b4:	4d05      	ldr	r5, [pc, #20]	; (80173cc <_isatty_r+0x1c>)
 80173b6:	4604      	mov	r4, r0
 80173b8:	4608      	mov	r0, r1
 80173ba:	602b      	str	r3, [r5, #0]
 80173bc:	f7ee fd97 	bl	8005eee <_isatty>
 80173c0:	1c43      	adds	r3, r0, #1
 80173c2:	d102      	bne.n	80173ca <_isatty_r+0x1a>
 80173c4:	682b      	ldr	r3, [r5, #0]
 80173c6:	b103      	cbz	r3, 80173ca <_isatty_r+0x1a>
 80173c8:	6023      	str	r3, [r4, #0]
 80173ca:	bd38      	pop	{r3, r4, r5, pc}
 80173cc:	20027b0c 	.word	0x20027b0c

080173d0 <abort>:
 80173d0:	2006      	movs	r0, #6
 80173d2:	b508      	push	{r3, lr}
 80173d4:	f000 f82c 	bl	8017430 <raise>
 80173d8:	2001      	movs	r0, #1
 80173da:	f7ee fd29 	bl	8005e30 <_exit>

080173de <_raise_r>:
 80173de:	291f      	cmp	r1, #31
 80173e0:	b538      	push	{r3, r4, r5, lr}
 80173e2:	4604      	mov	r4, r0
 80173e4:	460d      	mov	r5, r1
 80173e6:	d904      	bls.n	80173f2 <_raise_r+0x14>
 80173e8:	2316      	movs	r3, #22
 80173ea:	6003      	str	r3, [r0, #0]
 80173ec:	f04f 30ff 	mov.w	r0, #4294967295
 80173f0:	bd38      	pop	{r3, r4, r5, pc}
 80173f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80173f4:	b112      	cbz	r2, 80173fc <_raise_r+0x1e>
 80173f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80173fa:	b94b      	cbnz	r3, 8017410 <_raise_r+0x32>
 80173fc:	4620      	mov	r0, r4
 80173fe:	f000 f831 	bl	8017464 <_getpid_r>
 8017402:	462a      	mov	r2, r5
 8017404:	4601      	mov	r1, r0
 8017406:	4620      	mov	r0, r4
 8017408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801740c:	f000 b818 	b.w	8017440 <_kill_r>
 8017410:	2b01      	cmp	r3, #1
 8017412:	d00a      	beq.n	801742a <_raise_r+0x4c>
 8017414:	1c59      	adds	r1, r3, #1
 8017416:	d103      	bne.n	8017420 <_raise_r+0x42>
 8017418:	2316      	movs	r3, #22
 801741a:	6003      	str	r3, [r0, #0]
 801741c:	2001      	movs	r0, #1
 801741e:	e7e7      	b.n	80173f0 <_raise_r+0x12>
 8017420:	2400      	movs	r4, #0
 8017422:	4628      	mov	r0, r5
 8017424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017428:	4798      	blx	r3
 801742a:	2000      	movs	r0, #0
 801742c:	e7e0      	b.n	80173f0 <_raise_r+0x12>
	...

08017430 <raise>:
 8017430:	4b02      	ldr	r3, [pc, #8]	; (801743c <raise+0xc>)
 8017432:	4601      	mov	r1, r0
 8017434:	6818      	ldr	r0, [r3, #0]
 8017436:	f7ff bfd2 	b.w	80173de <_raise_r>
 801743a:	bf00      	nop
 801743c:	200000d8 	.word	0x200000d8

08017440 <_kill_r>:
 8017440:	b538      	push	{r3, r4, r5, lr}
 8017442:	2300      	movs	r3, #0
 8017444:	4d06      	ldr	r5, [pc, #24]	; (8017460 <_kill_r+0x20>)
 8017446:	4604      	mov	r4, r0
 8017448:	4608      	mov	r0, r1
 801744a:	4611      	mov	r1, r2
 801744c:	602b      	str	r3, [r5, #0]
 801744e:	f7ee fcdf 	bl	8005e10 <_kill>
 8017452:	1c43      	adds	r3, r0, #1
 8017454:	d102      	bne.n	801745c <_kill_r+0x1c>
 8017456:	682b      	ldr	r3, [r5, #0]
 8017458:	b103      	cbz	r3, 801745c <_kill_r+0x1c>
 801745a:	6023      	str	r3, [r4, #0]
 801745c:	bd38      	pop	{r3, r4, r5, pc}
 801745e:	bf00      	nop
 8017460:	20027b0c 	.word	0x20027b0c

08017464 <_getpid_r>:
 8017464:	f7ee bccc 	b.w	8005e00 <_getpid>

08017468 <_init>:
 8017468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801746a:	bf00      	nop
 801746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801746e:	bc08      	pop	{r3}
 8017470:	469e      	mov	lr, r3
 8017472:	4770      	bx	lr

08017474 <_fini>:
 8017474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017476:	bf00      	nop
 8017478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801747a:	bc08      	pop	{r3}
 801747c:	469e      	mov	lr, r3
 801747e:	4770      	bx	lr


Sub_mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f0  080038f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080038f0  080038f0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f0  080038f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080038f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000068  08003960  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08003960  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013186  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002701  00000000  00000000  0003325a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00035960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef8  00000000  00000000  00036c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019829  00000000  00000000  00037b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001608f  00000000  00000000  00051381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091b68  00000000  00000000  00067410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005844  00000000  00000000  000f8f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fe7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800389c 	.word	0x0800389c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800389c 	.word	0x0800389c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char *ptr, int len){
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	if (fd == 1){
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d107      	bne.n	80001ba <_write+0x22>
		HAL_StatusTypeDef hstatus;
		//hstatus = HAL_UART_Transmit(&huart2, (uint8_t*), ptr, len, HAL_MAX_DELAY);
		if (hstatus == HAL_OK){
 80001aa:	7cfb      	ldrb	r3, [r7, #19]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d101      	bne.n	80001b4 <_write+0x1c>
			return len;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	e01a      	b.n	80001ea <_write+0x52>
		}
		else{
			return -1;
 80001b4:	f04f 33ff 	mov.w	r3, #4294967295
 80001b8:	e017      	b.n	80001ea <_write+0x52>
		}
	}
	else if (fd == 2){
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	2b02      	cmp	r3, #2
 80001be:	d112      	bne.n	80001e6 <_write+0x4e>
		for (int i=0; i<len; i++){
 80001c0:	2300      	movs	r3, #0
 80001c2:	617b      	str	r3, [r7, #20]
 80001c4:	e009      	b.n	80001da <_write+0x42>
			ITM_SendChar(ptr[i]);
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	68ba      	ldr	r2, [r7, #8]
 80001ca:	4413      	add	r3, r2
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	4618      	mov	r0, r3
 80001d0:	f7ff ffbc 	bl	800014c <ITM_SendChar>
		for (int i=0; i<len; i++){
 80001d4:	697b      	ldr	r3, [r7, #20]
 80001d6:	3301      	adds	r3, #1
 80001d8:	617b      	str	r3, [r7, #20]
 80001da:	697a      	ldr	r2, [r7, #20]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	429a      	cmp	r2, r3
 80001e0:	dbf1      	blt.n	80001c6 <_write+0x2e>
		}
		return len;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	e001      	b.n	80001ea <_write+0x52>
	}
	else{
		return -1;
 80001e6:	f04f 33ff 	mov.w	r3, #4294967295
	}
	return -1;
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	3718      	adds	r7, #24
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 fdcb 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 f883 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 fa77 	bl	80006f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000206:	f000 f8db 	bl	80003c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 800020a:	f000 f907 	bl	800041c <MX_TIM2_Init>
  MX_TIM3_Init();
 800020e:	f000 f97f 	bl	8000510 <MX_TIM3_Init>
  MX_USART1_Init();
 8000212:	f000 f9f7 	bl	8000604 <MX_USART1_Init>
  MX_USART2_UART_Init();
 8000216:	f000 fa21 	bl	800065c <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 800021a:	f000 fa49 	bl	80006b0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800021e:	2100      	movs	r1, #0
 8000220:	4834      	ldr	r0, [pc, #208]	; (80002f4 <main+0x100>)
 8000222:	f002 f805 	bl	8002230 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    HAL_Delay(1500);
 8000226:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800022a:	f000 fe15 	bl	8000e58 <HAL_Delay>
    HAL_GPIO_WritePin(POWER_SW_GPIO_Port, POWER_SW_Pin, 1);
 800022e:	2201      	movs	r2, #1
 8000230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000234:	4830      	ldr	r0, [pc, #192]	; (80002f8 <main+0x104>)
 8000236:	f001 f893 	bl	8001360 <HAL_GPIO_WritePin>
    //user_pwm_setvalue1(148);
    HAL_Delay(0);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 fe0c 	bl	8000e58 <HAL_Delay>
    int pwm = 55;
 8000240:	2337      	movs	r3, #55	; 0x37
 8000242:	607b      	str	r3, [r7, #4]
    int inc = 1;
 8000244:	2301      	movs	r3, #1
 8000246:	603b      	str	r3, [r7, #0]
    while (1)
    {
    	fprintf(2, "Test\n");
 8000248:	2302      	movs	r3, #2
 800024a:	2205      	movs	r2, #5
 800024c:	2101      	movs	r1, #1
 800024e:	482b      	ldr	r0, [pc, #172]	; (80002fc <main+0x108>)
 8000250:	f002 ff34 	bl	80030bc <fwrite>
    	printf("Test2\n");
 8000254:	482a      	ldr	r0, [pc, #168]	; (8000300 <main+0x10c>)
 8000256:	f002 ff93 	bl	8003180 <puts>
    	HAL_Delay(1000);
 800025a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025e:	f000 fdfb 	bl	8000e58 <HAL_Delay>
    	//user_pwm_setvalue1(55);
    	HAL_Delay(1000);
 8000262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000266:	f000 fdf7 	bl	8000e58 <HAL_Delay>
    	//user_pwm_setvalue1(148);
    	HAL_Delay(1000);
 800026a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026e:	f000 fdf3 	bl	8000e58 <HAL_Delay>
    	//user_pwm_setvalue1(240);
    	HAL_Delay(1000);
 8000272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000276:	f000 fdef 	bl	8000e58 <HAL_Delay>
    	//user_pwm_setvalue1(148);
    	HAL_Delay(1000);
 800027a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027e:	f000 fdeb 	bl	8000e58 <HAL_Delay>
    	pwm += inc;
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	4413      	add	r3, r2
 8000288:	607b      	str	r3, [r7, #4]
    	if(pwm == 230){
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2be6      	cmp	r3, #230	; 0xe6
 800028e:	d102      	bne.n	8000296 <main+0xa2>
    		inc = -4;
 8000290:	f06f 0303 	mvn.w	r3, #3
 8000294:	603b      	str	r3, [r7, #0]
    	}
    	if(pwm == 55){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b37      	cmp	r3, #55	; 0x37
 800029a:	d101      	bne.n	80002a0 <main+0xac>
    		inc = 4;
 800029c:	2304      	movs	r3, #4
 800029e:	603b      	str	r3, [r7, #0]
    	}
    	//HAL_Delay(500);
    	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80002a0:	2201      	movs	r2, #1
 80002a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a6:	4817      	ldr	r0, [pc, #92]	; (8000304 <main+0x110>)
 80002a8:	f001 f85a 	bl	8001360 <HAL_GPIO_WritePin>
    	  	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002b2:	4814      	ldr	r0, [pc, #80]	; (8000304 <main+0x110>)
 80002b4:	f001 f854 	bl	8001360 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_BLUE_Pin, 1);
 80002b8:	2201      	movs	r2, #1
 80002ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002be:	4811      	ldr	r0, [pc, #68]	; (8000304 <main+0x110>)
 80002c0:	f001 f84e 	bl	8001360 <HAL_GPIO_WritePin>
    	  	  HAL_Delay(1000);
 80002c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c8:	f000 fdc6 	bl	8000e58 <HAL_Delay>
    	  	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d2:	480c      	ldr	r0, [pc, #48]	; (8000304 <main+0x110>)
 80002d4:	f001 f844 	bl	8001360 <HAL_GPIO_WritePin>
    	  	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002de:	4809      	ldr	r0, [pc, #36]	; (8000304 <main+0x110>)
 80002e0:	f001 f83e 	bl	8001360 <HAL_GPIO_WritePin>
    	  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_BLUE_Pin, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ea:	4806      	ldr	r0, [pc, #24]	; (8000304 <main+0x110>)
 80002ec:	f001 f838 	bl	8001360 <HAL_GPIO_WritePin>
    	fprintf(2, "Test\n");
 80002f0:	e7aa      	b.n	8000248 <main+0x54>
 80002f2:	bf00      	nop
 80002f4:	200000d8 	.word	0x200000d8
 80002f8:	40010800 	.word	0x40010800
 80002fc:	080038b4 	.word	0x080038b4
 8000300:	080038bc 	.word	0x080038bc
 8000304:	40011000 	.word	0x40011000

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	; 0x50
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 f812 	bl	8003340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000338:	2301      	movs	r3, #1
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000354:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000358:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fa50 	bl	8001804 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800036a:	f000 fa4f 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2302      	movs	r3, #2
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000384:	f107 0314 	add.w	r3, r7, #20
 8000388:	2101      	movs	r1, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fcbc 	bl	8001d08 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000396:	f000 fa39 	bl	800080c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800039a:	2310      	movs	r3, #16
 800039c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800039e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003a2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fe3c 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003b2:	f000 fa2b 	bl	800080c <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3750      	adds	r7, #80	; 0x50
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_I2C1_Init+0x50>)
 80003c6:	4a13      	ldr	r2, [pc, #76]	; (8000414 <MX_I2C1_Init+0x54>)
 80003c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_I2C1_Init+0x50>)
 80003cc:	4a12      	ldr	r2, [pc, #72]	; (8000418 <MX_I2C1_Init+0x58>)
 80003ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_I2C1_Init+0x50>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_I2C1_Init+0x50>)
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_I2C1_Init+0x50>)
 80003de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_I2C1_Init+0x50>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_I2C1_Init+0x50>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <MX_I2C1_Init+0x50>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_I2C1_Init+0x50>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_I2C1_Init+0x50>)
 80003fe:	f000 ffc7 	bl	8001390 <HAL_I2C_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000408:	f000 fa00 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000084 	.word	0x20000084
 8000414:	40005400 	.word	0x40005400
 8000418:	000186a0 	.word	0x000186a0

0800041c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000422:	f107 0320 	add.w	r3, r7, #32
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800043e:	4b33      	ldr	r3, [pc, #204]	; (800050c <MX_TIM2_Init+0xf0>)
 8000440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000444:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480;
 8000446:	4b31      	ldr	r3, [pc, #196]	; (800050c <MX_TIM2_Init+0xf0>)
 8000448:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800044c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044e:	4b2f      	ldr	r3, [pc, #188]	; (800050c <MX_TIM2_Init+0xf0>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000454:	4b2d      	ldr	r3, [pc, #180]	; (800050c <MX_TIM2_Init+0xf0>)
 8000456:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800045a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045c:	4b2b      	ldr	r3, [pc, #172]	; (800050c <MX_TIM2_Init+0xf0>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000462:	4b2a      	ldr	r3, [pc, #168]	; (800050c <MX_TIM2_Init+0xf0>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000468:	4828      	ldr	r0, [pc, #160]	; (800050c <MX_TIM2_Init+0xf0>)
 800046a:	f001 fe91 	bl	8002190 <HAL_TIM_PWM_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000474:	f000 f9ca 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000478:	2300      	movs	r3, #0
 800047a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047c:	2300      	movs	r3, #0
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000480:	f107 0320 	add.w	r3, r7, #32
 8000484:	4619      	mov	r1, r3
 8000486:	4821      	ldr	r0, [pc, #132]	; (800050c <MX_TIM2_Init+0xf0>)
 8000488:	f002 fa40 	bl	800290c <HAL_TIMEx_MasterConfigSynchronization>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000492:	f000 f9bb 	bl	800080c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000496:	2360      	movs	r3, #96	; 0x60
 8000498:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	4817      	ldr	r0, [pc, #92]	; (800050c <MX_TIM2_Init+0xf0>)
 80004ae:	f001 ff5b 	bl	8002368 <HAL_TIM_PWM_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80004b8:	f000 f9a8 	bl	800080c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2204      	movs	r2, #4
 80004c0:	4619      	mov	r1, r3
 80004c2:	4812      	ldr	r0, [pc, #72]	; (800050c <MX_TIM2_Init+0xf0>)
 80004c4:	f001 ff50 	bl	8002368 <HAL_TIM_PWM_ConfigChannel>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80004ce:	f000 f99d 	bl	800080c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2208      	movs	r2, #8
 80004d6:	4619      	mov	r1, r3
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <MX_TIM2_Init+0xf0>)
 80004da:	f001 ff45 	bl	8002368 <HAL_TIM_PWM_ConfigChannel>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80004e4:	f000 f992 	bl	800080c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	220c      	movs	r2, #12
 80004ec:	4619      	mov	r1, r3
 80004ee:	4807      	ldr	r0, [pc, #28]	; (800050c <MX_TIM2_Init+0xf0>)
 80004f0:	f001 ff3a 	bl	8002368 <HAL_TIM_PWM_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80004fa:	f000 f987 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <MX_TIM2_Init+0xf0>)
 8000500:	f000 fa2c 	bl	800095c <HAL_TIM_MspPostInit>

}
 8000504:	bf00      	nop
 8000506:	3728      	adds	r7, #40	; 0x28
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000d8 	.word	0x200000d8

08000510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]
 800052e:	615a      	str	r2, [r3, #20]
 8000530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000532:	4b32      	ldr	r3, [pc, #200]	; (80005fc <MX_TIM3_Init+0xec>)
 8000534:	4a32      	ldr	r2, [pc, #200]	; (8000600 <MX_TIM3_Init+0xf0>)
 8000536:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000538:	4b30      	ldr	r3, [pc, #192]	; (80005fc <MX_TIM3_Init+0xec>)
 800053a:	2200      	movs	r2, #0
 800053c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <MX_TIM3_Init+0xec>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000544:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <MX_TIM3_Init+0xec>)
 8000546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800054a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054c:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <MX_TIM3_Init+0xec>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <MX_TIM3_Init+0xec>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000558:	4828      	ldr	r0, [pc, #160]	; (80005fc <MX_TIM3_Init+0xec>)
 800055a:	f001 fe19 	bl	8002190 <HAL_TIM_PWM_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000564:	f000 f952 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4619      	mov	r1, r3
 8000576:	4821      	ldr	r0, [pc, #132]	; (80005fc <MX_TIM3_Init+0xec>)
 8000578:	f002 f9c8 	bl	800290c <HAL_TIMEx_MasterConfigSynchronization>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000582:	f000 f943 	bl	800080c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000586:	2360      	movs	r3, #96	; 0x60
 8000588:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <MX_TIM3_Init+0xec>)
 800059e:	f001 fee3 	bl	8002368 <HAL_TIM_PWM_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80005a8:	f000 f930 	bl	800080c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2204      	movs	r2, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4812      	ldr	r0, [pc, #72]	; (80005fc <MX_TIM3_Init+0xec>)
 80005b4:	f001 fed8 	bl	8002368 <HAL_TIM_PWM_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80005be:	f000 f925 	bl	800080c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2208      	movs	r2, #8
 80005c6:	4619      	mov	r1, r3
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <MX_TIM3_Init+0xec>)
 80005ca:	f001 fecd 	bl	8002368 <HAL_TIM_PWM_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80005d4:	f000 f91a 	bl	800080c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	220c      	movs	r2, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <MX_TIM3_Init+0xec>)
 80005e0:	f001 fec2 	bl	8002368 <HAL_TIM_PWM_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80005ea:	f000 f90f 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <MX_TIM3_Init+0xec>)
 80005f0:	f000 f9b4 	bl	800095c <HAL_TIM_MspPostInit>

}
 80005f4:	bf00      	nop
 80005f6:	3728      	adds	r7, #40	; 0x28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000120 	.word	0x20000120
 8000600:	40000400 	.word	0x40000400

08000604 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_USART1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_USART1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART1_Init+0x50>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_USART1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MX_USART1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_USART1_Init+0x50>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_USART1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_USART1_Init+0x50>)
 8000642:	f002 fa99 	bl	8002b78 <HAL_USART_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f8de 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000168 	.word	0x20000168
 8000658:	40013800 	.word	0x40013800

0800065c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_USART2_UART_Init+0x50>)
 8000664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000694:	f002 f992 	bl	80029bc <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800069e:	f000 f8b5 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200001ac 	.word	0x200001ac
 80006ac:	40004400 	.word	0x40004400

080006b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_USB_PCD_Init+0x3c>)
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <MX_USB_PCD_Init+0x40>)
 80006b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USB_PCD_Init+0x3c>)
 80006bc:	2208      	movs	r2, #8
 80006be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_USB_PCD_Init+0x3c>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USB_PCD_Init+0x3c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_USB_PCD_Init+0x3c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USB_PCD_Init+0x3c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_USB_PCD_Init+0x3c>)
 80006da:	f000 ff9d 	bl	8001618 <HAL_PCD_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80006e4:	f000 f892 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001f4 	.word	0x200001f4
 80006f0:	40005c00 	.word	0x40005c00

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000708:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <MX_GPIO_Init+0x104>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a3a      	ldr	r2, [pc, #232]	; (80007f8 <MX_GPIO_Init+0x104>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <MX_GPIO_Init+0x104>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0310 	and.w	r3, r3, #16
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000720:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <MX_GPIO_Init+0x104>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a34      	ldr	r2, [pc, #208]	; (80007f8 <MX_GPIO_Init+0x104>)
 8000726:	f043 0320 	orr.w	r3, r3, #32
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <MX_GPIO_Init+0x104>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0320 	and.w	r3, r3, #32
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <MX_GPIO_Init+0x104>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a2e      	ldr	r2, [pc, #184]	; (80007f8 <MX_GPIO_Init+0x104>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <MX_GPIO_Init+0x104>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <MX_GPIO_Init+0x104>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a28      	ldr	r2, [pc, #160]	; (80007f8 <MX_GPIO_Init+0x104>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_GPIO_Init+0x104>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800076e:	4823      	ldr	r0, [pc, #140]	; (80007fc <MX_GPIO_Init+0x108>)
 8000770:	f000 fdf6 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_SW_GPIO_Port, POWER_SW_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800077a:	4821      	ldr	r0, [pc, #132]	; (8000800 <MX_GPIO_Init+0x10c>)
 800077c:	f000 fdf0 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8000780:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <MX_GPIO_Init+0x108>)
 800079a:	f000 fc65 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_9;
 800079e:	f248 2304 	movw	r3, #33284	; 0x8204
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4814      	ldr	r0, [pc, #80]	; (8000804 <MX_GPIO_Init+0x110>)
 80007b4:	f000 fc58 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8;
 80007b8:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_GPIO_Init+0x114>)
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4619      	mov	r1, r3
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_GPIO_Init+0x110>)
 80007ce:	f000 fc4b 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_SW_Pin */
  GPIO_InitStruct.Pin = POWER_SW_Pin;
 80007d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_SW_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_GPIO_Init+0x10c>)
 80007ec:	f000 fc3c 	bl	8001068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40011000 	.word	0x40011000
 8000800:	40010800 	.word	0x40010800
 8000804:	40010c00 	.word	0x40010c00
 8000808:	10110000 	.word	0x10110000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_MspInit+0x5c>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4a14      	ldr	r2, [pc, #80]	; (8000874 <HAL_MspInit+0x5c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6193      	str	r3, [r2, #24]
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_MspInit+0x5c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x5c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_MspInit+0x5c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_MspInit+0x5c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_MspInit+0x60>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_MspInit+0x60>)
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	40021000 	.word	0x40021000
 8000878:	40010000 	.word	0x40010000

0800087c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <HAL_I2C_MspInit+0x74>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d125      	bne.n	80008e8 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_I2C_MspInit+0x78>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_I2C_MspInit+0x78>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_I2C_MspInit+0x78>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0308 	and.w	r3, r3, #8
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008b4:	23c0      	movs	r3, #192	; 0xc0
 80008b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b8:	2312      	movs	r3, #18
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <HAL_I2C_MspInit+0x7c>)
 80008cc:	f000 fbcc 	bl	8001068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_I2C_MspInit+0x78>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_I2C_MspInit+0x78>)
 80008d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008da:	61d3      	str	r3, [r2, #28]
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_I2C_MspInit+0x78>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40005400 	.word	0x40005400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010c00 	.word	0x40010c00

080008fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800090c:	d10c      	bne.n	8000928 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_TIM_PWM_MspInit+0x58>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_TIM_PWM_MspInit+0x58>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_TIM_PWM_MspInit+0x58>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000926:	e010      	b.n	800094a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_TIM_PWM_MspInit+0x5c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10b      	bne.n	800094a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_TIM_PWM_MspInit+0x58>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_TIM_PWM_MspInit+0x58>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_TIM_PWM_MspInit+0x58>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000
 8000958:	40000400 	.word	0x40000400

0800095c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800097a:	d143      	bne.n	8000a04 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a3a      	ldr	r2, [pc, #232]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0308 	and.w	r3, r3, #8
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ac:	2303      	movs	r3, #3
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2302      	movs	r3, #2
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0318 	add.w	r3, r7, #24
 80009bc:	4619      	mov	r1, r3
 80009be:	482c      	ldr	r0, [pc, #176]	; (8000a70 <HAL_TIM_MspPostInit+0x114>)
 80009c0:	f000 fb52 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2302      	movs	r3, #2
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4826      	ldr	r0, [pc, #152]	; (8000a74 <HAL_TIM_MspPostInit+0x118>)
 80009da:	f000 fb45 	bl	8001068 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <HAL_TIM_MspPostInit+0x11c>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80009fc:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <HAL_TIM_MspPostInit+0x11c>)
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a02:	e02e      	b.n	8000a62 <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM3)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_TIM_MspPostInit+0x120>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d129      	bne.n	8000a62 <HAL_TIM_MspPostInit+0x106>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a26:	2333      	movs	r3, #51	; 0x33
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	4619      	mov	r1, r3
 8000a38:	480e      	ldr	r0, [pc, #56]	; (8000a74 <HAL_TIM_MspPostInit+0x118>)
 8000a3a:	f000 fb15 	bl	8001068 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_TIM_MspPostInit+0x11c>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a46:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_TIM_MspPostInit+0x11c>)
 8000a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a60:	6053      	str	r3, [r2, #4]
}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	; 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010800 	.word	0x40010800
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	40000400 	.word	0x40000400

08000a80 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_USART_MspInit+0x8c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d131      	bne.n	8000b04 <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <HAL_USART_MspInit+0x90>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <HAL_USART_MspInit+0x90>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_USART_MspInit+0x90>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_USART_MspInit+0x90>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <HAL_USART_MspInit+0x90>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_USART_MspInit+0x90>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ad0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <HAL_USART_MspInit+0x94>)
 8000ae6:	f000 fabf 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <HAL_USART_MspInit+0x94>)
 8000b00:	f000 fab2 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010800 	.word	0x40010800

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d12f      	bne.n	8000b98 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b42:	61d3      	str	r3, [r2, #28]
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b7c:	f000 fa74 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b80:	2308      	movs	r3, #8
 8000b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b94:	f000 fa68 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010800 	.word	0x40010800

08000bac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <HAL_PCD_MspInit+0x34>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_PCD_MspInit+0x38>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_PCD_MspInit+0x38>)
 8000bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_PCD_MspInit+0x38>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40005c00 	.word	0x40005c00
 8000be4:	40021000 	.word	0x40021000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2e:	f000 f8f7 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e00a      	b.n	8000c5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c48:	f3af 8000 	nop.w
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	b2ca      	uxtb	r2, r1
 8000c56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dbf0      	blt.n	8000c48 <_read+0x12>
  }

  return len;
 8000c66:	687b      	ldr	r3, [r7, #4]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c96:	605a      	str	r2, [r3, #4]
  return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <_isatty>:

int _isatty(int file)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f002 fb6c 	bl	80033dc <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20001800 	.word	0x20001800
 8000d30:	00000400 	.word	0x00000400
 8000d34:	200004cc 	.word	0x200004cc
 8000d38:	20000620 	.word	0x20000620

08000d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d48:	f7ff fff8 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d4e:	490c      	ldr	r1, [pc, #48]	; (8000d80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d64:	4c09      	ldr	r4, [pc, #36]	; (8000d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f002 fb39 	bl	80033e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff fa3d 	bl	80001f4 <main>
  bx lr
 8000d7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d84:	080038f8 	.word	0x080038f8
  ldr r2, =_sbss
 8000d88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d8c:	20000620 	.word	0x20000620

08000d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_2_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x28>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f92b 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fd32 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f935 	bl	800104e <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f90b 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_IncTick+0x20>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <HAL_IncTick+0x20>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	200004d0 	.word	0x200004d0

08000e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <HAL_GetTick+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	200004d0 	.word	0x200004d0

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff fff0 	bl	8000e44 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffe0 	bl	8000e44 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_SetPriority>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Config>:
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff90 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff49 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb0 	bl	8000fbc <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b08b      	sub	sp, #44	; 0x2c
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	e161      	b.n	8001340 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800107c:	2201      	movs	r2, #1
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8150 	bne.w	800133a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a97      	ldr	r2, [pc, #604]	; (80012fc <HAL_GPIO_Init+0x294>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d05e      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010a4:	4a95      	ldr	r2, [pc, #596]	; (80012fc <HAL_GPIO_Init+0x294>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d875      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010aa:	4a95      	ldr	r2, [pc, #596]	; (8001300 <HAL_GPIO_Init+0x298>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d058      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010b0:	4a93      	ldr	r2, [pc, #588]	; (8001300 <HAL_GPIO_Init+0x298>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d86f      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010b6:	4a93      	ldr	r2, [pc, #588]	; (8001304 <HAL_GPIO_Init+0x29c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d052      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010bc:	4a91      	ldr	r2, [pc, #580]	; (8001304 <HAL_GPIO_Init+0x29c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d869      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010c2:	4a91      	ldr	r2, [pc, #580]	; (8001308 <HAL_GPIO_Init+0x2a0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d04c      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010c8:	4a8f      	ldr	r2, [pc, #572]	; (8001308 <HAL_GPIO_Init+0x2a0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d863      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010ce:	4a8f      	ldr	r2, [pc, #572]	; (800130c <HAL_GPIO_Init+0x2a4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d046      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010d4:	4a8d      	ldr	r2, [pc, #564]	; (800130c <HAL_GPIO_Init+0x2a4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d85d      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d82a      	bhi.n	8001134 <HAL_GPIO_Init+0xcc>
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d859      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010e2:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <HAL_GPIO_Init+0x80>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001163 	.word	0x08001163
 80010ec:	0800113d 	.word	0x0800113d
 80010f0:	0800114f 	.word	0x0800114f
 80010f4:	08001191 	.word	0x08001191
 80010f8:	08001197 	.word	0x08001197
 80010fc:	08001197 	.word	0x08001197
 8001100:	08001197 	.word	0x08001197
 8001104:	08001197 	.word	0x08001197
 8001108:	08001197 	.word	0x08001197
 800110c:	08001197 	.word	0x08001197
 8001110:	08001197 	.word	0x08001197
 8001114:	08001197 	.word	0x08001197
 8001118:	08001197 	.word	0x08001197
 800111c:	08001197 	.word	0x08001197
 8001120:	08001197 	.word	0x08001197
 8001124:	08001197 	.word	0x08001197
 8001128:	08001197 	.word	0x08001197
 800112c:	08001145 	.word	0x08001145
 8001130:	08001159 	.word	0x08001159
 8001134:	4a76      	ldr	r2, [pc, #472]	; (8001310 <HAL_GPIO_Init+0x2a8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800113a:	e02c      	b.n	8001196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e029      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	3304      	adds	r3, #4
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e024      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	3308      	adds	r3, #8
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e01f      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	330c      	adds	r3, #12
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e01a      	b.n	8001198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800116a:	2304      	movs	r3, #4
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e013      	b.n	8001198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001178:	2308      	movs	r3, #8
 800117a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	611a      	str	r2, [r3, #16]
          break;
 8001182:	e009      	b.n	8001198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	615a      	str	r2, [r3, #20]
          break;
 800118e:	e003      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x130>
          break;
 8001196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2bff      	cmp	r3, #255	; 0xff
 800119c:	d801      	bhi.n	80011a2 <HAL_GPIO_Init+0x13a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_Init+0x13e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3304      	adds	r3, #4
 80011a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2bff      	cmp	r3, #255	; 0xff
 80011ac:	d802      	bhi.n	80011b4 <HAL_GPIO_Init+0x14c>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	e002      	b.n	80011ba <HAL_GPIO_Init+0x152>
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	3b08      	subs	r3, #8
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	210f      	movs	r1, #15
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	6a39      	ldr	r1, [r7, #32]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	431a      	orrs	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80a9 	beq.w	800133a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <HAL_GPIO_Init+0x2ac>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_GPIO_Init+0x2ac>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_GPIO_Init+0x2ac>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001200:	4a45      	ldr	r2, [pc, #276]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a3d      	ldr	r2, [pc, #244]	; (800131c <HAL_GPIO_Init+0x2b4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d00d      	beq.n	8001248 <HAL_GPIO_Init+0x1e0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a3c      	ldr	r2, [pc, #240]	; (8001320 <HAL_GPIO_Init+0x2b8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x1dc>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3b      	ldr	r2, [pc, #236]	; (8001324 <HAL_GPIO_Init+0x2bc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_Init+0x1d8>
 800123c:	2302      	movs	r3, #2
 800123e:	e004      	b.n	800124a <HAL_GPIO_Init+0x1e2>
 8001240:	2303      	movs	r3, #3
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x1e2>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_GPIO_Init+0x1e2>
 8001248:	2300      	movs	r3, #0
 800124a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4093      	lsls	r3, r2
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800125a:	492f      	ldr	r1, [pc, #188]	; (8001318 <HAL_GPIO_Init+0x2b0>)
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	492b      	ldr	r1, [pc, #172]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	608b      	str	r3, [r1, #8]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4927      	ldr	r1, [pc, #156]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 800128c:	4013      	ands	r3, r2
 800128e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	4921      	ldr	r1, [pc, #132]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60cb      	str	r3, [r1, #12]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	491d      	ldr	r1, [pc, #116]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4917      	ldr	r1, [pc, #92]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	4913      	ldr	r1, [pc, #76]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d01f      	beq.n	800132c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	490d      	ldr	r1, [pc, #52]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e01f      	b.n	800133a <HAL_GPIO_Init+0x2d2>
 80012fa:	bf00      	nop
 80012fc:	10320000 	.word	0x10320000
 8001300:	10310000 	.word	0x10310000
 8001304:	10220000 	.word	0x10220000
 8001308:	10210000 	.word	0x10210000
 800130c:	10120000 	.word	0x10120000
 8001310:	10110000 	.word	0x10110000
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	40010800 	.word	0x40010800
 8001320:	40010c00 	.word	0x40010c00
 8001324:	40011000 	.word	0x40011000
 8001328:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_GPIO_Init+0x2f4>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	43db      	mvns	r3, r3
 8001334:	4909      	ldr	r1, [pc, #36]	; (800135c <HAL_GPIO_Init+0x2f4>)
 8001336:	4013      	ands	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	3301      	adds	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	f47f ae96 	bne.w	800107c <HAL_GPIO_Init+0x14>
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	372c      	adds	r7, #44	; 0x2c
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001370:	787b      	ldrb	r3, [r7, #1]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	041a      	lsls	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	611a      	str	r2, [r3, #16]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e12b      	b.n	80015fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fa60 	bl	800087c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2224      	movs	r2, #36	; 0x24
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0201 	bic.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013f4:	f000 fdd0 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80013f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a81      	ldr	r2, [pc, #516]	; (8001604 <HAL_I2C_Init+0x274>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d807      	bhi.n	8001414 <HAL_I2C_Init+0x84>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4a80      	ldr	r2, [pc, #512]	; (8001608 <HAL_I2C_Init+0x278>)
 8001408:	4293      	cmp	r3, r2
 800140a:	bf94      	ite	ls
 800140c:	2301      	movls	r3, #1
 800140e:	2300      	movhi	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	e006      	b.n	8001422 <HAL_I2C_Init+0x92>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a7d      	ldr	r2, [pc, #500]	; (800160c <HAL_I2C_Init+0x27c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0e7      	b.n	80015fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a78      	ldr	r2, [pc, #480]	; (8001610 <HAL_I2C_Init+0x280>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9b      	lsrs	r3, r3, #18
 8001434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <HAL_I2C_Init+0x274>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d802      	bhi.n	8001464 <HAL_I2C_Init+0xd4>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	e009      	b.n	8001478 <HAL_I2C_Init+0xe8>
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a69      	ldr	r2, [pc, #420]	; (8001614 <HAL_I2C_Init+0x284>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	099b      	lsrs	r3, r3, #6
 8001476:	3301      	adds	r3, #1
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	430b      	orrs	r3, r1
 800147e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800148a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	495c      	ldr	r1, [pc, #368]	; (8001604 <HAL_I2C_Init+0x274>)
 8001494:	428b      	cmp	r3, r1
 8001496:	d819      	bhi.n	80014cc <HAL_I2C_Init+0x13c>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1e59      	subs	r1, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a6:	1c59      	adds	r1, r3, #1
 80014a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014ac:	400b      	ands	r3, r1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00a      	beq.n	80014c8 <HAL_I2C_Init+0x138>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1e59      	subs	r1, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c6:	e051      	b.n	800156c <HAL_I2C_Init+0x1dc>
 80014c8:	2304      	movs	r3, #4
 80014ca:	e04f      	b.n	800156c <HAL_I2C_Init+0x1dc>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d111      	bne.n	80014f8 <HAL_I2C_Init+0x168>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	e012      	b.n	800151e <HAL_I2C_Init+0x18e>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1e58      	subs	r0, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	0099      	lsls	r1, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	fbb0 f3f3 	udiv	r3, r0, r3
 800150e:	3301      	adds	r3, #1
 8001510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Init+0x196>
 8001522:	2301      	movs	r3, #1
 8001524:	e022      	b.n	800156c <HAL_I2C_Init+0x1dc>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10e      	bne.n	800154c <HAL_I2C_Init+0x1bc>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e58      	subs	r0, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	440b      	add	r3, r1
 800153c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154a:	e00f      	b.n	800156c <HAL_I2C_Init+0x1dc>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1e58      	subs	r0, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	0099      	lsls	r1, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	6809      	ldr	r1, [r1, #0]
 8001570:	4313      	orrs	r3, r2
 8001572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800159a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6911      	ldr	r1, [r2, #16]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68d2      	ldr	r2, [r2, #12]
 80015a6:	4311      	orrs	r1, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	000186a0 	.word	0x000186a0
 8001608:	001e847f 	.word	0x001e847f
 800160c:	003d08ff 	.word	0x003d08ff
 8001610:	431bde83 	.word	0x431bde83
 8001614:	10624dd3 	.word	0x10624dd3

08001618 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0e8      	b.n	80017fc <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d106      	bne.n	8001644 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fab4 	bl	8000bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2203      	movs	r2, #3
 8001648:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fbd5 	bl	8002e06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3304      	adds	r3, #4
 8001664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001666:	f001 fbc1 	bl	8002dec <USB_CoreInit>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0bf      	b.n	80017fc <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f001 fbd9 	bl	8002e3a <USB_SetCurrentMode>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2202      	movs	r2, #2
 8001692:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0b0      	b.n	80017fc <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e03e      	b.n	800171e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3311      	adds	r3, #17
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	3310      	adds	r3, #16
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	3313      	adds	r3, #19
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3320      	adds	r3, #32
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3324      	adds	r3, #36	; 0x24
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	3301      	adds	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	791b      	ldrb	r3, [r3, #4]
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	429a      	cmp	r2, r3
 8001726:	d3bb      	bcc.n	80016a0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e044      	b.n	80017b8 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	f203 1353 	addw	r3, r3, #339	; 0x153
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	3301      	adds	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	791b      	ldrb	r3, [r3, #4]
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d3b5      	bcc.n	800172e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3304      	adds	r3, #4
 80017ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017cc:	f001 fb41 	bl	8002e52 <USB_DevInit>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00c      	b.n	80017fc <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 fb49 	bl	8002e8c <USB_DevDisconnect>

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e272      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8087 	beq.w	8001932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001824:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d00c      	beq.n	800184a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b08      	cmp	r3, #8
 800183a:	d112      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
 800183c:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d10b      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06c      	beq.n	8001930 <HAL_RCC_OscConfig+0x12c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d168      	bne.n	8001930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e24c      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x76>
 800186c:	4b80      	ldr	r3, [pc, #512]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7f      	ldr	r2, [pc, #508]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e02e      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x98>
 8001882:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7a      	ldr	r2, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a77      	ldr	r2, [pc, #476]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e01d      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0xbc>
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a71      	ldr	r2, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b68      	ldr	r3, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fab0 	bl	8000e44 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff faac 	bl	8000e44 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e200      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0xe4>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fa9c 	bl	8000e44 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fa98 	bl	8000e44 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1ec      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x10c>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193e:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
 8001956:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e1c0      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4939      	ldr	r1, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	e03a      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fa51 	bl	8000e44 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fa4d 	bl	8000e44 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1a1      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fa30 	bl	8000e44 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fa2c 	bl	8000e44 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e180      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d03a      	beq.n	8001a88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d019      	beq.n	8001a4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fa10 	bl	8000e44 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fa0c 	bl	8000e44 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e160      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 face 	bl	8001fe8 <RCC_Delay>
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff f9f6 	bl	8000e44 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5a:	e00f      	b.n	8001a7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff f9f2 	bl	8000e44 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d908      	bls.n	8001a7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e146      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	42420000 	.word	0x42420000
 8001a78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e9      	bne.n	8001a5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a6 	beq.w	8001be2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a87      	ldr	r2, [pc, #540]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff f9b3 	bl	8000e44 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff f9af 	bl	8000e44 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b64      	cmp	r3, #100	; 0x64
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e103      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x312>
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a6e      	ldr	r2, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x334>
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a66      	ldr	r2, [pc, #408]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	e01c      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d10c      	bne.n	8001b5a <HAL_RCC_OscConfig+0x356>
 8001b40:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a60      	ldr	r2, [pc, #384]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a5d      	ldr	r2, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	e00b      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b5a:	4b5b      	ldr	r3, [pc, #364]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a5a      	ldr	r2, [pc, #360]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d015      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f963 	bl	8000e44 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff f95f 	bl	8000e44 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0b1      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ee      	beq.n	8001b82 <HAL_RCC_OscConfig+0x37e>
 8001ba4:	e014      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f94d 	bl	8000e44 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff f949 	bl	8000e44 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e09b      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	4b40      	ldr	r3, [pc, #256]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d061      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d146      	bne.n	8001c8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff f91d 	bl	8000e44 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff f919 	bl	8000e44 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e06d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4921      	ldr	r1, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a19      	ldr	r1, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	491b      	ldr	r1, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff f8ed 	bl	8000e44 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff f8e9 	bl	8000e44 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e03d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46a>
 8001c8c:	e035      	b.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f8d6 	bl	8000e44 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff f8d2 	bl	8000e44 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e026      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x498>
 8001cba:	e01e      	b.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e019      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_OscConfig+0x500>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0d0      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4965      	ldr	r1, [pc, #404]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d040      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e073      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06b      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4936      	ldr	r1, [pc, #216]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f824 	bl	8000e44 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f820 	bl	8000e44 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e053      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d210      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe ff82 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	080038c4 	.word	0x080038c4
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x30>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0a:	e027      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	e027      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d010      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0c5b      	lsrs	r3, r3, #17
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3e:	fb03 f202 	mul.w	r2, r3, r2
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e004      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	613b      	str	r3, [r7, #16]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	613b      	str	r3, [r7, #16]
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	693b      	ldr	r3, [r7, #16]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	007a1200 	.word	0x007a1200
 8001f78:	080038dc 	.word	0x080038dc
 8001f7c:	080038ec 	.word	0x080038ec
 8001f80:	003d0900 	.word	0x003d0900

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f9c:	f7ff fff2 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4903      	ldr	r1, [pc, #12]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	080038d4 	.word	0x080038d4

08001fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc4:	f7ff ffde 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0adb      	lsrs	r3, r3, #11
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4903      	ldr	r1, [pc, #12]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	080038d4 	.word	0x080038d4

08001fe8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <RCC_Delay+0x34>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <RCC_Delay+0x38>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0a5b      	lsrs	r3, r3, #9
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002004:	bf00      	nop
  }
  while (Delay --);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	60fa      	str	r2, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f9      	bne.n	8002004 <RCC_Delay+0x1c>
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000000 	.word	0x20000000
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d07d      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002044:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4a4b      	ldr	r2, [pc, #300]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205a:	61d3      	str	r3, [r2, #28]
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002068:	2301      	movs	r3, #1
 800206a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b46      	ldr	r3, [pc, #280]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d118      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a42      	ldr	r2, [pc, #264]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002084:	f7fe fede 	bl	8000e44 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	e008      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208c:	f7fe feda 	bl	8000e44 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e06d      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020aa:	4b36      	ldr	r3, [pc, #216]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d02e      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d027      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020d2:	4b2e      	ldr	r3, [pc, #184]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020d8:	4b2c      	ldr	r3, [pc, #176]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020de:	4a29      	ldr	r2, [pc, #164]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d014      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7fe fea9 	bl	8000e44 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7fe fea5 	bl	8000e44 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e036      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ee      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4917      	ldr	r1, [pc, #92]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002126:	4313      	orrs	r3, r2
 8002128:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800212a:	7dfb      	ldrb	r3, [r7, #23]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	4a13      	ldr	r2, [pc, #76]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	490b      	ldr	r1, [pc, #44]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	4904      	ldr	r1, [pc, #16]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	40007000 	.word	0x40007000
 800218c:	42420440 	.word	0x42420440

08002190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e041      	b.n	8002226 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fba0 	bl	80008fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f000 f98c 	bl	80024ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_TIM_PWM_Start+0x24>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e022      	b.n	800229a <HAL_TIM_PWM_Start+0x6a>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b04      	cmp	r3, #4
 8002258:	d109      	bne.n	800226e <HAL_TIM_PWM_Start+0x3e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	e015      	b.n	800229a <HAL_TIM_PWM_Start+0x6a>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d109      	bne.n	8002288 <HAL_TIM_PWM_Start+0x58>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e008      	b.n	800229a <HAL_TIM_PWM_Start+0x6a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e059      	b.n	8002356 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <HAL_TIM_PWM_Start+0x82>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b0:	e013      	b.n	80022da <HAL_TIM_PWM_Start+0xaa>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d104      	bne.n	80022c2 <HAL_TIM_PWM_Start+0x92>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c0:	e00b      	b.n	80022da <HAL_TIM_PWM_Start+0xaa>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d104      	bne.n	80022d2 <HAL_TIM_PWM_Start+0xa2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d0:	e003      	b.n	80022da <HAL_TIM_PWM_Start+0xaa>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2201      	movs	r2, #1
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 faee 	bl	80028c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_TIM_PWM_Start+0x130>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d107      	bne.n	8002302 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_TIM_PWM_Start+0x130>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d009      	beq.n	8002320 <HAL_TIM_PWM_Start+0xf0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002314:	d004      	beq.n	8002320 <HAL_TIM_PWM_Start+0xf0>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <HAL_TIM_PWM_Start+0x134>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d111      	bne.n	8002344 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d010      	beq.n	8002354 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0201 	orr.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002342:	e007      	b.n	8002354 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400

08002368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002382:	2302      	movs	r3, #2
 8002384:	e0ae      	b.n	80024e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b0c      	cmp	r3, #12
 8002392:	f200 809f 	bhi.w	80024d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002396:	a201      	add	r2, pc, #4	; (adr r2, 800239c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	080023d1 	.word	0x080023d1
 80023a0:	080024d5 	.word	0x080024d5
 80023a4:	080024d5 	.word	0x080024d5
 80023a8:	080024d5 	.word	0x080024d5
 80023ac:	08002411 	.word	0x08002411
 80023b0:	080024d5 	.word	0x080024d5
 80023b4:	080024d5 	.word	0x080024d5
 80023b8:	080024d5 	.word	0x080024d5
 80023bc:	08002453 	.word	0x08002453
 80023c0:	080024d5 	.word	0x080024d5
 80023c4:	080024d5 	.word	0x080024d5
 80023c8:	080024d5 	.word	0x080024d5
 80023cc:	08002493 	.word	0x08002493
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f8ec 	bl	80025b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0208 	orr.w	r2, r2, #8
 80023ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0204 	bic.w	r2, r2, #4
 80023fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6999      	ldr	r1, [r3, #24]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	619a      	str	r2, [r3, #24]
      break;
 800240e:	e064      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f932 	bl	8002680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6999      	ldr	r1, [r3, #24]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	021a      	lsls	r2, r3, #8
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	619a      	str	r2, [r3, #24]
      break;
 8002450:	e043      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f97b 	bl	8002754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0208 	orr.w	r2, r2, #8
 800246c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0204 	bic.w	r2, r2, #4
 800247c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69d9      	ldr	r1, [r3, #28]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	61da      	str	r2, [r3, #28]
      break;
 8002490:	e023      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f9c5 	bl	8002828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69d9      	ldr	r1, [r3, #28]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	021a      	lsls	r2, r3, #8
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	61da      	str	r2, [r3, #28]
      break;
 80024d2:	e002      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	75fb      	strb	r3, [r7, #23]
      break;
 80024d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a2b      	ldr	r2, [pc, #172]	; (80025ac <TIM_Base_SetConfig+0xc0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <TIM_Base_SetConfig+0x28>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0x28>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <TIM_Base_SetConfig+0xc4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d108      	bne.n	8002526 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <TIM_Base_SetConfig+0xc0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <TIM_Base_SetConfig+0x52>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d003      	beq.n	800253e <TIM_Base_SetConfig+0x52>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <TIM_Base_SetConfig+0xc4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d108      	bne.n	8002550 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <TIM_Base_SetConfig+0xc0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d103      	bne.n	8002584 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f023 0201 	bic.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	611a      	str	r2, [r3, #16]
  }
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400

080025b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f023 0201 	bic.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <TIM_OC1_SetConfig+0xc8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10c      	bne.n	800262a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0308 	bic.w	r3, r3, #8
 8002616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a13      	ldr	r2, [pc, #76]	; (800267c <TIM_OC1_SetConfig+0xc8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d111      	bne.n	8002656 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	621a      	str	r2, [r3, #32]
}
 8002670:	bf00      	nop
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40012c00 	.word	0x40012c00

08002680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f023 0210 	bic.w	r2, r3, #16
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f023 0320 	bic.w	r3, r3, #32
 80026ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <TIM_OC2_SetConfig+0xd0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10d      	bne.n	80026fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <TIM_OC2_SetConfig+0xd0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d113      	bne.n	800272c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800270a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40012c00 	.word	0x40012c00

08002754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800279c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <TIM_OC3_SetConfig+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10d      	bne.n	80027ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <TIM_OC3_SetConfig+0xd0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d113      	bne.n	80027fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	621a      	str	r2, [r3, #32]
}
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40012c00 	.word	0x40012c00

08002828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	031b      	lsls	r3, r3, #12
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <TIM_OC4_SetConfig+0x98>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d109      	bne.n	800289c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800288e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00

080028c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2201      	movs	r2, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1a      	ldr	r2, [r3, #32]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1a      	ldr	r2, [r3, #32]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	431a      	orrs	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	621a      	str	r2, [r3, #32]
}
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002920:	2302      	movs	r3, #2
 8002922:	e041      	b.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d004      	beq.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d10c      	bne.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002982:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	4313      	orrs	r3, r2
 800298c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40000400 	.word	0x40000400

080029bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e042      	b.n	8002a54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe f898 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2224      	movs	r2, #36	; 0x24
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f82b 	bl	8002a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a96:	f023 030c 	bic.w	r3, r3, #12
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2c      	ldr	r2, [pc, #176]	; (8002b70 <UART_SetConfig+0x114>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d103      	bne.n	8002acc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ac4:	f7ff fa7c 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	e002      	b.n	8002ad2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002acc:	f7ff fa64 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	009a      	lsls	r2, r3, #2
 8002adc:	441a      	add	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	4a22      	ldr	r2, [pc, #136]	; (8002b74 <UART_SetConfig+0x118>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	0119      	lsls	r1, r3, #4
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <UART_SetConfig+0x118>)
 8002b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2064      	movs	r0, #100	; 0x64
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	3332      	adds	r3, #50	; 0x32
 8002b1c:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <UART_SetConfig+0x118>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b28:	4419      	add	r1, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	009a      	lsls	r2, r3, #2
 8002b34:	441a      	add	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <UART_SetConfig+0x118>)
 8002b42:	fba3 0302 	umull	r0, r3, r3, r2
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2064      	movs	r0, #100	; 0x64
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	3332      	adds	r3, #50	; 0x32
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <UART_SetConfig+0x118>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	f003 020f 	and.w	r2, r3, #15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	440a      	add	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40013800 	.word	0x40013800
 8002b74:	51eb851f 	.word	0x51eb851f

08002b78 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e033      	b.n	8002bf2 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd ff6e 	bl	8000a80 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f825 	bl	8002bfc <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be0:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020c 	bic.w	r2, r2, #12
 8002c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002c30:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c5e:	f023 030c 	bic.w	r3, r3, #12
 8002c62:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c90:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if (husart->Instance == USART1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a53      	ldr	r2, [pc, #332]	; (8002de4 <USART_SetConfig+0x1e8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d14f      	bne.n	8002d3c <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c9c:	f7ff f990 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 8002ca0:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	4a4b      	ldr	r2, [pc, #300]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	0119      	lsls	r1, r3, #4
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	009a      	lsls	r2, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002cda:	fba3 0302 	umull	r0, r3, r3, r2
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2064      	movs	r0, #100	; 0x64
 8002ce2:	fb00 f303 	mul.w	r3, r0, r3
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	3332      	adds	r3, #50	; 0x32
 8002cec:	4a3e      	ldr	r2, [pc, #248]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8002cfa:	4419      	add	r1, r3
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009a      	lsls	r2, r3, #2
 8002d06:	441a      	add	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d12:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002d14:	fba3 0302 	umull	r0, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2064      	movs	r0, #100	; 0x64
 8002d1c:	fb00 f303 	mul.w	r3, r0, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	440a      	add	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8002d3a:	e04e      	b.n	8002dda <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d3c:	f7ff f92c 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002d40:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	0119      	lsls	r1, r3, #4
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009a      	lsls	r2, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2064      	movs	r0, #100	; 0x64
 8002d82:	fb00 f303 	mul.w	r3, r0, r3
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	3332      	adds	r3, #50	; 0x32
 8002d8c:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8002d9a:	4419      	add	r1, r3
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009a      	lsls	r2, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002db4:	fba3 0302 	umull	r0, r3, r3, r2
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	2064      	movs	r0, #100	; 0x64
 8002dbc:	fb00 f303 	mul.w	r3, r0, r3
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	3332      	adds	r3, #50	; 0x32
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <USART_SetConfig+0x1ec>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	f003 020f 	and.w	r2, r3, #15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40013800 	.word	0x40013800
 8002de8:	51eb851f 	.word	0x51eb851f

08002dec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	4638      	mov	r0, r7
 8002df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e0e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002e12:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	4013      	ands	r3, r2
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <std>:
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	b510      	push	{r4, lr}
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8002eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eae:	6083      	str	r3, [r0, #8]
 8002eb0:	8181      	strh	r1, [r0, #12]
 8002eb2:	6643      	str	r3, [r0, #100]	; 0x64
 8002eb4:	81c2      	strh	r2, [r0, #14]
 8002eb6:	6183      	str	r3, [r0, #24]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	2208      	movs	r2, #8
 8002ebc:	305c      	adds	r0, #92	; 0x5c
 8002ebe:	f000 fa3f 	bl	8003340 <memset>
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <std+0x58>)
 8002ec4:	6224      	str	r4, [r4, #32]
 8002ec6:	6263      	str	r3, [r4, #36]	; 0x24
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <std+0x5c>)
 8002eca:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <std+0x60>)
 8002ece:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <std+0x64>)
 8002ed2:	6323      	str	r3, [r4, #48]	; 0x30
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <std+0x68>)
 8002ed6:	429c      	cmp	r4, r3
 8002ed8:	d006      	beq.n	8002ee8 <std+0x48>
 8002eda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002ede:	4294      	cmp	r4, r2
 8002ee0:	d002      	beq.n	8002ee8 <std+0x48>
 8002ee2:	33d0      	adds	r3, #208	; 0xd0
 8002ee4:	429c      	cmp	r4, r3
 8002ee6:	d105      	bne.n	8002ef4 <std+0x54>
 8002ee8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef0:	f000 ba9e 	b.w	8003430 <__retarget_lock_init_recursive>
 8002ef4:	bd10      	pop	{r4, pc}
 8002ef6:	bf00      	nop
 8002ef8:	08003191 	.word	0x08003191
 8002efc:	080031b3 	.word	0x080031b3
 8002f00:	080031eb 	.word	0x080031eb
 8002f04:	0800320f 	.word	0x0800320f
 8002f08:	200004d4 	.word	0x200004d4

08002f0c <stdio_exit_handler>:
 8002f0c:	4a02      	ldr	r2, [pc, #8]	; (8002f18 <stdio_exit_handler+0xc>)
 8002f0e:	4903      	ldr	r1, [pc, #12]	; (8002f1c <stdio_exit_handler+0x10>)
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <stdio_exit_handler+0x14>)
 8002f12:	f000 b869 	b.w	8002fe8 <_fwalk_sglue>
 8002f16:	bf00      	nop
 8002f18:	2000000c 	.word	0x2000000c
 8002f1c:	08003725 	.word	0x08003725
 8002f20:	20000018 	.word	0x20000018

08002f24 <cleanup_stdio>:
 8002f24:	6841      	ldr	r1, [r0, #4]
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <cleanup_stdio+0x34>)
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4299      	cmp	r1, r3
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	d001      	beq.n	8002f34 <cleanup_stdio+0x10>
 8002f30:	f000 fbf8 	bl	8003724 <_fflush_r>
 8002f34:	68a1      	ldr	r1, [r4, #8]
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <cleanup_stdio+0x38>)
 8002f38:	4299      	cmp	r1, r3
 8002f3a:	d002      	beq.n	8002f42 <cleanup_stdio+0x1e>
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f000 fbf1 	bl	8003724 <_fflush_r>
 8002f42:	68e1      	ldr	r1, [r4, #12]
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <cleanup_stdio+0x3c>)
 8002f46:	4299      	cmp	r1, r3
 8002f48:	d004      	beq.n	8002f54 <cleanup_stdio+0x30>
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f50:	f000 bbe8 	b.w	8003724 <_fflush_r>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	bf00      	nop
 8002f58:	200004d4 	.word	0x200004d4
 8002f5c:	2000053c 	.word	0x2000053c
 8002f60:	200005a4 	.word	0x200005a4

08002f64 <global_stdio_init.part.0>:
 8002f64:	b510      	push	{r4, lr}
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <global_stdio_init.part.0+0x30>)
 8002f68:	4c0b      	ldr	r4, [pc, #44]	; (8002f98 <global_stdio_init.part.0+0x34>)
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <global_stdio_init.part.0+0x38>)
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	2104      	movs	r1, #4
 8002f72:	2200      	movs	r2, #0
 8002f74:	f7ff ff94 	bl	8002ea0 <std>
 8002f78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2109      	movs	r1, #9
 8002f80:	f7ff ff8e 	bl	8002ea0 <std>
 8002f84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002f88:	2202      	movs	r2, #2
 8002f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f8e:	2112      	movs	r1, #18
 8002f90:	f7ff bf86 	b.w	8002ea0 <std>
 8002f94:	2000060c 	.word	0x2000060c
 8002f98:	200004d4 	.word	0x200004d4
 8002f9c:	08002f0d 	.word	0x08002f0d

08002fa0 <__sfp_lock_acquire>:
 8002fa0:	4801      	ldr	r0, [pc, #4]	; (8002fa8 <__sfp_lock_acquire+0x8>)
 8002fa2:	f000 ba46 	b.w	8003432 <__retarget_lock_acquire_recursive>
 8002fa6:	bf00      	nop
 8002fa8:	20000615 	.word	0x20000615

08002fac <__sfp_lock_release>:
 8002fac:	4801      	ldr	r0, [pc, #4]	; (8002fb4 <__sfp_lock_release+0x8>)
 8002fae:	f000 ba41 	b.w	8003434 <__retarget_lock_release_recursive>
 8002fb2:	bf00      	nop
 8002fb4:	20000615 	.word	0x20000615

08002fb8 <__sinit>:
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	4604      	mov	r4, r0
 8002fbc:	f7ff fff0 	bl	8002fa0 <__sfp_lock_acquire>
 8002fc0:	6a23      	ldr	r3, [r4, #32]
 8002fc2:	b11b      	cbz	r3, 8002fcc <__sinit+0x14>
 8002fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc8:	f7ff bff0 	b.w	8002fac <__sfp_lock_release>
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <__sinit+0x28>)
 8002fce:	6223      	str	r3, [r4, #32]
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <__sinit+0x2c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f5      	bne.n	8002fc4 <__sinit+0xc>
 8002fd8:	f7ff ffc4 	bl	8002f64 <global_stdio_init.part.0>
 8002fdc:	e7f2      	b.n	8002fc4 <__sinit+0xc>
 8002fde:	bf00      	nop
 8002fe0:	08002f25 	.word	0x08002f25
 8002fe4:	2000060c 	.word	0x2000060c

08002fe8 <_fwalk_sglue>:
 8002fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fec:	4607      	mov	r7, r0
 8002fee:	4688      	mov	r8, r1
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8002ffc:	d505      	bpl.n	800300a <_fwalk_sglue+0x22>
 8002ffe:	6824      	ldr	r4, [r4, #0]
 8003000:	2c00      	cmp	r4, #0
 8003002:	d1f7      	bne.n	8002ff4 <_fwalk_sglue+0xc>
 8003004:	4630      	mov	r0, r6
 8003006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800300a:	89ab      	ldrh	r3, [r5, #12]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d907      	bls.n	8003020 <_fwalk_sglue+0x38>
 8003010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003014:	3301      	adds	r3, #1
 8003016:	d003      	beq.n	8003020 <_fwalk_sglue+0x38>
 8003018:	4629      	mov	r1, r5
 800301a:	4638      	mov	r0, r7
 800301c:	47c0      	blx	r8
 800301e:	4306      	orrs	r6, r0
 8003020:	3568      	adds	r5, #104	; 0x68
 8003022:	e7e9      	b.n	8002ff8 <_fwalk_sglue+0x10>

08003024 <_fwrite_r>:
 8003024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003028:	9c08      	ldr	r4, [sp, #32]
 800302a:	468a      	mov	sl, r1
 800302c:	4690      	mov	r8, r2
 800302e:	4606      	mov	r6, r0
 8003030:	fb02 f903 	mul.w	r9, r2, r3
 8003034:	b118      	cbz	r0, 800303e <_fwrite_r+0x1a>
 8003036:	6a03      	ldr	r3, [r0, #32]
 8003038:	b90b      	cbnz	r3, 800303e <_fwrite_r+0x1a>
 800303a:	f7ff ffbd 	bl	8002fb8 <__sinit>
 800303e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003040:	07dd      	lsls	r5, r3, #31
 8003042:	d405      	bmi.n	8003050 <_fwrite_r+0x2c>
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	0598      	lsls	r0, r3, #22
 8003048:	d402      	bmi.n	8003050 <_fwrite_r+0x2c>
 800304a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800304c:	f000 f9f1 	bl	8003432 <__retarget_lock_acquire_recursive>
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	0719      	lsls	r1, r3, #28
 8003054:	d516      	bpl.n	8003084 <_fwrite_r+0x60>
 8003056:	6923      	ldr	r3, [r4, #16]
 8003058:	b1a3      	cbz	r3, 8003084 <_fwrite_r+0x60>
 800305a:	2500      	movs	r5, #0
 800305c:	454d      	cmp	r5, r9
 800305e:	d01f      	beq.n	80030a0 <_fwrite_r+0x7c>
 8003060:	68a7      	ldr	r7, [r4, #8]
 8003062:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8003066:	3f01      	subs	r7, #1
 8003068:	2f00      	cmp	r7, #0
 800306a:	60a7      	str	r7, [r4, #8]
 800306c:	da04      	bge.n	8003078 <_fwrite_r+0x54>
 800306e:	69a3      	ldr	r3, [r4, #24]
 8003070:	429f      	cmp	r7, r3
 8003072:	db0f      	blt.n	8003094 <_fwrite_r+0x70>
 8003074:	290a      	cmp	r1, #10
 8003076:	d00d      	beq.n	8003094 <_fwrite_r+0x70>
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	6022      	str	r2, [r4, #0]
 800307e:	7019      	strb	r1, [r3, #0]
 8003080:	3501      	adds	r5, #1
 8003082:	e7eb      	b.n	800305c <_fwrite_r+0x38>
 8003084:	4621      	mov	r1, r4
 8003086:	4630      	mov	r0, r6
 8003088:	f000 f902 	bl	8003290 <__swsetup_r>
 800308c:	2800      	cmp	r0, #0
 800308e:	d0e4      	beq.n	800305a <_fwrite_r+0x36>
 8003090:	2500      	movs	r5, #0
 8003092:	e005      	b.n	80030a0 <_fwrite_r+0x7c>
 8003094:	4622      	mov	r2, r4
 8003096:	4630      	mov	r0, r6
 8003098:	f000 f8bd 	bl	8003216 <__swbuf_r>
 800309c:	3001      	adds	r0, #1
 800309e:	d1ef      	bne.n	8003080 <_fwrite_r+0x5c>
 80030a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030a2:	07da      	lsls	r2, r3, #31
 80030a4:	d405      	bmi.n	80030b2 <_fwrite_r+0x8e>
 80030a6:	89a3      	ldrh	r3, [r4, #12]
 80030a8:	059b      	lsls	r3, r3, #22
 80030aa:	d402      	bmi.n	80030b2 <_fwrite_r+0x8e>
 80030ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ae:	f000 f9c1 	bl	8003434 <__retarget_lock_release_recursive>
 80030b2:	fbb5 f0f8 	udiv	r0, r5, r8
 80030b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080030bc <fwrite>:
 80030bc:	b507      	push	{r0, r1, r2, lr}
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	460a      	mov	r2, r1
 80030c4:	4601      	mov	r1, r0
 80030c6:	4803      	ldr	r0, [pc, #12]	; (80030d4 <fwrite+0x18>)
 80030c8:	6800      	ldr	r0, [r0, #0]
 80030ca:	f7ff ffab 	bl	8003024 <_fwrite_r>
 80030ce:	b003      	add	sp, #12
 80030d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030d4:	20000064 	.word	0x20000064

080030d8 <_puts_r>:
 80030d8:	6a03      	ldr	r3, [r0, #32]
 80030da:	b570      	push	{r4, r5, r6, lr}
 80030dc:	4605      	mov	r5, r0
 80030de:	460e      	mov	r6, r1
 80030e0:	6884      	ldr	r4, [r0, #8]
 80030e2:	b90b      	cbnz	r3, 80030e8 <_puts_r+0x10>
 80030e4:	f7ff ff68 	bl	8002fb8 <__sinit>
 80030e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ea:	07db      	lsls	r3, r3, #31
 80030ec:	d405      	bmi.n	80030fa <_puts_r+0x22>
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	0598      	lsls	r0, r3, #22
 80030f2:	d402      	bmi.n	80030fa <_puts_r+0x22>
 80030f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030f6:	f000 f99c 	bl	8003432 <__retarget_lock_acquire_recursive>
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	0719      	lsls	r1, r3, #28
 80030fe:	d513      	bpl.n	8003128 <_puts_r+0x50>
 8003100:	6923      	ldr	r3, [r4, #16]
 8003102:	b18b      	cbz	r3, 8003128 <_puts_r+0x50>
 8003104:	3e01      	subs	r6, #1
 8003106:	68a3      	ldr	r3, [r4, #8]
 8003108:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800310c:	3b01      	subs	r3, #1
 800310e:	60a3      	str	r3, [r4, #8]
 8003110:	b9e9      	cbnz	r1, 800314e <_puts_r+0x76>
 8003112:	2b00      	cmp	r3, #0
 8003114:	da2e      	bge.n	8003174 <_puts_r+0x9c>
 8003116:	4622      	mov	r2, r4
 8003118:	210a      	movs	r1, #10
 800311a:	4628      	mov	r0, r5
 800311c:	f000 f87b 	bl	8003216 <__swbuf_r>
 8003120:	3001      	adds	r0, #1
 8003122:	d007      	beq.n	8003134 <_puts_r+0x5c>
 8003124:	250a      	movs	r5, #10
 8003126:	e007      	b.n	8003138 <_puts_r+0x60>
 8003128:	4621      	mov	r1, r4
 800312a:	4628      	mov	r0, r5
 800312c:	f000 f8b0 	bl	8003290 <__swsetup_r>
 8003130:	2800      	cmp	r0, #0
 8003132:	d0e7      	beq.n	8003104 <_puts_r+0x2c>
 8003134:	f04f 35ff 	mov.w	r5, #4294967295
 8003138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800313a:	07da      	lsls	r2, r3, #31
 800313c:	d405      	bmi.n	800314a <_puts_r+0x72>
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	059b      	lsls	r3, r3, #22
 8003142:	d402      	bmi.n	800314a <_puts_r+0x72>
 8003144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003146:	f000 f975 	bl	8003434 <__retarget_lock_release_recursive>
 800314a:	4628      	mov	r0, r5
 800314c:	bd70      	pop	{r4, r5, r6, pc}
 800314e:	2b00      	cmp	r3, #0
 8003150:	da04      	bge.n	800315c <_puts_r+0x84>
 8003152:	69a2      	ldr	r2, [r4, #24]
 8003154:	429a      	cmp	r2, r3
 8003156:	dc06      	bgt.n	8003166 <_puts_r+0x8e>
 8003158:	290a      	cmp	r1, #10
 800315a:	d004      	beq.n	8003166 <_puts_r+0x8e>
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	6022      	str	r2, [r4, #0]
 8003162:	7019      	strb	r1, [r3, #0]
 8003164:	e7cf      	b.n	8003106 <_puts_r+0x2e>
 8003166:	4622      	mov	r2, r4
 8003168:	4628      	mov	r0, r5
 800316a:	f000 f854 	bl	8003216 <__swbuf_r>
 800316e:	3001      	adds	r0, #1
 8003170:	d1c9      	bne.n	8003106 <_puts_r+0x2e>
 8003172:	e7df      	b.n	8003134 <_puts_r+0x5c>
 8003174:	250a      	movs	r5, #10
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	6022      	str	r2, [r4, #0]
 800317c:	701d      	strb	r5, [r3, #0]
 800317e:	e7db      	b.n	8003138 <_puts_r+0x60>

08003180 <puts>:
 8003180:	4b02      	ldr	r3, [pc, #8]	; (800318c <puts+0xc>)
 8003182:	4601      	mov	r1, r0
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	f7ff bfa7 	b.w	80030d8 <_puts_r>
 800318a:	bf00      	nop
 800318c:	20000064 	.word	0x20000064

08003190 <__sread>:
 8003190:	b510      	push	{r4, lr}
 8003192:	460c      	mov	r4, r1
 8003194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003198:	f000 f8fc 	bl	8003394 <_read_r>
 800319c:	2800      	cmp	r0, #0
 800319e:	bfab      	itete	ge
 80031a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031a2:	89a3      	ldrhlt	r3, [r4, #12]
 80031a4:	181b      	addge	r3, r3, r0
 80031a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031aa:	bfac      	ite	ge
 80031ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80031ae:	81a3      	strhlt	r3, [r4, #12]
 80031b0:	bd10      	pop	{r4, pc}

080031b2 <__swrite>:
 80031b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b6:	461f      	mov	r7, r3
 80031b8:	898b      	ldrh	r3, [r1, #12]
 80031ba:	4605      	mov	r5, r0
 80031bc:	05db      	lsls	r3, r3, #23
 80031be:	460c      	mov	r4, r1
 80031c0:	4616      	mov	r6, r2
 80031c2:	d505      	bpl.n	80031d0 <__swrite+0x1e>
 80031c4:	2302      	movs	r3, #2
 80031c6:	2200      	movs	r2, #0
 80031c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031cc:	f000 f8d0 	bl	8003370 <_lseek_r>
 80031d0:	89a3      	ldrh	r3, [r4, #12]
 80031d2:	4632      	mov	r2, r6
 80031d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d8:	81a3      	strh	r3, [r4, #12]
 80031da:	4628      	mov	r0, r5
 80031dc:	463b      	mov	r3, r7
 80031de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031e6:	f000 b8e7 	b.w	80033b8 <_write_r>

080031ea <__sseek>:
 80031ea:	b510      	push	{r4, lr}
 80031ec:	460c      	mov	r4, r1
 80031ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f2:	f000 f8bd 	bl	8003370 <_lseek_r>
 80031f6:	1c43      	adds	r3, r0, #1
 80031f8:	89a3      	ldrh	r3, [r4, #12]
 80031fa:	bf15      	itete	ne
 80031fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80031fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003206:	81a3      	strheq	r3, [r4, #12]
 8003208:	bf18      	it	ne
 800320a:	81a3      	strhne	r3, [r4, #12]
 800320c:	bd10      	pop	{r4, pc}

0800320e <__sclose>:
 800320e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003212:	f000 b89d 	b.w	8003350 <_close_r>

08003216 <__swbuf_r>:
 8003216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003218:	460e      	mov	r6, r1
 800321a:	4614      	mov	r4, r2
 800321c:	4605      	mov	r5, r0
 800321e:	b118      	cbz	r0, 8003228 <__swbuf_r+0x12>
 8003220:	6a03      	ldr	r3, [r0, #32]
 8003222:	b90b      	cbnz	r3, 8003228 <__swbuf_r+0x12>
 8003224:	f7ff fec8 	bl	8002fb8 <__sinit>
 8003228:	69a3      	ldr	r3, [r4, #24]
 800322a:	60a3      	str	r3, [r4, #8]
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	071a      	lsls	r2, r3, #28
 8003230:	d525      	bpl.n	800327e <__swbuf_r+0x68>
 8003232:	6923      	ldr	r3, [r4, #16]
 8003234:	b31b      	cbz	r3, 800327e <__swbuf_r+0x68>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	6922      	ldr	r2, [r4, #16]
 800323a:	b2f6      	uxtb	r6, r6
 800323c:	1a98      	subs	r0, r3, r2
 800323e:	6963      	ldr	r3, [r4, #20]
 8003240:	4637      	mov	r7, r6
 8003242:	4283      	cmp	r3, r0
 8003244:	dc04      	bgt.n	8003250 <__swbuf_r+0x3a>
 8003246:	4621      	mov	r1, r4
 8003248:	4628      	mov	r0, r5
 800324a:	f000 fa6b 	bl	8003724 <_fflush_r>
 800324e:	b9e0      	cbnz	r0, 800328a <__swbuf_r+0x74>
 8003250:	68a3      	ldr	r3, [r4, #8]
 8003252:	3b01      	subs	r3, #1
 8003254:	60a3      	str	r3, [r4, #8]
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	6022      	str	r2, [r4, #0]
 800325c:	701e      	strb	r6, [r3, #0]
 800325e:	6962      	ldr	r2, [r4, #20]
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	429a      	cmp	r2, r3
 8003264:	d004      	beq.n	8003270 <__swbuf_r+0x5a>
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	07db      	lsls	r3, r3, #31
 800326a:	d506      	bpl.n	800327a <__swbuf_r+0x64>
 800326c:	2e0a      	cmp	r6, #10
 800326e:	d104      	bne.n	800327a <__swbuf_r+0x64>
 8003270:	4621      	mov	r1, r4
 8003272:	4628      	mov	r0, r5
 8003274:	f000 fa56 	bl	8003724 <_fflush_r>
 8003278:	b938      	cbnz	r0, 800328a <__swbuf_r+0x74>
 800327a:	4638      	mov	r0, r7
 800327c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800327e:	4621      	mov	r1, r4
 8003280:	4628      	mov	r0, r5
 8003282:	f000 f805 	bl	8003290 <__swsetup_r>
 8003286:	2800      	cmp	r0, #0
 8003288:	d0d5      	beq.n	8003236 <__swbuf_r+0x20>
 800328a:	f04f 37ff 	mov.w	r7, #4294967295
 800328e:	e7f4      	b.n	800327a <__swbuf_r+0x64>

08003290 <__swsetup_r>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	4b2a      	ldr	r3, [pc, #168]	; (800333c <__swsetup_r+0xac>)
 8003294:	4605      	mov	r5, r0
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	460c      	mov	r4, r1
 800329a:	b118      	cbz	r0, 80032a4 <__swsetup_r+0x14>
 800329c:	6a03      	ldr	r3, [r0, #32]
 800329e:	b90b      	cbnz	r3, 80032a4 <__swsetup_r+0x14>
 80032a0:	f7ff fe8a 	bl	8002fb8 <__sinit>
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032aa:	0718      	lsls	r0, r3, #28
 80032ac:	d422      	bmi.n	80032f4 <__swsetup_r+0x64>
 80032ae:	06d9      	lsls	r1, r3, #27
 80032b0:	d407      	bmi.n	80032c2 <__swsetup_r+0x32>
 80032b2:	2309      	movs	r3, #9
 80032b4:	602b      	str	r3, [r5, #0]
 80032b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032ba:	f04f 30ff 	mov.w	r0, #4294967295
 80032be:	81a3      	strh	r3, [r4, #12]
 80032c0:	e034      	b.n	800332c <__swsetup_r+0x9c>
 80032c2:	0758      	lsls	r0, r3, #29
 80032c4:	d512      	bpl.n	80032ec <__swsetup_r+0x5c>
 80032c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032c8:	b141      	cbz	r1, 80032dc <__swsetup_r+0x4c>
 80032ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ce:	4299      	cmp	r1, r3
 80032d0:	d002      	beq.n	80032d8 <__swsetup_r+0x48>
 80032d2:	4628      	mov	r0, r5
 80032d4:	f000 f8b0 	bl	8003438 <_free_r>
 80032d8:	2300      	movs	r3, #0
 80032da:	6363      	str	r3, [r4, #52]	; 0x34
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032e2:	81a3      	strh	r3, [r4, #12]
 80032e4:	2300      	movs	r3, #0
 80032e6:	6063      	str	r3, [r4, #4]
 80032e8:	6923      	ldr	r3, [r4, #16]
 80032ea:	6023      	str	r3, [r4, #0]
 80032ec:	89a3      	ldrh	r3, [r4, #12]
 80032ee:	f043 0308 	orr.w	r3, r3, #8
 80032f2:	81a3      	strh	r3, [r4, #12]
 80032f4:	6923      	ldr	r3, [r4, #16]
 80032f6:	b94b      	cbnz	r3, 800330c <__swsetup_r+0x7c>
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003302:	d003      	beq.n	800330c <__swsetup_r+0x7c>
 8003304:	4621      	mov	r1, r4
 8003306:	4628      	mov	r0, r5
 8003308:	f000 fa59 	bl	80037be <__smakebuf_r>
 800330c:	89a0      	ldrh	r0, [r4, #12]
 800330e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003312:	f010 0301 	ands.w	r3, r0, #1
 8003316:	d00a      	beq.n	800332e <__swsetup_r+0x9e>
 8003318:	2300      	movs	r3, #0
 800331a:	60a3      	str	r3, [r4, #8]
 800331c:	6963      	ldr	r3, [r4, #20]
 800331e:	425b      	negs	r3, r3
 8003320:	61a3      	str	r3, [r4, #24]
 8003322:	6923      	ldr	r3, [r4, #16]
 8003324:	b943      	cbnz	r3, 8003338 <__swsetup_r+0xa8>
 8003326:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800332a:	d1c4      	bne.n	80032b6 <__swsetup_r+0x26>
 800332c:	bd38      	pop	{r3, r4, r5, pc}
 800332e:	0781      	lsls	r1, r0, #30
 8003330:	bf58      	it	pl
 8003332:	6963      	ldrpl	r3, [r4, #20]
 8003334:	60a3      	str	r3, [r4, #8]
 8003336:	e7f4      	b.n	8003322 <__swsetup_r+0x92>
 8003338:	2000      	movs	r0, #0
 800333a:	e7f7      	b.n	800332c <__swsetup_r+0x9c>
 800333c:	20000064 	.word	0x20000064

08003340 <memset>:
 8003340:	4603      	mov	r3, r0
 8003342:	4402      	add	r2, r0
 8003344:	4293      	cmp	r3, r2
 8003346:	d100      	bne.n	800334a <memset+0xa>
 8003348:	4770      	bx	lr
 800334a:	f803 1b01 	strb.w	r1, [r3], #1
 800334e:	e7f9      	b.n	8003344 <memset+0x4>

08003350 <_close_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	2300      	movs	r3, #0
 8003354:	4d05      	ldr	r5, [pc, #20]	; (800336c <_close_r+0x1c>)
 8003356:	4604      	mov	r4, r0
 8003358:	4608      	mov	r0, r1
 800335a:	602b      	str	r3, [r5, #0]
 800335c:	f7fd fc88 	bl	8000c70 <_close>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d102      	bne.n	800336a <_close_r+0x1a>
 8003364:	682b      	ldr	r3, [r5, #0]
 8003366:	b103      	cbz	r3, 800336a <_close_r+0x1a>
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	20000610 	.word	0x20000610

08003370 <_lseek_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	2200      	movs	r2, #0
 800337a:	4d05      	ldr	r5, [pc, #20]	; (8003390 <_lseek_r+0x20>)
 800337c:	602a      	str	r2, [r5, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	f7fd fc9a 	bl	8000cb8 <_lseek>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d102      	bne.n	800338e <_lseek_r+0x1e>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	b103      	cbz	r3, 800338e <_lseek_r+0x1e>
 800338c:	6023      	str	r3, [r4, #0]
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	20000610 	.word	0x20000610

08003394 <_read_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	4604      	mov	r4, r0
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	2200      	movs	r2, #0
 800339e:	4d05      	ldr	r5, [pc, #20]	; (80033b4 <_read_r+0x20>)
 80033a0:	602a      	str	r2, [r5, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f7fd fc47 	bl	8000c36 <_read>
 80033a8:	1c43      	adds	r3, r0, #1
 80033aa:	d102      	bne.n	80033b2 <_read_r+0x1e>
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	b103      	cbz	r3, 80033b2 <_read_r+0x1e>
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	bd38      	pop	{r3, r4, r5, pc}
 80033b4:	20000610 	.word	0x20000610

080033b8 <_write_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4604      	mov	r4, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	4611      	mov	r1, r2
 80033c0:	2200      	movs	r2, #0
 80033c2:	4d05      	ldr	r5, [pc, #20]	; (80033d8 <_write_r+0x20>)
 80033c4:	602a      	str	r2, [r5, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7fc fee6 	bl	8000198 <_write>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d102      	bne.n	80033d6 <_write_r+0x1e>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	b103      	cbz	r3, 80033d6 <_write_r+0x1e>
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	20000610 	.word	0x20000610

080033dc <__errno>:
 80033dc:	4b01      	ldr	r3, [pc, #4]	; (80033e4 <__errno+0x8>)
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000064 	.word	0x20000064

080033e8 <__libc_init_array>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	2600      	movs	r6, #0
 80033ec:	4d0c      	ldr	r5, [pc, #48]	; (8003420 <__libc_init_array+0x38>)
 80033ee:	4c0d      	ldr	r4, [pc, #52]	; (8003424 <__libc_init_array+0x3c>)
 80033f0:	1b64      	subs	r4, r4, r5
 80033f2:	10a4      	asrs	r4, r4, #2
 80033f4:	42a6      	cmp	r6, r4
 80033f6:	d109      	bne.n	800340c <__libc_init_array+0x24>
 80033f8:	f000 fa50 	bl	800389c <_init>
 80033fc:	2600      	movs	r6, #0
 80033fe:	4d0a      	ldr	r5, [pc, #40]	; (8003428 <__libc_init_array+0x40>)
 8003400:	4c0a      	ldr	r4, [pc, #40]	; (800342c <__libc_init_array+0x44>)
 8003402:	1b64      	subs	r4, r4, r5
 8003404:	10a4      	asrs	r4, r4, #2
 8003406:	42a6      	cmp	r6, r4
 8003408:	d105      	bne.n	8003416 <__libc_init_array+0x2e>
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003410:	4798      	blx	r3
 8003412:	3601      	adds	r6, #1
 8003414:	e7ee      	b.n	80033f4 <__libc_init_array+0xc>
 8003416:	f855 3b04 	ldr.w	r3, [r5], #4
 800341a:	4798      	blx	r3
 800341c:	3601      	adds	r6, #1
 800341e:	e7f2      	b.n	8003406 <__libc_init_array+0x1e>
 8003420:	080038f0 	.word	0x080038f0
 8003424:	080038f0 	.word	0x080038f0
 8003428:	080038f0 	.word	0x080038f0
 800342c:	080038f4 	.word	0x080038f4

08003430 <__retarget_lock_init_recursive>:
 8003430:	4770      	bx	lr

08003432 <__retarget_lock_acquire_recursive>:
 8003432:	4770      	bx	lr

08003434 <__retarget_lock_release_recursive>:
 8003434:	4770      	bx	lr
	...

08003438 <_free_r>:
 8003438:	b538      	push	{r3, r4, r5, lr}
 800343a:	4605      	mov	r5, r0
 800343c:	2900      	cmp	r1, #0
 800343e:	d040      	beq.n	80034c2 <_free_r+0x8a>
 8003440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003444:	1f0c      	subs	r4, r1, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	bfb8      	it	lt
 800344a:	18e4      	addlt	r4, r4, r3
 800344c:	f000 f8dc 	bl	8003608 <__malloc_lock>
 8003450:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <_free_r+0x8c>)
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	b933      	cbnz	r3, 8003464 <_free_r+0x2c>
 8003456:	6063      	str	r3, [r4, #4]
 8003458:	6014      	str	r4, [r2, #0]
 800345a:	4628      	mov	r0, r5
 800345c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003460:	f000 b8d8 	b.w	8003614 <__malloc_unlock>
 8003464:	42a3      	cmp	r3, r4
 8003466:	d908      	bls.n	800347a <_free_r+0x42>
 8003468:	6820      	ldr	r0, [r4, #0]
 800346a:	1821      	adds	r1, r4, r0
 800346c:	428b      	cmp	r3, r1
 800346e:	bf01      	itttt	eq
 8003470:	6819      	ldreq	r1, [r3, #0]
 8003472:	685b      	ldreq	r3, [r3, #4]
 8003474:	1809      	addeq	r1, r1, r0
 8003476:	6021      	streq	r1, [r4, #0]
 8003478:	e7ed      	b.n	8003456 <_free_r+0x1e>
 800347a:	461a      	mov	r2, r3
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	b10b      	cbz	r3, 8003484 <_free_r+0x4c>
 8003480:	42a3      	cmp	r3, r4
 8003482:	d9fa      	bls.n	800347a <_free_r+0x42>
 8003484:	6811      	ldr	r1, [r2, #0]
 8003486:	1850      	adds	r0, r2, r1
 8003488:	42a0      	cmp	r0, r4
 800348a:	d10b      	bne.n	80034a4 <_free_r+0x6c>
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	4401      	add	r1, r0
 8003490:	1850      	adds	r0, r2, r1
 8003492:	4283      	cmp	r3, r0
 8003494:	6011      	str	r1, [r2, #0]
 8003496:	d1e0      	bne.n	800345a <_free_r+0x22>
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4408      	add	r0, r1
 800349e:	6010      	str	r0, [r2, #0]
 80034a0:	6053      	str	r3, [r2, #4]
 80034a2:	e7da      	b.n	800345a <_free_r+0x22>
 80034a4:	d902      	bls.n	80034ac <_free_r+0x74>
 80034a6:	230c      	movs	r3, #12
 80034a8:	602b      	str	r3, [r5, #0]
 80034aa:	e7d6      	b.n	800345a <_free_r+0x22>
 80034ac:	6820      	ldr	r0, [r4, #0]
 80034ae:	1821      	adds	r1, r4, r0
 80034b0:	428b      	cmp	r3, r1
 80034b2:	bf01      	itttt	eq
 80034b4:	6819      	ldreq	r1, [r3, #0]
 80034b6:	685b      	ldreq	r3, [r3, #4]
 80034b8:	1809      	addeq	r1, r1, r0
 80034ba:	6021      	streq	r1, [r4, #0]
 80034bc:	6063      	str	r3, [r4, #4]
 80034be:	6054      	str	r4, [r2, #4]
 80034c0:	e7cb      	b.n	800345a <_free_r+0x22>
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	20000618 	.word	0x20000618

080034c8 <sbrk_aligned>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	4e0e      	ldr	r6, [pc, #56]	; (8003504 <sbrk_aligned+0x3c>)
 80034cc:	460c      	mov	r4, r1
 80034ce:	6831      	ldr	r1, [r6, #0]
 80034d0:	4605      	mov	r5, r0
 80034d2:	b911      	cbnz	r1, 80034da <sbrk_aligned+0x12>
 80034d4:	f000 f9d2 	bl	800387c <_sbrk_r>
 80034d8:	6030      	str	r0, [r6, #0]
 80034da:	4621      	mov	r1, r4
 80034dc:	4628      	mov	r0, r5
 80034de:	f000 f9cd 	bl	800387c <_sbrk_r>
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	d00a      	beq.n	80034fc <sbrk_aligned+0x34>
 80034e6:	1cc4      	adds	r4, r0, #3
 80034e8:	f024 0403 	bic.w	r4, r4, #3
 80034ec:	42a0      	cmp	r0, r4
 80034ee:	d007      	beq.n	8003500 <sbrk_aligned+0x38>
 80034f0:	1a21      	subs	r1, r4, r0
 80034f2:	4628      	mov	r0, r5
 80034f4:	f000 f9c2 	bl	800387c <_sbrk_r>
 80034f8:	3001      	adds	r0, #1
 80034fa:	d101      	bne.n	8003500 <sbrk_aligned+0x38>
 80034fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003500:	4620      	mov	r0, r4
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	2000061c 	.word	0x2000061c

08003508 <_malloc_r>:
 8003508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800350c:	1ccd      	adds	r5, r1, #3
 800350e:	f025 0503 	bic.w	r5, r5, #3
 8003512:	3508      	adds	r5, #8
 8003514:	2d0c      	cmp	r5, #12
 8003516:	bf38      	it	cc
 8003518:	250c      	movcc	r5, #12
 800351a:	2d00      	cmp	r5, #0
 800351c:	4607      	mov	r7, r0
 800351e:	db01      	blt.n	8003524 <_malloc_r+0x1c>
 8003520:	42a9      	cmp	r1, r5
 8003522:	d905      	bls.n	8003530 <_malloc_r+0x28>
 8003524:	230c      	movs	r3, #12
 8003526:	2600      	movs	r6, #0
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	4630      	mov	r0, r6
 800352c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003530:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003604 <_malloc_r+0xfc>
 8003534:	f000 f868 	bl	8003608 <__malloc_lock>
 8003538:	f8d8 3000 	ldr.w	r3, [r8]
 800353c:	461c      	mov	r4, r3
 800353e:	bb5c      	cbnz	r4, 8003598 <_malloc_r+0x90>
 8003540:	4629      	mov	r1, r5
 8003542:	4638      	mov	r0, r7
 8003544:	f7ff ffc0 	bl	80034c8 <sbrk_aligned>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	4604      	mov	r4, r0
 800354c:	d155      	bne.n	80035fa <_malloc_r+0xf2>
 800354e:	f8d8 4000 	ldr.w	r4, [r8]
 8003552:	4626      	mov	r6, r4
 8003554:	2e00      	cmp	r6, #0
 8003556:	d145      	bne.n	80035e4 <_malloc_r+0xdc>
 8003558:	2c00      	cmp	r4, #0
 800355a:	d048      	beq.n	80035ee <_malloc_r+0xe6>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	4631      	mov	r1, r6
 8003560:	4638      	mov	r0, r7
 8003562:	eb04 0903 	add.w	r9, r4, r3
 8003566:	f000 f989 	bl	800387c <_sbrk_r>
 800356a:	4581      	cmp	r9, r0
 800356c:	d13f      	bne.n	80035ee <_malloc_r+0xe6>
 800356e:	6821      	ldr	r1, [r4, #0]
 8003570:	4638      	mov	r0, r7
 8003572:	1a6d      	subs	r5, r5, r1
 8003574:	4629      	mov	r1, r5
 8003576:	f7ff ffa7 	bl	80034c8 <sbrk_aligned>
 800357a:	3001      	adds	r0, #1
 800357c:	d037      	beq.n	80035ee <_malloc_r+0xe6>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	442b      	add	r3, r5
 8003582:	6023      	str	r3, [r4, #0]
 8003584:	f8d8 3000 	ldr.w	r3, [r8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d038      	beq.n	80035fe <_malloc_r+0xf6>
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	42a2      	cmp	r2, r4
 8003590:	d12b      	bne.n	80035ea <_malloc_r+0xe2>
 8003592:	2200      	movs	r2, #0
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	e00f      	b.n	80035b8 <_malloc_r+0xb0>
 8003598:	6822      	ldr	r2, [r4, #0]
 800359a:	1b52      	subs	r2, r2, r5
 800359c:	d41f      	bmi.n	80035de <_malloc_r+0xd6>
 800359e:	2a0b      	cmp	r2, #11
 80035a0:	d917      	bls.n	80035d2 <_malloc_r+0xca>
 80035a2:	1961      	adds	r1, r4, r5
 80035a4:	42a3      	cmp	r3, r4
 80035a6:	6025      	str	r5, [r4, #0]
 80035a8:	bf18      	it	ne
 80035aa:	6059      	strne	r1, [r3, #4]
 80035ac:	6863      	ldr	r3, [r4, #4]
 80035ae:	bf08      	it	eq
 80035b0:	f8c8 1000 	streq.w	r1, [r8]
 80035b4:	5162      	str	r2, [r4, r5]
 80035b6:	604b      	str	r3, [r1, #4]
 80035b8:	4638      	mov	r0, r7
 80035ba:	f104 060b 	add.w	r6, r4, #11
 80035be:	f000 f829 	bl	8003614 <__malloc_unlock>
 80035c2:	f026 0607 	bic.w	r6, r6, #7
 80035c6:	1d23      	adds	r3, r4, #4
 80035c8:	1af2      	subs	r2, r6, r3
 80035ca:	d0ae      	beq.n	800352a <_malloc_r+0x22>
 80035cc:	1b9b      	subs	r3, r3, r6
 80035ce:	50a3      	str	r3, [r4, r2]
 80035d0:	e7ab      	b.n	800352a <_malloc_r+0x22>
 80035d2:	42a3      	cmp	r3, r4
 80035d4:	6862      	ldr	r2, [r4, #4]
 80035d6:	d1dd      	bne.n	8003594 <_malloc_r+0x8c>
 80035d8:	f8c8 2000 	str.w	r2, [r8]
 80035dc:	e7ec      	b.n	80035b8 <_malloc_r+0xb0>
 80035de:	4623      	mov	r3, r4
 80035e0:	6864      	ldr	r4, [r4, #4]
 80035e2:	e7ac      	b.n	800353e <_malloc_r+0x36>
 80035e4:	4634      	mov	r4, r6
 80035e6:	6876      	ldr	r6, [r6, #4]
 80035e8:	e7b4      	b.n	8003554 <_malloc_r+0x4c>
 80035ea:	4613      	mov	r3, r2
 80035ec:	e7cc      	b.n	8003588 <_malloc_r+0x80>
 80035ee:	230c      	movs	r3, #12
 80035f0:	4638      	mov	r0, r7
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	f000 f80e 	bl	8003614 <__malloc_unlock>
 80035f8:	e797      	b.n	800352a <_malloc_r+0x22>
 80035fa:	6025      	str	r5, [r4, #0]
 80035fc:	e7dc      	b.n	80035b8 <_malloc_r+0xb0>
 80035fe:	605b      	str	r3, [r3, #4]
 8003600:	deff      	udf	#255	; 0xff
 8003602:	bf00      	nop
 8003604:	20000618 	.word	0x20000618

08003608 <__malloc_lock>:
 8003608:	4801      	ldr	r0, [pc, #4]	; (8003610 <__malloc_lock+0x8>)
 800360a:	f7ff bf12 	b.w	8003432 <__retarget_lock_acquire_recursive>
 800360e:	bf00      	nop
 8003610:	20000614 	.word	0x20000614

08003614 <__malloc_unlock>:
 8003614:	4801      	ldr	r0, [pc, #4]	; (800361c <__malloc_unlock+0x8>)
 8003616:	f7ff bf0d 	b.w	8003434 <__retarget_lock_release_recursive>
 800361a:	bf00      	nop
 800361c:	20000614 	.word	0x20000614

08003620 <__sflush_r>:
 8003620:	898a      	ldrh	r2, [r1, #12]
 8003622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003624:	4605      	mov	r5, r0
 8003626:	0710      	lsls	r0, r2, #28
 8003628:	460c      	mov	r4, r1
 800362a:	d457      	bmi.n	80036dc <__sflush_r+0xbc>
 800362c:	684b      	ldr	r3, [r1, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	dc04      	bgt.n	800363c <__sflush_r+0x1c>
 8003632:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	dc01      	bgt.n	800363c <__sflush_r+0x1c>
 8003638:	2000      	movs	r0, #0
 800363a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800363c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800363e:	2e00      	cmp	r6, #0
 8003640:	d0fa      	beq.n	8003638 <__sflush_r+0x18>
 8003642:	2300      	movs	r3, #0
 8003644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003648:	682f      	ldr	r7, [r5, #0]
 800364a:	6a21      	ldr	r1, [r4, #32]
 800364c:	602b      	str	r3, [r5, #0]
 800364e:	d032      	beq.n	80036b6 <__sflush_r+0x96>
 8003650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	075a      	lsls	r2, r3, #29
 8003656:	d505      	bpl.n	8003664 <__sflush_r+0x44>
 8003658:	6863      	ldr	r3, [r4, #4]
 800365a:	1ac0      	subs	r0, r0, r3
 800365c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800365e:	b10b      	cbz	r3, 8003664 <__sflush_r+0x44>
 8003660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003662:	1ac0      	subs	r0, r0, r3
 8003664:	2300      	movs	r3, #0
 8003666:	4602      	mov	r2, r0
 8003668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800366a:	4628      	mov	r0, r5
 800366c:	6a21      	ldr	r1, [r4, #32]
 800366e:	47b0      	blx	r6
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	d106      	bne.n	8003684 <__sflush_r+0x64>
 8003676:	6829      	ldr	r1, [r5, #0]
 8003678:	291d      	cmp	r1, #29
 800367a:	d82b      	bhi.n	80036d4 <__sflush_r+0xb4>
 800367c:	4a28      	ldr	r2, [pc, #160]	; (8003720 <__sflush_r+0x100>)
 800367e:	410a      	asrs	r2, r1
 8003680:	07d6      	lsls	r6, r2, #31
 8003682:	d427      	bmi.n	80036d4 <__sflush_r+0xb4>
 8003684:	2200      	movs	r2, #0
 8003686:	6062      	str	r2, [r4, #4]
 8003688:	6922      	ldr	r2, [r4, #16]
 800368a:	04d9      	lsls	r1, r3, #19
 800368c:	6022      	str	r2, [r4, #0]
 800368e:	d504      	bpl.n	800369a <__sflush_r+0x7a>
 8003690:	1c42      	adds	r2, r0, #1
 8003692:	d101      	bne.n	8003698 <__sflush_r+0x78>
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	b903      	cbnz	r3, 800369a <__sflush_r+0x7a>
 8003698:	6560      	str	r0, [r4, #84]	; 0x54
 800369a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800369c:	602f      	str	r7, [r5, #0]
 800369e:	2900      	cmp	r1, #0
 80036a0:	d0ca      	beq.n	8003638 <__sflush_r+0x18>
 80036a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036a6:	4299      	cmp	r1, r3
 80036a8:	d002      	beq.n	80036b0 <__sflush_r+0x90>
 80036aa:	4628      	mov	r0, r5
 80036ac:	f7ff fec4 	bl	8003438 <_free_r>
 80036b0:	2000      	movs	r0, #0
 80036b2:	6360      	str	r0, [r4, #52]	; 0x34
 80036b4:	e7c1      	b.n	800363a <__sflush_r+0x1a>
 80036b6:	2301      	movs	r3, #1
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b0      	blx	r6
 80036bc:	1c41      	adds	r1, r0, #1
 80036be:	d1c8      	bne.n	8003652 <__sflush_r+0x32>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0c5      	beq.n	8003652 <__sflush_r+0x32>
 80036c6:	2b1d      	cmp	r3, #29
 80036c8:	d001      	beq.n	80036ce <__sflush_r+0xae>
 80036ca:	2b16      	cmp	r3, #22
 80036cc:	d101      	bne.n	80036d2 <__sflush_r+0xb2>
 80036ce:	602f      	str	r7, [r5, #0]
 80036d0:	e7b2      	b.n	8003638 <__sflush_r+0x18>
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	e7ae      	b.n	800363a <__sflush_r+0x1a>
 80036dc:	690f      	ldr	r7, [r1, #16]
 80036de:	2f00      	cmp	r7, #0
 80036e0:	d0aa      	beq.n	8003638 <__sflush_r+0x18>
 80036e2:	0793      	lsls	r3, r2, #30
 80036e4:	bf18      	it	ne
 80036e6:	2300      	movne	r3, #0
 80036e8:	680e      	ldr	r6, [r1, #0]
 80036ea:	bf08      	it	eq
 80036ec:	694b      	ldreq	r3, [r1, #20]
 80036ee:	1bf6      	subs	r6, r6, r7
 80036f0:	600f      	str	r7, [r1, #0]
 80036f2:	608b      	str	r3, [r1, #8]
 80036f4:	2e00      	cmp	r6, #0
 80036f6:	dd9f      	ble.n	8003638 <__sflush_r+0x18>
 80036f8:	4633      	mov	r3, r6
 80036fa:	463a      	mov	r2, r7
 80036fc:	4628      	mov	r0, r5
 80036fe:	6a21      	ldr	r1, [r4, #32]
 8003700:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003704:	47e0      	blx	ip
 8003706:	2800      	cmp	r0, #0
 8003708:	dc06      	bgt.n	8003718 <__sflush_r+0xf8>
 800370a:	89a3      	ldrh	r3, [r4, #12]
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003714:	81a3      	strh	r3, [r4, #12]
 8003716:	e790      	b.n	800363a <__sflush_r+0x1a>
 8003718:	4407      	add	r7, r0
 800371a:	1a36      	subs	r6, r6, r0
 800371c:	e7ea      	b.n	80036f4 <__sflush_r+0xd4>
 800371e:	bf00      	nop
 8003720:	dfbffffe 	.word	0xdfbffffe

08003724 <_fflush_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	690b      	ldr	r3, [r1, #16]
 8003728:	4605      	mov	r5, r0
 800372a:	460c      	mov	r4, r1
 800372c:	b913      	cbnz	r3, 8003734 <_fflush_r+0x10>
 800372e:	2500      	movs	r5, #0
 8003730:	4628      	mov	r0, r5
 8003732:	bd38      	pop	{r3, r4, r5, pc}
 8003734:	b118      	cbz	r0, 800373e <_fflush_r+0x1a>
 8003736:	6a03      	ldr	r3, [r0, #32]
 8003738:	b90b      	cbnz	r3, 800373e <_fflush_r+0x1a>
 800373a:	f7ff fc3d 	bl	8002fb8 <__sinit>
 800373e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f3      	beq.n	800372e <_fflush_r+0xa>
 8003746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003748:	07d0      	lsls	r0, r2, #31
 800374a:	d404      	bmi.n	8003756 <_fflush_r+0x32>
 800374c:	0599      	lsls	r1, r3, #22
 800374e:	d402      	bmi.n	8003756 <_fflush_r+0x32>
 8003750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003752:	f7ff fe6e 	bl	8003432 <__retarget_lock_acquire_recursive>
 8003756:	4628      	mov	r0, r5
 8003758:	4621      	mov	r1, r4
 800375a:	f7ff ff61 	bl	8003620 <__sflush_r>
 800375e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003760:	4605      	mov	r5, r0
 8003762:	07da      	lsls	r2, r3, #31
 8003764:	d4e4      	bmi.n	8003730 <_fflush_r+0xc>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	059b      	lsls	r3, r3, #22
 800376a:	d4e1      	bmi.n	8003730 <_fflush_r+0xc>
 800376c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376e:	f7ff fe61 	bl	8003434 <__retarget_lock_release_recursive>
 8003772:	e7dd      	b.n	8003730 <_fflush_r+0xc>

08003774 <__swhatbuf_r>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	460c      	mov	r4, r1
 8003778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377c:	4615      	mov	r5, r2
 800377e:	2900      	cmp	r1, #0
 8003780:	461e      	mov	r6, r3
 8003782:	b096      	sub	sp, #88	; 0x58
 8003784:	da0c      	bge.n	80037a0 <__swhatbuf_r+0x2c>
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	2100      	movs	r1, #0
 800378a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800378e:	bf0c      	ite	eq
 8003790:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003794:	2340      	movne	r3, #64	; 0x40
 8003796:	2000      	movs	r0, #0
 8003798:	6031      	str	r1, [r6, #0]
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	b016      	add	sp, #88	; 0x58
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	466a      	mov	r2, sp
 80037a2:	f000 f849 	bl	8003838 <_fstat_r>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	dbed      	blt.n	8003786 <__swhatbuf_r+0x12>
 80037aa:	9901      	ldr	r1, [sp, #4]
 80037ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80037b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80037b4:	4259      	negs	r1, r3
 80037b6:	4159      	adcs	r1, r3
 80037b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037bc:	e7eb      	b.n	8003796 <__swhatbuf_r+0x22>

080037be <__smakebuf_r>:
 80037be:	898b      	ldrh	r3, [r1, #12]
 80037c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037c2:	079d      	lsls	r5, r3, #30
 80037c4:	4606      	mov	r6, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	d507      	bpl.n	80037da <__smakebuf_r+0x1c>
 80037ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037ce:	6023      	str	r3, [r4, #0]
 80037d0:	6123      	str	r3, [r4, #16]
 80037d2:	2301      	movs	r3, #1
 80037d4:	6163      	str	r3, [r4, #20]
 80037d6:	b002      	add	sp, #8
 80037d8:	bd70      	pop	{r4, r5, r6, pc}
 80037da:	466a      	mov	r2, sp
 80037dc:	ab01      	add	r3, sp, #4
 80037de:	f7ff ffc9 	bl	8003774 <__swhatbuf_r>
 80037e2:	9900      	ldr	r1, [sp, #0]
 80037e4:	4605      	mov	r5, r0
 80037e6:	4630      	mov	r0, r6
 80037e8:	f7ff fe8e 	bl	8003508 <_malloc_r>
 80037ec:	b948      	cbnz	r0, 8003802 <__smakebuf_r+0x44>
 80037ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f2:	059a      	lsls	r2, r3, #22
 80037f4:	d4ef      	bmi.n	80037d6 <__smakebuf_r+0x18>
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	f043 0302 	orr.w	r3, r3, #2
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	e7e3      	b.n	80037ca <__smakebuf_r+0xc>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	6020      	str	r0, [r4, #0]
 8003806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380a:	81a3      	strh	r3, [r4, #12]
 800380c:	9b00      	ldr	r3, [sp, #0]
 800380e:	6120      	str	r0, [r4, #16]
 8003810:	6163      	str	r3, [r4, #20]
 8003812:	9b01      	ldr	r3, [sp, #4]
 8003814:	b15b      	cbz	r3, 800382e <__smakebuf_r+0x70>
 8003816:	4630      	mov	r0, r6
 8003818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800381c:	f000 f81e 	bl	800385c <_isatty_r>
 8003820:	b128      	cbz	r0, 800382e <__smakebuf_r+0x70>
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	f023 0303 	bic.w	r3, r3, #3
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	431d      	orrs	r5, r3
 8003832:	81a5      	strh	r5, [r4, #12]
 8003834:	e7cf      	b.n	80037d6 <__smakebuf_r+0x18>
	...

08003838 <_fstat_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	2300      	movs	r3, #0
 800383c:	4d06      	ldr	r5, [pc, #24]	; (8003858 <_fstat_r+0x20>)
 800383e:	4604      	mov	r4, r0
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	f7fd fa1e 	bl	8000c86 <_fstat>
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d102      	bne.n	8003854 <_fstat_r+0x1c>
 800384e:	682b      	ldr	r3, [r5, #0]
 8003850:	b103      	cbz	r3, 8003854 <_fstat_r+0x1c>
 8003852:	6023      	str	r3, [r4, #0]
 8003854:	bd38      	pop	{r3, r4, r5, pc}
 8003856:	bf00      	nop
 8003858:	20000610 	.word	0x20000610

0800385c <_isatty_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	2300      	movs	r3, #0
 8003860:	4d05      	ldr	r5, [pc, #20]	; (8003878 <_isatty_r+0x1c>)
 8003862:	4604      	mov	r4, r0
 8003864:	4608      	mov	r0, r1
 8003866:	602b      	str	r3, [r5, #0]
 8003868:	f7fd fa1c 	bl	8000ca4 <_isatty>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d102      	bne.n	8003876 <_isatty_r+0x1a>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	b103      	cbz	r3, 8003876 <_isatty_r+0x1a>
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	bd38      	pop	{r3, r4, r5, pc}
 8003878:	20000610 	.word	0x20000610

0800387c <_sbrk_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	2300      	movs	r3, #0
 8003880:	4d05      	ldr	r5, [pc, #20]	; (8003898 <_sbrk_r+0x1c>)
 8003882:	4604      	mov	r4, r0
 8003884:	4608      	mov	r0, r1
 8003886:	602b      	str	r3, [r5, #0]
 8003888:	f7fd fa22 	bl	8000cd0 <_sbrk>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_sbrk_r+0x1a>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_sbrk_r+0x1a>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	20000610 	.word	0x20000610

0800389c <_init>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr

080038a8 <_fini>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr
